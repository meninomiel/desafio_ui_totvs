import { ElementRef } from '@angular/core';
import { PoButtonBaseComponent } from './po-button-base.component';
/**
 * @docsExtends PoButtonBaseComponent
 *
 * @example
 *
 * <example name="po-button-basic" title="PO Button Basic">
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-labs" title="PO Button Labs">
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoButtonComponent extends PoButtonBaseComponent {
    buttonElement: ElementRef;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     */
    focus(): void;
    onClick(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoButtonComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoButtonComponent, "po-button", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1idXR0b24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQnV0dG9uQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tYnV0dG9uLWJhc2UuY29tcG9uZW50JztcclxuLyoqXHJcbiAqIEBkb2NzRXh0ZW5kcyBQb0J1dHRvbkJhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLWJ1dHRvbi1iYXNpY1wiIHRpdGxlPVwiUE8gQnV0dG9uIEJhc2ljXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJ1dHRvbi1iYXNpYy9zYW1wbGUtcG8tYnV0dG9uLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnV0dG9uLWJhc2ljL3NhbXBsZS1wby1idXR0b24tYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnV0dG9uLWJhc2ljL3NhbXBsZS1wby1idXR0b24tYmFzaWMuY29tcG9uZW50LmUyZS1zcGVjLnRzXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnV0dG9uLWJhc2ljL3NhbXBsZS1wby1idXR0b24tYmFzaWMuY29tcG9uZW50LnBvLnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tYnV0dG9uLWxhYnNcIiB0aXRsZT1cIlBPIEJ1dHRvbiBMYWJzXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJ1dHRvbi1sYWJzL3NhbXBsZS1wby1idXR0b24tbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJ1dHRvbi1sYWJzL3NhbXBsZS1wby1idXR0b24tbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1idXR0b24tbGFicy9zYW1wbGUtcG8tYnV0dG9uLWxhYnMuY29tcG9uZW50LmUyZS1zcGVjLnRzXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnV0dG9uLWxhYnMvc2FtcGxlLXBvLWJ1dHRvbi1sYWJzLmNvbXBvbmVudC5wby50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgUG9CdXR0b25CYXNlQ29tcG9uZW50IHtcclxuICAgIGJ1dHRvbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bsOnw6NvIHF1ZSBhdHJpYnVpIGZvY28gYW8gY29tcG9uZW50ZS5cclxuICAgICAqXHJcbiAgICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIHRlciBhIGluc3TDom5jaWEgZG8gY29tcG9uZW50ZSBubyBET00sIHBvZGVuZG8gc2VyIHV0aWxpemFkbyBvIFZpZXdDaGlsZCBkYSBzZWd1aW50ZSBmb3JtYTpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIGltcG9ydCB7IFBvQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xyXG4gICAgICpcclxuICAgICAqIC4uLlxyXG4gICAgICpcclxuICAgICAqIEBWaWV3Q2hpbGQoUG9CdXR0b25Db21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGJ1dHRvbjogUG9CdXR0b25Db21wb25lbnQ7XHJcbiAgICAgKlxyXG4gICAgICogZm9jdXNCdXR0b24oKSB7XHJcbiAgICAgKiAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XHJcbiAgICAgKiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZm9jdXMoKTogdm9pZDtcclxuICAgIG9uQ2xpY2soKTogdm9pZDtcclxufVxyXG4iXX0=