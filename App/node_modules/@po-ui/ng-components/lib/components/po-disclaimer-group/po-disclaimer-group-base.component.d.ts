import { DoCheck, EventEmitter, IterableDiffers } from '@angular/core';
import { PoDisclaimer } from '../po-disclaimer/po-disclaimer.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poDisclaimerGroupLiteralsDefault: {
    en: {
        removeAll: string;
    };
    es: {
        removeAll: string;
    };
    pt: {
        removeAll: string;
    };
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
export declare class PoDisclaimerGroupBaseComponent implements DoCheck {
    private _disclaimers;
    private _hideRemoveAll;
    private differ;
    private previousDisclaimers;
    readonly literals: any;
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value: Array<PoDisclaimer>);
    get disclaimers(): Array<PoDisclaimer>;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value: boolean);
    get hideRemoveAll(): boolean;
    /** Título do grupo de *disclaimers*. */
    title?: string;
    /** Função que será disparada quando a lista de *disclaimers* for modificada. */
    change?: EventEmitter<any>;
    constructor(differs: IterableDiffers);
    ngDoCheck(): void;
    closeItem(disclaimer: any, emitChange?: boolean): void;
    isRemoveAll(): boolean;
    onKeyPress(event: any): void;
    removeAllItems(): void;
    private checkChanges;
    private checkDisclaimers;
    private disclaimersAreChanged;
    private emitChangeDisclaimers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDisclaimerGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoDisclaimerGroupBaseComponent, never, never, { "disclaimers": "p-disclaimers"; "hideRemoveAll": "p-hide-remove-all"; "title": "p-title"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1ncm91cC1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1kaXNjbGFpbWVyLWdyb3VwLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb0Rpc2NsYWltZXIgfSBmcm9tICcuLi9wby1kaXNjbGFpbWVyL3BvLWRpc2NsYWltZXIuaW50ZXJmYWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9EaXNjbGFpbWVyR3JvdXBMaXRlcmFsc0RlZmF1bHQ6IHtcclxuICAgIGVuOiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgZXM6IHtcclxuICAgICAgICByZW1vdmVBbGw6IHN0cmluZztcclxuICAgIH07XHJcbiAgICBwdDoge1xyXG4gICAgICAgIHJlbW92ZUFsbDogc3RyaW5nO1xyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLWRpc2NsYWltZXItZ3JvdXBgIMOpIHJlY29tZW5kYWRvIHBhcmEgbWFuaXB1bGFyIHBhbGF2cmFzLWNoYXZlIGRlIGZpbHRyb3MgYXBsaWNhZG9zIGVtIHVtYSBwZXNxdWlzYS5cclxuICpcclxuICogw4AgcGFydGlyIGRlIGRvaXMgKmRpc2NsYWltZXJzKiBjb20gbyBib3TDo28gKipmZWNoYXIqKiBoYWJpbGl0YWRvLCBvIGNvbXBvbmVudGUgcmVuZGVyaXphIGRlIGZvcm1hIGF1dG9tw6F0aWNhIHVtIG5vdm8gZSBkZXN0YWNhZG9cclxuICogKmRpc2NsYWltZXIqIHF1ZSBwb3NzaWJpbGl0YSAqKnJlbW92ZXIgdG9kb3MqKiwgbWFzIHF1ZSB0YW1iw6ltIHBvZGUgc2VyIGRlc2FiaWxpdGFkby5cclxuICpcclxuICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgbmF2ZWdhciBlbnRyZSBvcyAqZGlzY2xhaW1lcnMqIGF0cmF2w6lzIGRvIHRlY2xhZG8gdXRpbGl6YW5kbyBhIHRlY2xhICp0YWIqIGUsIHBhcmEgcmVtb8Onw6NvIGRvICpkaXNjbGFpbWVyKiBzZWxlY2lvbmFkbyxcclxuICogYmFzdGEgcHJlc3Npb25hciBhIHRlY2xhICplbnRlciouIEVzdGEgZnVuY2lvbmFsaWRhZGUgbsOjbyBzZSBhcGxpY2EgY2FzbyBhIHByb3ByaWVkYWRlIGBoaWRlQ2xvc2VgIGVzdGl2ZXIgaGFiaWxpdGFkYS5cclxuICpcclxuICogPiBWZWphIGEgaW50ZWdyYcOnw6NvIGRlc3RhcyBmdW5jaW9uYWxpZGFkZSBubyBjb21wb25lbnRlIFtwby1wYWdlLWxpc3RdKC9kb2N1bWVudGF0aW9uL3BvLXBhZ2UtbGlzdCkuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0Rpc2NsYWltZXJHcm91cEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgX2Rpc2NsYWltZXJzO1xyXG4gICAgcHJpdmF0ZSBfaGlkZVJlbW92ZUFsbDtcclxuICAgIHByaXZhdGUgZGlmZmVyO1xyXG4gICAgcHJpdmF0ZSBwcmV2aW91c0Rpc2NsYWltZXJzO1xyXG4gICAgcmVhZG9ubHkgbGl0ZXJhbHM6IGFueTtcclxuICAgIC8qKiBMaXN0YSBkZSAqZGlzY2xhaW1lcnMqLiAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBMaXN0YSBkZSAqZGlzY2xhaW1lcnMqLlxyXG4gICAgICpcclxuICAgICAqIFBhcmEgcXVlIGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBzZWphIGF0dWFsaXphZGEgZGluYW1pY2FtZW50ZSBkZXZlLXNlIHBhc3NhciB1bWEgbm92YSByZWZlcsOqbmNpYSBkbyBhcnJheSBkZSBgUG9EaXNjbGFpbWVyYC5cclxuICAgICAqXHJcbiAgICAgKiBFeGVtcGxvIGFkaWNpb25hbmRvIHVtICpkaXNjbGFpbWVyKiBubyBhcnJheTpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIHRoaXMuZGlzY2xhaW1lcnMgPSBbLi4udGhpcy5kaXNjbGFpbWVycywgZGlzY2xhaW1lcl07XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBvdVxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogdGhpcy5kaXNjbGFpbWVycyA9IHRoaXMuZGlzY2xhaW1lcnMuY29uY2F0KGRpc2NsYWltZXIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHNldCBkaXNjbGFpbWVycyh2YWx1ZTogQXJyYXk8UG9EaXNjbGFpbWVyPik7XHJcbiAgICBnZXQgZGlzY2xhaW1lcnMoKTogQXJyYXk8UG9EaXNjbGFpbWVyPjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogT2N1bHRhIG8gYm90w6NvIHBhcmEgcmVtb3ZlciB0b2RvcyBvcyAqZGlzY2xhaW1lcnMqIGRvIGdydXBvLlxyXG4gICAgICpcclxuICAgICAqID4gUG9yIHBhZHLDo28sIG8gbWVzbW8gw6kgZXhpYmlkbyDDoCBwYXJ0aXIgZGUgZG9pcyBvdSBtYWlzICpkaXNjbGFpbWVycyogY29tIGEgb3DDp8OjbyBgaGlkZUNsb3NlYCBoYWJpbGl0YWRhLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgc2V0IGhpZGVSZW1vdmVBbGwodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGhpZGVSZW1vdmVBbGwoKTogYm9vbGVhbjtcclxuICAgIC8qKiBUw610dWxvIGRvIGdydXBvIGRlICpkaXNjbGFpbWVycyouICovXHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIC8qKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIHF1YW5kbyBhIGxpc3RhIGRlICpkaXNjbGFpbWVycyogZm9yIG1vZGlmaWNhZGEuICovXHJcbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycyk7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIGNsb3NlSXRlbShkaXNjbGFpbWVyOiBhbnksIGVtaXRDaGFuZ2U/OiBib29sZWFuKTogdm9pZDtcclxuICAgIGlzUmVtb3ZlQWxsKCk6IGJvb2xlYW47XHJcbiAgICBvbktleVByZXNzKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgcmVtb3ZlQWxsSXRlbXMoKTogdm9pZDtcclxuICAgIHByaXZhdGUgY2hlY2tDaGFuZ2VzO1xyXG4gICAgcHJpdmF0ZSBjaGVja0Rpc2NsYWltZXJzO1xyXG4gICAgcHJpdmF0ZSBkaXNjbGFpbWVyc0FyZUNoYW5nZWQ7XHJcbiAgICBwcml2YXRlIGVtaXRDaGFuZ2VEaXNjbGFpbWVycztcclxufVxyXG4iXX0=