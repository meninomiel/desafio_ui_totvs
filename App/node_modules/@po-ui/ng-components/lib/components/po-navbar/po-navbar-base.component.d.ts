import { PoMenuComponent } from '../po-menu';
import { PoNavbarIconAction } from './interfaces/po-navbar-icon-action.interface';
import { PoNavbarItem } from './interfaces/po-navbar-item.interface';
import { PoNavbarLiterals } from './interfaces/po-navbar-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poNavbarLiteralsDefault: {
    en: PoNavbarLiterals;
    es: PoNavbarLiterals;
    pt: PoNavbarLiterals;
    ru: PoNavbarLiterals;
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 */
export declare abstract class PoNavbarBaseComponent {
    private _iconActions;
    private _items;
    private _literals;
    private _logo;
    private _shadow;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value: Array<PoNavbarIconAction>);
    get iconActions(): Array<PoNavbarIconAction>;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value: Array<PoNavbarItem>);
    get items(): Array<PoNavbarItem>;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoNavbarLiterals);
    get literals(): PoNavbarLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value: string);
    get logo(): string;
    /**
     * @optional
     *
     * @description
     *
     * Caso já possua um menu na aplicação o mesmo deve ser repassado para essa propriedade para que quando entre em modo
     * responsivo os items do `po-navbar` possam ser adicionados no primeiro item do menu definido.
     *
     * > Ao utilizar menu e navbar com logo mantém apenas a logo do navbar.
     *
     * Exemplo:
     *
     * ```
     * <po-navbar
     *  [p-items]="items"
     *  [p-icon-actions]="iconActions"
     *  [p-menu]="userMenu">
     * </po-navbar>
     * <div class="po-wrapper">
     *  <po-menu #userMenu
     *   [p-menus]="[{ label: 'Item 1', link: '/' }]">
     *  </po-menu>
     * </div>
     * ```
     */
    menu?: PoMenuComponent;
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value: boolean);
    get shadow(): boolean;
    protected abstract validateMenuLogo(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoNavbarBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoNavbarBaseComponent, never, never, { "iconActions": "p-icon-actions"; "items": "p-items"; "literals": "p-literals"; "logo": "p-logo"; "shadow": "p-shadow"; "menu": "p-menu"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLW5hdmJhci1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9NZW51Q29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbWVudSc7XHJcbmltcG9ydCB7IFBvTmF2YmFySWNvbkFjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1uYXZiYXItaWNvbi1hY3Rpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9OYXZiYXJJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLW5hdmJhci1pdGVtLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvTmF2YmFyTGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbmF2YmFyLWxpdGVyYWxzLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHBvTmF2YmFyTGl0ZXJhbHNEZWZhdWx0OiB7XHJcbiAgICBlbjogUG9OYXZiYXJMaXRlcmFscztcclxuICAgIGVzOiBQb05hdmJhckxpdGVyYWxzO1xyXG4gICAgcHQ6IFBvTmF2YmFyTGl0ZXJhbHM7XHJcbiAgICBydTogUG9OYXZiYXJMaXRlcmFscztcclxufTtcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLW5hdmJhcmAgw6kgdW0gY2FiZcOnYWxobyBmaXhvIHF1ZSBwZXJtaXRlIGFwcmVzZW50YXIgdW1hIGxpc3RhIGRlIGxpbmtzIHBhcmEgZmFjaWxpdGFyIGEgbmF2ZWdhw6fDo28gcGVsYXNcclxuICogcMOhZ2luYXMgZGEgYXBsaWNhw6fDo28uIFRhbWLDqW0gcG9zc3VpIMOtY29uZXMgY29tIGHDp8O1ZXMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb05hdmJhckJhc2VDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfaWNvbkFjdGlvbnM7XHJcbiAgICBwcml2YXRlIF9pdGVtcztcclxuICAgIHByaXZhdGUgX2xpdGVyYWxzO1xyXG4gICAgcHJpdmF0ZSBfbG9nbztcclxuICAgIHByaXZhdGUgX3NoYWRvdztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzIGFwcmVzZW50YWRhcyBlbSDDrWNvbmVzIG5vIGxhZG8gZGlyZWl0byBkbyBgcG8tbmF2YmFyYC5cclxuICAgICAqL1xyXG4gICAgc2V0IGljb25BY3Rpb25zKHZhbHVlOiBBcnJheTxQb05hdmJhckljb25BY3Rpb24+KTtcclxuICAgIGdldCBpY29uQWN0aW9ucygpOiBBcnJheTxQb05hdmJhckljb25BY3Rpb24+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGl0ZW1zIGRvIGBwby1uYXZiYXJgLlxyXG4gICAgICovXHJcbiAgICBzZXQgaXRlbXModmFsdWU6IEFycmF5PFBvTmF2YmFySXRlbT4pO1xyXG4gICAgZ2V0IGl0ZW1zKCk6IEFycmF5PFBvTmF2YmFySXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE9iamV0byBjb20gYSBsaXRlcmFsIHVzYWRhIG5hIHByb3ByaWVkYWRlIGBwLWxpdGVyYWxzYC5cclxuICAgICAqXHJcbiAgICAgKiBQYXJhIGN1c3RvbWl6YXIgYSBsaXRlcmFsLCBiYXN0YSBkZWNsYXJhciB1bSBvYmpldG8gZG8gdGlwbyBgUG9OYXZiYXJMaXRlcmFsc2AgY29uZm9ybWUgZXhlbXBsbyBhYmFpeG86XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvTmF2YmFyTGl0ZXJhbHMgPSB7XHJcbiAgICAgKiAgICBuYXZiYXJMaW5rczogJ0l0ZW5zIGRlIG5hdmVnYcOnw6NvJ1xyXG4gICAgICogIH07XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlLlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogPHBvLW5hdmJhclxyXG4gICAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxyXG4gICAgICogPC9wby1uYXZiYXI+XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvICpicm93c2VyKiAocHQsIGVuLCBlcykuXHJcbiAgICAgKi9cclxuICAgIHNldCBsaXRlcmFscyh2YWx1ZTogUG9OYXZiYXJMaXRlcmFscyk7XHJcbiAgICBnZXQgbGl0ZXJhbHMoKTogUG9OYXZiYXJMaXRlcmFscztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIGEgbG9nbyBhcHJlc2VudGFkYSBgcG8tbmF2YmFyYC5cclxuICAgICAqL1xyXG4gICAgc2V0IGxvZ28odmFsdWU6IHN0cmluZyk7XHJcbiAgICBnZXQgbG9nbygpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIENhc28gasOhIHBvc3N1YSB1bSBtZW51IG5hIGFwbGljYcOnw6NvIG8gbWVzbW8gZGV2ZSBzZXIgcmVwYXNzYWRvIHBhcmEgZXNzYSBwcm9wcmllZGFkZSBwYXJhIHF1ZSBxdWFuZG8gZW50cmUgZW0gbW9kb1xyXG4gICAgICogcmVzcG9uc2l2byBvcyBpdGVtcyBkbyBgcG8tbmF2YmFyYCBwb3NzYW0gc2VyIGFkaWNpb25hZG9zIG5vIHByaW1laXJvIGl0ZW0gZG8gbWVudSBkZWZpbmlkby5cclxuICAgICAqXHJcbiAgICAgKiA+IEFvIHV0aWxpemFyIG1lbnUgZSBuYXZiYXIgY29tIGxvZ28gbWFudMOpbSBhcGVuYXMgYSBsb2dvIGRvIG5hdmJhci5cclxuICAgICAqXHJcbiAgICAgKiBFeGVtcGxvOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogPHBvLW5hdmJhclxyXG4gICAgICogIFtwLWl0ZW1zXT1cIml0ZW1zXCJcclxuICAgICAqICBbcC1pY29uLWFjdGlvbnNdPVwiaWNvbkFjdGlvbnNcIlxyXG4gICAgICogIFtwLW1lbnVdPVwidXNlck1lbnVcIj5cclxuICAgICAqIDwvcG8tbmF2YmFyPlxyXG4gICAgICogPGRpdiBjbGFzcz1cInBvLXdyYXBwZXJcIj5cclxuICAgICAqICA8cG8tbWVudSAjdXNlck1lbnVcclxuICAgICAqICAgW3AtbWVudXNdPVwiW3sgbGFiZWw6ICdJdGVtIDEnLCBsaW5rOiAnLycgfV1cIj5cclxuICAgICAqICA8L3BvLW1lbnU+XHJcbiAgICAgKiA8L2Rpdj5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtZW51PzogUG9NZW51Q29tcG9uZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBBcGxpY2EgdW1hIHNvbWJyYSBuYSBwYXJ0ZSBpbmZlcmlvciBkbyBgcG8tbmF2YmFyYC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBzaGFkb3codmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IHNoYWRvdygpOiBib29sZWFuO1xyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHZhbGlkYXRlTWVudUxvZ28oKTogdm9pZDtcclxufVxyXG4iXX0=