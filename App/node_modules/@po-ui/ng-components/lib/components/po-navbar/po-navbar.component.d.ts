import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
/**
 * @docsExtends PoNavbarBaseComponent
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoNavbarComponent extends PoNavbarBaseComponent implements AfterViewInit, OnDestroy {
    private renderer;
    private builder;
    private changeDetector;
    disableRight: boolean;
    showItemsNavigation: boolean;
    private mediaQuery;
    private offset;
    private player;
    private menuItems;
    protected windowResizeListener: () => void;
    get navbarItemNavigationDisableLeft(): boolean;
    get navbarItemNavigationDisableRight(): boolean;
    navbarItemsElement: ElementRef;
    navbarItems: PoNavbarItemsComponent;
    constructor(renderer: Renderer2, builder: AnimationBuilder, changeDetector: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    navigateItems(orientation: string): void;
    private allNavbarItemsWidth;
    private animate;
    private buildTransitionAnimation;
    private changeNavbarMenuItems;
    private calculateLeftNavigation;
    private calculateRightNavigation;
    private displayItemsNavigation;
    private initNavbarMenu;
    private navbarItemsWidth;
    private navigateLeft;
    private navigateRight;
    private onMediaQueryChange;
    private setOffsetToZero;
    private validateMaxOffset;
    protected validateMenuLogo(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoNavbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoNavbarComponent, "po-navbar", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1uYXZiYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFuaW1hdGlvbkJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgUG9OYXZiYXJCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1uYXZiYXItYmFzZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQb05hdmJhckl0ZW1zQ29tcG9uZW50IH0gZnJvbSAnLi9wby1uYXZiYXItaXRlbXMvcG8tbmF2YmFyLWl0ZW1zLmNvbXBvbmVudCc7XHJcbi8qKlxyXG4gKiBAZG9jc0V4dGVuZHMgUG9OYXZiYXJCYXNlQ29tcG9uZW50XHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb05hdmJhckNvbXBvbmVudCBleHRlbmRzIFBvTmF2YmFyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSBidWlsZGVyO1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcclxuICAgIGRpc2FibGVSaWdodDogYm9vbGVhbjtcclxuICAgIHNob3dJdGVtc05hdmlnYXRpb246IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIG1lZGlhUXVlcnk7XHJcbiAgICBwcml2YXRlIG9mZnNldDtcclxuICAgIHByaXZhdGUgcGxheWVyO1xyXG4gICAgcHJpdmF0ZSBtZW51SXRlbXM7XHJcbiAgICBwcm90ZWN0ZWQgd2luZG93UmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbiAgICBnZXQgbmF2YmFySXRlbU5hdmlnYXRpb25EaXNhYmxlTGVmdCgpOiBib29sZWFuO1xyXG4gICAgZ2V0IG5hdmJhckl0ZW1OYXZpZ2F0aW9uRGlzYWJsZVJpZ2h0KCk6IGJvb2xlYW47XHJcbiAgICBuYXZiYXJJdGVtc0VsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBuYXZiYXJJdGVtczogUG9OYXZiYXJJdGVtc0NvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuYXZpZ2F0ZUl0ZW1zKG9yaWVudGF0aW9uOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBhbGxOYXZiYXJJdGVtc1dpZHRoO1xyXG4gICAgcHJpdmF0ZSBhbmltYXRlO1xyXG4gICAgcHJpdmF0ZSBidWlsZFRyYW5zaXRpb25BbmltYXRpb247XHJcbiAgICBwcml2YXRlIGNoYW5nZU5hdmJhck1lbnVJdGVtcztcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlTGVmdE5hdmlnYXRpb247XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJpZ2h0TmF2aWdhdGlvbjtcclxuICAgIHByaXZhdGUgZGlzcGxheUl0ZW1zTmF2aWdhdGlvbjtcclxuICAgIHByaXZhdGUgaW5pdE5hdmJhck1lbnU7XHJcbiAgICBwcml2YXRlIG5hdmJhckl0ZW1zV2lkdGg7XHJcbiAgICBwcml2YXRlIG5hdmlnYXRlTGVmdDtcclxuICAgIHByaXZhdGUgbmF2aWdhdGVSaWdodDtcclxuICAgIHByaXZhdGUgb25NZWRpYVF1ZXJ5Q2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBzZXRPZmZzZXRUb1plcm87XHJcbiAgICBwcml2YXRlIHZhbGlkYXRlTWF4T2Zmc2V0O1xyXG4gICAgcHJvdGVjdGVkIHZhbGlkYXRlTWVudUxvZ28oKTogdm9pZDtcclxufVxyXG4iXX0=