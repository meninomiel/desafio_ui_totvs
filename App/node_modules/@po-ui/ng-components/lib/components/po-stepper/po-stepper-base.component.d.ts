import { EventEmitter } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperItem } from './po-stepper-item.interface';
import { PoStepperOrientation } from './enums/po-stepper-orientation.enum';
/**
 * @description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepperBaseComponent {
    private _orientation?;
    private _sequential?;
    private _step;
    private _steps;
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `po-stepper`.
     *
     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
     *
     * @default `PoStepperOrientation.Horizontal`
     */
    set orientation(value: PoStepperOrientation);
    get orientation(): PoStepperOrientation;
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `po-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     *
     * @default `1`
     */
    set step(step: number);
    get step(): number;
    /**
     * @optional
     *
     * @description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     */
    set steps(steps: Array<PoStepperItem>);
    get steps(): Array<PoStepperItem>;
    /**
     *
     * @optional
     *
     * @description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * @default `false`
     */
    stepIcons: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * @default `24`
     */
    stepSize: number;
    /**
     * @optional
     *
     * @description
     *
     * Define se o `po-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
     *
     * @default `true`
     */
    set sequential(sequential: boolean);
    get sequential(): boolean;
    /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
    onChangeStep: EventEmitter<number | PoStepComponent>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepperBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoStepperBaseComponent, never, never, { "orientation": "p-orientation"; "step": "p-step"; "steps": "p-steps"; "sequential": "p-sequential"; "stepIcons": "p-step-icons"; "stepSize": "p-step-size"; }, { "onChangeStep": "p-change-step"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcHBlci1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1zdGVwcGVyLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvU3RlcENvbXBvbmVudCB9IGZyb20gJy4vcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvU3RlcHBlckl0ZW0gfSBmcm9tICcuL3BvLXN0ZXBwZXItaXRlbS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1N0ZXBwZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vZW51bXMvcG8tc3RlcHBlci1vcmllbnRhdGlvbi5lbnVtJztcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGBwby1zdGVwcGVyYCBwZXJtaXRlIHF1ZSB1bSBwcm9jZXNzbyBzZWphIGRpdmlkaWRvIGVtIHBhc3NvcyBwYXJhIHF1ZSBvIHVzdcOhcmlvIG8gcmVhbGl6ZVxyXG4gKiBtYWlzIGZhY2lsbWVudGUuXHJcbiAqXHJcbiAqIEV4aXN0ZW0gZHVhcyBmb3JtYXMgZGUgdXRpbGl6YcOnw6NvOlxyXG4gKlxyXG4gKiAxIC0gVXNhbmRvIG8gY29tcG9uZW50ZSBbKipwby1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXApIHBhcmEgcmVuZGVyaXphciBlIGRlc2NyZXZlciBvcyBwYXNzb3MuXHJcbiAqXHJcbiAqIDIgLSBBdHJhdsOpcyBkYSBwcm9wcmllZGFkZSBgcC1zdGVwc2AgcGFyYSBkZXNjcmV2ZXIgb3MgcGFzc29zIGRvIHByb2Nlc3NvLCBzZW5kbyByZXNwb25zYWJpbGlkYWRlIGRvIGRlc2Vudm9sdmVkb3IgbyBjb250cm9sZVxyXG4gKiBkZSByZW5kZXJpemHDp8OjbyBkbyBxdWUgc2Vyw6EgZXhpYmlkbyBhIGNhZGEgKnN0ZXAqIGF0aXZvLlxyXG4gKlxyXG4gKiBBdHJhdsOpcyBkZSBzdWFzIHByb3ByaWVkYWRlcywgw6kgcG9zc8OtdmVsIGRlZmluaXIgc2Ugc3VhIG9yaWVudGHDp8OjbyBzZXLDoSBob3Jpem9udGFsIG91IHZlcnRpY2FsLFxyXG4gKiBhbMOpbSBkYSBwb3NzaWJpbGlkYWRlIGRlIGF1bWVudGFyIG8gdGFtYW5obyBkb3MgKnN0ZXBzKi5cclxuICpcclxuICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgbmF2ZWdhciBlbnRyZSBvcyAqc3RlcHMqIGF0cmF2w6lzIGRvIHRlY2xhZG8gdXRpbGl6YW5kbyBhIHRlY2xhICp0YWIqIGUsIHBhcmEgYXRpdmFyIG8gKnN0ZXAqIGVtIGZvY28gYmFzdGFcclxuICogcHJlc3Npb25hciBhIHRlY2xhICplbnRlciouIEFsw6ltIGRpc3NvLCDDqSBwb3Nzw612ZWwgYXRpdmFyIGEgZXhpYmnDp8OjbyBkZSDDrWNvbmVzIG5vIGx1Z2FyIGRlIG7Dum1lcm9zIG5vcyAqc3RlcHMqIGF0cmF2w6lzIGRhXHJcbiAqIHByb3ByaWVkYWRlIFtgcC1zdGVwLWljb25zYF0oL2RvY3VtZW50YXRpb24vcG8tc3RlcHBlciNzdGVwSWNvbnNQcm9wZXJ0eSkuXHJcbiAqXHJcbiAqICMjIyMgVXRpbGl6YW5kbyBvcyBtw6l0b2RvcyBkbyBjb21wb25lbnRlOlxyXG4gKlxyXG4gKiBQYXJhIGFjZXNzYXIgb3MgbcOpdG9kb3MgZG8gY29tcG9uZW50ZSDDqSBuZWNlc3PDoXJpbyB0ZXIgYSByZWZlcsOqbmNpYSBkbyBtZXNtby5cclxuICpcclxuICogUG9yIGV4ZW1wbG8sIHV0aWxpemFuZG8gdW0gWyoqVmlld0NoaWxkKipdKGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29yZS9WaWV3Q2hpbGQpOlxyXG4gKlxyXG4gKiBgYGBcclxuICogQFZpZXdDaGlsZChQb1N0ZXBwZXJDb21wb25lbnQpIHBvU3RlcHBlckNvbXBvbmVudDogUG9TdGVwcGVyQ29tcG9uZW50O1xyXG4gKiBgYGBcclxuICpcclxuICogRSBwYXJhIGFjZXNzYXIgbyBtw6l0b2RvOlxyXG4gKlxyXG4gKiBgYGBcclxuICogcG9TdGVwcGVyQ29tcG9uZW50Lm5leHQoKTtcclxuICogYGBgXHJcbiAqXHJcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcclxuICpcclxuICogLSBFdml0ZSBgbGFiZWxzYCBleHRlbnNvcyBxdWUgcXVlYnJhbSBvIGxheW91dCBkbyBgcG8tc3RlcHBlcmAsIHVzZSBgbGFiZWxzYCBkaXJldG9zLCBjdXJ0b3MgZSBpbnR1aXRpdm9zLlxyXG4gKiAtIFV0aWxpemUgYXBlbmFzIHVtIGBwby1zdGVwcGVyYCBwb3IgcMOhZ2luYS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvU3RlcHBlckJhc2VDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfb3JpZW50YXRpb24/O1xyXG4gICAgcHJpdmF0ZSBfc2VxdWVudGlhbD87XHJcbiAgICBwcml2YXRlIF9zdGVwO1xyXG4gICAgcHJpdmF0ZSBfc3RlcHM7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBhIG9yaWVudGHDp8OjbyBkZSBleGliacOnw6NvIGRvIGBwby1zdGVwcGVyYC5cclxuICAgICAqXHJcbiAgICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogW1BvU3RlcHBlck9yaWVudGF0aW9uXShkb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIjc3RlcHBlck9yaWVudGF0aW9uKS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgUG9TdGVwcGVyT3JpZW50YXRpb24uSG9yaXpvbnRhbGBcclxuICAgICAqL1xyXG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlOiBQb1N0ZXBwZXJPcmllbnRhdGlvbik7XHJcbiAgICBnZXQgb3JpZW50YXRpb24oKTogUG9TdGVwcGVyT3JpZW50YXRpb247XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIENvbnRyb2xhIG8gcGFzc28gYXR1YWwgZG8gYHBvLXN0ZXBwZXJgLlxyXG4gICAgICpcclxuICAgICAqID4gQW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSBlIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCksXHJcbiAgICAgKiBvIHZhbG9yIGRlc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIHBlcm1hbmVjZW5kbyBhIGRlZmluacOnw6NvIGRvIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYDFgXHJcbiAgICAgKi9cclxuICAgIHNldCBzdGVwKHN0ZXA6IG51bWJlcik7XHJcbiAgICBnZXQgc3RlcCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIExpc3RhIGRvcyBpdGVucyBkbyBzdGVwcGVyLiBTZSBvIHZhbG9yIGVzdGl2ZXIgaW5kZWZpbmlkbyBvdSBpbnbDoWxpZG8sIHNlcsOhIGluaWNpYWxpemFkbyBjb21vIHVtIGFycmF5IHZhemlvLlxyXG4gICAgICpcclxuICAgICAqID4gQW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSBlIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCksXHJcbiAgICAgKiBvIHZhbG9yIGRlc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIHBlcm1hbmVjZW5kbyBhIGRlZmluacOnw6NvIGRvIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXHJcbiAgICAgKi9cclxuICAgIHNldCBzdGVwcyhzdGVwczogQXJyYXk8UG9TdGVwcGVySXRlbT4pO1xyXG4gICAgZ2V0IHN0ZXBzKCk6IEFycmF5PFBvU3RlcHBlckl0ZW0+O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogPGEgaWQ9XCJzdGVwSWNvbnNQcm9wZXJ0eVwiPjwvYT5cclxuICAgICAqXHJcbiAgICAgKiBIYWJpbGl0YSBhIGV4aWJpw6fDo28gZGUgw61jb25lIGFvIGludsOpcyBkZSBuw7ptZXJvIG5vIGNlbnRybyBkbyBjw61yY3VsbyBkb3MgKnN0ZXBzKi5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHN0ZXBJY29uczogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIG8gdGFtYW5obyBkb3MgKnN0ZXBzKiBlbSAqcGl4ZWxzKiwgcG9zc2liaWxpdGFuZG8gdW0gbWFpb3IgZGVzdGFxdWUuXHJcbiAgICAgKlxyXG4gICAgICogTyB2YWxvciBpbmZvcm1hZG8gZGV2ZSBzZXIgZW50cmUgYDI0YCBlIGA2NGAuXHJcbiAgICAgKlxyXG4gICAgICogPiBWYWxvcmVzIHF1ZSBuw6NvIHNlIGVucXVhZHJhcmVtIGEgZXN0YSByZWdyYSBzZXLDo28gaWdub3JhZG9zLCBtYW50ZW5kby1zZSBvIHZhbG9yICpkZWZhdWx0Ki5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgMjRgXHJcbiAgICAgKi9cclxuICAgIHN0ZXBTaXplOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBzZSBvIGBwby1zdGVwcGVyYCBzZXLDoSBzZXF1ZW5jaWFsIG91IGFsZWF0w7NyaW8uXHJcbiAgICAgKlxyXG4gICAgICogPiBBbyB1dGlsaXphciBvIGNvbXBvbmVudGUgWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKSwgbyB2YWxvciBkZXN0YSBwcm9wcmllZGFkZSBzZW1wcmUgc2Vyw6EgdmVyZGFkZWlyby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgdHJ1ZWBcclxuICAgICAqL1xyXG4gICAgc2V0IHNlcXVlbnRpYWwoc2VxdWVudGlhbDogYm9vbGVhbik7XHJcbiAgICBnZXQgc2VxdWVudGlhbCgpOiBib29sZWFuO1xyXG4gICAgLyoqIEHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBvIHVzdcOhcmlvIG11ZGFyIG8gcGFzc28gZG8gYHBvLXN0ZXBwZXJgLiAqL1xyXG4gICAgb25DaGFuZ2VTdGVwOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgUG9TdGVwQ29tcG9uZW50PjtcclxufVxyXG4iXX0=