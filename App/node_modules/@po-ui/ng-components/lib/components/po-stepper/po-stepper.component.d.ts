import { AfterContentInit, ChangeDetectorRef, QueryList } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
import { PoStepperItem } from './po-stepper-item.interface';
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepperComponent extends PoStepperBaseComponent implements AfterContentInit {
    private changeDetector;
    poSteps: QueryList<PoStepComponent>;
    private currentActiveStep;
    private previousActiveStep;
    get currentStepIndex(): number;
    get stepList(): QueryList<PoStepComponent> | Array<PoStepperItem>;
    get usePoSteps(): boolean;
    constructor(changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index: number): void;
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first(): void;
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next(): void;
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous(): void;
    changeStep(stepIndex: number, step?: PoStepComponent): void;
    onStepActive(step: PoStepComponent): void;
    trackByFn(step: PoStepComponent): string;
    private activeFirstStep;
    private allowNextStep;
    private canActiveNextStep;
    private controlStepsStatus;
    private getStepperStatusByCanActive;
    private getStepsAndIndex;
    private getPoSteps;
    private isBeforeStep;
    private setFinalSteppersAsDisabled;
    private setStepAsActive;
    private setNextStepAsDefault;
    private setPreviousStepAsDone;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoStepperComponent, "po-stepper", never, {}, {}, ["poSteps"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tc3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdG9yUmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9TdGVwQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zdGVwL3BvLXN0ZXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9TdGVwcGVyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tc3RlcHBlci1iYXNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvU3RlcHBlckl0ZW0gfSBmcm9tICcuL3BvLXN0ZXBwZXItaXRlbS5pbnRlcmZhY2UnO1xyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvU3RlcHBlckJhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXN0ZXBwZXItYmFzaWNcIiB0aXRsZT1cIlBPIFN0ZXBwZXIgQmFzaWNcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1iYXNpYy9zYW1wbGUtcG8tc3RlcHBlci1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXN0ZXBwZXItYmFzaWMvc2FtcGxlLXBvLXN0ZXBwZXItYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tc3RlcHBlci1sYWJzXCIgdGl0bGU9XCJQTyBTdGVwcGVyIExhYnNcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1sYWJzL3NhbXBsZS1wby1zdGVwcGVyLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1zdGVwcGVyLWxhYnMvc2FtcGxlLXBvLXN0ZXBwZXItbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1zdGVwcGVyLXNhbGVzXCIgdGl0bGU9XCJQTyBTdGVwcGVyIC0gU2FsZXNcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1zYWxlcy9zYW1wbGUtcG8tc3RlcHBlci1zYWxlcy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXN0ZXBwZXItc2FsZXMvc2FtcGxlLXBvLXN0ZXBwZXItc2FsZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9TdGVwcGVyQ29tcG9uZW50IGV4dGVuZHMgUG9TdGVwcGVyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcclxuICAgIHBvU3RlcHM6IFF1ZXJ5TGlzdDxQb1N0ZXBDb21wb25lbnQ+O1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50QWN0aXZlU3RlcDtcclxuICAgIHByaXZhdGUgcHJldmlvdXNBY3RpdmVTdGVwO1xyXG4gICAgZ2V0IGN1cnJlbnRTdGVwSW5kZXgoKTogbnVtYmVyO1xyXG4gICAgZ2V0IHN0ZXBMaXN0KCk6IFF1ZXJ5TGlzdDxQb1N0ZXBDb21wb25lbnQ+IHwgQXJyYXk8UG9TdGVwcGVySXRlbT47XHJcbiAgICBnZXQgdXNlUG9TdGVwcygpOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3IoY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbHRlcmEgbyBzdGF0dXMgZG8gKnN0ZXAqIHBhcmEgYXRpdm8uXHJcbiAgICAgKlxyXG4gICAgICogPiBFc3RlIG3DqXRvZG8gw6kgdmFsaWRvIGFwZW5hcyBwYXJhIGFzIGltcGxlbWVudGHDp8O1ZXMgcXVlIHV0aWxpemFtIG8gY29tcG9uZW50ZSBbKipwby1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXApLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDDjW5kaWNlIGRvIGBwby1zdGVwYCBxdWUgc2UgZGVzZWphIGF0aXZhci5cclxuICAgICAqL1xyXG4gICAgYWN0aXZlKGluZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdGl2YSBvIHByaW1laXJvICpzdGVwKi5cclxuICAgICAqXHJcbiAgICAgKiA+IEVzdGUgbcOpdG9kbyDDqSB2YWxpZG8gYXBlbmFzIHBhcmEgYXMgaW1wbGVtZW50YcOnw7VlcyBxdWUgdXRpbGl6YW0gbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXHJcbiAgICAgKi9cclxuICAgIGZpcnN0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEF0aXZhIG8gcHLDs3hpbW8gKnN0ZXAqLlxyXG4gICAgICpcclxuICAgICAqID4gRXN0ZSBtw6l0b2RvIMOpIHZhbGlkbyBhcGVuYXMgcGFyYSBhcyBpbXBsZW1lbnRhw6fDtWVzIHF1ZSB1dGlsaXphbSBvIGNvbXBvbmVudGUgWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKS5cclxuICAgICAqL1xyXG4gICAgbmV4dCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdGl2YSBvICpzdGVwKiBhbnRlcmlvci5cclxuICAgICAqXHJcbiAgICAgKiA+IEVzdGUgbcOpdG9kbyDDqSB2YWxpZG8gYXBlbmFzIHBhcmEgYXMgaW1wbGVtZW50YcOnw7VlcyBxdWUgdXRpbGl6YW0gbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXHJcbiAgICAgKi9cclxuICAgIHByZXZpb3VzKCk6IHZvaWQ7XHJcbiAgICBjaGFuZ2VTdGVwKHN0ZXBJbmRleDogbnVtYmVyLCBzdGVwPzogUG9TdGVwQ29tcG9uZW50KTogdm9pZDtcclxuICAgIG9uU3RlcEFjdGl2ZShzdGVwOiBQb1N0ZXBDb21wb25lbnQpOiB2b2lkO1xyXG4gICAgdHJhY2tCeUZuKHN0ZXA6IFBvU3RlcENvbXBvbmVudCk6IHN0cmluZztcclxuICAgIHByaXZhdGUgYWN0aXZlRmlyc3RTdGVwO1xyXG4gICAgcHJpdmF0ZSBhbGxvd05leHRTdGVwO1xyXG4gICAgcHJpdmF0ZSBjYW5BY3RpdmVOZXh0U3RlcDtcclxuICAgIHByaXZhdGUgY29udHJvbFN0ZXBzU3RhdHVzO1xyXG4gICAgcHJpdmF0ZSBnZXRTdGVwcGVyU3RhdHVzQnlDYW5BY3RpdmU7XHJcbiAgICBwcml2YXRlIGdldFN0ZXBzQW5kSW5kZXg7XHJcbiAgICBwcml2YXRlIGdldFBvU3RlcHM7XHJcbiAgICBwcml2YXRlIGlzQmVmb3JlU3RlcDtcclxuICAgIHByaXZhdGUgc2V0RmluYWxTdGVwcGVyc0FzRGlzYWJsZWQ7XHJcbiAgICBwcml2YXRlIHNldFN0ZXBBc0FjdGl2ZTtcclxuICAgIHByaXZhdGUgc2V0TmV4dFN0ZXBBc0RlZmF1bHQ7XHJcbiAgICBwcml2YXRlIHNldFByZXZpb3VzU3RlcEFzRG9uZTtcclxufVxyXG4iXX0=