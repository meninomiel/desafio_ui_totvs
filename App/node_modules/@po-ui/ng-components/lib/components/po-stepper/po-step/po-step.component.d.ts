import { AfterContentInit, ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepComponent implements AfterContentInit {
    private elementRef;
    private _status?;
    id?: string;
    /**
     * @optional
     *
     * @description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,
     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir
     * ao próximo *step*.
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     */
    canActiveNextStep: ((currentStep: any) => boolean) | ((currentStep: any) => Observable<boolean>);
    /** Título que será exibido descrevendo o passo (*step*). */
    label: string;
    set status(status: PoStepperStatus);
    get status(): PoStepperStatus;
    constructor(elementRef: ElementRef);
    ngAfterContentInit(): void;
    protected setDisplayOnActiveOrError(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoStepComponent, "po-step", never, { "status": "p-status"; "canActiveNextStep": "p-can-active-next-step"; "label": "p-label"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tc3RlcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQb1N0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9wby1zdGVwcGVyLXN0YXR1cy5lbnVtJztcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN0ZXBgIMOpIHV0aWxpemFkbyBwYXJhIGVudm9sdmVyIGUgcmVuZGVyaXphciBvIGNvbnRlw7pkbyBkZSB1bSBwYXNzbyAoKnN0ZXAqKSBkbyBgcG8tc3RlcHBlcmAsIHBvciBleGVtcGxvOlxyXG4gKlxyXG4gKiBgYGBcclxuICogPHBvLXN0ZXBwZXI+XHJcbiAqXHJcbiAqICAgIDxwby1zdGVwIHAtbGFiZWw9XCJFbmRlcmXDp29cIj5cclxuICpcclxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBlbmRlcmXDp28gLS0+XHJcbiAqXHJcbiAqICAgIDwvcG8tc3RlcD5cclxuICpcclxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIlBhZ2FtZW50b1wiPlxyXG4gKlxyXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIHBhZ2FtZW50byAtLT5cclxuICpcclxuICogICAgPC9wby1zdGVwPlxyXG4gKlxyXG4gKiAgPC9wby1zdGVwcGVyPlxyXG4gKiBgYGBcclxuICpcclxuICogQSByZW5kZXJpemHDp8OjbyBkbyBjb250ZcO6ZG8gZW52b2x2aWRvIG5hIHRlbGEgZSBvIGNvbnRyb2xlIGRvcyBzdGF0dXMgc8OjbyBmZWl0b3MgYXV0b21hdGljYW1lbnRlLiBObyBxdWFsLCBvIHByaW1laXJvXHJcbiAqIGBwby1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXHJcbiAqIGRlc2FiaWxpdGFkb3MgKCpkaXNhYmxlZCopLlxyXG4gKlxyXG4gKiBBbyBjbGljYXIgbm8gYHBvLXN0ZXBgIHF1ZSBlc3TDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqLCBvIHF1ZSBlc3TDoSBhdGl2byBmaWNhcsOhIGNvbSBvXHJcbiAqIHN0YXR1cyBkZSBjb25jbHXDrWRvICgqZG9uZSopIGUgbyBwcsOzeGltbyBxdWUgZXN0YXZhIGRlc2FiaWxpdGFkbyBmaWNhcsOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvIHJlc3RhbnRlIHBlcm1hbmVjZXLDoVxyXG4gKiBjb20gbyBzdGF0dXMgZGVzYWJpbGl0YWRvLlxyXG4gKlxyXG4gKiA+IEFvIHV0aWxpemFyIG8gYHBvLXN0ZXBgLCBvIGNvbXBvbmVudGUgYHBvLXN0ZXBwZXJgIGZ1bmNpb25hcsOhIGRlIGZvcm1hIHNlcXVlbmNpYWwsIG91IHNlamEsIG7Do28gc2Vyw6EgcG9zc8OtdmVsXHJcbiAqIHB1bGFyIHBhcmEgb3V0cm8gYHBvLXN0ZXBgIHF1ZSBlc3RlamEgY29tIG8gc3RhdHVzIGlndWFsIGEgZGVzYWJpbGl0YWRvICgqZGlzYWJsZWQqKS5cclxuICpcclxuICogQWNlc3NlIGEgW2RvY3VtZW50YcOnw6NvIGRvIGBwby1zdGVwcGVyYF0oL2RvY3VtZW50YXRpb24vcG8tc3RlcHBlcikgcGFyYSB0ZXIgbWFpcyBpbmZvcm1hw6fDtWVzIHNvYnJlIG8gc2V1IGZ1bmNpb25hbWVudG9cclxuICogZSBleGVtcGxvcyBkZSB1c28uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1N0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgX3N0YXR1cz87XHJcbiAgICBpZD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRnVuw6fDo28gY2hhbWFkYSBxdWFuZG8gbyBwcsOzeGltbyAqc3RlcCogZm9yIGNsaWNhZG8gb3UgcXVhbmRvIG8gbcOpdG9kbyBgUG9TdGVwcGVyQ29tcG9uZW50Lm5leHQoKWAgZm9yIGNoYW1hZG8uXHJcbiAgICAgKiBBbyByZXRvcm5hciBgdHJ1ZWAgZGVmaW5lIHF1ZSBlc3NlICpzdGVwKiBmaWNhcsOhIGF0aXZvIGUgbyBhdHVhbCBjb21vIGNvbmNsdcOtZG8gKCpkb25lKikuXHJcbiAgICAgKiBUYW1iw6ltIGFjZWl0YSBmdW7Dp8O1ZXMgcXVlIHJldG9ybmVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YC4gQW8gcmV0b3JuYXIgdW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLFxyXG4gICAgICogZ2FyYW50YSBxdWUgZXNzZSBgT2JzZXJ2YWJsZWAgc2Vyw6EgY29tcGxldGFkbywgY2FzbyBob3V2ZXIgYWxndW0gZXJybyBkdXJhbnRlIG8gcHJvY2Vzc28gbsOjbyBzZXLDoSBwb3Nzw612ZWwgcHJvc3NlZ3VpclxyXG4gICAgICogYW8gcHLDs3hpbW8gKnN0ZXAqLlxyXG4gICAgICpcclxuICAgICAqIEFvIHNlciBkaXNwYXJhZGEsIGEgbWVzbWEgcmVjZWJlcsOhIHBvciBwYXLDom1ldHJvIG8gYFBvU3RlcENvbXBvbmVudGAgYXR1YWwuXHJcbiAgICAgKlxyXG4gICAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxyXG4gICAgICogcGFyYSBvIGNvbnRleHRvIGRvIGNvbXBvbmVudGUgcXVlIG8gZXN0w6EgdXRpbGl6YW5kbywgcG9kZSBzZXIgdXRpbGl6YWRvIGEgcHJvcHJpZWRhZGUgYGJpbmRgIGRvIEphdmFzY3JpcHQuXHJcbiAgICAgKiBQb3IgZXhlbXBsbywgcGFyYSBhIGZ1bsOnw6NvIGB2YWxpZGF0ZWA6XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiA8cG8tc3RlcCBwLWxhYmVsPVwiU3RlcCAxXCIgW3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXBdPVwidmFsaWRhdGUuYmluZCh0aGlzKVwiPlxyXG4gICAgICogLi4uXHJcbiAgICAgKiA8L3BvLXN0ZXA+XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgY2FuQWN0aXZlTmV4dFN0ZXA6ICgoY3VycmVudFN0ZXA6IGFueSkgPT4gYm9vbGVhbikgfCAoKGN1cnJlbnRTdGVwOiBhbnkpID0+IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xyXG4gICAgLyoqIFTDrXR1bG8gcXVlIHNlcsOhIGV4aWJpZG8gZGVzY3JldmVuZG8gbyBwYXNzbyAoKnN0ZXAqKS4gKi9cclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBzZXQgc3RhdHVzKHN0YXR1czogUG9TdGVwcGVyU3RhdHVzKTtcclxuICAgIGdldCBzdGF0dXMoKTogUG9TdGVwcGVyU3RhdHVzO1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XHJcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBzZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk6IHZvaWQ7XHJcbn1cclxuIl19