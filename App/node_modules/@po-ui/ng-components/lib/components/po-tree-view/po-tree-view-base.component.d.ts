import { EventEmitter } from '@angular/core';
import { PoTreeViewItem } from './po-tree-view-item/po-tree-view-item.interface';
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoTreeViewBaseComponent {
    private _items;
    private _selectable;
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    set items(value: Array<PoTreeViewItem>);
    get items(): Array<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value: boolean);
    get selectable(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao colapsar um item.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao expandir um item.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao selecionar um item.
     *
     * > Como parâmetro o componente envia o item selecionado.
     */
    selected: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao desfazer a seleção de um item.
     *
     * > Como parâmetro o componente envia o item que foi desmarcado.
     */
    unselected: EventEmitter<PoTreeViewItem>;
    protected emitExpanded(treeViewItem: PoTreeViewItem): void;
    protected emitSelected(treeViewItem: PoTreeViewItem): void;
    private addChildItemInParent;
    private addItem;
    private selectAllItems;
    private selectItemBySubItems;
    private everyItemSelected;
    private expandParentItem;
    private getItemsByMaxLevel;
    private getItemsWithParentSelected;
    private updateItemsOnSelect;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTreeViewBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTreeViewBaseComponent, never, never, { "items": "p-items"; "selectable": "p-selectable"; }, { "collapsed": "p-collapsed"; "expanded": "p-expanded"; "selected": "p-selected"; "unselected": "p-unselected"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXRyZWUtdmlldy1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9UcmVlVmlld0l0ZW0gfSBmcm9tICcuL3BvLXRyZWUtdmlldy1pdGVtL3BvLXRyZWUtdmlldy1pdGVtLmludGVyZmFjZSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGZvcm5lY2UgdW0gbW9kZWxvIGRlIHZpc3VhbGl6YcOnw6NvIGVtIMOhcnZvcmUsIHBvc3NpYmlsaXRhbmRvIGEgdmlzdWFsaXphw6fDo28gZGFzIGluZm9ybWHDp8O1ZXMgZGUgbWFuZWlyYVxyXG4gKiBoaWVyw6FycXVpY2EsIGRlc3RhIGZvcm1hIHNlbmRvIHBvc3PDrXZlbCB1dGlsaXphciBhdMOpIDQgbsOtdmVpcy5cclxuICpcclxuICogTmVsZSDDqSBwb3Nzw612ZWwgbmF2ZWdhciBlbnRyZSBvcyBpdGVucyBhdHJhdsOpcyBkYSB0ZWNsYSAqdGFiKiwgcGVybWl0aW5kbyBleHBhbmRpciBvdSBjb2xhcHNhciBvIGl0ZW0gZW0gZm9jb1xyXG4gKiBwb3IgbWVpbyBkYXMgdGVjbGFzICplbnRlciogZSAqc3BhY2UqLlxyXG4gKlxyXG4gKiBBbMOpbSBkYSBuYXZlZ2HDp8OjbywgbyBjb21wb25lbnRlIHBvc3NpYmlsaXRhIHRhbWLDqW0gYSBzZWxlw6fDo28gZG9zIGl0ZW5zIGRvIHByaW1laXJvIGFvIMO6bHRpbW8gbsOtdmVsLCB0YW50byBkZSBmb3JtYSBwYXJjaWFsIGNvbW8gY29tcGxldGEuXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSB0YW1iw6ltIHBvc3N1aSBldmVudG9zIGRpc3BhcmFkb3MgYW8gbWFyY2FyL2Rlc21hcmNhciBlIGV4cGFuZGlyL2NvbGFwc2FyIG9zIGl0ZW5zLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfaXRlbXM7XHJcbiAgICBwcml2YXRlIF9zZWxlY3RhYmxlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0YSBkZSBpdGVucyBkbyB0aXBvIGBQb1RyZWVWaWV3SXRlbWAgcXVlIHNlcsOhIHJlbmRlcml6YWRhIHBlbG8gY29tcG9uZW50ZS5cclxuICAgICAqL1xyXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4pO1xyXG4gICAgZ2V0IGl0ZW1zKCk6IEFycmF5PFBvVHJlZVZpZXdJdGVtPjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogSGFiaWxpdGEgdW1hIGNhaXhhIGRlIHNlbGXDp8OjbyBwYXJhIHNlbGVjaW9uYXIgZS9vdSBkZXNtYXJjYXIgdW0gaXRlbSBkYSBsaXN0YS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAgICovXHJcbiAgICBzZXQgc2VsZWN0YWJsZSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgc2VsZWN0YWJsZSgpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBjb2xhcHNhciB1bSBpdGVtLlxyXG4gICAgICpcclxuICAgICAqID4gQ29tbyBwYXLDom1ldHJvIG8gY29tcG9uZW50ZSBlbnZpYSBvIGl0ZW0gY29sYXBzYWRvLlxyXG4gICAgICovXHJcbiAgICBjb2xsYXBzZWQ6IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGFvIGV4cGFuZGlyIHVtIGl0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBleHBhbmRpZG8uXHJcbiAgICAgKi9cclxuICAgIGV4cGFuZGVkOiBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBzZWxlY2lvbmFyIHVtIGl0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBzZWxlY2lvbmFkby5cclxuICAgICAqL1xyXG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGFvIGRlc2ZhemVyIGEgc2VsZcOnw6NvIGRlIHVtIGl0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBxdWUgZm9pIGRlc21hcmNhZG8uXHJcbiAgICAgKi9cclxuICAgIHVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT47XHJcbiAgICBwcm90ZWN0ZWQgZW1pdEV4cGFuZGVkKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGVtaXRTZWxlY3RlZCh0cmVlVmlld0l0ZW06IFBvVHJlZVZpZXdJdGVtKTogdm9pZDtcclxuICAgIHByaXZhdGUgYWRkQ2hpbGRJdGVtSW5QYXJlbnQ7XHJcbiAgICBwcml2YXRlIGFkZEl0ZW07XHJcbiAgICBwcml2YXRlIHNlbGVjdEFsbEl0ZW1zO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RJdGVtQnlTdWJJdGVtcztcclxuICAgIHByaXZhdGUgZXZlcnlJdGVtU2VsZWN0ZWQ7XHJcbiAgICBwcml2YXRlIGV4cGFuZFBhcmVudEl0ZW07XHJcbiAgICBwcml2YXRlIGdldEl0ZW1zQnlNYXhMZXZlbDtcclxuICAgIHByaXZhdGUgZ2V0SXRlbXNXaXRoUGFyZW50U2VsZWN0ZWQ7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUl0ZW1zT25TZWxlY3Q7XHJcbn1cclxuIl19