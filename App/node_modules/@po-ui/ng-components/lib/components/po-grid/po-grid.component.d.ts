import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { PoGridRowActions } from './po-grid-row-actions.interface';
/**
 * @description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="PO Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoGridComponent implements OnDestroy {
    private changeDetectorRef;
    private elRef;
    lastCell: string;
    lastRow: number;
    lastColumn: number;
    currencyCell: string;
    currencyRow: number;
    currencyColumn: number;
    currencyObj: any;
    logger: boolean;
    width: string;
    widporeeze: number;
    widthActions: number;
    private resizeListener;
    private timeoutResize;
    tableElement: ElementRef;
    tableWrapper: ElementRef;
    private _columns;
    /**
     * @description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     */
    rowActions: PoGridRowActions;
    /**
     * Colunas exibidas no grid.
     */
    set columns(value: Array<any>);
    get columns(): Array<any>;
    /**
     * Lista com os dados que serão exibidos no grid.
     */
    data: Array<any>;
    constructor(changeDetectorRef: ChangeDetectorRef, elRef: ElementRef, renderer: Renderer2);
    ngOnDestroy(): void;
    private debounceResize;
    get freezeColumns(): any[];
    get actionColumns(): any[];
    cancelRow(event: any, row: any): void;
    removeRow(event: any, row: any): boolean;
    tableKeydown(event: any, direction: string): void;
    tableClick(event: any): void;
    saveRow(row: number): boolean;
    insertRow(): boolean;
    isEmptyRow(row: number): boolean;
    selectCell(row: number, col: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoGridComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoGridComponent, "po-grid", never, { "rowActions": "p-row-actions"; "data": "p-data"; "columns": "p-columns"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ3JpZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tZ3JpZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvR3JpZFJvd0FjdGlvbnMgfSBmcm9tICcuL3BvLWdyaWQtcm93LWFjdGlvbnMuaW50ZXJmYWNlJztcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBDb21wb25lbnRlIGdyaWQuXHJcbiAqXHJcbiAqIEHDp8O1ZXMgLyBhdGFsaG9zOlxyXG4gKlxyXG4gKiAtIEFSUk9XLVVQOiBOYXZlZ2EgcGFyYSBjZWx1bGEgc3VwZXJpb3IgLyBOYSB1bHRpbWEgbGluaGEgYWRpY2lvbmEgdW1hIGxpbmhhIGVtIGJyYW5jbyBubyBncmlkO1xyXG4gKiAtIEFSUk9XLURPV046IE5hdmVnYSBwYXJhIGNlbHVsYSBpbmZlcmlvcjtcclxuICogLSBBUlJPVy1SSUdIVDogTmF2ZWdhIHBhcmEgY2VsdWxhIGRpcmVpdGE7XHJcbiAqIC0gQVJST1ctTEVGVDogTmF2ZWdhIHBhcmEgY2VsdWxhIGVzcXVlcmRhO1xyXG4gKiAtIFRBQjogTmF2ZWdhIHBhcmEgcHLDs3hpbWEgY2VsdWxhO1xyXG4gKiAtIFNISUZUK1RBQjogTmF2ZWdhIHBhcmEgY2VsdWxhIGFudGVyaW9yO1xyXG4gKiAtIENUUkwrREVMOiBSZW1vdmUgbGluaGE7XHJcbiAqIC0gREVML0JBQ0tTUEFDRTogTGltcGEgY2VsdWxhO1xyXG4gKiAtIEVOVEVSOiBFZGl0YSBsaW5oYSBjb20gdmFsb3IgYXR1YWwvQ29uZmlybWEgZWRpw6fDo28gZGEgY2VsdWxhO1xyXG4gKiAtIERPVUJMRS1DTElDSzogRWRpdGEgbGluaGEgY29tIHZhbG9yIGF0dWFsO1xyXG4gKiAtIEVTQzogQ2FuY2VsYSBlZGnDp8OjbyBkYSBjZWx1bGEgLyBDYW5jZWxhIGluc2Vyw6fDo28gZGUgbGluaGFzIGVtIGJyYW5jbztcclxuICogLSBBLi5aLzAuLjk6IEluaWNpYSBlZGnDp8OjbyBjb20gdmFsb3IgZW0gYnJhbmNvLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZ3JpZC1iYXNpY1wiIHRpdGxlPVwiUE8gR3JpZCBCYXNpY1wiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ncmlkLWJhc2ljL3NhbXBsZS1wby1ncmlkLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZ3JpZC1iYXNpYy9zYW1wbGUtcG8tZ3JpZC1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0dyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIHByaXZhdGUgZWxSZWY7XHJcbiAgICBsYXN0Q2VsbDogc3RyaW5nO1xyXG4gICAgbGFzdFJvdzogbnVtYmVyO1xyXG4gICAgbGFzdENvbHVtbjogbnVtYmVyO1xyXG4gICAgY3VycmVuY3lDZWxsOiBzdHJpbmc7XHJcbiAgICBjdXJyZW5jeVJvdzogbnVtYmVyO1xyXG4gICAgY3VycmVuY3lDb2x1bW46IG51bWJlcjtcclxuICAgIGN1cnJlbmN5T2JqOiBhbnk7XHJcbiAgICBsb2dnZXI6IGJvb2xlYW47XHJcbiAgICB3aWR0aDogc3RyaW5nO1xyXG4gICAgd2lkcG9yZWV6ZTogbnVtYmVyO1xyXG4gICAgd2lkdGhBY3Rpb25zOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlc2l6ZUxpc3RlbmVyO1xyXG4gICAgcHJpdmF0ZSB0aW1lb3V0UmVzaXplO1xyXG4gICAgdGFibGVFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgdGFibGVXcmFwcGVyOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBfY29sdW1ucztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQcOnw7VlcyBkaXNwYXJhZGFzIHF1YW5kbyB1bWEgbGluaGEgZG8gZ3JpZCDDqSBtYW5pcHVsYWRhLlxyXG4gICAgICovXHJcbiAgICByb3dBY3Rpb25zOiBQb0dyaWRSb3dBY3Rpb25zO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb2x1bmFzIGV4aWJpZGFzIG5vIGdyaWQuXHJcbiAgICAgKi9cclxuICAgIHNldCBjb2x1bW5zKHZhbHVlOiBBcnJheTxhbnk+KTtcclxuICAgIGdldCBjb2x1bW5zKCk6IEFycmF5PGFueT47XHJcbiAgICAvKipcclxuICAgICAqIExpc3RhIGNvbSBvcyBkYWRvcyBxdWUgc2Vyw6NvIGV4aWJpZG9zIG5vIGdyaWQuXHJcbiAgICAgKi9cclxuICAgIGRhdGE6IEFycmF5PGFueT47XHJcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGVsUmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRlYm91bmNlUmVzaXplO1xyXG4gICAgZ2V0IGZyZWV6ZUNvbHVtbnMoKTogYW55W107XHJcbiAgICBnZXQgYWN0aW9uQ29sdW1ucygpOiBhbnlbXTtcclxuICAgIGNhbmNlbFJvdyhldmVudDogYW55LCByb3c6IGFueSk6IHZvaWQ7XHJcbiAgICByZW1vdmVSb3coZXZlbnQ6IGFueSwgcm93OiBhbnkpOiBib29sZWFuO1xyXG4gICAgdGFibGVLZXlkb3duKGV2ZW50OiBhbnksIGRpcmVjdGlvbjogc3RyaW5nKTogdm9pZDtcclxuICAgIHRhYmxlQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBzYXZlUm93KHJvdzogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgIGluc2VydFJvdygpOiBib29sZWFuO1xyXG4gICAgaXNFbXB0eVJvdyhyb3c6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RDZWxsKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IHZvaWQ7XHJcbn1cclxuIl19