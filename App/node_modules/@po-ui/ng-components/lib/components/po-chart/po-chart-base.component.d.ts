import { EventEmitter } from '@angular/core';
import { PoChartGaugeSerie } from './po-chart-types/po-chart-gauge/po-chart-gauge-series.interface';
import { PoChartType } from './enums/po-chart-type.enum';
import { PoDonutChartSeries } from './po-chart-types/po-chart-donut/po-chart-donut-series.interface';
import { PoPieChartSeries } from './po-chart-types/po-chart-pie/po-chart-pie-series.interface';
import * as ɵngcc0 from '@angular/core';
export declare type PoChartSeries = Array<PoDonutChartSeries | PoPieChartSeries | PoChartGaugeSerie>;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir o tipo de gráfico, uma altura e um título.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 * - Para exibir a intensidade de um único dado dê preferência ao tipo `gauge`.
 */
export declare abstract class PoChartBaseComponent {
    private _height;
    private _series;
    private _type;
    protected chartSeries: PoChartSeries;
    readonly poChartType: typeof PoChartType;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * O valor padrão dos gráficos são:
     * - para o tipo *gauge*: `200px`;
     * - para os demais tipos: `400px`.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value: number);
    get height(): number;
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * - `PoChartGaugeSerie`
     */
    set series(value: PoChartGaugeSerie | Array<PoDonutChartSeries | PoPieChartSeries>);
    get series(): PoChartGaugeSerie | Array<PoDonutChartSeries | PoPieChartSeries>;
    /** Define o título do gráfico. */
    title?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     *
     * @default `PoChartType.Pie`
     */
    set type(value: PoChartType);
    get type(): PoChartType;
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     */
    seriesClick: EventEmitter<PoChartGaugeSerie | PoDonutChartSeries | PoPieChartSeries>;
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     */
    seriesHover: EventEmitter<PoChartGaugeSerie | PoDonutChartSeries | PoPieChartSeries>;
    onSeriesClick(event: any): void;
    onSeriesHover(event: any): void;
    private setDefaultHeight;
    private transformObjectToArrayObject;
    abstract rebuildComponent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoChartBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoChartBaseComponent, never, never, { "height": "p-height"; "series": "p-series"; "type": "p-type"; "title": "p-title"; }, { "seriesClick": "p-series-click"; "seriesHover": "p-series-hover"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFBvRG9udXRDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZG9udXQvcG8tY2hhcnQtZG9udXQtc2VyaWVzLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvUGllQ2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LXR5cGVzL3BvLWNoYXJ0LXBpZS9wby1jaGFydC1waWUtc2VyaWVzLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUG9DaGFydFNlcmllcyA9IEFycmF5PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXMgfCBQb0NoYXJ0R2F1Z2VTZXJpZT47XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBgcG8tY2hhcnRgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSByZW5kZXJpemHDp8OjbyBkZSBkYWRvcyBhdHJhdsOpcyBkZSBncsOhZmljb3MsIGNvbSBpc3NvIGZhY2lsaXRhbmRvIGEgY29tcHJlZW5zw6NvIGUgdG9ybmFuZG8gYVxyXG4gKiB2aXN1YWxpemHDp8OjbyBkZXN0ZXMgZGFkb3MgbWFpcyBhZ3JhZMOhdmVsLlxyXG4gKlxyXG4gKiBBdHJhdsOpcyBkZSBzdWFzIHByaW5jaXBhaXMgcHJvcHJpZWRhZGVzIMOpIHBvc3PDrXZlbCBkZWZpbmlyIG8gdGlwbyBkZSBncsOhZmljbywgdW1hIGFsdHVyYSBlIHVtIHTDrXR1bG8uXHJcbiAqXHJcbiAqIEFsw6ltIGRpc3NvLCB0YW1iw6ltIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHVtYSBhw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBhbyBjbGljYXIgZW0gZGV0ZXJtaW5hZG8gZWxlbWVudG8gZG8gZ3LDoWZpY29cclxuICogZSBvdXRyYSBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIHBhc3NhciBvICptb3VzZSogc29icmUgbyBlbGVtZW50by5cclxuICpcclxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xyXG4gKlxyXG4gKiAtIFBhcmEgcXVlIG8gZ3LDoWZpY28gbsOjbyBmaXF1ZSBpbGVnw612ZWwgZSBpbmNvbXByZWVuc8OtdmVsLCBldml0ZSB1bWEgcXVhbnRpYSBleGNlc3NpdmEgZGUgc8Opcmllcy5cclxuICogLSBQYXJhIGV4aWJpciBhIGludGVuc2lkYWRlIGRlIHVtIMO6bmljbyBkYWRvIGTDqiBwcmVmZXLDqm5jaWEgYW8gdGlwbyBgZ2F1Z2VgLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9DaGFydEJhc2VDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0O1xyXG4gICAgcHJpdmF0ZSBfc2VyaWVzO1xyXG4gICAgcHJpdmF0ZSBfdHlwZTtcclxuICAgIHByb3RlY3RlZCBjaGFydFNlcmllczogUG9DaGFydFNlcmllcztcclxuICAgIHJlYWRvbmx5IHBvQ2hhcnRUeXBlOiB0eXBlb2YgUG9DaGFydFR5cGU7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBhIGFsdHVyYSBkbyBncsOhZmljby5cclxuICAgICAqXHJcbiAgICAgKiBPIHZhbG9yIHBhZHLDo28gZG9zIGdyw6FmaWNvcyBzw6NvOlxyXG4gICAgICogLSBwYXJhIG8gdGlwbyAqZ2F1Z2UqOiBgMjAwcHhgO1xyXG4gICAgICogLSBwYXJhIG9zIGRlbWFpcyB0aXBvczogYDQwMHB4YC5cclxuICAgICAqXHJcbiAgICAgKiA+IE8gdmFsb3IgbcOtbmltbyBhY2VpdG8gbmVzdGEgcHJvcHJpZWRhZGUgw6kgMjAwLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGA0MDBweGBcclxuICAgICAqL1xyXG4gICAgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKTtcclxuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgb3MgZWxlbWVudG9zIGRvIGdyw6FmaWNvIHF1ZSBzZXLDo28gY3JpYWRvcyBkaW5hbWljYW1lbnRlLlxyXG4gICAgICpcclxuICAgICAqID4gQSBjb2xlw6fDo28gZGUgb2JqZXRvcyBkZXZlIGltcGxlbWVudGFyIGFsZ3VtYSBkYXMgaW50ZXJmYWNlcyBhYmFpeG86XHJcbiAgICAgKiAtIGBQb0RvbnV0Q2hhcnRTZXJpZXNgXHJcbiAgICAgKiAtIGBQb1BpZUNoYXJ0U2VyaWVzYFxyXG4gICAgICogLSBgUG9DaGFydEdhdWdlU2VyaWVgXHJcbiAgICAgKi9cclxuICAgIHNldCBzZXJpZXModmFsdWU6IFBvQ2hhcnRHYXVnZVNlcmllIHwgQXJyYXk8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcz4pO1xyXG4gICAgZ2V0IHNlcmllcygpOiBQb0NoYXJ0R2F1Z2VTZXJpZSB8IEFycmF5PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXM+O1xyXG4gICAgLyoqIERlZmluZSBvIHTDrXR1bG8gZG8gZ3LDoWZpY28uICovXHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIG8gdGlwbyBkZSBncsOhZmljby5cclxuICAgICAqXHJcbiAgICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvQ2hhcnRUeXBlYC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgUG9DaGFydFR5cGUuUGllYFxyXG4gICAgICovXHJcbiAgICBzZXQgdHlwZSh2YWx1ZTogUG9DaGFydFR5cGUpO1xyXG4gICAgZ2V0IHR5cGUoKTogUG9DaGFydFR5cGU7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIG8gdXN1w6FyaW8gY2xpY2FyIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxyXG4gICAgICpcclxuICAgICAqID4gU2Vyw6EgcGFzc2FkbyBwb3IgcGFyw6JtZXRybyB1bSBvYmpldG8gY29udGVuZG8gYSBjYXRlZ29yaWEgZSB2YWxvciBkYSBzw6lyaWUuXHJcbiAgICAgKi9cclxuICAgIHNlcmllc0NsaWNrOiBFdmVudEVtaXR0ZXI8UG9DaGFydEdhdWdlU2VyaWUgfCBQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzPjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRXZlbnRvIGV4ZWN1dGFkbyBxdWFuZG8gbyB1c3XDoXJpbyBwYXNzYXIgbyAqbW91c2UqIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxyXG4gICAgICpcclxuICAgICAqID4gU2Vyw6EgcGFzc2FkbyBwb3IgcGFyw6JtZXRybyB1bSBvYmpldG8gY29udGVuZG8gYSBjYXRlZ29yaWEgZSB2YWxvciBkYSBzw6lyaWUuXHJcbiAgICAgKi9cclxuICAgIHNlcmllc0hvdmVyOiBFdmVudEVtaXR0ZXI8UG9DaGFydEdhdWdlU2VyaWUgfCBQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzPjtcclxuICAgIG9uU2VyaWVzQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBvblNlcmllc0hvdmVyKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBzZXREZWZhdWx0SGVpZ2h0O1xyXG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1PYmplY3RUb0FycmF5T2JqZWN0O1xyXG4gICAgYWJzdHJhY3QgcmVidWlsZENvbXBvbmVudCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==