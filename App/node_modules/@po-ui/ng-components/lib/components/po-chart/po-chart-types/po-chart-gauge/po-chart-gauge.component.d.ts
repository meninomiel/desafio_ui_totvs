import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, NgZone, Renderer2, ViewContainerRef } from '@angular/core';
import { PoChartCircular } from '../po-chart-circular/po-chart-circular';
import { PoChartGaugeSerie } from './po-chart-gauge-series.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoChartGaugeComponent extends PoChartCircular implements AfterViewInit {
    private changeDetection;
    private componentFactoryResolver;
    chartItemStartAngle: number;
    protected _series: Array<PoChartGaugeSerie>;
    set series(series: Array<PoChartGaugeSerie>);
    get series(): Array<PoChartGaugeSerie>;
    svgContainerRef: ViewContainerRef;
    constructor(changeDetection: ChangeDetectorRef, componentFactoryResolver: ComponentFactoryResolver, el: ElementRef, ngZone: NgZone, renderer: Renderer2);
    ngAfterViewInit(): void;
    private createComponent;
    private checkGaugeValueLimits;
    private drawBasePath;
    private getGaugeBaseWidth;
    private getGaugeSerie;
    private resizeListenerSubscription;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoChartGaugeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoChartGaugeComponent, "po-chart-gauge", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNoYXJ0LWdhdWdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBOZ1pvbmUsIFJlbmRlcmVyMiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb0NoYXJ0Q2lyY3VsYXIgfSBmcm9tICcuLi9wby1jaGFydC1jaXJjdWxhci9wby1jaGFydC1jaXJjdWxhcic7XHJcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9DaGFydEdhdWdlQ29tcG9uZW50IGV4dGVuZHMgUG9DaGFydENpcmN1bGFyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdGlvbjtcclxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xyXG4gICAgY2hhcnRJdGVtU3RhcnRBbmdsZTogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9zZXJpZXM6IEFycmF5PFBvQ2hhcnRHYXVnZVNlcmllPjtcclxuICAgIHNldCBzZXJpZXMoc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4pO1xyXG4gICAgZ2V0IHNlcmllcygpOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT47XHJcbiAgICBzdmdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmLCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgZWw6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGNoZWNrR2F1Z2VWYWx1ZUxpbWl0cztcclxuICAgIHByaXZhdGUgZHJhd0Jhc2VQYXRoO1xyXG4gICAgcHJpdmF0ZSBnZXRHYXVnZUJhc2VXaWR0aDtcclxuICAgIHByaXZhdGUgZ2V0R2F1Z2VTZXJpZTtcclxuICAgIHByaXZhdGUgcmVzaXplTGlzdGVuZXJTdWJzY3JpcHRpb247XHJcbn1cclxuIl19