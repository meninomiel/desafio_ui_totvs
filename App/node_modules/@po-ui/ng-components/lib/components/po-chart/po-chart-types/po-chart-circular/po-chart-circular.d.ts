import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartDynamicTypeComponent } from '../po-chart-dynamic-type.component';
import { PoChartGaugeSerie } from '../po-chart-gauge/po-chart-gauge-series.interface';
import { PoCircularChartSeries } from './po-chart-circular-series.interface';
import { PoDonutChartSeries } from '../po-chart-donut/po-chart-donut-series.interface';
import { PoPieChartSeries } from '../po-chart-pie/po-chart-pie-series.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoChartCircular extends PoChartDynamicTypeComponent implements OnDestroy, OnInit {
    protected el: ElementRef;
    private ngZone;
    private renderer;
    chartItemStartAngle: number;
    windowResizeEmitter: Subject<any>;
    protected _series: Array<PoPieChartSeries | PoDonutChartSeries | PoChartGaugeSerie>;
    private animationRunning;
    private chartItemEndAngle;
    private chartItemsEndAngleList;
    private svgPathElementsList;
    private svgTextElementsList;
    set series(value: Array<PoPieChartSeries | PoDonutChartSeries | PoChartGaugeSerie>);
    get series(): Array<PoPieChartSeries | PoDonutChartSeries | PoChartGaugeSerie>;
    constructor(el: ElementRef, ngZone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    ngOnInit(): void;
    removeTooltip(): void;
    protected drawPath(path: any, chartItemStartAngle: any, chartItemEndAngle: any): any;
    protected getSeriesWithValue(series: Array<PoCircularChartSeries | PoChartGaugeSerie>): any[];
    private animationSetup;
    private appendGaugeBackgroundPathElement;
    private calculateAngleRadians;
    private calculateCurrentEndAngle;
    private calculateEndAngle;
    private calculateSVGDimensions;
    private changeTooltipPosition;
    private chartInitSetup;
    private checkingIfScrollsWithPoPage;
    private createPath;
    private createPaths;
    private createText;
    private createTexts;
    private createSVGElements;
    private drawPathInit;
    private drawSeries;
    private emitEventOnEnter;
    private getFontSize;
    private getPercentValue;
    private getTextColor;
    private getTooltipValue;
    private isSerieValueEqualZero;
    private onMouseClick;
    private onMouseEnter;
    private onWindowResize;
    private removeWindowResizeListener;
    private removeWindowScrollListener;
    private setEventListeners;
    private setInnerRadius;
    private setTextProperties;
    private setTooltipPositions;
    private setElementAttributes;
    private showTooltip;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoChartCircular, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoChartCircular, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtY2lyY3VsYXIuZC50cyIsInNvdXJjZXMiOlsicG8tY2hhcnQtY2lyY3VsYXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB9IGZyb20gJy4uL3BvLWNoYXJ0LWR5bmFtaWMtdHlwZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWdhdWdlL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0NpcmN1bGFyQ2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LWNpcmN1bGFyLXNlcmllcy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0RvbnV0Q2hhcnRTZXJpZXMgfSBmcm9tICcuLi9wby1jaGFydC1kb251dC9wby1jaGFydC1kb251dC1zZXJpZXMuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QaWVDaGFydFNlcmllcyB9IGZyb20gJy4uL3BvLWNoYXJ0LXBpZS9wby1jaGFydC1waWUtc2VyaWVzLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQ2hhcnRDaXJjdWxhciBleHRlbmRzIFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcclxuICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIGNoYXJ0SXRlbVN0YXJ0QW5nbGU6IG51bWJlcjtcclxuICAgIHdpbmRvd1Jlc2l6ZUVtaXR0ZXI6IFN1YmplY3Q8YW55PjtcclxuICAgIHByb3RlY3RlZCBfc2VyaWVzOiBBcnJheTxQb1BpZUNoYXJ0U2VyaWVzIHwgUG9Eb251dENoYXJ0U2VyaWVzIHwgUG9DaGFydEdhdWdlU2VyaWU+O1xyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25SdW5uaW5nO1xyXG4gICAgcHJpdmF0ZSBjaGFydEl0ZW1FbmRBbmdsZTtcclxuICAgIHByaXZhdGUgY2hhcnRJdGVtc0VuZEFuZ2xlTGlzdDtcclxuICAgIHByaXZhdGUgc3ZnUGF0aEVsZW1lbnRzTGlzdDtcclxuICAgIHByaXZhdGUgc3ZnVGV4dEVsZW1lbnRzTGlzdDtcclxuICAgIHNldCBzZXJpZXModmFsdWU6IEFycmF5PFBvUGllQ2hhcnRTZXJpZXMgfCBQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb0NoYXJ0R2F1Z2VTZXJpZT4pO1xyXG4gICAgZ2V0IHNlcmllcygpOiBBcnJheTxQb1BpZUNoYXJ0U2VyaWVzIHwgUG9Eb251dENoYXJ0U2VyaWVzIHwgUG9DaGFydEdhdWdlU2VyaWU+O1xyXG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgcmVtb3ZlVG9vbHRpcCgpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGRyYXdQYXRoKHBhdGg6IGFueSwgY2hhcnRJdGVtU3RhcnRBbmdsZTogYW55LCBjaGFydEl0ZW1FbmRBbmdsZTogYW55KTogYW55O1xyXG4gICAgcHJvdGVjdGVkIGdldFNlcmllc1dpdGhWYWx1ZShzZXJpZXM6IEFycmF5PFBvQ2lyY3VsYXJDaGFydFNlcmllcyB8IFBvQ2hhcnRHYXVnZVNlcmllPik6IGFueVtdO1xyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25TZXR1cDtcclxuICAgIHByaXZhdGUgYXBwZW5kR2F1Z2VCYWNrZ3JvdW5kUGF0aEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZUFuZ2xlUmFkaWFucztcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlQ3VycmVudEVuZEFuZ2xlO1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVFbmRBbmdsZTtcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlU1ZHRGltZW5zaW9ucztcclxuICAgIHByaXZhdGUgY2hhbmdlVG9vbHRpcFBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBjaGFydEluaXRTZXR1cDtcclxuICAgIHByaXZhdGUgY2hlY2tpbmdJZlNjcm9sbHNXaXRoUG9QYWdlO1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVQYXRoO1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVQYXRocztcclxuICAgIHByaXZhdGUgY3JlYXRlVGV4dDtcclxuICAgIHByaXZhdGUgY3JlYXRlVGV4dHM7XHJcbiAgICBwcml2YXRlIGNyZWF0ZVNWR0VsZW1lbnRzO1xyXG4gICAgcHJpdmF0ZSBkcmF3UGF0aEluaXQ7XHJcbiAgICBwcml2YXRlIGRyYXdTZXJpZXM7XHJcbiAgICBwcml2YXRlIGVtaXRFdmVudE9uRW50ZXI7XHJcbiAgICBwcml2YXRlIGdldEZvbnRTaXplO1xyXG4gICAgcHJpdmF0ZSBnZXRQZXJjZW50VmFsdWU7XHJcbiAgICBwcml2YXRlIGdldFRleHRDb2xvcjtcclxuICAgIHByaXZhdGUgZ2V0VG9vbHRpcFZhbHVlO1xyXG4gICAgcHJpdmF0ZSBpc1NlcmllVmFsdWVFcXVhbFplcm87XHJcbiAgICBwcml2YXRlIG9uTW91c2VDbGljaztcclxuICAgIHByaXZhdGUgb25Nb3VzZUVudGVyO1xyXG4gICAgcHJpdmF0ZSBvbldpbmRvd1Jlc2l6ZTtcclxuICAgIHByaXZhdGUgcmVtb3ZlV2luZG93UmVzaXplTGlzdGVuZXI7XHJcbiAgICBwcml2YXRlIHJlbW92ZVdpbmRvd1Njcm9sbExpc3RlbmVyO1xyXG4gICAgcHJpdmF0ZSBzZXRFdmVudExpc3RlbmVycztcclxuICAgIHByaXZhdGUgc2V0SW5uZXJSYWRpdXM7XHJcbiAgICBwcml2YXRlIHNldFRleHRQcm9wZXJ0aWVzO1xyXG4gICAgcHJpdmF0ZSBzZXRUb29sdGlwUG9zaXRpb25zO1xyXG4gICAgcHJpdmF0ZSBzZXRFbGVtZW50QXR0cmlidXRlcztcclxuICAgIHByaXZhdGUgc2hvd1Rvb2x0aXA7XHJcbn1cclxuIl19