import { PoLanguageService } from './../../../services/po-language/po-language.service';
import { PoBreadcrumb } from '../../po-breadcrumb/po-breadcrumb.interface';
import { PoDisclaimerGroup } from '../../po-disclaimer-group/po-disclaimer-group.interface';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
import { PoPageFilter } from './../po-page-filter.interface';
import { PoPageListLiterals } from './po-page-list-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poPageListLiteralsDefault: {
    en: PoPageListLiterals;
    es: PoPageListLiterals;
    pt: PoPageListLiterals;
    ru: PoPageListLiterals;
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export declare abstract class PoPageListBaseComponent extends PoPageDefaultBaseComponent {
    private _disclaimerGroup?;
    private _literals;
    protected language: string;
    protected resizeListener: () => void;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoBreadcrumb`.
     */
    breadcrumb?: PoBreadcrumb;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value: PoDisclaimerGroup);
    get disclaimerGroup(): PoDisclaimerGroup;
    /**
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoPageFilter`.
     */
    filter: PoPageFilter;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value: PoPageListLiterals);
    get literals(): PoPageListLiterals;
    constructor(languageService: PoLanguageService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageListBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPageListBaseComponent, never, never, { "disclaimerGroup": "p-disclaimer-group"; "literals": "p-literals"; "breadcrumb": "p-breadcrumb"; "filter": "p-filter"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXBhZ2UtbGlzdC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9CcmVhZGNydW1iIH0gZnJvbSAnLi4vLi4vcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvRGlzY2xhaW1lckdyb3VwIH0gZnJvbSAnLi4vLi4vcG8tZGlzY2xhaW1lci1ncm91cC9wby1kaXNjbGFpbWVyLWdyb3VwLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tcGFnZS1kZWZhdWx0L3BvLXBhZ2UtZGVmYXVsdC1iYXNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvUGFnZUZpbHRlciB9IGZyb20gJy4vLi4vcG8tcGFnZS1maWx0ZXIuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlTGlzdExpdGVyYWxzIH0gZnJvbSAnLi9wby1wYWdlLWxpc3QtbGl0ZXJhbHMuaW50ZXJmYWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdDoge1xyXG4gICAgZW46IFBvUGFnZUxpc3RMaXRlcmFscztcclxuICAgIGVzOiBQb1BhZ2VMaXN0TGl0ZXJhbHM7XHJcbiAgICBwdDogUG9QYWdlTGlzdExpdGVyYWxzO1xyXG4gICAgcnU6IFBvUGFnZUxpc3RMaXRlcmFscztcclxufTtcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLXBhZ2UtbGlzdGAgw6kgdXRpbGl6YWRvIGNvbW8gbyBjb250YWluZXIgcHJpbmNpcGFsIHBhcmEgYXMgdGVsYXMgZGUgbGlzdGFnZW0gZGUgZGFkb3MsXHJcbiAqIHBvZGVuZG8gc2VyIGFwcmVzZW50YWRvIGNvbW8gbGlzdGEgb3UgdGFiZWxhLlxyXG4gKlxyXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9zc2liaWxpdGEgcmVhbGl6YXIgZmlsdHJvIGRvcyBkYWRvcywgbm8gcXVhbCBwZXJtaXRlIHF1ZSBzZWphIGF0cmlidWlkbyB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBubyBtb21lbnRvXHJcbiAqIGRhIGZpbHRyYWdlbS4gRXN0ZSBjb21wb3J0YW1lbnRvIHBvZGUgc2VyIGFjaW9uYWRvIHRhbnRvIGFvICpjbGljayogZG8gw61jb25lIFtwby1pY29uLXNlYXJjaF0oL2d1aWRlcy9pY29ucylcclxuICogcXVhbnRvIGFvIHByZXNzaW9uYXIgZGEgdGVjbGEgKkVOVEVSKiBxdWFuZG8gbyBmb2NvIGVzdGl2ZXIgbm8gY2FtcG8gZGUgcGVzcXVpc2EuXHJcbiAqXHJcbiAqIFBhcmEgZmFjaWxpdGFyIGEgbWFuaXB1bGHDp8OjbyBlIHZpc3VhbGl6YcOnw6NvIGRvcyBmaWx0cm9zIGFwbGljYWRvcywgw6kgcG9zc8OtdmVsIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlXHJcbiAqIFtgcG8tZGlzY2xhaW1lci1ncm91cGBdKC9kb2N1bWVudGF0aW9uL3BvLWRpc2NsYWltZXItZ3JvdXApLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9QYWdlTGlzdEJhc2VDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VEZWZhdWx0QmFzZUNvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIF9kaXNjbGFpbWVyR3JvdXA/O1xyXG4gICAgcHJpdmF0ZSBfbGl0ZXJhbHM7XHJcbiAgICBwcm90ZWN0ZWQgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvQnJlYWRjcnVtYmAuXHJcbiAgICAgKi9cclxuICAgIGJyZWFkY3J1bWI/OiBQb0JyZWFkY3J1bWI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE9iamV0byBxdWUgaW1wbGVtZW50YSBhcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIGBQb0Rpc2NsYWltZXJHcm91cGAuXHJcbiAgICAgKi9cclxuICAgIHNldCBkaXNjbGFpbWVyR3JvdXAodmFsdWU6IFBvRGlzY2xhaW1lckdyb3VwKTtcclxuICAgIGdldCBkaXNjbGFpbWVyR3JvdXAoKTogUG9EaXNjbGFpbWVyR3JvdXA7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE9iamV0byBxdWUgaW1wbGVtZW50YSBhcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIGBQb1BhZ2VGaWx0ZXJgLlxyXG4gICAgICovXHJcbiAgICBmaWx0ZXI6IFBvUGFnZUZpbHRlcjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLXBhZ2UtbGlzdGAuXHJcbiAgICAgKlxyXG4gICAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xyXG4gICAgICogICAgb3RoZXJBY3Rpb25zOiAnTWFpcyBhw6fDtWVzJ1xyXG4gICAgICogIH07XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VMaXN0TGl0ZXJhbHMgPSB7XHJcbiAgICAgKiAgICBvdGhlckFjdGlvbnM6ICdBw6fDtWVzIGRhIHDDoWdpbmEnXHJcbiAgICAgKiAgfTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEUgcGFyYSBjYXJyZWdhciBhcyBsaXRlcmFpcyBjdXN0b21pemFkYXMsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGUuXHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiA8cG8tcGFnZS1saXN0XHJcbiAgICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XHJcbiAgICAgKiA8L3BvLXBhZ2UtbGlzdD5cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91ICpicm93c2VyKi5cclxuICAgICAqL1xyXG4gICAgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1BhZ2VMaXN0TGl0ZXJhbHMpO1xyXG4gICAgZ2V0IGxpdGVyYWxzKCk6IFBvUGFnZUxpc3RMaXRlcmFscztcclxuICAgIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpO1xyXG59XHJcbiJdfQ==