import { PoPopupAction } from './po-popup-action.interface';
/**
 * @description
 *
 * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
 *
 * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <po-popup [p-target]="target">
 *   <div p-popup-header-template>
 *     <div>
 *       Dev PO
 *     </div>
 *     <div>
 *       dev.po@po-ui.com.br
 *     </div>
 *   </div>
 * </po-popup >
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoPopupBaseComponent {
    private _actions;
    private _customPositions?;
    private _hideArrow;
    private _isCornerAlign;
    private _position?;
    private _target;
    arrowDirection: string;
    showPopup: boolean;
    protected oldTarget: any;
    protected param: any;
    protected parentRef: any;
    /** Lista de ações que serão exibidas no componente. */
    set actions(value: Array<PoPopupAction>);
    get actions(): Array<PoPopupAction>;
    /**
     * @optional
     *
     * @description
     *
     * Oculta a seta do componente *popup*.
     *
     * @default `false`
     */
    set hideArrow(value: boolean);
    get hideArrow(): boolean;
    set isCornerAlign(value: boolean);
    get isCornerAlign(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
     * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     *
     * @default `bottom-left`
     */
    set position(value: string);
    get position(): string;
    /**
     * @optional
     *
     * @description
     *
     * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
     * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
     *
     * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
     * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     */
    set customPositions(value: Array<string>);
    get customPositions(): Array<string>;
    /**
     * @description
     *
     * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
     * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
     *
     * ```
     * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
     *   Credit Actions
     * </span>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="icon">
     * </po-popup>
     * ```
     *
     * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
     *
     * ```
     * // component.html
     *
     * <po-button #poButton
     *   p-label="Open Popover"
     *   (p-click)="popup.toggle()">
     * </po-button>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="poButtonRef">
     * </po-popup>
     *
     * // component.ts
     *
     * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
     * ```
     */
    set target(value: any);
    get target(): any;
    protected clickoutListener: () => void;
    protected resizeListener: () => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPopupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPopupBaseComponent, never, never, { "actions": "p-actions"; "hideArrow": "p-hide-arrow"; "isCornerAlign": "p-is-corner-align"; "position": "p-position"; "customPositions": "p-custom-positions"; "target": "p-target"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcG9wdXAtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcG9wdXAtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9Qb3B1cEFjdGlvbiB9IGZyb20gJy4vcG8tcG9wdXAtYWN0aW9uLmludGVyZmFjZSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby1wb3B1cGAgw6kgdW0gY29udGFpbmVyIHBlcXVlbm8gcmVjb21lbmRhZG8gcGFyYSBhw6fDtWVzIGRlIG5hdmVnYcOnw6NvOlxyXG4gKiBFbGUgYWJyZSBzb2JyZXBvc3RvIGFvcyBvdXRyb3MgY29tcG9uZW50ZXMuXHJcbiAqXHJcbiAqIMOJIHBvc3PDrXZlbCBlc2NvbGhlciBhcyBwb3Npw6fDtWVzIGRvIGBwby1wb3B1cGAgZW0gcmVsYcOnw6NvIGFvIGNvbXBvbmVudGUgYWx2bywgcGFyYSBpc3RvIHZlamEgYSBwcm9wcmllZGFkZSBgcC1wb3NpdGlvbmAuXHJcbiAqXHJcbiAqIFRhbWLDqW0gw6kgcG9zc8OtdmVsIGluZm9ybWFyIHVtIF90ZW1wbGF0ZV8gX2hlYWRlcl8gcGFyYSBvIGBwby1wb3B1cGAsIHF1ZSBzZXLDoSBleGliaWRvIGFjaW1hIGRhcyBhw6fDtWVzLlxyXG4gKiBQYXJhIGZ1bmNpb25hciBjb3JyZXRhbWVudGUgw6kgcHJlY2lzbyBhZGljaW9uYXIgYSBwcm9wcmllZGFkZSBgcC1wb3B1cC1oZWFkZXItdGVtcGxhdGVgIG5vIGVsZW1lbnRvIHF1ZSBzZXJ2aXLDoSBkZSB0ZW1wbGF0ZSwgcG9yIGV4ZW1wbG86XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiA8cG8tcG9wdXAgW3AtdGFyZ2V0XT1cInRhcmdldFwiPlxyXG4gKiAgIDxkaXYgcC1wb3B1cC1oZWFkZXItdGVtcGxhdGU+XHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICBEZXYgUE9cclxuICogICAgIDwvZGl2PlxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgZGV2LnBvQHBvLXVpLmNvbS5iclxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgPC9kaXY+XHJcbiAqIDwvcG8tcG9wdXAgPlxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUG9wdXBCYXNlQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgX2FjdGlvbnM7XHJcbiAgICBwcml2YXRlIF9jdXN0b21Qb3NpdGlvbnM/O1xyXG4gICAgcHJpdmF0ZSBfaGlkZUFycm93O1xyXG4gICAgcHJpdmF0ZSBfaXNDb3JuZXJBbGlnbjtcclxuICAgIHByaXZhdGUgX3Bvc2l0aW9uPztcclxuICAgIHByaXZhdGUgX3RhcmdldDtcclxuICAgIGFycm93RGlyZWN0aW9uOiBzdHJpbmc7XHJcbiAgICBzaG93UG9wdXA6IGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgb2xkVGFyZ2V0OiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgcGFyYW06IGFueTtcclxuICAgIHByb3RlY3RlZCBwYXJlbnRSZWY6IGFueTtcclxuICAgIC8qKiBMaXN0YSBkZSBhw6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMgbm8gY29tcG9uZW50ZS4gKi9cclxuICAgIHNldCBhY3Rpb25zKHZhbHVlOiBBcnJheTxQb1BvcHVwQWN0aW9uPik7XHJcbiAgICBnZXQgYWN0aW9ucygpOiBBcnJheTxQb1BvcHVwQWN0aW9uPjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogT2N1bHRhIGEgc2V0YSBkbyBjb21wb25lbnRlICpwb3B1cCouXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBzZXQgaGlkZUFycm93KHZhbHVlOiBib29sZWFuKTtcclxuICAgIGdldCBoaWRlQXJyb3coKTogYm9vbGVhbjtcclxuICAgIHNldCBpc0Nvcm5lckFsaWduKHZhbHVlOiBib29sZWFuKTtcclxuICAgIGdldCBpc0Nvcm5lckFsaWduKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBhIHBvc2nDp8OjbyBpbmljaWFsIHF1ZSBvIGBwby1wb3B1cGAgYWJyaXLDoSBlbSByZWxhw6fDo28gYW8gY29tcG9uZW50ZSBhbHZvLiBTdWdlcmUtc2UgcXVlIHNlamFcclxuICAgICAqIHVzYWRhIGEgb3JpZW50YcOnw6NvIGBib3R0b20tbGVmdGAgKGFiYWl4byBlIGEgZXNxdWVyZGEpLCBwb3LDqW0gbyBtZXNtbyDDqSBmbGV4w612ZWwgZSBzZXLDoSByb3RhY2lvbmFkb1xyXG4gICAgICogYXV0b21hdGljYW1lbnRlIHBhcmEgc2UgYWRlcXVhciBhIHRlbGEsIGNhc28gbmVjZXNzw6FyaW8uXHJcbiAgICAgKlxyXG4gICAgICogPiBDYXNvIHNlamEgZGVmaW5pZG8gdW0gYHAtY3VzdG9tLXBvc2l0aW9uc2AgbyBjb21wb25lbnRlIGlyw6EgYWJyaXIgbmEgcG9zacOnw6NvIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIGBwLXBvc2l0aW9uYFxyXG4gICAgICogZSBjYXNvIG7Do28gY2FpYmEgbmEgcG9zacOnw6NvIGluaWNpYWwgZWxlIGlyw6Egcm90YWNpb25hciBzZWd1aW5kbyBhIG9yZGVtIGRlIHBvc2nDp8O1ZXMgZGVmaW5pZGFzIG5vIGBwLWN1c3RvbS1wb3NpdGlvbnNgLlxyXG4gICAgICpcclxuICAgICAqIFBvc2nDp8O1ZXMgdsOhbGlkYXM6XHJcbiAgICAgKiAtIGByaWdodGA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIG5vIGxhZG8gZGlyZWl0byBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGByaWdodC1ib3R0b21gOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBubyBsYWRvIGRpcmVpdG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgcmlnaHQtdG9wYDogUG9zaWNpb25hIG8gcG8tcG9wdXAgbm8gbGFkbyBkaXJlaXRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIGFiYWl4byBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBib3R0b20tbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIGFiYWl4byBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGJvdHRvbS1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIGFiYWl4byBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIG5vIGxhZG8gZXNxdWVyZG8gZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgbGVmdC10b3BgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBubyBsYWRvIGVzcXVlcmRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGxlZnQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tcG9wdXAgbm8gbGFkbyBlc3F1ZXJkbyBpbmZlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGB0b3BgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhY2ltYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGB0b3AtcmlnaHRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhY2ltYSBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgdG9wLWxlZnRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhY2ltYSBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgYm90dG9tLWxlZnRgXHJcbiAgICAgKi9cclxuICAgIHNldCBwb3NpdGlvbih2YWx1ZTogc3RyaW5nKTtcclxuICAgIGdldCBwb3NpdGlvbigpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBhcyBwb3Npw6fDtWVzIGUgYSBzZXF1w6puY2lhIHF1ZSBvIGBwby1wb3B1cGAgcG9kZXLDoSByb3RhY2lvbmFyLiBBIHNlcXXDqm5jaWEgc2Vyw6EgZGVmaW5pZGEgcGVsYSBvcmRlbSBwYXNzYWRhXHJcbiAgICAgKiBubyAqYXJyYXkqLiBDYXNvIG7Do28gc2VqYSBkZWZpbmlkbywgbyBgcG8tcG9wdXBgIGlyw6Egcm90YWNpb25hciBlbSB0b2RhcyBhcyBwb3Npw6fDtWVzIHbDoWxpZGFzLlxyXG4gICAgICpcclxuICAgICAqID4gTyBjb21wb25lbnRlIHNlbXByZSBpcsOhIGFicmlyIG5hIHBvc2nDp8OjbyBkZWZpbmlkYSBubyBgcC1wb3NpdGlvbmAgZSBjYXNvIG7Do28gY2FpYmEgbmEgcG9zacOnw6NvIGRlZmluaWRhIG8gbWVzbW9cclxuICAgICAqIGlyw6Egcm90YWNpb25hciBzZWd1aW5kbyBhIG9yZGVtIGRlZmluaWRhIHBlbG8gYHAtY3VzdG9tLXBvc2l0aW9uYC5cclxuICAgICAqXHJcbiAgICAgKiBQb3Npw6fDtWVzIHbDoWxpZGFzOlxyXG4gICAgICogLSBgcmlnaHRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBubyBsYWRvIGRpcmVpdG8gZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgcmlnaHQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tcG9wdXAgbm8gbGFkbyBkaXJlaXRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHJpZ2h0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIG5vIGxhZG8gZGlyZWl0byBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBib3R0b21gOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhYmFpeG8gZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgYm90dG9tLWxlZnRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhYmFpeG8gZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBib3R0b20tcmlnaHRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBhYmFpeG8gZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGxlZnRgOiBQb3NpY2lvbmEgbyBwby1wb3B1cCBubyBsYWRvIGVzcXVlcmRvIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGxlZnQtdG9wYDogUG9zaWNpb25hIG8gcG8tcG9wdXAgbm8gbGFkbyBlc3F1ZXJkbyBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBsZWZ0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXBvcHVwIG5vIGxhZG8gZXNxdWVyZG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgdG9wYDogUG9zaWNpb25hIG8gcG8tcG9wdXAgYWNpbWEgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgdG9wLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tcG9wdXAgYWNpbWEgZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHRvcC1sZWZ0YDogUG9zaWNpb25hIG8gcG8tcG9wdXAgYWNpbWEgZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKi9cclxuICAgIHNldCBjdXN0b21Qb3NpdGlvbnModmFsdWU6IEFycmF5PHN0cmluZz4pO1xyXG4gICAgZ2V0IGN1c3RvbVBvc2l0aW9ucygpOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBQYXJhIHV0aWxpemFyIG8gYHBvLXBvcHVwYCBkZXZlLXNlIGNvbG9jYXIgdW1hIHZhcmnDoXZlbCBsb2NhbCBubyBjb21wb25lbnRlIHF1ZSBkaXNwYXJhcsOhIG8gZXZlbnRvXHJcbiAgICAgKiBkZSBhYmVydHVyYSBubyBtZXNtbyBlIGNvbSBpc3NvLCBpbnZvY2Fyw6EgYSBmdW7Dp8OjbyBgdG9nZ2xlYCwgcG9yIGV4ZW1wbG86XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiA8c3BhbiAjaWNvbiBjbGFzcz1cInBvLWljb24gcG8taWNvbi1jcmVkaXQtcGF5bWVudFwiIChjbGljayk9XCJwb3B1cC50b2dnbGUoKVwiPlxyXG4gICAgICogICBDcmVkaXQgQWN0aW9uc1xyXG4gICAgICogPC9zcGFuPlxyXG4gICAgICpcclxuICAgICAqIDxwby1wb3B1cCAjcG9wdXBcclxuICAgICAqICAgW3AtYWN0aW9uc109XCJhY3Rpb25zXCJcclxuICAgICAqICAgW3AtdGFyZ2V0XT1cImljb25cIj5cclxuICAgICAqIDwvcG8tcG9wdXA+XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBDYXNvIG8gZWxlbWVudG8gYWx2byBmb3IgdW0gY29tcG9uZW50ZSwgc2Vyw6EgcHJlY2lzbyBvYnRlciBvIGBFbGVtZW50UmVmYCBkbyBtZXNtbyBlIHBhc3PDoS1sbyDDoCBwcm9wcmllZGFkZSwgcG9yIGV4ZW1wbG86XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiAvLyBjb21wb25lbnQuaHRtbFxyXG4gICAgICpcclxuICAgICAqIDxwby1idXR0b24gI3BvQnV0dG9uXHJcbiAgICAgKiAgIHAtbGFiZWw9XCJPcGVuIFBvcG92ZXJcIlxyXG4gICAgICogICAocC1jbGljayk9XCJwb3B1cC50b2dnbGUoKVwiPlxyXG4gICAgICogPC9wby1idXR0b24+XHJcbiAgICAgKlxyXG4gICAgICogPHBvLXBvcHVwICNwb3B1cFxyXG4gICAgICogICBbcC1hY3Rpb25zXT1cImFjdGlvbnNcIlxyXG4gICAgICogICBbcC10YXJnZXRdPVwicG9CdXR0b25SZWZcIj5cclxuICAgICAqIDwvcG8tcG9wdXA+XHJcbiAgICAgKlxyXG4gICAgICogLy8gY29tcG9uZW50LnRzXHJcbiAgICAgKlxyXG4gICAgICogQFZpZXdDaGlsZCgncG9CdXR0b24nLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgcG9CdXR0b25SZWY6IEVsZW1lbnRSZWY7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc2V0IHRhcmdldCh2YWx1ZTogYW55KTtcclxuICAgIGdldCB0YXJnZXQoKTogYW55O1xyXG4gICAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbn1cclxuIl19