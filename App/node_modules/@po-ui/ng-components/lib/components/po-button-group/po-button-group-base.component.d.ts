import { PoButtonGroupItem } from './po-button-group-item.interface';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoButtonGroupBaseComponent {
    private _small?;
    private _toggle?;
    /** Lista de botões. */
    buttons: Array<PoButtonGroupItem>;
    /**
     * @optional
     *
     * @description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value: boolean);
    get small(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value: string);
    get toggle(): string;
    onButtonClick(buttonClicked: PoButtonGroupItem, buttonIndex: number): void;
    private checkSelecteds;
    private deselectAllButtons;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoButtonGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoButtonGroupBaseComponent, never, never, { "buttons": "p-buttons"; "small": "p-small"; "toggle": "p-toggle"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWJ1dHRvbi1ncm91cC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vcG8tYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBPIGNvbXBvbmVudGUgYHBvLWJ1dHRvbi1ncm91cGAgw6kgZm9ybWFkbyBwb3IgdW0gY29uanVudG8gZGUgYm90w7VlcyBkaXN0cmlidcOtZG9zIGhvcml6b250YWxtZW50ZS5cclxuICogQ2FkYSBib3TDo28gZG8gZ3J1cG8gw6kgdHJhdGFkbyBkZSBmb3JtYSBpbmRpdmlkdWFsLCByZWNlYmVuZG8gYXNzaW0gdW0gcsOzdHVsbywgdW1hIGHDp8OjbyBiZW0gY29tbyBzZSBkZXZlcsOhIGVzdGFyIGhhYmlsaXRhZG8gb3UgbsOjby5cclxuICpcclxuICogRXN0ZSBjb21wb25lbnRlIGFsw6ltIGRlIHNlcnZpciBjb21vIHVtIGFncnVwYWRvciBkZSBib3TDtWVzIHBhcmEgYcOnw6NvLCB0YW1iw6ltIHBlcm1pdGUgcXVlIHNlamFtIHV0aWxpemFkb3NcclxuICogcGFyYSBzZWxlw6fDtWVzIG11bHRpcGxhcyBlIMO6bmljYXMuXHJcbiAqXHJcbiAqIE8gZ3J1cG8gZGUgYm90w7VlcyBkZXZlIHNlciB1dGlsaXphZG8gcGFyYSBvcmdhbml6YXIgYXMgYcOnw7VlcyBkZSBtYW5laXJhIHVuaWZvcm1lIGUgdHJhbnNtaXRpciBhIGlkZWlhIGRlIHF1ZSBvcyBib3TDtWVzIGZhemVtXHJcbiAqIHBhcnRlIGRlIHVtIG1lc21vIGNvbnRleHRvLlxyXG4gKlxyXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXHJcbiAqXHJcbiAqIC0gRXZpdGUgdXNhciBvIGBwby1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHBvLWJ1dHRvbmAuXHJcbiAqIC0gUHJvY3VyZSB1dGlsaXphciBubyBtw6F4aW1vIDMgYcOnw7VlcyBwYXJhIGNhZGEgYHBvLWJ1dHRvbi1ncm91cGAuXHJcbiAqXHJcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGBwby1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGBwby1idXR0b24tZ3JvdXBgLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9CdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfc21hbGw/O1xyXG4gICAgcHJpdmF0ZSBfdG9nZ2xlPztcclxuICAgIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xyXG4gICAgYnV0dG9uczogQXJyYXk8UG9CdXR0b25Hcm91cEl0ZW0+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBzbWFsbCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgc21hbGwoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIG8gbW9kbyBkZSBzZWxlw6fDo28gZGUgYm90w7Vlcy5cclxuICAgICAqXHJcbiAgICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlYC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgbm9uZWBcclxuICAgICAqL1xyXG4gICAgc2V0IHRvZ2dsZSh2YWx1ZTogc3RyaW5nKTtcclxuICAgIGdldCB0b2dnbGUoKTogc3RyaW5nO1xyXG4gICAgb25CdXR0b25DbGljayhidXR0b25DbGlja2VkOiBQb0J1dHRvbkdyb3VwSXRlbSwgYnV0dG9uSW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNoZWNrU2VsZWN0ZWRzO1xyXG4gICAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnM7XHJcbn1cclxuIl19