import { ElementRef } from '@angular/core';
/**
 * @description
 *
 * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**po-tooltip**](https://po-ui.io/documentation/po-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://po-ui.io/documentation/po-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoPopoverBaseComponent {
    isHidden: boolean;
    private _hideArrow;
    private _position?;
    private _trigger?;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a seta do componente *popover*.
     *
     * @default `false`
     */
    set hideArrow(value: boolean);
    get hideArrow(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popover no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popover acima do componente alvo.
     * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
     *
     *
     * @default right
     */
    set position(value: string);
    get position(): string;
    /**
     * @description
     *
     * ElementRef do componente de origem responsável por abrir o popover.
     * Para utilizar o po-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <po-button
     *   p-label="Open Popover">
     * </po-button>
     *
     * <po-popover
     *   [p-origin]="poButton"
     *   [p-title]="PO Popover">
     * </po-popover>
     * ```
     *
     * Também deve-se criar um ViewChild para cada popover, passando como referência o elemento do
     * HTML que irá disparar o evento. Exemplo:
     *
     * ```
     * @ViewChild(PoButtonComponent, {read: ElementRef}) poButton: PoButtonComponent;
     * ```
     */
    target: ElementRef;
    /** Título do popover. */
    title?: string;
    /**
     * @description
     *
     * Define o evento que abrirá o po-popover.
     *
     * Valores válidos:
     *  - `click`: Abre ao clicar no componente alvo.
     *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
     *
     * @default click
     * @optional
     */
    set trigger(value: string);
    get trigger(): string;
    protected clickoutListener: () => void;
    protected mouseEnterListener: () => void;
    protected mouseLeaveListener: () => void;
    protected resizeListener: () => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPopoverBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPopoverBaseComponent, never, never, { "hideArrow": "p-hide-arrow"; "position": "p-position"; "trigger": "p-trigger"; "target": "p-target"; "title": "p-title"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcG9wb3Zlci1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1wb3BvdmVyLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tcG9wb3ZlcmAgw6kgdW0gY29udGFpbmVyIHBlcXVlbm8gcmVjb21lbmRhZG8gcGFyYSBpbmNsdWlyIHbDoXJpb3MgdGlwb3MgZGUgY29udGXDumRvIGNvbW86XHJcbiAqIGdyw6FmaWNvcywgdGV4dG9zLCBpbWFnZW5zIGUgaW5wdXRzLiBFbGUgYWJyZSBzb2JyZXBvc3RvIGFvcyBvdXRyb3MgY29tcG9uZW50ZXMuXHJcbiAqXHJcbiAqIFBhcmEgbW9zdHJhciBhcGVuYXMgcGVxdWVub3MgdGV4dG9zIHJlY29tZW5kYS1zZSBvIHVzbyBkYSBkaXJldGl2YVxyXG4gKiBbKipwby10b29sdGlwKipdKGh0dHBzOi8vcG8tdWkuaW8vZG9jdW1lbnRhdGlvbi9wby10b29sdGlwP3ZpZXc9ZG9jKS5cclxuICpcclxuICogUGFyYSBjb250ZcO6ZG9zIG1haW9yZXMgcmVjb21lbmRhLXNlIG8gdXNvIGRvIFsqKnBvLW1vZGFsKipdKGh0dHBzOi8vcG8tdWkuaW8vZG9jdW1lbnRhdGlvbi9wby1tb2RhbD92aWV3PWRvYykuXHJcbiAqXHJcbiAqIEVsZSBjb250w6ltIHVtIHTDrXR1bG8gZSB0YW1iw6ltIMOpIHBvc3PDrXZlbCBlc2NvbGhlciBhcyBwb3Npw6fDtWVzIGRvIHBvcG92ZXIgZW0gcmVsYcOnw6NvIGFvIGNvbXBvbmVudGUgcGFpLFxyXG4gKiBhcyBwb3Npw6fDtWVzIHBlcm1pdGlkYXMgc8OjbzogYHJpZ2h0YCwgYHJpZ2h0LXRvcGAsIGByaWdodC1ib3R0b21gLCBgdG9wYCwgYHRvcC1sZWZ0YCwgYHRvcC1yaWdodGAsXHJcbiAqIGBsZWZ0YCwgYGxlZnQtdG9wYCwgYGxlZnQtYm90dG9tYCwgYGJvdHRvbWAsIGBib3R0b20tbGVmdGAgZSBgYm90dG9tLXJpZ2h0YC5cclxuICpcclxuICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgZXNjb2xoZXIgZW50cmUgb3MgZG9pcyBldmVudG9zIHF1ZSBwb2RlbSBhYnJpciBvICpwb3BvdmVyKi5cclxuICogT3MgZXZlbnRvcyBwZXJtaXRpZG9zIHPDo286IGBjbGlja2AgZSBgaG92ZXJgLlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9Qb3BvdmVyQmFzZUNvbXBvbmVudCB7XHJcbiAgICBpc0hpZGRlbjogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX2hpZGVBcnJvdztcclxuICAgIHByaXZhdGUgX3Bvc2l0aW9uPztcclxuICAgIHByaXZhdGUgX3RyaWdnZXI/O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZXNhYmlsaXRhIGEgc2V0YSBkbyBjb21wb25lbnRlICpwb3BvdmVyKi5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBoaWRlQXJyb3codmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGhpZGVBcnJvdygpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgYSBwb3Npw6fDo28gcXVlIG8gcG8tcG9wb3ZlciBhYnJpcsOhIGVtIHJlbGHDp8OjbyBhbyBjb21wb25lbnRlIGFsdm8uIFN1Z2VyZS1zZSBxdWUgc2VqYVxyXG4gICAgICogdXNhZGEgYSBvcmllbnRhw6fDo28gXCJyaWdodFwiIChkaXJlaXRhKSwgcG9yw6ltIG8gbWVzbW8gw6kgZmxleMOtdmVsIGUgc2Vyw6Egcm90YWNpb25hZG9cclxuICAgICAqIGF1dG9tYXRpY2FtZW50ZSBwYXJhIHNlIGFkZXF1YXIgYSB0ZWxhLCBjYXNvIG5lY2Vzc8OhcmlvLlxyXG4gICAgICpcclxuICAgICAqIFBvc2nDp8O1ZXMgdsOhbGlkYXM6XHJcbiAgICAgKiAtIGByaWdodGA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBkaXJlaXRvIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHJpZ2h0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBkaXJlaXRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHJpZ2h0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBkaXJlaXRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgYWJhaXhvIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYGJvdHRvbS1sZWZ0YDogUG9zaWNpb25hIG8gcG8tcG9wb3ZlciBhYmFpeG8gZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBib3R0b20tcmlnaHRgOiBQb3NpY2lvbmEgbyBwby1wb3BvdmVyIGFiYWl4byBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogLSBgbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBlc3F1ZXJkbyBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBsZWZ0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBlc3F1ZXJkbyBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGBsZWZ0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgbm8gbGFkbyBlc3F1ZXJkbyBpbmZlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXHJcbiAgICAgKiAtIGB0b3BgOiBQb3NpY2lvbmEgbyBwby1wb3BvdmVyIGFjaW1hIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHRvcC1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXBvcG92ZXIgYWNpbWEgZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqIC0gYHRvcC1sZWZ0YDogUG9zaWNpb25hIG8gcG8tcG9wb3ZlciBhY2ltYSBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgcmlnaHRcclxuICAgICAqL1xyXG4gICAgc2V0IHBvc2l0aW9uKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IHBvc2l0aW9uKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRWxlbWVudFJlZiBkbyBjb21wb25lbnRlIGRlIG9yaWdlbSByZXNwb25zw6F2ZWwgcG9yIGFicmlyIG8gcG9wb3Zlci5cclxuICAgICAqIFBhcmEgdXRpbGl6YXIgbyBwby1wb3BvdmVyIGRldmUtc2UgY29sb2NhciB1bWEgdmFyacOhdmVsIG5vIGNvbXBvbmVudGUgcXVlIHZhaSBkaXNwYXJhciBvIGV2ZW50b1xyXG4gICAgICogZGUgYWJlcnR1cmEsIGV4ZW1wbG86XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiA8cG8tYnV0dG9uXHJcbiAgICAgKiAgIHAtbGFiZWw9XCJPcGVuIFBvcG92ZXJcIj5cclxuICAgICAqIDwvcG8tYnV0dG9uPlxyXG4gICAgICpcclxuICAgICAqIDxwby1wb3BvdmVyXHJcbiAgICAgKiAgIFtwLW9yaWdpbl09XCJwb0J1dHRvblwiXHJcbiAgICAgKiAgIFtwLXRpdGxlXT1cIlBPIFBvcG92ZXJcIj5cclxuICAgICAqIDwvcG8tcG9wb3Zlcj5cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIFRhbWLDqW0gZGV2ZS1zZSBjcmlhciB1bSBWaWV3Q2hpbGQgcGFyYSBjYWRhIHBvcG92ZXIsIHBhc3NhbmRvIGNvbW8gcmVmZXLDqm5jaWEgbyBlbGVtZW50byBkb1xyXG4gICAgICogSFRNTCBxdWUgaXLDoSBkaXNwYXJhciBvIGV2ZW50by4gRXhlbXBsbzpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBWaWV3Q2hpbGQoUG9CdXR0b25Db21wb25lbnQsIHtyZWFkOiBFbGVtZW50UmVmfSkgcG9CdXR0b246IFBvQnV0dG9uQ29tcG9uZW50O1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRhcmdldDogRWxlbWVudFJlZjtcclxuICAgIC8qKiBUw610dWxvIGRvIHBvcG92ZXIuICovXHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIG8gZXZlbnRvIHF1ZSBhYnJpcsOhIG8gcG8tcG9wb3Zlci5cclxuICAgICAqXHJcbiAgICAgKiBWYWxvcmVzIHbDoWxpZG9zOlxyXG4gICAgICogIC0gYGNsaWNrYDogQWJyZSBhbyBjbGljYXIgbm8gY29tcG9uZW50ZSBhbHZvLlxyXG4gICAgICogIC0gYGhvdmVyYDogQWJyZSBhbyBwYXNzYXIgbyBtb3VzZSBzb2JyZSBvIGNvbXBvbmVudGUgYWx2by5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBjbGlja1xyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKi9cclxuICAgIHNldCB0cmlnZ2VyKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IHRyaWdnZXIoKTogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgbW91c2VFbnRlckxpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIG1vdXNlTGVhdmVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuICAgIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxufVxyXG4iXX0=