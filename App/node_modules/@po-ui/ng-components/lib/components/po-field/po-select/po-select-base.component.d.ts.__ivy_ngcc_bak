import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { PoSelectOption } from './po-select-option.interface';
/**
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 */
export declare abstract class PoSelectBaseComponent implements ControlValueAccessor, Validator {
    element: ElementRef;
    private _disabled?;
    private _options;
    private _readonly;
    private _required?;
    private onValidatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     * > Caso mais de um elemento seja configurado com essa propriedade,
     * o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Adiciona uma label no componente. */
    label?: string;
    /** Nome do componente. */
    name: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada. */
    placeholder?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
     * Caso esta lista estiver vazia, o model será undefined.
     */
    set options(options: Array<PoSelectOption>);
    get options(): Array<PoSelectOption>;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: string | boolean);
    get disabled(): string | boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente para leitura.
     *
     * @default `false`
     */
    set readonly(value: boolean);
    get readonly(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: string | boolean);
    get required(): string | boolean;
    changeDetector: ChangeDetectorRef;
    onModelChange: any;
    onModelTouched: any;
    readyToValidation: boolean;
    protected clickoutListener: () => void;
    constructor(element: ElementRef, changeDetector: ChangeDetectorRef);
    callModelChange(value: any): any;
    onChange(value: any): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: any): void;
    private validateModel;
    abstract onUpdateOptions(): void;
    abstract updateModel(selectOption: PoSelectOption): void;
    abstract writeValue(value: any): void;
}
