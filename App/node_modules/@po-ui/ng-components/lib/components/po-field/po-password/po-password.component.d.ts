import { AbstractControl } from '@angular/forms';
import { ElementRef } from '@angular/core';
import { PoInputGeneric } from '../po-input-generic/po-input-generic';
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * @example
 *
 * <example name="po-password-basic" title="PO Password Basic">
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-labs" title="PO Password Labs">
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-reset" title="PO Password - Reset">
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoPasswordComponent extends PoInputGeneric {
    private _hidePasswordPeek?;
    type: string;
    visiblePassword: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Permite esconder a função de espiar a senha digitada.
     *
     * @default `false`
     */
    set hidePasswordPeek(value: boolean);
    get hidePasswordPeek(): boolean;
    constructor(el: ElementRef);
    extraValidation(c: AbstractControl): {
        [key: string]: any;
    };
    showPassword(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPasswordComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoPasswordComponent, "po-password", never, { "hidePasswordPeek": "p-hide-password-peek"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFzc3dvcmQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXBhc3N3b3JkLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9JbnB1dEdlbmVyaWMgfSBmcm9tICcuLi9wby1pbnB1dC1nZW5lcmljL3BvLWlucHV0LWdlbmVyaWMnO1xyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvSW5wdXRCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBPIHBvLXBhc3N3b3JkIMOpIHVtIGlucHV0IGVzcGVjw61maWNvIHBhcmEgc2VuaGFzLiBKw6EgcG9zc3VpIHRpcG8sIGVzdGlsbyBlIMOtY29uZSBwcmVkZWZpbmlkb3MuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1wYXNzd29yZC1iYXNpY1wiIHRpdGxlPVwiUE8gUGFzc3dvcmQgQmFzaWNcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXBhc3N3b3JkLWJhc2ljL3NhbXBsZS1wby1wYXNzd29yZC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wYXNzd29yZC1iYXNpYy9zYW1wbGUtcG8tcGFzc3dvcmQtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tcGFzc3dvcmQtbGFic1wiIHRpdGxlPVwiUE8gUGFzc3dvcmQgTGFic1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcGFzc3dvcmQtbGFicy9zYW1wbGUtcG8tcGFzc3dvcmQtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wYXNzd29yZC1sYWJzL3NhbXBsZS1wby1wYXNzd29yZC1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXBhc3N3b3JkLXJlc2V0XCIgdGl0bGU9XCJQTyBQYXNzd29yZCAtIFJlc2V0XCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wYXNzd29yZC1yZXNldC9zYW1wbGUtcG8tcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcGFzc3dvcmQtcmVzZXQvc2FtcGxlLXBvLXBhc3N3b3JkLXJlc2V0LmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUGFzc3dvcmRDb21wb25lbnQgZXh0ZW5kcyBQb0lucHV0R2VuZXJpYyB7XHJcbiAgICBwcml2YXRlIF9oaWRlUGFzc3dvcmRQZWVrPztcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIHZpc2libGVQYXNzd29yZDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogUGVybWl0ZSBlc2NvbmRlciBhIGZ1bsOnw6NvIGRlIGVzcGlhciBhIHNlbmhhIGRpZ2l0YWRhLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgc2V0IGhpZGVQYXNzd29yZFBlZWsodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGhpZGVQYXNzd29yZFBlZWsoKTogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKTtcclxuICAgIGV4dHJhVmFsaWRhdGlvbihjOiBBYnN0cmFjdENvbnRyb2wpOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xyXG4gICAgfTtcclxuICAgIHNob3dQYXNzd29yZCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==