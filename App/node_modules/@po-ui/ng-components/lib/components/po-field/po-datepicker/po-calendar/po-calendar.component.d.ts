import { ElementRef, EventEmitter } from '@angular/core';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCalendarComponent {
    private poCalendarService;
    private poCalendarLangService;
    private _dateEnd;
    private _dateStart;
    private _locale;
    private _selectedDate?;
    currentYear: number;
    dayVisible: boolean;
    displayDays: Array<number>;
    displayDecade: Array<number>;
    displayFinalDecade: number;
    displayMonth: any;
    displayMonthNumber: number;
    displayMonths: Array<any>;
    displayStartDecade: number;
    displayWeedDays: Array<any>;
    displayYear: number;
    monthVisible: boolean;
    overlayInvisible: boolean;
    visible: boolean;
    yearVisible: boolean;
    private currentMonthNumber;
    private isMobile;
    private lastDisplay;
    private today;
    elDays: ElementRef;
    elMonths: ElementRef;
    elYears: ElementRef;
    /**
     * @optional
     *
     * @description
     *
     * Data máxima possível de ser selecionada no calendário.
     */
    set dateEnd(val: Date);
    get dateEnd(): Date;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    set locale(locale: string);
    get locale(): string;
    /**
     * @optional
     *
     * @description
     *
     * Data selecionada no calendário.
     */
    set selectedDate(selectedDate: Date);
    get selectedDate(): Date;
    /**
     * @optional
     *
     * @description
     *
     * Data mínima possível de ser selecionada no calendário.
     */
    set dateStart(val: Date);
    get dateStart(): Date;
    selectedDateChange: EventEmitter<Date>;
    submit: EventEmitter<Date>;
    constructor(poCalendarService: PoCalendarService, poCalendarLangService: PoCalendarLangService);
    close(): void;
    getArrayDecade(year: any): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "po-calendar-box-background-selected" | "po-calendar-box-background";
    getDayBackgroundColor(date: Date): "" | "po-calendar-box-background-selected" | "po-calendar-box-background" | "po-calendar-box-background-today" | "po-calendar-box-background-disabled";
    getDayForegroundColor(date: Date): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground" | "po-calendar-box-foreground-today" | "po-calendar-box-foreground-disabled";
    getForegroundColor(displayValue: number, propertyValue: number): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground";
    getWordMonth(): any;
    getWordYear(): any;
    init(): void;
    initializeLanguage(): void;
    onNextMonth(): void;
    onPrevMonth(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    selectDay(): void;
    selectMonth(): void;
    selectYear(): void;
    setMobileVisualization(): "po-calendar" | "po-calendar po-calendar-mobile";
    updateYear(value: number): void;
    private addAllYearsInDecade;
    private equalsDate;
    private updateDate;
    private updateDecade;
    private updateDisplay;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoCalendarComponent, "po-calendar", never, { "dateEnd": "p-date-end"; "locale": "p-locale"; "selectedDate": "p-selected-date"; "dateStart": "p-date-start"; }, { "selectedDateChange": "p-selected-dateChange"; "submit": "p-submit"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQ2FsZW5kYXJMYW5nU2VydmljZSB9IGZyb20gJy4vcG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9DYWxlbmRhclNlcnZpY2UgfSBmcm9tICcuL3BvLWNhbGVuZGFyLnNlcnZpY2UnO1xyXG4vKipcclxuICogQGRvY3NQcml2YXRlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBDb21wb25lbnRlIGRlIGNhbGVuZMOhcmlvIGRlIHVzbyBpbnRlcm5vXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0NhbGVuZGFyQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgcG9DYWxlbmRhclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHBvQ2FsZW5kYXJMYW5nU2VydmljZTtcclxuICAgIHByaXZhdGUgX2RhdGVFbmQ7XHJcbiAgICBwcml2YXRlIF9kYXRlU3RhcnQ7XHJcbiAgICBwcml2YXRlIF9sb2NhbGU7XHJcbiAgICBwcml2YXRlIF9zZWxlY3RlZERhdGU/O1xyXG4gICAgY3VycmVudFllYXI6IG51bWJlcjtcclxuICAgIGRheVZpc2libGU6IGJvb2xlYW47XHJcbiAgICBkaXNwbGF5RGF5czogQXJyYXk8bnVtYmVyPjtcclxuICAgIGRpc3BsYXlEZWNhZGU6IEFycmF5PG51bWJlcj47XHJcbiAgICBkaXNwbGF5RmluYWxEZWNhZGU6IG51bWJlcjtcclxuICAgIGRpc3BsYXlNb250aDogYW55O1xyXG4gICAgZGlzcGxheU1vbnRoTnVtYmVyOiBudW1iZXI7XHJcbiAgICBkaXNwbGF5TW9udGhzOiBBcnJheTxhbnk+O1xyXG4gICAgZGlzcGxheVN0YXJ0RGVjYWRlOiBudW1iZXI7XHJcbiAgICBkaXNwbGF5V2VlZERheXM6IEFycmF5PGFueT47XHJcbiAgICBkaXNwbGF5WWVhcjogbnVtYmVyO1xyXG4gICAgbW9udGhWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgb3ZlcmxheUludmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICB5ZWFyVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgY3VycmVudE1vbnRoTnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBpc01vYmlsZTtcclxuICAgIHByaXZhdGUgbGFzdERpc3BsYXk7XHJcbiAgICBwcml2YXRlIHRvZGF5O1xyXG4gICAgZWxEYXlzOiBFbGVtZW50UmVmO1xyXG4gICAgZWxNb250aHM6IEVsZW1lbnRSZWY7XHJcbiAgICBlbFllYXJzOiBFbGVtZW50UmVmO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEYXRhIG3DoXhpbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cclxuICAgICAqL1xyXG4gICAgc2V0IGRhdGVFbmQodmFsOiBEYXRlKTtcclxuICAgIGdldCBkYXRlRW5kKCk6IERhdGU7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIElkaW9tYSBkbyBjYWxlbmTDoXJpby5cclxuICAgICAqXHJcbiAgICAgKiBWYWxvcmVzIHbDoWxpZG9zOlxyXG4gICAgICogIC0gYHB0YFxyXG4gICAgICogIC0gYGVuYFxyXG4gICAgICogIC0gYGVzYFxyXG4gICAgICovXHJcbiAgICBzZXQgbG9jYWxlKGxvY2FsZTogc3RyaW5nKTtcclxuICAgIGdldCBsb2NhbGUoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEYXRhIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxyXG4gICAgICovXHJcbiAgICBzZXQgc2VsZWN0ZWREYXRlKHNlbGVjdGVkRGF0ZTogRGF0ZSk7XHJcbiAgICBnZXQgc2VsZWN0ZWREYXRlKCk6IERhdGU7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERhdGEgbcOtbmltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxyXG4gICAgICovXHJcbiAgICBzZXQgZGF0ZVN0YXJ0KHZhbDogRGF0ZSk7XHJcbiAgICBnZXQgZGF0ZVN0YXJ0KCk6IERhdGU7XHJcbiAgICBzZWxlY3RlZERhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcclxuICAgIHN1Ym1pdDogRXZlbnRFbWl0dGVyPERhdGU+O1xyXG4gICAgY29uc3RydWN0b3IocG9DYWxlbmRhclNlcnZpY2U6IFBvQ2FsZW5kYXJTZXJ2aWNlLCBwb0NhbGVuZGFyTGFuZ1NlcnZpY2U6IFBvQ2FsZW5kYXJMYW5nU2VydmljZSk7XHJcbiAgICBjbG9zZSgpOiB2b2lkO1xyXG4gICAgZ2V0QXJyYXlEZWNhZGUoeWVhcjogYW55KTogdm9pZDtcclxuICAgIGdldEJhY2tncm91bmRDb2xvcihkaXNwbGF5VmFsdWU6IG51bWJlciwgcHJvcGVydHlWYWx1ZTogbnVtYmVyKTogXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZFwiIHwgXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZFwiO1xyXG4gICAgZ2V0RGF5QmFja2dyb3VuZENvbG9yKGRhdGU6IERhdGUpOiBcIlwiIHwgXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZFwiIHwgXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZFwiIHwgXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC10b2RheVwiIHwgXCJwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1kaXNhYmxlZFwiO1xyXG4gICAgZ2V0RGF5Rm9yZWdyb3VuZENvbG9yKGRhdGU6IERhdGUpOiBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkXCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kXCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXRvZGF5XCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLWRpc2FibGVkXCI7XHJcbiAgICBnZXRGb3JlZ3JvdW5kQ29sb3IoZGlzcGxheVZhbHVlOiBudW1iZXIsIHByb3BlcnR5VmFsdWU6IG51bWJlcik6IFwicG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQtc2VsZWN0ZWRcIiB8IFwicG8tY2FsZW5kYXItYm94LWZvcmVncm91bmRcIjtcclxuICAgIGdldFdvcmRNb250aCgpOiBhbnk7XHJcbiAgICBnZXRXb3JkWWVhcigpOiBhbnk7XHJcbiAgICBpbml0KCk6IHZvaWQ7XHJcbiAgICBpbml0aWFsaXplTGFuZ3VhZ2UoKTogdm9pZDtcclxuICAgIG9uTmV4dE1vbnRoKCk6IHZvaWQ7XHJcbiAgICBvblByZXZNb250aCgpOiB2b2lkO1xyXG4gICAgb25TZWxlY3REYXRlKGRhdGU6IERhdGUpOiB2b2lkO1xyXG4gICAgb25TZWxlY3RNb250aCh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgb25TZWxlY3RZZWFyKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBzZWxlY3REYXkoKTogdm9pZDtcclxuICAgIHNlbGVjdE1vbnRoKCk6IHZvaWQ7XHJcbiAgICBzZWxlY3RZZWFyKCk6IHZvaWQ7XHJcbiAgICBzZXRNb2JpbGVWaXN1YWxpemF0aW9uKCk6IFwicG8tY2FsZW5kYXJcIiB8IFwicG8tY2FsZW5kYXIgcG8tY2FsZW5kYXItbW9iaWxlXCI7XHJcbiAgICB1cGRhdGVZZWFyKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBhZGRBbGxZZWFyc0luRGVjYWRlO1xyXG4gICAgcHJpdmF0ZSBlcXVhbHNEYXRlO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRlO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVEZWNhZGU7XHJcbiAgICBwcml2YXRlIHVwZGF0ZURpc3BsYXk7XHJcbn1cclxuIl19