import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoMultiselectBaseComponent } from './po-multiselect-base.component';
/**
 * @docsExtends PoMultiselectBaseComponent
 *
 * @example
 *
 * <example name="po-multiselect-basic" title="PO Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="PO Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoMultiselectComponent extends PoMultiselectBaseComponent implements AfterViewInit, DoCheck, OnDestroy {
    renderer: Renderer2;
    private changeDetector;
    private controlPosition;
    private el;
    dropdownElement: ElementRef;
    dropdown: any;
    disclaimerContainerElement: ElementRef;
    iconElement: ElementRef;
    inputElement: ElementRef;
    disclaimerOffset: number;
    dropdownIcon: string;
    dropdownOpen: boolean;
    initialized: boolean;
    positionDisclaimerExtra: any;
    timeoutResize: any;
    visibleElement: boolean;
    private isCalculateVisibleItems;
    constructor(renderer: Renderer2, changeDetector: ChangeDetectorRef, controlPosition: PoControlPositionService, el: ElementRef);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    focus(): void;
    getInputWidth(): number;
    getDisclaimersWidth(): any[];
    calculateVisibleItems(): void;
    updateVisibleItems(): void;
    debounceResize(): void;
    onKeyDown(event?: any): void;
    toggleDropdownVisibility(): void;
    openDropdown(toOpen: any): void;
    controlDropdownVisibility(toOpen: boolean): void;
    scrollToSelectedOptions(): void;
    setVisibleOptionsDropdown(options: any): void;
    changeSearch(event: any): void;
    getPlaceholder(): string;
    closeDisclaimer(value: any): void;
    wasClickedOnToggle(event: MouseEvent): void;
    private adjustContainerPosition;
    private close;
    private initializeListeners;
    private onScroll;
    private open;
    private removeListeners;
    private setPositionDropdown;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoMultiselectComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoMultiselectComponent, "po-multiselect", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLW11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQ29udHJvbFBvc2l0aW9uU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb011bHRpc2VsZWN0QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tbXVsdGlzZWxlY3QtYmFzZS5jb21wb25lbnQnO1xyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvTXVsdGlzZWxlY3RCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1tdWx0aXNlbGVjdC1iYXNpY1wiIHRpdGxlPVwiUE8gTXVsdGlzZWxlY3QgQmFzaWNcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW11bHRpc2VsZWN0LWJhc2ljL3NhbXBsZS1wby1tdWx0aXNlbGVjdC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tdWx0aXNlbGVjdC1iYXNpYy9zYW1wbGUtcG8tbXVsdGlzZWxlY3QtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbXVsdGlzZWxlY3QtbGFic1wiIHRpdGxlPVwiUE8gTXVsdGlzZWxlY3QgTGFic1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbXVsdGlzZWxlY3QtbGFicy9zYW1wbGUtcG8tbXVsdGlzZWxlY3QtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tdWx0aXNlbGVjdC1sYWJzL3NhbXBsZS1wby1tdWx0aXNlbGVjdC1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLW11bHRpc2VsZWN0LXZhY2F0aW9uXCIgdGl0bGU9XCJQTyBNdWx0aXNlbGVjdCAtIFZhY2F0aW9uXCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tdWx0aXNlbGVjdC12YWNhdGlvbi9zYW1wbGUtcG8tbXVsdGlzZWxlY3QtdmFjYXRpb24uY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbXVsdGlzZWxlY3QtdmFjYXRpb24vc2FtcGxlLXBvLW11bHRpc2VsZWN0LXZhY2F0aW9uLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLW11bHRpc2VsZWN0LXZhY2F0aW9uLXJlYWN0aXZlLWZvcm1cIiB0aXRsZT1cIlBPIE11bHRpc2VsZWN0IC0gVmFjYXRpb24gUmVhY3RpdmUgRm9ybVwiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbXVsdGlzZWxlY3QtdmFjYXRpb24tcmVhY3RpdmUtZm9ybS9zYW1wbGUtcG8tbXVsdGlzZWxlY3QtdmFjYXRpb24tcmVhY3RpdmUtZm9ybS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tdWx0aXNlbGVjdC12YWNhdGlvbi1yZWFjdGl2ZS1mb3JtL3NhbXBsZS1wby1tdWx0aXNlbGVjdC12YWNhdGlvbi1yZWFjdGl2ZS1mb3JtLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvTXVsdGlzZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBQb011bHRpc2VsZWN0QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIERvQ2hlY2ssIE9uRGVzdHJveSB7XHJcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcclxuICAgIHByaXZhdGUgY29udHJvbFBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBlbDtcclxuICAgIGRyb3Bkb3duRWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIGRyb3Bkb3duOiBhbnk7XHJcbiAgICBkaXNjbGFpbWVyQ29udGFpbmVyRWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIGljb25FbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgaW5wdXRFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgZGlzY2xhaW1lck9mZnNldDogbnVtYmVyO1xyXG4gICAgZHJvcGRvd25JY29uOiBzdHJpbmc7XHJcbiAgICBkcm9wZG93bk9wZW46IGJvb2xlYW47XHJcbiAgICBpbml0aWFsaXplZDogYm9vbGVhbjtcclxuICAgIHBvc2l0aW9uRGlzY2xhaW1lckV4dHJhOiBhbnk7XHJcbiAgICB0aW1lb3V0UmVzaXplOiBhbnk7XHJcbiAgICB2aXNpYmxlRWxlbWVudDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgaXNDYWxjdWxhdGVWaXNpYmxlSXRlbXM7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGNvbnRyb2xQb3NpdGlvbjogUG9Db250cm9sUG9zaXRpb25TZXJ2aWNlLCBlbDogRWxlbWVudFJlZik7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRnVuw6fDo28gcXVlIGF0cmlidWkgZm9jbyBhbyBjb21wb25lbnRlLlxyXG4gICAgICpcclxuICAgICAqIFBhcmEgdXRpbGl6w6EtbGEgw6kgbmVjZXNzw6FyaW8gdGVyIGEgaW5zdMOibmNpYSBkbyBjb21wb25lbnRlIG5vIERPTSwgcG9kZW5kbyBzZXIgdXRpbGl6YWRvIG8gVmlld0NoaWxkIGRhIHNlZ3VpbnRlIGZvcm1hOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogaW1wb3J0IHsgUG9NdWx0aXNlbGVjdENvbXBvbmVudCB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuICAgICAqXHJcbiAgICAgKiAuLi5cclxuICAgICAqXHJcbiAgICAgKiBAVmlld0NoaWxkKFBvTXVsdGlzZWxlY3RDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIG11bHRpc2VsZWN0OiBQb011bHRpc2VsZWN0Q29tcG9uZW50O1xyXG4gICAgICpcclxuICAgICAqIGZvY3VzTXVsdGlzZWxlY3QoKSB7XHJcbiAgICAgKiAgIHRoaXMubXVsdGlzZWxlY3QuZm9jdXMoKTtcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBmb2N1cygpOiB2b2lkO1xyXG4gICAgZ2V0SW5wdXRXaWR0aCgpOiBudW1iZXI7XHJcbiAgICBnZXREaXNjbGFpbWVyc1dpZHRoKCk6IGFueVtdO1xyXG4gICAgY2FsY3VsYXRlVmlzaWJsZUl0ZW1zKCk6IHZvaWQ7XHJcbiAgICB1cGRhdGVWaXNpYmxlSXRlbXMoKTogdm9pZDtcclxuICAgIGRlYm91bmNlUmVzaXplKCk6IHZvaWQ7XHJcbiAgICBvbktleURvd24oZXZlbnQ/OiBhbnkpOiB2b2lkO1xyXG4gICAgdG9nZ2xlRHJvcGRvd25WaXNpYmlsaXR5KCk6IHZvaWQ7XHJcbiAgICBvcGVuRHJvcGRvd24odG9PcGVuOiBhbnkpOiB2b2lkO1xyXG4gICAgY29udHJvbERyb3Bkb3duVmlzaWJpbGl0eSh0b09wZW46IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgc2Nyb2xsVG9TZWxlY3RlZE9wdGlvbnMoKTogdm9pZDtcclxuICAgIHNldFZpc2libGVPcHRpb25zRHJvcGRvd24ob3B0aW9uczogYW55KTogdm9pZDtcclxuICAgIGNoYW5nZVNlYXJjaChldmVudDogYW55KTogdm9pZDtcclxuICAgIGdldFBsYWNlaG9sZGVyKCk6IHN0cmluZztcclxuICAgIGNsb3NlRGlzY2xhaW1lcih2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHdhc0NsaWNrZWRPblRvZ2dsZShldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGFkanVzdENvbnRhaW5lclBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBjbG9zZTtcclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3RlbmVycztcclxuICAgIHByaXZhdGUgb25TY3JvbGw7XHJcbiAgICBwcml2YXRlIG9wZW47XHJcbiAgICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycztcclxuICAgIHByaXZhdGUgc2V0UG9zaXRpb25Ecm9wZG93bjtcclxufVxyXG4iXX0=