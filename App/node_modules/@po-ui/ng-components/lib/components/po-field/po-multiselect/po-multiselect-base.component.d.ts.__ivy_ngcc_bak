import { EventEmitter, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
import { PoMultiselectLiterals } from './po-multiselect-literals.interface';
import { PoMultiselectOption } from './po-multiselect-option.interface';
export declare const poMultiselectLiteralsDefault: {
    en: PoMultiselectLiterals;
    es: PoMultiselectLiterals;
    pt: PoMultiselectLiterals;
    ru: PoMultiselectLiterals;
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 */
export declare abstract class PoMultiselectBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _disabled?;
    private _filterMode?;
    private _hideSearch?;
    private _literals;
    private _options;
    private _required?;
    private _sort?;
    private lastLengthModel;
    private onModelChange;
    private onModelTouched;
    private validatorChange;
    selectedOptions: Array<PoMultiselectOption>;
    visibleOptionsDropdown: Array<PoMultiselectOption>;
    visibleDisclaimers: any[];
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Label no componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoMultiselectLiterals);
    get literals(): PoMultiselectLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder?: string;
    /**
     * @description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * @default `Buscar`
     */
    placeholderSearch?: string;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * @default `false`
     */
    set hideSearch(hideSearch: boolean);
    get hideSearch(): boolean;
    /**
     * @description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     *
     * > Para atualizar a lista de opções do `po-multiselect` dinamicamente deve-se utilizar dados imutáveis.
     * Exemplo de adição de um novo item com spread:
     * ```
     * this.options = [...this.options, { label: 'Example', value: 'example' }];
     * ```
     */
    set options(options: Array<PoMultiselectOption>);
    get options(): Array<PoMultiselectOption>;
    /**
     * @optional
     *
     * @description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * @default `false`
     */
    set sort(sort: boolean);
    get sort(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * @default `startsWith`
     */
    set filterMode(filterMode: PoMultiselectFilterMode);
    get filterMode(): PoMultiselectFilterMode;
    /** Pode ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    protected clickOutListener: () => void;
    protected resizeListener: () => void;
    ngOnInit(): void;
    validAndSortOptions(): void;
    setUndefinedLabels(options: any): void;
    updateList(options: Array<PoMultiselectOption>): void;
    callOnChange(selectedOptions: Array<PoMultiselectOption>): void;
    eventChange(selectedOptions: any): void;
    getValuesFromOptions(selectedOptions: Array<PoMultiselectOption>): (string | number)[];
    getLabelByValue(value: any): string;
    changeItems(selectedValues: any): void;
    searchByLabel(search: string, options: Array<PoMultiselectOption>, filterMode: PoMultiselectFilterMode): void;
    compareMethod(search: string, option: PoMultiselectOption, filterMode: PoMultiselectFilterMode): boolean;
    startsWith(search: string, option: PoMultiselectOption): boolean;
    contains(search: string, option: PoMultiselectOption): boolean;
    endsWith(search: string, option: PoMultiselectOption): boolean;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    updateSelectedOptions(values: any): void;
    writeValue(values: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    private validateModel;
    abstract updateVisibleItems(): void;
}
