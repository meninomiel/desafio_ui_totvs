import { EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupColumn } from '../../../../components/po-field/po-lookup/interfaces/po-lookup-column.interface';
import { PoLookupFilter } from '../../../../components/po-field/po-lookup/interfaces/po-lookup-filter.interface';
import { PoLookupLiterals } from '../interfaces/po-lookup-literals.interface';
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoLookupModalService {
    private poComponentInjector;
    private componentRef;
    selectValueEvent: EventEmitter<any>;
    constructor(poComponentInjector: PoComponentInjectorService);
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     */
    openModal(params: {
        service: PoLookupFilter;
        columns: Array<PoLookupColumn>;
        filterParams: any;
        title: string;
        literals: PoLookupLiterals;
    }): void;
    selectValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLookupModalService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PoLookupModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1jb21wb25lbnQtaW5qZWN0b3IvcG8tY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cENvbHVtbiB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWNvbHVtbi5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cExpdGVyYWxzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtbGl0ZXJhbHMuaW50ZXJmYWNlJztcclxuLyoqXHJcbiAqIEBkb2NzUHJpdmF0ZVxyXG4gKlxyXG4gKiBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIGNvbnRyb2xhciBhIGFiZXJ0dXJhIGRvIGNvbXBvbmVudGUgUG8gTG9va3VwIE1vZGFsLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9Mb29rdXBNb2RhbFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yO1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWY7XHJcbiAgICBzZWxlY3RWYWx1ZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGFicmlyIGEgbW9kYWwgZGUgYnVzY2EgZGFzIGluZm9ybWHDp8O1ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNlcnZpY2Uge1BvTG9va3VwRmlsdGVyfSBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIHJlYWxpemFyIGEgYnVzY2Egbm8gc2VydmnDp28gZG9zIGRhZG9zLlxyXG4gICAgICogQHBhcmFtIGNvbHVtbnMge0FycmF5PFBvTG9va3VwQ29sdW1uPn0gRGVmaW5pw6fDo28gZGFzIGNvbHVuYXMgbmEgbW9kYWwgZGUgYnVzY2EuXHJcbiAgICAgKiBAcGFyYW0gZmlsdGVyUGFyYW1zIHthbnl9IFZhbG9yIHF1ZSBzZXLDoSByZXBhc3NhZG8gYW9zIG3DqXRvZG9zIGRvIHNlcnZpw6dvIHBhcmEgYXV4aWxpYXIgbm8gZmlsdHJvIGRvcyBkYWRvcy5cclxuICAgICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBEZWZpbmnDp8OjbyBkbyB0w610dWxvIGRhIG1vZGFsLlxyXG4gICAgICogQHBhcmFtIGxpdGVyYWxzIHtQb0xvb2t1cExpdGVyYWxzfSBMaXRlcmFpcyB1dGlsaXphZGFzIG5vIGNvbXBvbmVudGUuXHJcbiAgICAgKi9cclxuICAgIG9wZW5Nb2RhbChwYXJhbXM6IHtcclxuICAgICAgICBzZXJ2aWNlOiBQb0xvb2t1cEZpbHRlcjtcclxuICAgICAgICBjb2x1bW5zOiBBcnJheTxQb0xvb2t1cENvbHVtbj47XHJcbiAgICAgICAgZmlsdGVyUGFyYW1zOiBhbnk7XHJcbiAgICAgICAgdGl0bGU6IHN0cmluZztcclxuICAgICAgICBsaXRlcmFsczogUG9Mb29rdXBMaXRlcmFscztcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgc2VsZWN0VmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XHJcbn1cclxuIl19