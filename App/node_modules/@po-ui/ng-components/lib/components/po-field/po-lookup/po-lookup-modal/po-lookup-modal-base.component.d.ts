import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { PoModalAction } from '../../../../components/po-modal';
import { PoModalComponent } from '../../../../components/po-modal/po-modal.component';
import { PoTableColumnSort } from '../../../po-table/interfaces/po-table-column-sort.interface';
import { PoLookupColumn } from '../interfaces/po-lookup-column.interface';
import { PoLookupFilter } from '../interfaces/po-lookup-filter.interface';
import { PoLookupLiterals } from '../interfaces/po-lookup-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poLookupLiteralsDefault: {
    en: PoLookupLiterals;
    es: PoLookupLiterals;
    pt: PoLookupLiterals;
    ru: PoLookupLiterals;
};
/**
 * @docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 */
export declare abstract class PoLookupModalBaseComponent implements OnDestroy, OnInit {
    private _literals;
    private _title;
    hasNext: boolean;
    isLoading: boolean;
    page: number;
    pageSize: number;
    primaryAction: PoModalAction;
    searchValue: string;
    secondaryAction: PoModalAction;
    tableLiterals: any;
    protected sort: PoTableColumnSort;
    private filterSubscription;
    private searchSubscription;
    private showMoreSubscription;
    poModal: PoModalComponent;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     */
    columns: Array<PoLookupColumn>;
    /** Lista de itens da tabela. */
    items: Array<any>;
    /** Objeto com as literais usadas no `po-lookup-modal`. */
    set literals(value: PoLookupLiterals);
    get literals(): PoLookupLiterals;
    /** Título da modal. */
    set title(value: string);
    get title(): string;
    /** Classe de serviço com a implementação do cliente. */
    filterService: PoLookupFilter;
    /** Classe de serviço com a implementação do cliente. */
    filterParams: any;
    /** Evento utilizado ao selecionar um registro da tabela. */
    model: EventEmitter<any>;
    ngOnDestroy(): void;
    ngOnInit(): void;
    search(): void;
    showMoreEvent(): void;
    abstract openModal(): void;
    private getFilteredItems;
    private getFilteredParams;
    private getOrderParam;
    private initializeData;
    private setTableLiterals;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLookupModalBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoLookupModalBaseComponent, never, never, { "literals": "p-literals"; "title": "p-title"; "items": "p-items"; "columns": "p-columns"; "filterService": "p-filter-service"; "filterParams": "p-filter-params"; }, { "model": "p-change-model"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWxvb2t1cC1tb2RhbC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1tb2RhbCc7XHJcbmltcG9ydCB7IFBvTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3BvLW1vZGFsL3BvLW1vZGFsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvVGFibGVDb2x1bW5Tb3J0IH0gZnJvbSAnLi4vLi4vLi4vcG8tdGFibGUvaW50ZXJmYWNlcy9wby10YWJsZS1jb2x1bW4tc29ydC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cENvbHVtbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWNvbHVtbi5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0xvb2t1cExpdGVyYWxzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtbGl0ZXJhbHMuaW50ZXJmYWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9Mb29rdXBMaXRlcmFsc0RlZmF1bHQ6IHtcclxuICAgIGVuOiBQb0xvb2t1cExpdGVyYWxzO1xyXG4gICAgZXM6IFBvTG9va3VwTGl0ZXJhbHM7XHJcbiAgICBwdDogUG9Mb29rdXBMaXRlcmFscztcclxuICAgIHJ1OiBQb0xvb2t1cExpdGVyYWxzO1xyXG59O1xyXG4vKipcclxuICogQGRvY3NQcml2YXRlXHJcbiAqXHJcbiAqIENsYXNzZSBiYXNlIGRvIGNvbXBvbmVudGUgUG8gTG9va3VwIE1vZGFsLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9Mb29rdXBNb2RhbEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XHJcbiAgICBwcml2YXRlIF9saXRlcmFscztcclxuICAgIHByaXZhdGUgX3RpdGxlO1xyXG4gICAgaGFzTmV4dDogYm9vbGVhbjtcclxuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcclxuICAgIHBhZ2U6IG51bWJlcjtcclxuICAgIHBhZ2VTaXplOiBudW1iZXI7XHJcbiAgICBwcmltYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uO1xyXG4gICAgc2VhcmNoVmFsdWU6IHN0cmluZztcclxuICAgIHNlY29uZGFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbjtcclxuICAgIHRhYmxlTGl0ZXJhbHM6IGFueTtcclxuICAgIHByb3RlY3RlZCBzb3J0OiBQb1RhYmxlQ29sdW1uU29ydDtcclxuICAgIHByaXZhdGUgZmlsdGVyU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBzZWFyY2hTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIHNob3dNb3JlU3Vic2NyaXB0aW9uO1xyXG4gICAgcG9Nb2RhbDogUG9Nb2RhbENvbXBvbmVudDtcclxuICAgIC8qKlxyXG4gICAgICogTGlzdGEgZGFzIGNvbHVuYXMgZGEgdGFiZWxhLlxyXG4gICAgICogRXNzYSBwcm9wcmllZGFkZSBkZXZlIHJlY2ViZXIgdW0gYXJyYXkgZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgUG9Mb29rdXBDb2x1bW4uXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbnM6IEFycmF5PFBvTG9va3VwQ29sdW1uPjtcclxuICAgIC8qKiBMaXN0YSBkZSBpdGVucyBkYSB0YWJlbGEuICovXHJcbiAgICBpdGVtczogQXJyYXk8YW55PjtcclxuICAgIC8qKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tbG9va3VwLW1vZGFsYC4gKi9cclxuICAgIHNldCBsaXRlcmFscyh2YWx1ZTogUG9Mb29rdXBMaXRlcmFscyk7XHJcbiAgICBnZXQgbGl0ZXJhbHMoKTogUG9Mb29rdXBMaXRlcmFscztcclxuICAgIC8qKiBUw610dWxvIGRhIG1vZGFsLiAqL1xyXG4gICAgc2V0IHRpdGxlKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZztcclxuICAgIC8qKiBDbGFzc2UgZGUgc2VydmnDp28gY29tIGEgaW1wbGVtZW50YcOnw6NvIGRvIGNsaWVudGUuICovXHJcbiAgICBmaWx0ZXJTZXJ2aWNlOiBQb0xvb2t1cEZpbHRlcjtcclxuICAgIC8qKiBDbGFzc2UgZGUgc2VydmnDp28gY29tIGEgaW1wbGVtZW50YcOnw6NvIGRvIGNsaWVudGUuICovXHJcbiAgICBmaWx0ZXJQYXJhbXM6IGFueTtcclxuICAgIC8qKiBFdmVudG8gdXRpbGl6YWRvIGFvIHNlbGVjaW9uYXIgdW0gcmVnaXN0cm8gZGEgdGFiZWxhLiAqL1xyXG4gICAgbW9kZWw6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBzZWFyY2goKTogdm9pZDtcclxuICAgIHNob3dNb3JlRXZlbnQoKTogdm9pZDtcclxuICAgIGFic3RyYWN0IG9wZW5Nb2RhbCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBnZXRGaWx0ZXJlZEl0ZW1zO1xyXG4gICAgcHJpdmF0ZSBnZXRGaWx0ZXJlZFBhcmFtcztcclxuICAgIHByaXZhdGUgZ2V0T3JkZXJQYXJhbTtcclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZURhdGE7XHJcbiAgICBwcml2YXRlIHNldFRhYmxlTGl0ZXJhbHM7XHJcbn1cclxuIl19