import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { PoCheckboxGroupBaseComponent } from './po-checkbox-group-base.component';
import { PoCheckboxGroupOption } from './interfaces/po-checkbox-group-option.interface';
/**
 * @docsExtends PoCheckboxGroupBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCheckboxGroupComponent extends PoCheckboxGroupBaseComponent implements AfterViewChecked, AfterViewInit {
    private changeDetector;
    checkboxLabels: QueryList<ElementRef>;
    constructor(changeDetector: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus(): void;
    onKeyDown(event: KeyboardEvent, option: PoCheckboxGroupOption): void;
    trackByFn(index: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCheckboxGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoCheckboxGroupComponent, "po-checkbox-group", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNoZWNrYm94LWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoZWNrYm94LWdyb3VwLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9DaGVja2JveEdyb3VwT3B0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNoZWNrYm94LWdyb3VwLW9wdGlvbi5pbnRlcmZhY2UnO1xyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLWNoZWNrYm94LWdyb3VwLWJhc2ljXCIgdGl0bGU9XCJQTyBDaGVja2JveCBHcm91cCBCYXNpY1wiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1ncm91cC1iYXNpYy9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1ncm91cC1iYXNpYy9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hlY2tib3gtZ3JvdXAtbGFic1wiIHRpdGxlPVwiUE8gQ2hlY2tib3ggR3JvdXAgTGFic1wiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1ncm91cC1sYWJzL3NhbXBsZS1wby1jaGVja2JveC1ncm91cC1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtbGFicy9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3lcIiB0aXRsZT1cIlBPIENoZWNrYm94IEdyb3VwIOKAkyBTZWN1cml0eSBwb2xpY3lcIj5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5L3NhbXBsZS1wby1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3kuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3kvc2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0NoZWNrYm94R3JvdXBDb21wb25lbnQgZXh0ZW5kcyBQb0NoZWNrYm94R3JvdXBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yO1xyXG4gICAgY2hlY2tib3hMYWJlbHM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcclxuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW7Dp8OjbyBxdWUgYXRyaWJ1aSBmb2NvIGFvIGNvbXBvbmVudGUuXHJcbiAgICAgKlxyXG4gICAgICogUGFyYSB1dGlsaXrDoS1sYSDDqSBuZWNlc3PDoXJpbyB0ZXIgYSBpbnN0w6JuY2lhIGRvIGNvbXBvbmVudGUgbm8gRE9NLCBwb2RlbmRvIHNlciB1dGlsaXphZG8gbyBWaWV3Q2hpbGQgZGEgc2VndWludGUgZm9ybWE6XHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBpbXBvcnQgeyBQb0NoZWNrYm94R3JvdXBDb21wb25lbnQgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcbiAgICAgKlxyXG4gICAgICogLi4uXHJcbiAgICAgKlxyXG4gICAgICogQFZpZXdDaGlsZChQb0NoZWNrYm94R3JvdXBDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGNoZWNrYm94OiBQb0NoZWNrYm94R3JvdXBDb21wb25lbnQ7XHJcbiAgICAgKlxyXG4gICAgICogZm9jdXNDaGVja2JveCgpIHtcclxuICAgICAqICAgdGhpcy5jaGVja2JveC5mb2N1cygpO1xyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGZvY3VzKCk6IHZvaWQ7XHJcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIG9wdGlvbjogUG9DaGVja2JveEdyb3VwT3B0aW9uKTogdm9pZDtcclxuICAgIHRyYWNrQnlGbihpbmRleDogYW55KTogYW55O1xyXG59XHJcbiJdfQ==