import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoRichTextBaseComponent implements ControlValueAccessor, Validator {
    private _height?;
    private _placeholder;
    private _readonly;
    private _required;
    invalid: boolean;
    onChangeModel: any;
    value: string;
    private onTouched;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /**
     * @description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     */
    errorMessage?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    set height(height: number);
    get height(): number;
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label?: string;
    /** Nome e identificador do campo. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value: string);
    get placeholder(): string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value: boolean);
    get readonly(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(value: boolean);
    get required(): boolean;
    /** Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado. */
    change?: EventEmitter<any>;
    /** Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado. */
    changeModel?: EventEmitter<any>;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: string): void;
    protected updateModel(value: any): void;
    protected validateModel(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRichTextBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoRichTextBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "errorMessage": "p-error-message"; "height": "p-height"; "placeholder": "p-placeholder"; "readonly": "p-readonly"; "required": "p-required"; "help": "p-help"; "label": "p-label"; "name": "name"; "optional": "p-optional"; }, { "change": "p-change"; "changeModel": "p-change-model"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXJpY2gtdGV4dC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby1yaWNoLXRleHRgIMOpIHVtIGVkaXRvciBkZSB0ZXh0b3MgZW5yaXF1ZWNpZG9zLlxyXG4gKlxyXG4gKiBQYXJhIGVkacOnw6NvIGRlIHRleHRvIHNpbXBsZXMgc2VtIGZvcm1hdGHDp8OjbyByZWNvbWVuZGEtc2UgbyB1c28gZG8gY29tcG9uZW50ZSBbKipwby10ZXh0YXJlYSoqXSgvZG9jdW1lbnRhdGlvbi9wby10ZXh0YXJlYSkuXHJcbiAqXHJcbiAqID4gTm8gbmF2ZWdhZG9yIEludGVybmV0IEV4cGxvcmVyIG7Do28gw6kgcG9zc8OtdmVsIGFsdGVyYXIgYSBjb3IgZG8gdGV4dG8uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb1JpY2hUZXh0QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3Ige1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0PztcclxuICAgIHByaXZhdGUgX3BsYWNlaG9sZGVyO1xyXG4gICAgcHJpdmF0ZSBfcmVhZG9ubHk7XHJcbiAgICBwcml2YXRlIF9yZXF1aXJlZDtcclxuICAgIGludmFsaWQ6IGJvb2xlYW47XHJcbiAgICBvbkNoYW5nZU1vZGVsOiBhbnk7XHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoZWQ7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRvckNoYW5nZTtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxyXG4gICAgICpcclxuICAgICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsIGFwZW5hcyBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBNZW5zYWdlbSBxdWUgc2Vyw6EgYXByZXNlbnRhZGEgcXVhbmRvIGEgcHJvcHJpZWRhZGUgcmVxdWlyZWQgZXN0aXZlciBoYWJpbGl0YWRhIGUgbyBjYW1wbyBmb3IgbGltcG8gYXDDs3MgYWxnbyBzZXIgZGlnaXRhZG8uXHJcbiAgICAgKi9cclxuICAgIGVycm9yTWVzc2FnZT86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIGEgYWx0dXJhIGRhIMOhcmVhIGRlIGVkacOnw6NvIGRlIHRleHRvLlxyXG4gICAgICpcclxuICAgICAqID4gQWx0dXJhIG3DrW5pbWEgZG8gY29tcG9uZW50ZSDDqSBgOTRgIGUgYSBhbHR1cmEgbcOheGltYSDDqSBgMjYyYC5cclxuICAgICAqL1xyXG4gICAgc2V0IGhlaWdodChoZWlnaHQ6IG51bWJlcik7XHJcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogVGV4dG8gZGUgYXBvaW8gZG8gY2FtcG8uXHJcbiAgICAgKi9cclxuICAgIGhlbHA/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIFLDs3R1bG8gZG8gY2FtcG8uXHJcbiAgICAgKi9cclxuICAgIGxhYmVsPzogc3RyaW5nO1xyXG4gICAgLyoqIE5vbWUgZSBpZGVudGlmaWNhZG9yIGRvIGNhbXBvLiAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgc2UgYSBpbmRpY2HDp8OjbyBkZSBjYW1wbyBvcGNpb25hbCBzZXLDoSBleGliaWRhLlxyXG4gICAgICpcclxuICAgICAqID4gTsOjbyBzZXLDoSBleGliaWRhIGEgaW5kaWNhw6fDo28gc2U6XHJcbiAgICAgKiAtIE8gY2FtcG8gY29udGVyIGBwLXJlcXVpcmVkYDtcclxuICAgICAqIC0gTsOjbyBwb3NzdWlyIGBwLWhlbHBgIGUvb3UgYHAtbGFiZWxgLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgb3B0aW9uYWw6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE1lbnNhZ2VtIHF1ZSBhcGFyZWNlcsOhIGVucXVhbnRvIG8gY2FtcG8gbsOjbyBlc3RpdmVyIHByZWVuY2hpZG8uXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgJydcclxuICAgICAqL1xyXG4gICAgc2V0IHBsYWNlaG9sZGVyKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIHNvbWVudGUgbGVpdHVyYS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIG9icmlnYXTDs3Jpby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCByZXF1aXJlZCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbjtcclxuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGRlaXhhciBvIGNhbXBvIGUgcXVlIHJlY2ViZSBjb21vIHBhcsOibWV0cm8gbyB2YWxvciBhbHRlcmFkby4gKi9cclxuICAgIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gbW9kaWZpY2FyIHZhbG9yIGRvIG1vZGVsIGUgcXVlIHJlY2ViZSBjb21vIHBhcsOibWV0cm8gbyB2YWxvciBhbHRlcmFkby4gKi9cclxuICAgIGNoYW5nZU1vZGVsPzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZ1bmM6IGFueSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmdW5jOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XHJcbiAgICB2YWxpZGF0ZShhYnN0cmFjdENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbiAgICB9O1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCB1cGRhdGVNb2RlbCh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCB2YWxpZGF0ZU1vZGVsKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG59XHJcbiJdfQ==