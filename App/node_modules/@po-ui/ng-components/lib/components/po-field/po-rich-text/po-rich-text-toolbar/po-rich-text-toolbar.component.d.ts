import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { PoButtonGroupItem } from '../../../po-button-group';
import { PoRichTextToolbarButtonGroupItem } from '../interfaces/po-rich-text-toolbar-button-group-item.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoRichTextToolbarComponent implements AfterViewInit {
    private languageService;
    private _readonly;
    readonly literals: any;
    alignButtons: Array<PoRichTextToolbarButtonGroupItem>;
    formatButtons: Array<PoRichTextToolbarButtonGroupItem>;
    listButtons: Array<PoRichTextToolbarButtonGroupItem>;
    linkButtons: Array<PoRichTextToolbarButtonGroupItem>;
    mediaButtons: Array<PoButtonGroupItem>;
    colorPickerInput: ElementRef;
    toolbarElement: ElementRef;
    set readonly(value: boolean);
    get readonly(): boolean;
    command: EventEmitter<string | {
        command: string;
        value: string;
    }>;
    modal: EventEmitter<any>;
    get isInternetExplorer(): boolean;
    constructor(languageService: PoLanguageService);
    ngAfterViewInit(): void;
    changeTextColor(value: any): void;
    setButtonsStates(obj: {
        commands: Array<string>;
        hexColor: string;
    }): void;
    shortcutTrigger(): void;
    private emitAlignCommand;
    private emitCommand;
    private removeButtonFocus;
    private setColorInColorPicker;
    private toggleDisableButtons;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRichTextToolbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoRichTextToolbarComponent, "po-rich-text-toolbar", never, { "readonly": "p-readonly"; }, { "command": "p-command"; "modal": "p-modal"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXJpY2gtdGV4dC10b29sYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFBvQnV0dG9uR3JvdXBJdGVtIH0gZnJvbSAnLi4vLi4vLi4vcG8tYnV0dG9uLWdyb3VwJztcclxuaW1wb3J0IHsgUG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXJpY2gtdGV4dC10b29sYmFyLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUmljaFRleHRUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTtcclxuICAgIHByaXZhdGUgX3JlYWRvbmx5O1xyXG4gICAgcmVhZG9ubHkgbGl0ZXJhbHM6IGFueTtcclxuICAgIGFsaWduQnV0dG9uczogQXJyYXk8UG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+O1xyXG4gICAgZm9ybWF0QnV0dG9uczogQXJyYXk8UG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+O1xyXG4gICAgbGlzdEJ1dHRvbnM6IEFycmF5PFBvUmljaFRleHRUb29sYmFyQnV0dG9uR3JvdXBJdGVtPjtcclxuICAgIGxpbmtCdXR0b25zOiBBcnJheTxQb1JpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbT47XHJcbiAgICBtZWRpYUJ1dHRvbnM6IEFycmF5PFBvQnV0dG9uR3JvdXBJdGVtPjtcclxuICAgIGNvbG9yUGlja2VySW5wdXQ6IEVsZW1lbnRSZWY7XHJcbiAgICB0b29sYmFyRWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbjtcclxuICAgIGNvbW1hbmQ6IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCB7XHJcbiAgICAgICAgY29tbWFuZDogc3RyaW5nO1xyXG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICB9PjtcclxuICAgIG1vZGFsOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGdldCBpc0ludGVybmV0RXhwbG9yZXIoKTogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBjaGFuZ2VUZXh0Q29sb3IodmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICBzZXRCdXR0b25zU3RhdGVzKG9iajoge1xyXG4gICAgICAgIGNvbW1hbmRzOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgICAgIGhleENvbG9yOiBzdHJpbmc7XHJcbiAgICB9KTogdm9pZDtcclxuICAgIHNob3J0Y3V0VHJpZ2dlcigpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBlbWl0QWxpZ25Db21tYW5kO1xyXG4gICAgcHJpdmF0ZSBlbWl0Q29tbWFuZDtcclxuICAgIHByaXZhdGUgcmVtb3ZlQnV0dG9uRm9jdXM7XHJcbiAgICBwcml2YXRlIHNldENvbG9ySW5Db2xvclBpY2tlcjtcclxuICAgIHByaXZhdGUgdG9nZ2xlRGlzYWJsZUJ1dHRvbnM7XHJcbn1cclxuIl19