import { AfterViewInit, ElementRef, OnDestroy } from '@angular/core';
import { PoRichTextBaseComponent } from './po-rich-text-base.component';
import { PoRichTextBodyComponent } from './po-rich-text-body/po-rich-text-body.component';
/**
 * @docsExtends PoRichTextBaseComponent
 *
 * @example
 *
 * <example name="po-rich-text-basic" title="PO Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="PO Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoRichTextComponent extends PoRichTextBaseComponent implements AfterViewInit, OnDestroy {
    private element;
    private listener;
    private modelLastUpdate;
    bodyElement: PoRichTextBodyComponent;
    get errorMsg(): string;
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     */
    focus(): void;
    onChangeValue(value: any): void;
    updateValue(value: string): void;
    private addKeyListeners;
    private controlChangeModelEmitter;
    private verifyAutoFocus;
    private validateClassesForRequired;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRichTextComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoRichTextComponent, "po-rich-text", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1yaWNoLXRleHQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9SaWNoVGV4dEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXJpY2gtdGV4dC1iYXNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvUmljaFRleHRCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9wby1yaWNoLXRleHQtYm9keS9wby1yaWNoLXRleHQtYm9keS5jb21wb25lbnQnO1xyXG4vKipcclxuICogQGRvY3NFeHRlbmRzIFBvUmljaFRleHRCYXNlQ29tcG9uZW50XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1yaWNoLXRleHQtYmFzaWNcIiB0aXRsZT1cIlBPIFJpY2ggVGV4dCBCYXNpY1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcmljaC10ZXh0LWJhc2ljL3NhbXBsZS1wby1yaWNoLXRleHQtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcmljaC10ZXh0LWJhc2ljL3NhbXBsZS1wby1yaWNoLXRleHQtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tcmljaC10ZXh0LWxhYnNcIiB0aXRsZT1cIlBPIFJpY2ggVGV4dCBMYWJzXCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yaWNoLXRleHQtbGFicy9zYW1wbGUtcG8tcmljaC10ZXh0LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcmljaC10ZXh0LWxhYnMvc2FtcGxlLXBvLXJpY2gtdGV4dC1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXJpY2gtdGV4dC1yZWNpcGVcIiB0aXRsZT1cIlBPIFJpY2ggVGV4dCBSZWNpcGVcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXJpY2gtdGV4dC1yZWNpcGUvc2FtcGxlLXBvLXJpY2gtdGV4dC1yZWNpcGUtaW1hZ2UtYmFzZS02NC50c1wiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yaWNoLXRleHQtcmVjaXBlL3NhbXBsZS1wby1yaWNoLXRleHQtcmVjaXBlLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXJpY2gtdGV4dC1yZWNpcGUvc2FtcGxlLXBvLXJpY2gtdGV4dC1yZWNpcGUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9SaWNoVGV4dENvbXBvbmVudCBleHRlbmRzIFBvUmljaFRleHRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgZWxlbWVudDtcclxuICAgIHByaXZhdGUgbGlzdGVuZXI7XHJcbiAgICBwcml2YXRlIG1vZGVsTGFzdFVwZGF0ZTtcclxuICAgIGJvZHlFbGVtZW50OiBQb1JpY2hUZXh0Qm9keUNvbXBvbmVudDtcclxuICAgIGdldCBlcnJvck1zZygpOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRnVuw6fDo28gcXVlIGF0cmlidWkgZm9jbyBhbyBjb21wb25lbnRlLlxyXG4gICAgICpcclxuICAgICAqIFBhcmEgdXRpbGl6w6EtbGEgw6kgbmVjZXNzw6FyaW8gdGVyIGEgaW5zdMOibmNpYSBkbyBjb21wb25lbnRlIG5vIERPTSwgcG9kZW5kbyBzZXIgdXRpbGl6YWRvIG8gVmlld0NoaWxkIGRhIHNlZ3VpbnRlIGZvcm1hOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogaW1wb3J0IHsgUG9SaWNoVGV4dENvbXBvbmVudCB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuICAgICAqXHJcbiAgICAgKiAuLi5cclxuICAgICAqXHJcbiAgICAgKiBAVmlld0NoaWxkKFBvUmljaFRleHRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIHJpY2hUZXh0OiBQb1JpY2hUZXh0Q29tcG9uZW50O1xyXG4gICAgICpcclxuICAgICAqIGZvY3VzUmljaFRleHQoKSB7XHJcbiAgICAgKiAgIHRoaXMucmljaFRleHQuZm9jdXMoKTtcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBmb2N1cygpOiB2b2lkO1xyXG4gICAgb25DaGFuZ2VWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBhZGRLZXlMaXN0ZW5lcnM7XHJcbiAgICBwcml2YXRlIGNvbnRyb2xDaGFuZ2VNb2RlbEVtaXR0ZXI7XHJcbiAgICBwcml2YXRlIHZlcmlmeUF1dG9Gb2N1cztcclxuICAgIHByaXZhdGUgdmFsaWRhdGVDbGFzc2VzRm9yUmVxdWlyZWQ7XHJcbn1cclxuIl19