import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { PoRadioGroupOption } from './po-radio-group-option.interface';
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoRadioGroupBaseComponent implements ControlValueAccessor, Validator {
    private _columns;
    private _disabled?;
    private _options;
    private _required?;
    mdColumns: number;
    value: any;
    private onChangePropagate;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Nome das opções. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value: number);
    get columns(): number;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value: Array<PoRadioGroupOption>);
    get options(): Array<PoRadioGroupOption>;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Evento ao alterar valor do campo. */
    change?: EventEmitter<any>;
    abstract getElementByValue(value: any): any;
    changeValue(changedValue: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: any): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(modelValue: any): void;
    private checkColumnsRange;
    private getGridSystemColumns;
    private validateModel;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRadioGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoRadioGroupBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "columns": "p-columns"; "disabled": "p-disabled"; "required": "p-required"; "options": "p-options"; "name": "name"; "optional": "p-optional"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmFkaW8tZ3JvdXAtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcmFkaW8tZ3JvdXAtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvUmFkaW9Hcm91cE9wdGlvbiB9IGZyb20gJy4vcG8tcmFkaW8tZ3JvdXAtb3B0aW9uLmludGVyZmFjZSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby1yYWRpby1ncm91cGAgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgZGlzcG9uaWJpbGl6YXIgbcO6bHRpcGxhcyBvcMOnw7VlcyBhbyB1c3XDoXJpbywgcGVybWl0aW5kbyBhIGVsZSBxdWVcclxuICogc2VsZWNpb25lIGFwZW5hcyB1bWEgZGVsYXMuIFNldSB1c28gw6kgcmVjb21lbmRhZG8gcGFyYSB1bSBuw7ptZXJvIHBlcXVlbm8gZGUgb3DDp8O1ZXMsIGNhc28gY29udHLDoXJpbywgcmVjb21lbmRhLXNlIG8gdXNvXHJcbiAqIGRvIFsqKnBvLWNvbWJvKipdKC9kb2N1bWVudGF0aW9uL3BvLWNvbWJvKSBvdSBbKipwby1zZWxlY3QqKl0oL2RvY3VtZW50YXRpb24vcG8tc2VsZWN0KS5cclxuICpcclxuICogRXN0ZSBuw6NvIMOpIHVtIGNvbXBvbmVudGUgZGUgbXVsdGlzZWxlw6fDo28sIHNlIGZvciBlc3RlIG8gY2FzbywgZGV2ZS1zZSB1dGlsaXphciBvXHJcbiAqIFsqKnBvLWNoZWNrYm94LWdyb3VwKipdKC9kb2N1bWVudGF0aW9uL3BvLWNoZWNrYm94LWdyb3VwKS5cclxuICpcclxuICogPiBBbyBwYXNzYXIgdW0gdmFsb3IgcGFyYSBvICptb2RlbCogcXVlIG7Do28gZXN0ZWphIG5hIGxpc3RhIGRlIG9ww6fDtWVzLCBvIG1lc21vIHNlcsOhIGRlZmluaWRvIGNvbW8gYHVuZGVmaW5lZGAuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb1JhZGlvR3JvdXBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XHJcbiAgICBwcml2YXRlIF9jb2x1bW5zO1xyXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ/O1xyXG4gICAgcHJpdmF0ZSBfb3B0aW9ucztcclxuICAgIHByaXZhdGUgX3JlcXVpcmVkPztcclxuICAgIG1kQ29sdW1uczogbnVtYmVyO1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIHByaXZhdGUgb25DaGFuZ2VQcm9wYWdhdGU7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRvckNoYW5nZTtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxyXG4gICAgICpcclxuICAgICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsIGFwZW5hcyBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuO1xyXG4gICAgLyoqIE5vbWUgZGFzIG9ww6fDtWVzLiAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgYSBxdWFudGlkYWRlIGRlIGNvbHVuYXMgcGFyYSBleGliacOnw6NvIGRhcyBvcMOnw7Vlcy5cclxuICAgICAqXHJcbiAgICAgKiAqKkNvbnNpZGVyYcOnw7VlczoqKlxyXG4gICAgICogIC0gw4kgcG9zc8OtdmVsIGV4aWJpciBhcyBvcMOnw7VlcyBlbnRyZSBgMWAgZSBgNGAgY29sdW5hcy5cclxuICAgICAqICAtIE8gbsO6bWVybyBtw6F4aW1vIGRlIGNvbHVuYXMgw6kgaW52YXJpw6F2ZWwgbmFzIHNlZ3VpbnRlcyByZXNvbHXDp8O1ZXM6XHJcbiAgICAgKiAgICArIGBzbWA6IGAxYFxyXG4gICAgICogICAgKyBgbWRgOiBgMmBcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgMmBcclxuICAgICAqL1xyXG4gICAgc2V0IGNvbHVtbnModmFsdWU6IG51bWJlcik7XHJcbiAgICBnZXQgY29sdW1ucygpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBvYnJpZ2F0w7NyaW8uXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBzZXQgcmVxdWlyZWQocmVxdWlyZWQ6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIExpc3RhIGRlIG9ww6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMuXHJcbiAgICAgKiBOZXN0YSBwcm9wcmllZGFkZSBkZXZlIHNlciBkZWZpbmlkbyB1bSBhcnJheSBkZSBvYmpldG9zIHF1ZSBpbXBsZW1lbnRhbSBhIGludGVyZmFjZSBQb1JhZGlvR3JvdXBPcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHNldCBvcHRpb25zKHZhbHVlOiBBcnJheTxQb1JhZGlvR3JvdXBPcHRpb24+KTtcclxuICAgIGdldCBvcHRpb25zKCk6IEFycmF5PFBvUmFkaW9Hcm91cE9wdGlvbj47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBzZSBhIGluZGljYcOnw6NvIGRlIGNhbXBvIG9wY2lvbmFsIHNlcsOhIGV4aWJpZGEuXHJcbiAgICAgKlxyXG4gICAgICogPiBOw6NvIHNlcsOhIGV4aWJpZGEgYSBpbmRpY2HDp8OjbyBzZTpcclxuICAgICAqIC0gTyBjYW1wbyBjb250ZXIgYHAtcmVxdWlyZWRgO1xyXG4gICAgICogLSBOw6NvIHBvc3N1aXIgYHAtaGVscGAgZS9vdSBgcC1sYWJlbGAuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBvcHRpb25hbDogYm9vbGVhbjtcclxuICAgIC8qKiBFdmVudG8gYW8gYWx0ZXJhciB2YWxvciBkbyBjYW1wby4gKi9cclxuICAgIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgYWJzdHJhY3QgZ2V0RWxlbWVudEJ5VmFsdWUodmFsdWU6IGFueSk6IGFueTtcclxuICAgIGNoYW5nZVZhbHVlKGNoYW5nZWRWYWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46IGFueSk6IHZvaWQ7XHJcbiAgICB2YWxpZGF0ZShhYnN0cmFjdENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbiAgICB9O1xyXG4gICAgd3JpdGVWYWx1ZShtb2RlbFZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBjaGVja0NvbHVtbnNSYW5nZTtcclxuICAgIHByaXZhdGUgZ2V0R3JpZFN5c3RlbUNvbHVtbnM7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRlTW9kZWw7XHJcbn1cclxuIl19