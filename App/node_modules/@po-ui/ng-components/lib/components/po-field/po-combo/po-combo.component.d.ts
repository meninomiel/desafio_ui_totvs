import { AfterViewInit, ChangeDetectorRef, ElementRef, IterableDiffers, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
import { PoComboBaseComponent } from './po-combo-base.component';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboGroup } from './interfaces/po-combo-group.interface';
import { PoComboOption } from './interfaces/po-combo-option.interface';
import { PoComboOptionTemplateDirective } from './po-combo-option-template/po-combo-option-template.directive';
/**
 * @docsExtends PoComboBaseComponent
 *
 * @description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * @example
 *
 * <example name="po-combo-basic" title="PO Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="PO Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="PO Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.service.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoComboComponent extends PoComboBaseComponent implements AfterViewInit, OnChanges, OnDestroy {
    element: ElementRef;
    differs: IterableDiffers;
    defaultService: PoComboFilterService;
    renderer: Renderer2;
    private changeDetector;
    private controlPosition;
    private sanitized;
    private _isServerSearching;
    comboIcon: string;
    comboOpen: boolean;
    differ: any;
    isProcessingGetObjectByValue: boolean;
    scrollTop: number;
    service: PoComboFilterService;
    shouldMarkLetters: boolean;
    private clickoutListener;
    private eventResizeListener;
    private filterSubscription;
    private getSubscription;
    comboOptionTemplate: PoComboOptionTemplateDirective;
    containerElement: ElementRef;
    contentElement: ElementRef;
    iconElement: ElementRef;
    inputElement: ElementRef;
    constructor(element: ElementRef, differs: IterableDiffers, defaultService: PoComboFilterService, renderer: Renderer2, changeDetector: ChangeDetectorRef, controlPosition: PoControlPositionService, sanitized: DomSanitizer);
    set isServerSearching(value: boolean);
    get isServerSearching(): boolean;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    focus(): void;
    onKeyDown(event?: any): void;
    onKeyUp(event?: any): void;
    initInputObservable(): void;
    controlApplyFilter(value: any): void;
    applyFilter(value: string): void;
    setOptionsByApplyFilter(value: any, items: any): void;
    getObjectByValue(value: any): void;
    updateOptionByFilteredValue(item: any): void;
    selectPreviousOption(): void;
    selectNextOption(): void;
    toggleComboVisibility(): void;
    applyFilterInFirstClick(): void;
    controlComboVisibility(toOpen: boolean): void;
    onOptionClick(option: PoComboOption | PoComboGroup, event?: any): void;
    scrollTo(index: any): void;
    getInputValue(): any;
    setInputValue(value: string): void;
    wasClickedOnToggle(event: MouseEvent): void;
    getLabelFormatted(label: string): SafeHtml;
    safeHtml(value: any): SafeHtml;
    isValidCharacterToSearch(keyCode: any): boolean;
    searchOnEnter(value: string): void;
    private adjustContainerPosition;
    private close;
    private initializeListeners;
    private onScroll;
    private open;
    private removeListeners;
    private sanitizeTagHTML;
    private setContainerPosition;
    private setScrollTop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoComboComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoComboComponent, "po-combo", never, {}, {}, ["comboOptionTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,