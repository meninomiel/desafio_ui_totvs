import { ControlValueAccessor } from '@angular/forms';
import { EventEmitter } from '@angular/core';
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoCheckboxBaseComponent implements ControlValueAccessor {
    checkboxValue: boolean | null;
    id: string;
    propagateChange: any;
    private _disabled?;
    /** Define o nome do *checkbox*. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    /** Texto de exibição do *checkbox*. */
    label?: string;
    /** Evento disparado quando o valor do *checkbox* for alterado. */
    change?: EventEmitter<any>;
    changeValue(): void;
    checkOption(value: boolean | null): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected abstract changeModelValue(value: boolean | null): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCheckboxBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoCheckboxBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "disabled": "p-disabled"; "name": "name"; "label": "p-label"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogTyBjb21wb25lbnRlIGBwby1jaGVja2JveGAgZXhpYmUgdW1hIGNhaXhhIGRlIG9ww6fDo28gY29tIHVtIHRleHRvIGFvIGxhZG8sIG5hIHF1YWwgw6kgcG9zc8OtdmVsIG1hcmNhciBlIGRlc21hcmNhciBhdHJhdsOpcyB0YW50b1xyXG4gKiBubyAqY2xpY2sqIGRvICptb3VzZSogcXVhbnRvIHBvciBtZWlvIGRhIHRlY2xhICpzcGFjZSogcXVhbmRvIGVzdGl2ZXIgY29tIGZvY28uXHJcbiAqXHJcbiAqIENhZGEgb3DDp8OjbyBwb2RlcsOhIHJlY2ViZXIgdW0gZXN0YWRvIGRlIG1hcmNhZG8sIGRlc21hcmNhZG8sIGluZGV0ZXJtaW5hZG8gZSBkZXNhYmlsaXRhZG8sIGNvbW8gdGFtYsOpbSB1bWEgYcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvXHJcbiAqIG9jb3JyZXIgbXVkYW7Dp2FzIGRvIHZhbG9yLlxyXG4gKlxyXG4gKiA+IE8gKm1vZGVsKiBkZXN0ZSBjb21wb25lbnRlIGFjZWl0YXLDoSB2YWxvcmVzIGlndWFsIMOgIGB0cnVlYCwgYGZhbHNlYCBvdSBgbnVsbGAgcGFyYSBxdWFuZG8gZm9yIGluZGV0ZXJtaW5hZG8uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb0NoZWNrYm94QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuICAgIGNoZWNrYm94VmFsdWU6IGJvb2xlYW4gfCBudWxsO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xyXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ/O1xyXG4gICAgLyoqIERlZmluZSBvIG5vbWUgZG8gKmNoZWNrYm94Ki4gKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxyXG4gICAgICpcclxuICAgICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsIGFwZW5hcyBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBEZWZpbmUgbyBlc3RhZG8gZG8gKmNoZWNrYm94KiBjb21vIGRlc2FiaWxpdGFkby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIC8qKiBUZXh0byBkZSBleGliacOnw6NvIGRvICpjaGVja2JveCouICovXHJcbiAgICBsYWJlbD86IHN0cmluZztcclxuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIHF1YW5kbyBvIHZhbG9yIGRvICpjaGVja2JveCogZm9yIGFsdGVyYWRvLiAqL1xyXG4gICAgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBjaGFuZ2VWYWx1ZSgpOiB2b2lkO1xyXG4gICAgY2hlY2tPcHRpb24odmFsdWU6IGJvb2xlYW4gfCBudWxsKTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcclxuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2hhbmdlTW9kZWxWYWx1ZSh2YWx1ZTogYm9vbGVhbiB8IG51bGwpOiBhbnk7XHJcbn1cclxuIl19