import { ControlValueAccessor } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
/**
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoSwitchBaseComponent implements ControlValueAccessor {
    private _disabled?;
    propagateChange: any;
    switchValue: boolean;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Aplica o foco no elemento ao ser iniciado.
     *  > Caso mais de um elemento seja configurado com essa propriedade,
     * o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Rótulo exibido pelo componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * @default `true`
     */
    labelOn?: string;
    set setLabelOn(label: string);
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * @default `false`
     */
    labelOff?: string;
    set setLabelOff(label: string);
    /**
     * @optional
     *
     * @description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     */
    labelPosition?: PoSwitchLabelPosition;
    set setLabelPosition(position: PoSwitchLabelPosition);
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /** Evento disparado ao alterar valor do campo. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    changeValue(value: any): void;
    eventClick(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoSwitchBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoSwitchBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "setLabelOn": "p-label-on"; "setLabelOff": "p-label-off"; "setLabelPosition": "p-label-position"; "disabled": "p-disabled"; "name": "name"; "label": "p-label"; "help": "p-help"; }, { "change": "p-change"; "ngModelChange": "ngModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3dpdGNoLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXN3aXRjaC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvU3dpdGNoTGFiZWxQb3NpdGlvbiB9IGZyb20gJy4vcG8tc3dpdGNoLWxhYmVsLXBvc2l0aW9uLmVudW0nO1xyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tc3dpdGNoYCDDqSB1bSBbY2hlY2tib3hdKC9kb2N1bWVudGF0aW9uL3BvLWNoZWNrYm94LWdyb3VwKSBtYWlzIGludHVpdGl2bywgcG9pcyBmYXogYW5hbG9naWEgYSB1bSBpbnRlcnJ1cHRvci5cclxuICogRGV2ZSBzZXIgdXNhZG8gcXVhbmRvIGRlc2VqYS1zZSB0cmFuc21pdGlyIGEgaWRlaWEgZGUgbGlnYXIgLyBkZXNsaWdhciB1bWEgZnVuY2lvbmFsaWRhZGUgZXNwZWPDrWZpY2EuXHJcbiAqXHJcbiAqIFBvZGUtc2UgbGlnYXIgb3UgZGVsaWdhciBvIGJvdMOjbyB1dGlsaXphbmRvIGEgdGVjbGEgZGUgZXNwYcOnbyBvdSBvIGNsaXF1ZSBkbyBtb3VzZS5cclxuICpcclxuICogTyB0ZXh0byBleGliaWRvIHBvZGUgc2VyIGFsdGVyYWRvIGRlIGFjb3JkbyBjb20gbyB2YWxvciBzZXRhZG8gYXVtZW50YW5kbyBhcyBwb3NzaWJpbGlkYWRlcyBkZSB1c28gZG8gY29tcG9uZW50ZSxcclxuICogcG9ydGFudG8sIHJlY29tZW5kYS1zZSBpbmZvcm1hciB0ZXh0b3MgcXVlIGNvbnRleHR1YWxpemVtIHNldSB1c28gcGFyYSBxdWUgZmFjaWxpdGUgYSBjb21wcmVlbnPDo28gZG8gdXN1w6FyaW8uXHJcbiAqXHJcbiAqID4gTyBjb21wb25lbnRlIG7Do28gYWx0ZXJhIG8gdmFsb3IgaW5jaWFsIGluZm9ybWFkbyBubyAqbW9kZWwqLCBwb3J0YW50byBpbmRpY2Etc2UgaW5pY2lhbGl6YS1sbyBjYXNvIHRlciBuZWNlc3NpZGFkZS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvU3dpdGNoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuICAgIHByaXZhdGUgX2Rpc2FibGVkPztcclxuICAgIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xyXG4gICAgc3dpdGNoVmFsdWU6IGJvb2xlYW47XHJcbiAgICAvKiogTm9tZSBkbyBjb21wb25lbnRlLiAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBBcGxpY2EgbyBmb2NvIG5vIGVsZW1lbnRvIGFvIHNlciBpbmljaWFkby5cclxuICAgICAqICA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLFxyXG4gICAgICogbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcclxuICAgIC8qKiBSw7N0dWxvIGV4aWJpZG8gcGVsbyBjb21wb25lbnRlLiAqL1xyXG4gICAgbGFiZWw/OiBzdHJpbmc7XHJcbiAgICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xyXG4gICAgaGVscD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciBgdHJ1ZWAuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYHRydWVgXHJcbiAgICAgKi9cclxuICAgIGxhYmVsT24/OiBzdHJpbmc7XHJcbiAgICBzZXQgc2V0TGFiZWxPbihsYWJlbDogc3RyaW5nKTtcclxuICAgIC8qKlxyXG4gICAgICogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciBgZmFsc2VgLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgbGFiZWxPZmY/OiBzdHJpbmc7XHJcbiAgICBzZXQgc2V0TGFiZWxPZmYobGFiZWw6IHN0cmluZyk7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIFBvc2nDp8OjbyBkZSBleGliacOnw6NvIGRvIHLDs3R1bG8uXHJcbiAgICAgKlxyXG4gICAgICogPiBQb3IgcGFkcsOjbyBleGliZSDDoCBkaXJlaXRhLlxyXG4gICAgICovXHJcbiAgICBsYWJlbFBvc2l0aW9uPzogUG9Td2l0Y2hMYWJlbFBvc2l0aW9uO1xyXG4gICAgc2V0IHNldExhYmVsUG9zaXRpb24ocG9zaXRpb246IFBvU3dpdGNoTGFiZWxQb3NpdGlvbik7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEluZGljYSBzZSBvIGNhbXBvIHNlcsOhIGRlc2FiaWxpdGFkby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbik7XHJcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGFsdGVyYXIgdmFsb3IgZG8gY2FtcG8uICovXHJcbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIG5nTW9kZWxDaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNoYW5nZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgZXZlbnRDbGljaygpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxufVxyXG4iXX0=