import { Renderer2, AfterViewInit } from '@angular/core';
import { PoI18nPipe } from '../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../services/po-notification/po-notification.service';
import { PoProgressStatus } from '../../po-progress/enums/po-progress-status.enum';
import { PoUploadBaseComponent } from './po-upload-base.component';
import { PoUploadFile } from './po-upload-file';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
/**
 * @docsExtends PoUploadBaseComponent
 *
 * @example
 *
 * <example name="po-upload-basic" title="PO Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="PO Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="PO Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="PO Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoUploadComponent extends PoUploadBaseComponent implements AfterViewInit {
    renderer: Renderer2;
    private i18nPipe;
    private notification;
    infoByUploadStatus: {
        [key: string]: {
            text: (percent?: number) => string;
            icon?: string;
        };
    };
    progressStatusByFileStatus: {
        0: PoProgressStatus;
        2: PoProgressStatus;
    };
    private calledByCleanInputValue;
    private inputFile;
    private poUploadDragDropComponent;
    private uploadButton;
    constructor(uploadService: PoUploadService, renderer: Renderer2, i18nPipe: PoI18nPipe, notification: PoNotificationService);
    get displayDragDrop(): boolean;
    get displaySendButton(): boolean;
    get selectFileButtonLabel(): string;
    get hasMoreThanFourItems(): boolean;
    get hasMultipleFiles(): boolean;
    get hasFileNotUploaded(): boolean;
    get isDisabled(): boolean;
    get maxFiles(): number;
    cancel(file: PoUploadFile): void;
    ngAfterViewInit(): void;
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    focus(): void;
    hasAnyFileUploading(files: Array<PoUploadFile>): boolean;
    isAllowCancelEvent(status: PoUploadStatus): boolean;
    onFileChange(event: any): void;
    onFileChangeDragDrop(files: any): void;
    removeFile(file: any): void;
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles(): void;
    sendFeedback(): void;
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles(): void;
    setDirectoryAttribute(canHandleDirectory: boolean): void;
    stopUpload(file: PoUploadFile): void;
    trackByFn(index: any, file: PoUploadFile): string;
    uploadFiles(files: Array<PoUploadFile>): void;
    private cleanInputValue;
    private responseHandler;
    private setPipeArguments;
    private stopUploadHandler;
    private updateFiles;
    private updateModel;
    private uploadingHandler;
    private mapCleanUploadFiles;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoUploadComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoUploadComponent, "po-upload", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby11cGxvYWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvSTE4blBpcGUgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1pMThuL3BvLWkxOG4ucGlwZSc7XHJcbmltcG9ydCB7IFBvTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLW5vdGlmaWNhdGlvbi9wby1ub3RpZmljYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFBvUHJvZ3Jlc3NTdGF0dXMgfSBmcm9tICcuLi8uLi9wby1wcm9ncmVzcy9lbnVtcy9wby1wcm9ncmVzcy1zdGF0dXMuZW51bSc7XHJcbmltcG9ydCB7IFBvVXBsb2FkQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdXBsb2FkLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9VcGxvYWRGaWxlIH0gZnJvbSAnLi9wby11cGxvYWQtZmlsZSc7XHJcbmltcG9ydCB7IFBvVXBsb2FkU2VydmljZSB9IGZyb20gJy4vcG8tdXBsb2FkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb1VwbG9hZFN0YXR1cyB9IGZyb20gJy4vcG8tdXBsb2FkLXN0YXR1cy5lbnVtJztcclxuLyoqXHJcbiAqIEBkb2NzRXh0ZW5kcyBQb1VwbG9hZEJhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLXVwbG9hZC1iYXNpY1wiIHRpdGxlPVwiUE8gVXBsb2FkIEJhc2ljXCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby11cGxvYWQtYmFzaWMvc2FtcGxlLXBvLXVwbG9hZC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby11cGxvYWQtYmFzaWMvc2FtcGxlLXBvLXVwbG9hZC1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby11cGxvYWQtbGFic1wiIHRpdGxlPVwiUE8gVXBsb2FkIExhYnNcIj5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXVwbG9hZC1sYWJzL3NhbXBsZS1wby11cGxvYWQtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby11cGxvYWQtbGFicy9zYW1wbGUtcG8tdXBsb2FkLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdXBsb2FkLXJlc3VtZVwiIHRpdGxlPVwiUE8gVXBsb2FkIC0gUmVzdW1lXCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby11cGxvYWQtcmVzdW1lL3NhbXBsZS1wby11cGxvYWQtcmVzdW1lLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXVwbG9hZC1yZXN1bWUvc2FtcGxlLXBvLXVwbG9hZC1yZXN1bWUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdXBsb2FkLXJzXCIgdGl0bGU9XCJQTyBVcGxvYWQgLSBSZWFsaXplICYgU2hvd1wiPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdXBsb2FkLXJzL3NhbXBsZS1wby11cGxvYWQtcnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdXBsb2FkLXJzL3NhbXBsZS1wby11cGxvYWQtcnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9VcGxvYWRDb21wb25lbnQgZXh0ZW5kcyBQb1VwbG9hZEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XHJcbiAgICBwcml2YXRlIGkxOG5QaXBlO1xyXG4gICAgcHJpdmF0ZSBub3RpZmljYXRpb247XHJcbiAgICBpbmZvQnlVcGxvYWRTdGF0dXM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiB7XHJcbiAgICAgICAgICAgIHRleHQ6IChwZXJjZW50PzogbnVtYmVyKSA9PiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGljb24/OiBzdHJpbmc7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBwcm9ncmVzc1N0YXR1c0J5RmlsZVN0YXR1czoge1xyXG4gICAgICAgIDA6IFBvUHJvZ3Jlc3NTdGF0dXM7XHJcbiAgICAgICAgMjogUG9Qcm9ncmVzc1N0YXR1cztcclxuICAgIH07XHJcbiAgICBwcml2YXRlIGNhbGxlZEJ5Q2xlYW5JbnB1dFZhbHVlO1xyXG4gICAgcHJpdmF0ZSBpbnB1dEZpbGU7XHJcbiAgICBwcml2YXRlIHBvVXBsb2FkRHJhZ0Ryb3BDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHVwbG9hZEJ1dHRvbjtcclxuICAgIGNvbnN0cnVjdG9yKHVwbG9hZFNlcnZpY2U6IFBvVXBsb2FkU2VydmljZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgaTE4blBpcGU6IFBvSTE4blBpcGUsIG5vdGlmaWNhdGlvbjogUG9Ob3RpZmljYXRpb25TZXJ2aWNlKTtcclxuICAgIGdldCBkaXNwbGF5RHJhZ0Ryb3AoKTogYm9vbGVhbjtcclxuICAgIGdldCBkaXNwbGF5U2VuZEJ1dHRvbigpOiBib29sZWFuO1xyXG4gICAgZ2V0IHNlbGVjdEZpbGVCdXR0b25MYWJlbCgpOiBzdHJpbmc7XHJcbiAgICBnZXQgaGFzTW9yZVRoYW5Gb3VySXRlbXMoKTogYm9vbGVhbjtcclxuICAgIGdldCBoYXNNdWx0aXBsZUZpbGVzKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgaGFzRmlsZU5vdFVwbG9hZGVkKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgaXNEaXNhYmxlZCgpOiBib29sZWFuO1xyXG4gICAgZ2V0IG1heEZpbGVzKCk6IG51bWJlcjtcclxuICAgIGNhbmNlbChmaWxlOiBQb1VwbG9hZEZpbGUpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICAvKiogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yICoqbGltcGFyKiogbyhzKSBhcnF1aXZvKHMpIHNlbGVjaW9uYWRvKHMpLiAqL1xyXG4gICAgY2xlYXIoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRnVuw6fDo28gcXVlIGF0cmlidWkgZm9jbyBhbyBjb21wb25lbnRlLlxyXG4gICAgICpcclxuICAgICAqIFBhcmEgdXRpbGl6w6EtbGEgw6kgbmVjZXNzw6FyaW8gdGVyIGEgaW5zdMOibmNpYSBkbyBjb21wb25lbnRlIG5vIERPTSwgcG9kZW5kbyBzZXIgdXRpbGl6YWRvIG8gVmlld0NoaWxkIGRhIHNlZ3VpbnRlIGZvcm1hOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogaW1wb3J0IHsgUG9VcGxvYWRDb21wb25lbnQgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcbiAgICAgKlxyXG4gICAgICogLi4uXHJcbiAgICAgKlxyXG4gICAgICogQFZpZXdDaGlsZChQb1VwbG9hZENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgdXBsb2FkOiBQb1VwbG9hZENvbXBvbmVudDtcclxuICAgICAqXHJcbiAgICAgKiBmb2N1c1VwbG9hZCgpIHtcclxuICAgICAqICAgdGhpcy51cGxvYWQuZm9jdXMoKTtcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBmb2N1cygpOiB2b2lkO1xyXG4gICAgaGFzQW55RmlsZVVwbG9hZGluZyhmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPik6IGJvb2xlYW47XHJcbiAgICBpc0FsbG93Q2FuY2VsRXZlbnQoc3RhdHVzOiBQb1VwbG9hZFN0YXR1cyk6IGJvb2xlYW47XHJcbiAgICBvbkZpbGVDaGFuZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBvbkZpbGVDaGFuZ2VEcmFnRHJvcChmaWxlczogYW55KTogdm9pZDtcclxuICAgIHJlbW92ZUZpbGUoZmlsZTogYW55KTogdm9pZDtcclxuICAgIC8qKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgKiphYnJpcioqIGEgamFuZWxhIHBhcmEgc2VsZcOnw6NvIGRlIGFycXVpdm8ocykuICovXHJcbiAgICBzZWxlY3RGaWxlcygpOiB2b2lkO1xyXG4gICAgc2VuZEZlZWRiYWNrKCk6IHZvaWQ7XHJcbiAgICAvKiogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yICoqZW52aWFyKiogbyhzKSBhcnF1aXZvKHMpIHNlbGVjaW9uYWRvKHMpLiAqL1xyXG4gICAgc2VuZEZpbGVzKCk6IHZvaWQ7XHJcbiAgICBzZXREaXJlY3RvcnlBdHRyaWJ1dGUoY2FuSGFuZGxlRGlyZWN0b3J5OiBib29sZWFuKTogdm9pZDtcclxuICAgIHN0b3BVcGxvYWQoZmlsZTogUG9VcGxvYWRGaWxlKTogdm9pZDtcclxuICAgIHRyYWNrQnlGbihpbmRleDogYW55LCBmaWxlOiBQb1VwbG9hZEZpbGUpOiBzdHJpbmc7XHJcbiAgICB1cGxvYWRGaWxlcyhmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPik6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNsZWFuSW5wdXRWYWx1ZTtcclxuICAgIHByaXZhdGUgcmVzcG9uc2VIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBzZXRQaXBlQXJndW1lbnRzO1xyXG4gICAgcHJpdmF0ZSBzdG9wVXBsb2FkSGFuZGxlcjtcclxuICAgIHByaXZhdGUgdXBkYXRlRmlsZXM7XHJcbiAgICBwcml2YXRlIHVwZGF0ZU1vZGVsO1xyXG4gICAgcHJpdmF0ZSB1cGxvYWRpbmdIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBtYXBDbGVhblVwbG9hZEZpbGVzO1xyXG59XHJcbiJdfQ==