import { EventEmitter } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../../services/po-notification/po-notification.service';
import { PoUploadLiterals } from '../interfaces/po-upload-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoUploadDragDropDirective {
    private i18nPipe;
    private notification;
    timeout: any;
    private files;
    private invalidFileType;
    areaElement: HTMLElement;
    directoryCompatible: boolean;
    disabled: boolean;
    literals: PoUploadLiterals;
    dragLeave: EventEmitter<any>;
    dragOver: EventEmitter<any>;
    fileChange: EventEmitter<any>;
    constructor(i18nPipe: PoI18nPipe, notification: PoNotificationService);
    onDragLeave(event: any): void;
    onDragOver(event: any): void;
    onDrop(event: any): void;
    private getFilesFromDataTransferItems;
    private getFilesFromEntry;
    private getOnlyDirectories;
    private getOnlyFiles;
    private readFile;
    private readDirectory;
    private readDirectoryEntries;
    private sendFeedback;
    private sendFiles;
    private setPipeArguments;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoUploadDragDropDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoUploadDragDropDirective, "[p-upload-drag-drop]", never, { "areaElement": "p-area-element"; "directoryCompatible": "p-directory-compatible"; "disabled": "p-disabled"; "literals": "p-literals"; }, { "dragLeave": "p-drag-leave"; "dragOver": "p-drag-over"; "fileChange": "p-file-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWRyYWctZHJvcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicG8tdXBsb2FkLWRyYWctZHJvcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvSTE4blBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1pMThuL3BvLWkxOG4ucGlwZSc7XHJcbmltcG9ydCB7IFBvTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL3BvLW5vdGlmaWNhdGlvbi9wby1ub3RpZmljYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFBvVXBsb2FkTGl0ZXJhbHMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXVwbG9hZC1saXRlcmFscy5pbnRlcmZhY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1VwbG9hZERyYWdEcm9wRGlyZWN0aXZlIHtcclxuICAgIHByaXZhdGUgaTE4blBpcGU7XHJcbiAgICBwcml2YXRlIG5vdGlmaWNhdGlvbjtcclxuICAgIHRpbWVvdXQ6IGFueTtcclxuICAgIHByaXZhdGUgZmlsZXM7XHJcbiAgICBwcml2YXRlIGludmFsaWRGaWxlVHlwZTtcclxuICAgIGFyZWFFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIGRpcmVjdG9yeUNvbXBhdGlibGU6IGJvb2xlYW47XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIGxpdGVyYWxzOiBQb1VwbG9hZExpdGVyYWxzO1xyXG4gICAgZHJhZ0xlYXZlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRyYWdPdmVyOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGZpbGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgY29uc3RydWN0b3IoaTE4blBpcGU6IFBvSTE4blBpcGUsIG5vdGlmaWNhdGlvbjogUG9Ob3RpZmljYXRpb25TZXJ2aWNlKTtcclxuICAgIG9uRHJhZ0xlYXZlKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgb25EcmFnT3ZlcihldmVudDogYW55KTogdm9pZDtcclxuICAgIG9uRHJvcChldmVudDogYW55KTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0RmlsZXNGcm9tRGF0YVRyYW5zZmVySXRlbXM7XHJcbiAgICBwcml2YXRlIGdldEZpbGVzRnJvbUVudHJ5O1xyXG4gICAgcHJpdmF0ZSBnZXRPbmx5RGlyZWN0b3JpZXM7XHJcbiAgICBwcml2YXRlIGdldE9ubHlGaWxlcztcclxuICAgIHByaXZhdGUgcmVhZEZpbGU7XHJcbiAgICBwcml2YXRlIHJlYWREaXJlY3Rvcnk7XHJcbiAgICBwcml2YXRlIHJlYWREaXJlY3RvcnlFbnRyaWVzO1xyXG4gICAgcHJpdmF0ZSBzZW5kRmVlZGJhY2s7XHJcbiAgICBwcml2YXRlIHNlbmRGaWxlcztcclxuICAgIHByaXZhdGUgc2V0UGlwZUFyZ3VtZW50cztcclxufVxyXG4iXX0=