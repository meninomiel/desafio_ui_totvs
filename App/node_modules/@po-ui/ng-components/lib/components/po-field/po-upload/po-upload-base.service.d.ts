import { EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PoUploadFile } from './po-upload-file';
import { Observable, Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class PoUploadBaseService {
    private http;
    formField: string;
    requests: Array<any>;
    constructor(http: HttpClient);
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    upload(url: string, files: Array<PoUploadFile>, tOnUpload: EventEmitter<any>, uploadCallback: (file: PoUploadFile, percent: number) => void, successCallback: (file: PoUploadFile, event: any) => void, errorCallback: (file: PoUploadFile, event: any) => void): void;
    sendFile(url: string, file: PoUploadFile, formData: FormData, uploadCallback: (file: PoUploadFile, percent: number) => void, successCallback: (file: PoUploadFile, event: any) => void, errorCallback: (file: PoUploadFile, event: any) => void): void;
    getRequest(url: string, formData: FormData): Observable<any>;
    stopRequestByFile(file: any, callback: () => void): void;
    removeRequest(requestObj: any): void;
    addRequest(file: PoUploadFile, request: Subscription): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoUploadBaseService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PoUploadBaseService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWJhc2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwby11cGxvYWQtYmFzZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBQb1VwbG9hZEZpbGUgfSBmcm9tICcuL3BvLXVwbG9hZC1maWxlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvVXBsb2FkQmFzZVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBodHRwO1xyXG4gICAgZm9ybUZpZWxkOiBzdHJpbmc7XHJcbiAgICByZXF1ZXN0czogQXJyYXk8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgZW52aWFyIG9zIGFycXVpdm9zIGFvIHNlcnZpZG9yLCBjb25mb3JtZSBvIHBhcsOibWV0cm8gVVJMLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgVVJMIGRhIHJlcXVpc2nDp8OjbyBhIHNlciBlZmV0dWFkYS5cclxuICAgICAqIEBwYXJhbSBmaWxlcyBBcnF1aXZvcyBhIHNlcmVtIGVudmlhZG9zLlxyXG4gICAgICogQHBhcmFtIHRPblVwbG9hZCBGdW7Dp8OjbyBhIHNlciBleGVjdXRhZGEgcXVhbmRvIG8gYXJxdWl2byBmb3IgZW52aWFkbyBhbyBzZXJ2aWRvci5cclxuICAgICAqIEBwYXJhbSB1cGxvYWRDYWxsYmFjayBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGVucXVhbnRvIG9zIGFycXVpdm9zIGVzdGl2ZXJlbSBzZW5kbyBlbnZpYWRvcy5cclxuICAgICAqIEBwYXJhbSBzdWNjZXNzQ2FsbGJhY2sgRnVuw6fDo28gYSBzZXIgZXhlY3V0YWRhIHF1YW5kbyBhIHJlcXVpc2nDp8OjbyBmb3IgZWZldHVhZGEgY29tIHN1Y2Vzc28uXHJcbiAgICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayBGdW7Dp8OjbyBhIHNlciBleGVjdXRhZGEgcXVhbmRvIGEgcmVxdWlzacOnw6NvIGZvaSBlZmV0dWFkYSBjb20gc3VjZXNzby5cclxuICAgICAqL1xyXG4gICAgdXBsb2FkKHVybDogc3RyaW5nLCBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPiwgdE9uVXBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PiwgdXBsb2FkQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIHBlcmNlbnQ6IG51bWJlcikgPT4gdm9pZCwgc3VjY2Vzc0NhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBldmVudDogYW55KSA9PiB2b2lkLCBlcnJvckNhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBldmVudDogYW55KSA9PiB2b2lkKTogdm9pZDtcclxuICAgIHNlbmRGaWxlKHVybDogc3RyaW5nLCBmaWxlOiBQb1VwbG9hZEZpbGUsIGZvcm1EYXRhOiBGb3JtRGF0YSwgdXBsb2FkQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIHBlcmNlbnQ6IG51bWJlcikgPT4gdm9pZCwgc3VjY2Vzc0NhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBldmVudDogYW55KSA9PiB2b2lkLCBlcnJvckNhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBldmVudDogYW55KSA9PiB2b2lkKTogdm9pZDtcclxuICAgIGdldFJlcXVlc3QodXJsOiBzdHJpbmcsIGZvcm1EYXRhOiBGb3JtRGF0YSk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIHN0b3BSZXF1ZXN0QnlGaWxlKGZpbGU6IGFueSwgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgcmVtb3ZlUmVxdWVzdChyZXF1ZXN0T2JqOiBhbnkpOiB2b2lkO1xyXG4gICAgYWRkUmVxdWVzdChmaWxlOiBQb1VwbG9hZEZpbGUsIHJlcXVlc3Q6IFN1YnNjcmlwdGlvbik6IHZvaWQ7XHJcbn1cclxuIl19