import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoTextareaBaseComponent implements ControlValueAccessor, Validator {
    private _disabled;
    private _maxlength;
    private _minlength;
    private _readonly;
    private _required;
    private _rows;
    private modelLastUpdate;
    private onChangePropagate;
    private onTouched;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Label do campo. */
    label?: string;
    /** Texto de apoio do campo. */
    help?: string;
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
    placeholder?: string;
    /** Nome e Id do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(readonly: boolean);
    get readonly(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(minlength: number);
    get minlength(): number;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(maxlength: number);
    get maxlength(): number;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * @default `3`
     */
    set rows(value: number);
    get rows(): number;
    /** Evento disparado ao sair do campo. */
    blur?: EventEmitter<any>;
    /** Evento disparado ao entrar do campo. */
    enter?: EventEmitter<any>;
    /** Evento disparado ao alterar valor e deixar o campo. */
    change?: EventEmitter<any>;
    /** Evento disparado ao alterar valor do model. */
    changeModel?: EventEmitter<any>;
    callOnChange(value: any): void;
    controlChangeModelEmitter(value: any): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(func: any): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    protected validateModel(): void;
    abstract writeValueModel(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTextareaBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTextareaBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "placeholder": "p-placeholder"; "disabled": "p-disabled"; "readonly": "p-readonly"; "required": "p-required"; "minlength": "p-minlength"; "maxlength": "p-maxlength"; "rows": "p-rows"; "label": "p-label"; "help": "p-help"; "name": "name"; "optional": "p-optional"; }, { "blur": "p-blur"; "enter": "p-enter"; "change": "p-change"; "changeModel": "p-change-model"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGV4dGFyZWEtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tdGV4dGFyZWEtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBFc3RlIMOpIHVtIGNvbXBvbmVudGUgZGUgZW50cmFkYSBkZSBkYWRvcyBxdWUgcG9zc2liaWxpdGEgbyBwcmVlY2hpbWVudG8gY29tIG3Dumx0aXBsYXMgbGluaGFzLlxyXG4gKiDDiSByZWNvbWVuZGFkbyBwYXJhIG9ic2VydmHDp8O1ZXMsIGRldGFsaGFtZW50b3MgZSBvdXRyYXMgc2l0dWHDp8O1ZXMgb25kZSBvIHVzdcOhcmlvIGRldmEgcHJlZW5jaGVyIGNvbSB1bSB0ZXh0by5cclxuICpcclxuICogSW1wb3J0YW50ZTpcclxuICpcclxuICogLSBBIHByb3ByaWVkYWRlIGBuYW1lYCDDqSBvYnJpZ2F0w7NyaWEgcGFyYSBxdWUgbyBmb3JtdWzDoXJpbyBlIG8gYG1vZGVsYCBmdW5jaW9uZW0gY29ycmV0YW1lbnRlLiBEbyBjb250csOhcmlvLCBvY29ycmVyw6EgdW0gZXJybyBkZVxyXG4gKiBfQW5ndWxhcl8sIG9uZGUgc2Vyw6EgbmVjZXNzw6FyaW8gaW5mb3JtYXIgbyBhdHJpYnV0byBgbmFtZWAgb3UgbyBhdHJpYnV0byBgW25nTW9kZWxPcHRpb25zXT1cIntzdGFuZGFsb25lOiB0cnVlfVwiYCwgcG9yIGV4ZW1wbG86XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiA8cG8tdGV4dGFyZWFcclxuICogICBbKG5nTW9kZWwpXT1cInBlc3NvYS5ub21lXCJcclxuICogICBbbmdNb2RlbE9wdGlvbnNdPVwie3N0YW5kYWxvbmU6IHRydWV9XCI+XHJcbiAqIDwvcG8tdGV4dGFyZWE+XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9UZXh0YXJlYUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xyXG4gICAgcHJpdmF0ZSBfbWF4bGVuZ3RoO1xyXG4gICAgcHJpdmF0ZSBfbWlubGVuZ3RoO1xyXG4gICAgcHJpdmF0ZSBfcmVhZG9ubHk7XHJcbiAgICBwcml2YXRlIF9yZXF1aXJlZDtcclxuICAgIHByaXZhdGUgX3Jvd3M7XHJcbiAgICBwcml2YXRlIG1vZGVsTGFzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgb25DaGFuZ2VQcm9wYWdhdGU7XHJcbiAgICBwcml2YXRlIG9uVG91Y2hlZDtcclxuICAgIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBBcGxpY2EgZm9jbyBubyBlbGVtZW50byBhbyBzZXIgaW5pY2lhZG8uXHJcbiAgICAgKlxyXG4gICAgICogPiBDYXNvIG1haXMgZGUgdW0gZWxlbWVudG8gc2VqYSBjb25maWd1cmFkbyBjb20gZXNzYSBwcm9wcmllZGFkZSwgYXBlbmFzIG8gw7psdGltbyBlbGVtZW50byBkZWNsYXJhZG8gY29tIGVsYSB0ZXLDoSBvIGZvY28uXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBhdXRvRm9jdXM6IGJvb2xlYW47XHJcbiAgICAvKiogTGFiZWwgZG8gY2FtcG8uICovXHJcbiAgICBsYWJlbD86IHN0cmluZztcclxuICAgIC8qKiBUZXh0byBkZSBhcG9pbyBkbyBjYW1wby4gKi9cclxuICAgIGhlbHA/OiBzdHJpbmc7XHJcbiAgICAvKiogUGxhY2Vob2xkZXIsIG1lbnNhZ2VtIHF1ZSBhcGFyZWNlcsOhIGVucXVhbnRvIG8gY2FtcG8gbsOjbyBlc3RpdmVyIHByZWVuY2hpZG8uICovXHJcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuICAgIC8qKiBOb21lIGUgSWQgZG8gY29tcG9uZW50ZS4gKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIGRlc2FiaWxpdGFkby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbik7XHJcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cclxuICAgICAqXHJcbiAgICAgKiA+IE7Do28gc2Vyw6EgZXhpYmlkYSBhIGluZGljYcOnw6NvIHNlOlxyXG4gICAgICogLSBPIGNhbXBvIGNvbnRlciBgcC1yZXF1aXJlZGA7XHJcbiAgICAgKiAtIE7Do28gcG9zc3VpciBgcC1oZWxwYCBlL291IGBwLWxhYmVsYC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIG9wdGlvbmFsOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6Egc29tZW50ZSBsZWl0dXJhLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgICAqL1xyXG4gICAgc2V0IHJlYWRvbmx5KHJlYWRvbmx5OiBib29sZWFuKTtcclxuICAgIGdldCByZWFkb25seSgpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6Egb2JyaWdhdMOzcmlvLlxyXG4gICAgICpcclxuICAgICAqID4gRXN0YSBwcm9wcmllZGFkZSDDqSBkZXNjb25zaWRlcmFkYSBxdWFuZG8gbyBfaW5wdXRfIGVzdMOhIGRlc2FiaWxpdGFkbyBgKHAtZGlzYWJsZWQpYC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCByZXF1aXJlZChyZXF1aXJlZDogYm9vbGVhbik7XHJcbiAgICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogSW5kaWNhIGEgcXVhbnRpZGFkZSBtw61uaW1hIGRlIGNhcmFjdGVyZXMgcXVlIG8gY2FtcG8gYWNlaXRhLlxyXG4gICAgICovXHJcbiAgICBzZXQgbWlubGVuZ3RoKG1pbmxlbmd0aDogbnVtYmVyKTtcclxuICAgIGdldCBtaW5sZW5ndGgoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBJbmRpY2EgYSBxdWFudGlkYWRlIG3DoXhpbWEgZGUgY2FyYWN0ZXJlcyBxdWUgbyBjYW1wbyBhY2VpdGEuXHJcbiAgICAgKi9cclxuICAgIHNldCBtYXhsZW5ndGgobWF4bGVuZ3RoOiBudW1iZXIpO1xyXG4gICAgZ2V0IG1heGxlbmd0aCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEluZGljYSBhIHF1YW50aWRhZGUgZGUgbGluaGFzIHF1ZSBzZXLDo28gZXhpYmlkYXMuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYDNgXHJcbiAgICAgKi9cclxuICAgIHNldCByb3dzKHZhbHVlOiBudW1iZXIpO1xyXG4gICAgZ2V0IHJvd3MoKTogbnVtYmVyO1xyXG4gICAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gc2FpciBkbyBjYW1wby4gKi9cclxuICAgIGJsdXI/OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGVudHJhciBkbyBjYW1wby4gKi9cclxuICAgIGVudGVyPzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBhbHRlcmFyIHZhbG9yIGUgZGVpeGFyIG8gY2FtcG8uICovXHJcbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGFsdGVyYXIgdmFsb3IgZG8gbW9kZWwuICovXHJcbiAgICBjaGFuZ2VNb2RlbD86IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgY2FsbE9uQ2hhbmdlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgY29udHJvbENoYW5nZU1vZGVsRW1pdHRlcih2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZnVuYzogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZ1bmM6IGFueSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZ1bmM6IGFueSk6IHZvaWQ7XHJcbiAgICB2YWxpZGF0ZShhYnN0cmFjdENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbiAgICB9O1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCB2YWxpZGF0ZU1vZGVsKCk6IHZvaWQ7XHJcbiAgICBhYnN0cmFjdCB3cml0ZVZhbHVlTW9kZWwodmFsdWU6IGFueSk6IHZvaWQ7XHJcbn1cclxuIl19