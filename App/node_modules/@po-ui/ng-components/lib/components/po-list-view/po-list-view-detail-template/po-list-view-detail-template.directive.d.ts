import { TemplateRef } from '@angular/core';
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoListViewDetailTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     */
    showDetail: (item: any) => boolean;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoListViewDetailTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoListViewDetailTemplateDirective, "[p-list-view-detail-template]", never, { "showDetail": "p-show-detail"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamFtIGFwcmVzZW50YWRhcyBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgZGUgY2FkYSBpdGVtLCBjb25zdHJ1aW5kbyB1bVxyXG4gKiBib3TDo28gYEV4aWJpciBkZXRhbGhlc2AgYWJhaXhvIGRvIGNvbnRlw7pkbyBwcmluY2lwYWwgZG8gaXRlbS5cclxuICpcclxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxyXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cclxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxyXG4gKlxyXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAuLi5cclxuICogPHBvLWxpc3Qtdmlld1xyXG4gKiAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcclxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxyXG4gKlxyXG4gKiAgIDxuZy10ZW1wbGF0ZSBwLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUgbGV0LWl0ZW0gbGV0LWNvZGU9XCJpbmRleFwiPlxyXG4gKiAgICAgPGRpdiBjbGFzcz1cInBvLXJvd1wiPlxyXG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cImNvZGVcIj48L3BvLWluZm8+XHJcbiAqICAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtMTJcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgPC9uZy10ZW1wbGF0ZT5cclxuICpcclxuICogPC9wby1saXN0LXZpZXc+XHJcbiAqXHJcbiAqIC4uLlxyXG4gKiBgYGBcclxuICpcclxuICogYGBgXHJcbiAqIC4uLlxyXG4gKiA8cG8tbGlzdC12aWV3XHJcbiAqICAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcclxuICogICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cclxuICogICAgPGRpdiAqcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cclxuICogICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cclxuICogICAgPC9kaXY+XHJcbiAqIDwvcG8tbGlzdC12aWV3PlxyXG4gKiAuLi5cclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUge1xyXG4gICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gYGJvb2xlYW5gLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gYSB2YWxpZGHDp8OjbyBwYXJhIHF1ZSBvIGRldGFsaGUgZGUgaXRlbVxyXG4gICAgICogZGEgbGlzdGEgaW5pY2llIGFiZXJ0byBvdSBmZWNoYWRvLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgc2hvd0RldGFpbDogKGl0ZW06IGFueSkgPT4gYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcclxufVxyXG4iXX0=