import { AfterContentInit, ChangeDetectorRef, DoCheck, IterableDiffers } from '@angular/core';
import { PoPopupComponent } from '../po-popup/po-popup.component';
import { PoListViewAction } from './interfaces/po-list-view-action.interface';
import { PoListViewBaseComponent } from './po-list-view-base.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoListViewComponent extends PoListViewBaseComponent implements AfterContentInit, DoCheck {
    private changeDetector;
    listViewContentTemplate: PoListViewContentTemplateDirective;
    listViewDetailTemplate: PoListViewDetailTemplateDirective;
    poPopupComponent: PoPopupComponent;
    private differ;
    constructor(changeDetector: ChangeDetectorRef, differs: IterableDiffers);
    get hasContentTemplate(): boolean;
    get hasDetailTemplate(): boolean;
    get displayShowMoreButton(): boolean;
    get showButtonsActions(): boolean;
    get showPopupActions(): boolean;
    get titleHasAction(): boolean;
    get visibleActions(): PoListViewAction[];
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    checkTitleType(item: any): "externalLink" | "internalLink" | "noLink";
    getItemTitle(item: any): any;
    hasItems(): boolean;
    returnBooleanValue(listViewAction: PoListViewAction, item: any): any;
    trackBy(index: any): any;
    togglePopup(item: any, targetRef: HTMLElement): void;
    private checkItemsChange;
    private initShowDetail;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoListViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoListViewComponent, "po-list-view", never, {}, {}, ["listViewContentTemplate", "listViewDetailTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1saXN0LXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgSXRlcmFibGVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvUG9wdXBDb21wb25lbnQgfSBmcm9tICcuLi9wby1wb3B1cC9wby1wb3B1cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQb0xpc3RWaWV3QWN0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWxpc3Qtdmlldy1hY3Rpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1iYXNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFBvTGlzdFZpZXdEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vcG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XHJcbi8qKlxyXG4gKiBAZG9jc0V4dGVuZHMgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnRcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogPGV4YW1wbGUgbmFtZT1cInBvLWxpc3Qtdmlldy1iYXNpY1wiIHRpdGxlPVwiUE8gTGlzdCBWaWV3IEJhc2ljXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1iYXNpYy9zYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljL3NhbXBsZS1wby1saXN0LXZpZXctYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbGlzdC12aWV3LWxhYnNcIiB0aXRsZT1cIlBPIExpc3QgVmlldyBMYWJzXCI+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1sYWJzL3NhbXBsZS1wby1saXN0LXZpZXctbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XHJcbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1sYWJzL3NhbXBsZS1wby1saXN0LXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlc1wiIHRpdGxlPVwiUE8gTGlzdCBWaWV3IC0gSGlyaW5nIFByb2Nlc3Nlc1wiPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxyXG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMvc2FtcGxlLXBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLnNlcnZpY2UudHNcIj4gPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xpc3RWaWV3Q29tcG9uZW50IGV4dGVuZHMgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XHJcbiAgICBsaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZTogUG9MaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcclxuICAgIGxpc3RWaWV3RGV0YWlsVGVtcGxhdGU6IFBvTGlzdFZpZXdEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZTtcclxuICAgIHBvUG9wdXBDb21wb25lbnQ6IFBvUG9wdXBDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGRpZmZlcjtcclxuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKTtcclxuICAgIGdldCBoYXNDb250ZW50VGVtcGxhdGUoKTogYm9vbGVhbjtcclxuICAgIGdldCBoYXNEZXRhaWxUZW1wbGF0ZSgpOiBib29sZWFuO1xyXG4gICAgZ2V0IGRpc3BsYXlTaG93TW9yZUJ1dHRvbigpOiBib29sZWFuO1xyXG4gICAgZ2V0IHNob3dCdXR0b25zQWN0aW9ucygpOiBib29sZWFuO1xyXG4gICAgZ2V0IHNob3dQb3B1cEFjdGlvbnMoKTogYm9vbGVhbjtcclxuICAgIGdldCB0aXRsZUhhc0FjdGlvbigpOiBib29sZWFuO1xyXG4gICAgZ2V0IHZpc2libGVBY3Rpb25zKCk6IFBvTGlzdFZpZXdBY3Rpb25bXTtcclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBjaGVja1RpdGxlVHlwZShpdGVtOiBhbnkpOiBcImV4dGVybmFsTGlua1wiIHwgXCJpbnRlcm5hbExpbmtcIiB8IFwibm9MaW5rXCI7XHJcbiAgICBnZXRJdGVtVGl0bGUoaXRlbTogYW55KTogYW55O1xyXG4gICAgaGFzSXRlbXMoKTogYm9vbGVhbjtcclxuICAgIHJldHVybkJvb2xlYW5WYWx1ZShsaXN0Vmlld0FjdGlvbjogUG9MaXN0Vmlld0FjdGlvbiwgaXRlbTogYW55KTogYW55O1xyXG4gICAgdHJhY2tCeShpbmRleDogYW55KTogYW55O1xyXG4gICAgdG9nZ2xlUG9wdXAoaXRlbTogYW55LCB0YXJnZXRSZWY6IEhUTUxFbGVtZW50KTogdm9pZDtcclxuICAgIHByaXZhdGUgY2hlY2tJdGVtc0NoYW5nZTtcclxuICAgIHByaXZhdGUgaW5pdFNob3dEZXRhaWw7XHJcbn1cclxuIl19