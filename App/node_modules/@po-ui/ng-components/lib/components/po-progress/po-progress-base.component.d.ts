import { EventEmitter } from '@angular/core';
import { PoProgressStatus } from './enums/po-progress-status.enum';
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoProgressBaseComponent {
    private _indeterminate?;
    private _value?;
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate: boolean);
    get indeterminate(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     */
    info?: string;
    /**
     * @optional
     *
     * @description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     */
    infoIcon?: string;
    /**
     * @optional
     *
     * @description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * @default `PoProgressStatus.Default`
     */
    status: PoProgressStatus;
    /**
     * @optional
     *
     * @description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     */
    text?: string;
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value: number);
    get value(): number;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     */
    cancel: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     */
    retry: EventEmitter<any>;
    private isProgressRangeValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoProgressBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoProgressBaseComponent, never, never, { "status": "p-status"; "indeterminate": "p-indeterminate"; "value": "p-value"; "info": "p-info"; "infoIcon": "p-info-icon"; "text": "p-text"; }, { "cancel": "p-cancel"; "retry": "p-retry"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb1Byb2dyZXNzU3RhdHVzIH0gZnJvbSAnLi9lbnVtcy9wby1wcm9ncmVzcy1zdGF0dXMuZW51bSc7XHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQ29tcG9uZW50ZSBkZSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIHBvc3NpYmlsaXRhIGV4aWJpciB2aXN1YWxtZW50ZSBvIHByb2dyZXNzby9jYXJyZWdhbWVudG8gZGUgdW1hIHRhcmVmYS5cclxuICpcclxuICogRXN0ZSBjb21wb25lbnRlIHBvZGUgc2VyIHV0aWxpemFkbyBubyAqdXBsb2FkKiBkZSBhcnF1aXZvcywgdW1hIGF0dWFsaXphw6fDo28gbm8gc2lzdGVtYSBvdSBvIHByb2Nlc3NhbWVudG8gZGUgdW1hIGltYWdlbS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUHJvZ3Jlc3NCYXNlQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgX2luZGV0ZXJtaW5hdGU/O1xyXG4gICAgcHJpdmF0ZSBfdmFsdWU/O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBIYWJpbGl0YSBvIG1vZG8gaW5kZXRlcm1pbmFkbyBuYSBiYXJyYSBkZSBwcm9ncmVzc28sIHF1ZSBtb3N0cmEgdW1hIGFuaW1hw6fDo28gZml4YSBzZW0gdW0gdmFsb3IgZXN0YWJlbGVjaWRvLlxyXG4gICAgICpcclxuICAgICAqIEVzdGEgb3DDp8OjbyBwb2RlIHNlciB1dGlsaXphZGEgcXVhbmRvIG7Do28gc291YmVyIHF1YW50byB0ZW1wbyBsZXZhcsOhIHBhcmEgcXVlIHVtIHByb2Nlc3NvIHNlamEgY29uY2x1w61kby5cclxuICAgICAqXHJcbiAgICAgKiA+IENhc28gZXN0YSBwcm9wcmllZGFkZSBlIGEgYHAtdmFsdWVgIHNlamEgaGFiaWxpdGFkYSwgYSBwcm9wcmllZGFkZSBgcC12YWx1ZWAgc2Vyw6EgaWdub3JhZGEuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICBzZXQgaW5kZXRlcm1pbmF0ZShpbmRldGVybWluYXRlOiBib29sZWFuKTtcclxuICAgIGdldCBpbmRldGVybWluYXRlKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEluZm9ybWHDp8OjbyBhZGljaW9uYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBhbyBsYWRvIGRpcmVpdG8uXHJcbiAgICAgKi9cclxuICAgIGluZm8/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIMONY29uZSBxdWUgYXBhcmVjZXLDoSBhbyBsYWRvIGRvIHRleHRvIGRhIHByb3ByaWVkYWRlIGBwLWluZm9gLlxyXG4gICAgICpcclxuICAgICAqIEV4ZW1wbG86IGBwby1pY29uLW9rYC5cclxuICAgICAqL1xyXG4gICAgaW5mb0ljb24/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIFN0YXR1cyBkYSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIGluZGljYXLDoSB2aXN1YWxtZW50ZSBhbyB1c3XDoXJpb1xyXG4gICAgICogbyBhbmRhbWVudG8sIHBvciBleGVtcGxvLCBzZSBhIG1lc21hIGZvaSBjb25jbHXDrWRhIGNvbSBzdWNlc3NvLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGBQb1Byb2dyZXNzU3RhdHVzLkRlZmF1bHRgXHJcbiAgICAgKi9cclxuICAgIHN0YXR1czogUG9Qcm9ncmVzc1N0YXR1cztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogVGV4dG8gcHJpbmNpcGFsIHF1ZSBhcGFyZWNlcsOhIGFiYWl4byBkYSBiYXJyYSBkZSBwcm9ncmVzc28gbm8gbGFkbyBlc3F1ZXJkby5cclxuICAgICAqL1xyXG4gICAgdGV4dD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogVmFsb3IgcXVlIHJlcHJlc2VudGFyw6EgbyBwcm9ncmVzc28uXHJcbiAgICAgKlxyXG4gICAgICogPiBPcyB2YWxvcmVzIGFjZWl0b3Mgc8OjbyBuw7ptZXJvcyBpbnRlaXJvcyBkZSBgMGAgw6AgYDEwMGAuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYDBgXHJcbiAgICAgKi9cclxuICAgIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKTtcclxuICAgIGdldCB2YWx1ZSgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyDDrWNvbmUgZGUgY2FuY2VsYW1lbnRvIChcInhcIikgbmEgcGFydGUgaW5mZXJpb3IgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxyXG4gICAgICpcclxuICAgICAqIEFvIHNlciBkaXNwYXJhZG8sIGEgZnVuw6fDo28gcmVjZWJlcsOhIGNvbW8gcGFyw6JtZXRybyBvIHN0YXR1cyBhdHVhbCBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXHJcbiAgICAgKlxyXG4gICAgICogPiBTZSBuZW5odW1hIGZ1bsOnw6NvIGZvciBwYXNzYWRhIHBhcmEgbyBldmVudG8gb3UgYSBiYXJyYSBkZSBwcm9ncmVzc28gZXN0aXZlciBjb20gbyBzdGF0dXMgYFBvUHJvZ3Jlc3NTdGF0dXMuU3VjY2Vzc2AsXHJcbiAgICAgKiBvIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gbsOjbyBzZXLDoSBleGliaWRvLlxyXG4gICAgICovXHJcbiAgICBjYW5jZWw6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAb3B0aW9uYWxcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gw61jb25lIGRlIHRlbnRhciBub3ZhbWVudGUgbmEgcGFydGUgaW5mZXJpb3IgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxyXG4gICAgICpcclxuICAgICAqID4gbyDDrWNvbmUgc2Vyw6EgZXhpYmlkbyBhcGVuYXMgc2UgaW5mb3JtYXIgdW1hIGZ1bsOnw6NvIG5lc3RlIGV2ZW50byBlIG8gc3RhdHVzIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBmb3JcclxuICAgICAqIGBQb1Byb2dyZXNzU3RhdHVzLkVycm9yYC5cclxuICAgICAqL1xyXG4gICAgcmV0cnk6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgcHJpdmF0ZSBpc1Byb2dyZXNzUmFuZ2VWYWx1ZTtcclxufVxyXG4iXX0=