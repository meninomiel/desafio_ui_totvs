import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoTableAction } from './interfaces/po-table-action.interface';
import { PoTableColumn } from './interfaces/po-table-column.interface';
import { PoTableColumnSort } from './interfaces/po-table-column-sort.interface';
import { PoTableLiterals } from './interfaces/po-table-literals.interface';
export declare const poTableContainer: string[];
export declare const poTableContainerDefault = "border";
export declare const poTableLiteralsDefault: {
    en: PoTableLiterals;
    es: PoTableLiterals;
    pt: PoTableLiterals;
    ru: PoTableLiterals;
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
export declare abstract class PoTableBaseComponent implements OnChanges {
    private poDate;
    private _actions?;
    private _columns;
    private _container?;
    private _height?;
    private _hideDetail?;
    private _hideTextOverflow?;
    private _items;
    private _literals;
    private _loading?;
    private _selectable?;
    allColumnsWidthPixels: boolean;
    columnMasterDetail: PoTableColumn;
    hasMainColumns: boolean;
    mainColumns: Array<PoTableColumn>;
    selectAll: boolean;
    sortedColumn: {
        property: PoTableColumn;
        ascending: boolean;
    };
    subtitleColumns: Array<PoTableColumn>;
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items: Array<any>);
    get items(): Array<any>;
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns: Array<PoTableColumn>);
    get columns(): Array<PoTableColumn>;
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value: string);
    get container(): string;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
     */
    set hideTextOverflow(hideTextOverflow: boolean);
    get hideTextOverflow(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     */
    set height(height: number);
    get height(): number;
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail: boolean);
    get hideDetail(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoTableLiterals);
    get literals(): PoTableLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
     *
     * @default `false`
     */
    set loading(loading: boolean);
    get loading(): boolean;
    /**
     * @optional
     *
     * @deprecated 3.x.x
     *
     * @description
     *
     * ***Deprecated 3.x.x***
     *
     * > Esta propriedade está depreciada, utilize a propriedade `p-selectable`.
     *
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
     * > Exemplo: `item.$selected` ou `item['$selected']`.
     * > Os itens filhos possuem comportamento independente do item pai.
     *
     * @default `false`
     */
    set checkbox(checkbox: boolean);
    get checkbox(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions: Array<PoTableAction>);
    get actions(): Array<PoTableAction>;
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value: boolean);
    get selectable(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * @default `false`
     */
    sort?: boolean;
    set setSort(sort: string);
    /**
     * @description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * @default `false`
     */
    showMoreDisabled?: boolean;
    set setShowMoreDisabled(showMoreDisabled: string);
    /**
     * @description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * @default `false`
     */
    striped?: boolean;
    set setStriped(striped: string);
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * @default `false`
     */
    hideSelectAll?: boolean;
    set setHideSelectAll(hideSelectAll: string);
    /**
     * @description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     */
    singleSelect?: boolean;
    set setSingleSelect(value: string);
    /**
     * @optional
     *
     * @description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     */
    maxColumns?: number;
    /** Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas. */
    allSelected?: EventEmitter<any>;
    /** Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas. */
    allUnselected?: EventEmitter<any>;
    /**
     * Evento executado ao colapsar uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed?: EventEmitter<any>;
    /**
     * Evento executado ao expandir uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded?: EventEmitter<any>;
    /** Evento executado ao selecionar uma linha do `po-table`. */
    selected?: EventEmitter<any>;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    showMore?: EventEmitter<PoTableColumnSort>;
    /**
     * Evento executado ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    sortBy?: EventEmitter<PoTableColumnSort>;
    /** Evento executado ao desmarcar a seleção de uma linha do `po-table`. */
    unselected?: EventEmitter<any>;
    get hasColumns(): boolean;
    get hasItems(): boolean;
    get nameColumnDetail(): string;
    get validColumns(): PoTableColumn[];
    private get sortType();
    constructor(poDate: PoDateService);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex: number): void;
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex: number): void;
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows(): any[];
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows(): any[];
    selectAllRows(): void;
    selectRow(row: any): void;
    selectDetailRow(row: any): void;
    getClassColor(row: any, column: any): string;
    toggleDetail(row: any): void;
    toggleRowAction(row: any): void;
    sortColumn(column: PoTableColumn): void;
    onShowMore(): void;
    protected abstract calculateHeightTableContainer(height: any): any;
    protected abstract calculateWidthHeaders(): any;
    protected getDefaultColumns(item: any): {
        label: string;
        property: string;
    }[];
    private configAfterSelectRow;
    private emitExpandEvents;
    private emitSelectAllEvents;
    private emitSelectEvents;
    private getColumnColor;
    private getColumnMasterDetail;
    private getMainColumns;
    private getSubtitleColumns;
    private isEverySelected;
    private onChangeColumns;
    private setColumnLink;
    private setColumnMasterDetail;
    private setMainColumns;
    private setShowDetail;
    private setSubtitleColumns;
    private sortArray;
    private unselectOtherRows;
    private verifyWidthColumnsPixels;
}
