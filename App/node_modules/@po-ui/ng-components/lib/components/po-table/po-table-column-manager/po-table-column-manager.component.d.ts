import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Renderer2 } from '@angular/core';
import { PoCheckboxGroupOption } from '../../po-field/po-checkbox-group/interfaces/po-checkbox-group-option.interface';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import { PoTableColumn } from '../interfaces/po-table-column.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poTableColumnManagerLiteralsDefault: {
    en: {
        columnsManager: string;
        restoreDefault: string;
    };
    es: {
        columnsManager: string;
        restoreDefault: string;
    };
    pt: {
        columnsManager: string;
        restoreDefault: string;
    };
    ru: {
        columnsManager: string;
        restoreDefault: string;
    };
};
export declare class PoTableColumnManagerComponent implements OnInit, OnChanges, OnDestroy {
    private renderer;
    private _maxColumns;
    columnsOptions: Array<PoCheckboxGroupOption>;
    literals: any;
    visibleColumns: Array<string>;
    private defaultColumns;
    private resizeListener;
    columns: Array<PoTableColumn>;
    set maxColumns(value: number);
    get maxColumns(): number;
    target: ElementRef;
    visibleColumnsChange: EventEmitter<PoTableColumn[]>;
    popover: PoPopoverComponent;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onChangeVisibleColumns(checkedColumns: Array<string>): void;
    restore(): void;
    private disableColumnsOptions;
    private getColumnTitleLabel;
    /** Retorna um Array de column.property das colunas que são visiveis. */
    private getVisibleColumns;
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    private getVisibleTableColumns;
    private initializeListeners;
    private isDisableColumn;
    private mapTableColumnsToCheckboxOptions;
    private onChangeColumns;
    private removeListeners;
    private updateColumnsOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTableColumnManagerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoTableColumnManagerComponent, "po-table-column-manager", never, { "columns": "p-columns"; "maxColumns": "p-max-columns"; "target": "p-target"; }, { "visibleColumnsChange": "p-visible-columns-change"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLW1hbmFnZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9DaGVja2JveEdyb3VwT3B0aW9uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tY2hlY2tib3gtZ3JvdXAvaW50ZXJmYWNlcy9wby1jaGVja2JveC1ncm91cC1vcHRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9Qb3BvdmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcG8tcG9wb3Zlci9wby1wb3BvdmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb1RhYmxlQ29sdW1uTWFuYWdlckxpdGVyYWxzRGVmYXVsdDoge1xyXG4gICAgZW46IHtcclxuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xyXG4gICAgICAgIHJlc3RvcmVEZWZhdWx0OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgZXM6IHtcclxuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xyXG4gICAgICAgIHJlc3RvcmVEZWZhdWx0OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgcHQ6IHtcclxuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xyXG4gICAgICAgIHJlc3RvcmVEZWZhdWx0OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgcnU6IHtcclxuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xyXG4gICAgICAgIHJlc3RvcmVEZWZhdWx0OiBzdHJpbmc7XHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1RhYmxlQ29sdW1uTWFuYWdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHByaXZhdGUgX21heENvbHVtbnM7XHJcbiAgICBjb2x1bW5zT3B0aW9uczogQXJyYXk8UG9DaGVja2JveEdyb3VwT3B0aW9uPjtcclxuICAgIGxpdGVyYWxzOiBhbnk7XHJcbiAgICB2aXNpYmxlQ29sdW1uczogQXJyYXk8c3RyaW5nPjtcclxuICAgIHByaXZhdGUgZGVmYXVsdENvbHVtbnM7XHJcbiAgICBwcml2YXRlIHJlc2l6ZUxpc3RlbmVyO1xyXG4gICAgY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj47XHJcbiAgICBzZXQgbWF4Q29sdW1ucyh2YWx1ZTogbnVtYmVyKTtcclxuICAgIGdldCBtYXhDb2x1bW5zKCk6IG51bWJlcjtcclxuICAgIHRhcmdldDogRWxlbWVudFJlZjtcclxuICAgIHZpc2libGVDb2x1bW5zQ2hhbmdlOiBFdmVudEVtaXR0ZXI8UG9UYWJsZUNvbHVtbltdPjtcclxuICAgIHBvcG92ZXI6IFBvUG9wb3ZlckNvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG9uQ2hhbmdlVmlzaWJsZUNvbHVtbnMoY2hlY2tlZENvbHVtbnM6IEFycmF5PHN0cmluZz4pOiB2b2lkO1xyXG4gICAgcmVzdG9yZSgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBkaXNhYmxlQ29sdW1uc09wdGlvbnM7XHJcbiAgICBwcml2YXRlIGdldENvbHVtblRpdGxlTGFiZWw7XHJcbiAgICAvKiogUmV0b3JuYSB1bSBBcnJheSBkZSBjb2x1bW4ucHJvcGVydHkgZGFzIGNvbHVuYXMgcXVlIHPDo28gdmlzaXZlaXMuICovXHJcbiAgICBwcml2YXRlIGdldFZpc2libGVDb2x1bW5zO1xyXG4gICAgLyoqIFJldG9ybmEgdW0gQXJyYXkgUG9UYWJsZUNvbHVtbiBhIHBhcnRpciBkYXMgY29sdW5hcyB2aXNpdmVpcyBubyBnZXJlbmNpYWRvciBkZSBjb2x1bmFzLiAqL1xyXG4gICAgcHJpdmF0ZSBnZXRWaXNpYmxlVGFibGVDb2x1bW5zO1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplTGlzdGVuZXJzO1xyXG4gICAgcHJpdmF0ZSBpc0Rpc2FibGVDb2x1bW47XHJcbiAgICBwcml2YXRlIG1hcFRhYmxlQ29sdW1uc1RvQ2hlY2tib3hPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNvbHVtbnM7XHJcbiAgICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycztcclxuICAgIHByaXZhdGUgdXBkYXRlQ29sdW1uc09wdGlvbnM7XHJcbn1cclxuIl19