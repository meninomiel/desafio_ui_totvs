import { TemplateRef } from '@angular/core';
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoTableRowTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * @default `true`
     */
    poTableRowTemplateShow: (row: any, index: number) => boolean;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTableRowTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTableRowTemplateDirective, "[p-table-row-template]", never, { "poTableRowTemplateShow": "p-table-row-template-show"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJwby10YWJsZS1yb3ctdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8qKlxyXG4gKiBAdXNlZEJ5IFBvVGFibGVDb21wb25lbnRcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYSBhcHJlc2VudGFkYSBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgYSByZXNwZWl0byBkZSB1bWEgZGV0ZXJtaW5hZGEgbGluaGEgZGVcclxuICogZGFkb3MsIGRlIGZvcm1hIHF1ZSBwb3NzYW0gc2VyIGV4aWJpZGFzIGUgb2N1bHRhZGFzIGF0cmF2w6lzIGRvIGJvdMOjbyBkZSBhY2lvbmFtZW50by5cclxuICpcclxuICogPiBRdWFuZG8gdXRpbGl6YWRhLCBzb2JyZXDDtWUgYXMgZnVuY2lvbmFsaWRhZGUgYsOhc2ljYXMgZG8gKm1hc3Rlci1kZXRhaWwqLlxyXG4gKlxyXG4gKiBFbSBzZXUgdXNvLCBkZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRhIF9saW5oYV8gZS9vdSBfw61uZGljZV8sIHNlbmRvIHBvciBwYWRyw6NvIGxpbmhhLiBDYXNvIG7Do28gc2VqYSBkZWNsYXJhZG8sXHJcbiAqIG8gY29tcG9uZW50ZSBuw6NvIGV4aWJpcsOhIGNvbnRlw7pkby5cclxuICogIC0gTGluaGE6IGByb3dgIGRldGVybWluYSBvIGl0ZW0gZGEgbGluaGEgY29ycmVudGUuXHJcbiAqICAtIMONbmRpY2U6IGByb3dJbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cclxuICpcclxuICogRXN0YSBkaXJldGl2YSBjb21ww7VlLXNlIGRlIGRvaXMgbWVpb3MgcGFyYSB1c28sIGRlIGZvcm1hIGV4cGzDrWNpdGEgdGFsIGNvbW8gZW0gKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcclxuICpcclxuICogYGBgXHJcbiAqIC4uLlxyXG4gKiA8cG8tdGFibGVcclxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxyXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XHJcbiAqICAgICA8bmctdGVtcGxhdGUgcC10YWJsZS1yb3ctdGVtcGxhdGUgbGV0LXJvd0l0ZW0gbGV0LWk9XCJyb3dJbmRleFwiIFtwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93XT1cImlzU2hvd1wiPlxyXG4gKiAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj48L2RldGFpbC1yb3c+XHJcbiAqICAgICA8L25nLXRlbXBsYXRlPlxyXG4gKiAuLi5cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAuLi5cclxuICogPHBvLXRhYmxlXHJcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcclxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxyXG4gKiAgICAgPGRpdiAqcC10YWJsZS1yb3ctdGVtcGxhdGU9XCJsZXQgcm93SXRlbSwgbGV0IGk9cm93SW5kZXhcIj5cclxuICogICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+PC9kZXRhaWwtcm93PlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBgYGBcclxuICpcclxuICogQSBkaXJldGl2YSAqKnAtdGFibGUtcm93LXRlbXBsYXRlKiosIHBvc3NpYmlsaXRhIHRhbWLDqW0gcXVlIGRldGVybWluYWRhIGxpbmhhIGFwcmVzZW50ZSBvdSBuw6NvIHNldSBfdGVtcGxhdGVfLiBQYXJhIGlzdG8sXHJcbiAqIMOpIG5lY2Vzc8OhcmlvIGF0cmlidWlyIGEgcmVmZXLDqm5jaWEgZGEgZnVuw6fDo28gcXVlIGZheiBlc3RhIHZlcmlmaWNhw6fDo28sIMOgIHByb3ByaWVkYWRlIGBwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93YCxcclxuICogYSBtZXNtYSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gKmJvb2xlYW4qLiBWZWphIG8gZXhlbXBsbyBhIHNlZ3VpcjpcclxuICpcclxuICogYGBgXHJcbiAqIC4uLlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXHJcbiAqICAgIHRlbXBsYXRlVXJsOiBgXHJcbiAqICAgICAgLi4uXHJcbiAqICAgICAgPHBvLXRhYmxlXHJcbiAqICAgICAgICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxyXG4gKiAgICAgICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cclxuICogICAgICAgICAgPG5nLXRlbXBsYXRlIHAtdGFibGUtcm93LXRlbXBsYXRlIGxldC1yb3dJdGVtIGxldC1pPVwicm93SW5kZXhcIiBbcC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd109XCJpc1VuZGVsaXZlcmVkXCI+XHJcbiAqICAgICAgICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+IDwvZGV0YWlsLXJvdz5cclxuICogICAgICAgICAgPC9kaXY+XHJcbiAqICAgICAgLi4uXHJcbiAqICAgIGBcclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAqICAgIHB1YmxpYyBkYXRhVGFibGUgPSBbe1xyXG4gKiAgICAgIGNvZGU6IDEyMDAsXHJcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxyXG4gKiAgICAgIGNvc3R1bWVyOiAnU3VwZXJtYXJrZXQgMScsXHJcbiAqICAgICAgcXVhbnRpdHk6IDMsXHJcbiAqICAgICAgc3RhdHVzOiAnZGVsaXZlcmVkJyxcclxuICogICAgICBsaWNlbnNlX3BsYXRlOiAnTURKRDkxOTEnLFxyXG4gKiAgICAgIGJhdGNoX3Byb2R1Y3Q6IDE4MDQxODIyLFxyXG4gKiAgICAgIGRyaXZlcjogJ0pvc8OpIE9saXZlaXJhJ1xyXG4gKiAgICB9LCB7XHJcbiAqICAgICAgY29kZTogMTM1NSxcclxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXHJcbiAqICAgICAgY29zdHVtZXI6ICdTdXBlcm1hcmtldCAyJyxcclxuICogICAgICBxdWFudGl0eTogMSxcclxuICogICAgICBzdGF0dXM6ICd0cmFuc3BvcnQnLFxyXG4gKiAgICAgIGxpY2Vuc2VfcGxhdGU6ICdYWEE1NDU0JyxcclxuICogICAgICBiYXRjaF9wcm9kdWN0OiAxODA0MTgyMSxcclxuICogICAgICBkcml2ZXI6ICdGcmFuY2lzY28gUGVyZWlyYSdcclxuICogICAgfV07XHJcbiAqXHJcbiAqICAgIGlzVW5kZWxpdmVyZWQocm93LCBpbmRleDogbnVtYmVyKSB7XHJcbiAqICAgICAgcmV0dXJuIHJvdy5zdGF0dXMgIT09ICdkZWxpdmVyZWQnO1xyXG4gKiAgICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqID4gTm8gZXhlbXBsbyBhY2ltYSwgc29tZW50ZSBzZXLDoSBkaXNwb25pYmlsaXphZG8gb3MgZGV0YWxoZXMgZGUgaW5mb3JtYcOnw7VlcyBuYXMgbGluaGFzIGN1am8gbyB2YWxvciBkZSBgc3RhdHVzYFxyXG4gKiBuw6NvIGNvcnJlc3BvbmRhbSDDoCAqZGVsaXZlcmVkKi5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvVGFibGVSb3dUZW1wbGF0ZURpcmVjdGl2ZSB7XHJcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgYm9vbGVhbm8sIGluZm9ybWFuZG8gc2UgYXByZXNlbnRhcsOhIG8gdGVtcGxhdGUgZGEgbGluaGEuXHJcbiAgICAgKiBTZXLDo28gcGFzc2Fkb3MgbyBvYmpldG8gZGEgbGluaGEgZSBvIGluZGljZSBkYSBtZXNtYSBwb3IgcGFyw6JtZXRybywgcGFyYSBxdWUgc2VqYSBwb3Nzw612ZWxcclxuICAgICAqIHRvbWFyIHVtYSBkZWNpc8OjbyBhIHBhcnRpciBkbyBvYmpldG8gZGEgbGluaGEgY29ycmVudGUuXHJcbiAgICAgKlxyXG4gICAgICogQ2FzbyBuw6NvIHNlciB1dGlsaXphZG8gZXN0YSBwcm9wcmllZGFkZSwgc2Vyw6NvIGFwcmVzZW50YWRvcyB0b2RvcyBvcyBkZXRhbGhlcyBkYXMgbGluaGFzLlxyXG4gICAgICpcclxuICAgICAqIEBkZWZhdWx0IGB0cnVlYFxyXG4gICAgICovXHJcbiAgICBwb1RhYmxlUm93VGVtcGxhdGVTaG93OiAocm93OiBhbnksIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pik7XHJcbn1cclxuIl19