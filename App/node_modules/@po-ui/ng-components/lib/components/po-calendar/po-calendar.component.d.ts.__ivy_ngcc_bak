import { OnInit } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { PoCalendarBaseComponent } from './po-calendar-base.component';
import { PoCalendarLangService } from './services/po-calendar.lang.service';
import { PoCalendarService } from './services/po-calendar.service';
import { PoDateService } from '../../services/po-date/po-date.service';
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
export declare class PoCalendarComponent extends PoCalendarBaseComponent implements OnInit {
    private poCalendarService;
    constructor(poCalendarService: PoCalendarService, poCalendarLangService: PoCalendarLangService, poDate: PoDateService);
    ngOnInit(): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "po-calendar-box-background-selected" | "po-calendar-box-background";
    getDayBackgroundColor(date: Date): string;
    getDayForegroundColor(date: Date): string;
    getForegroundColor(displayValue: number, propertyValue: number): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground";
    getMonthLabel(): any;
    getYearLabel(): any;
    onNextMonth(): void;
    onPreviousMonth(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    registerOnChange(fn: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    selectDay(): void;
    selectMonth(): void;
    selectYear(): void;
    updateYear(value: number): void;
    validateModel(model: any): void;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    private addAllYearsInDecade;
    private equalsDate;
    private getDecadeArray;
    private getColorForDate;
    private getColorForDateRange;
    private getColorForToday;
    private getDayColor;
    private init;
    private selectDateFromDate;
    private selectDateFromIso;
    private updateDate;
    private updateDecade;
    private updateDisplay;
    private writeDate;
    private writeDateIso;
}
