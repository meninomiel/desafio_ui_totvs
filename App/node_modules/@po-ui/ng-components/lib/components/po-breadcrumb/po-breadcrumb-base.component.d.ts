import { PoBreadcrumbItem } from './po-breadcrumb-item.interface';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoBreadcrumbBaseComponent {
    itemsView: Array<PoBreadcrumbItem>;
    private _items;
    /**
     * @optional
     *
     * @description
     *
     * Permite definir uma URL no componente `po-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `PoBreadcrumbItem` da lista de items da propriedade `p-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `po-breadcrumb` faz um GET na URL definida na propriedade `p-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `PoBreadcrumbItem` definido na lista de itens da propriedade `p-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `po-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `p-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `p-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://po-ui.io/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `po-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://po.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `p-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     */
    favoriteService?: string;
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items: Array<PoBreadcrumbItem>);
    get items(): Array<PoBreadcrumbItem>;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     */
    paramsService?: object;
    protected clickoutListener: () => void;
    protected resizeListener: () => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoBreadcrumbBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoBreadcrumbBaseComponent, never, never, { "items": "p-items"; "favoriteService": "p-favorite-service"; "paramsService": "p-params-service"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1icmVhZGNydW1iLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEVzdGUgY29tcG9uZW50ZSBnZXJhIHVtYSBlc3RydXR1cmEgZGUgbmF2ZWdhw6fDo28gcXVlIGFwcmVzZW50YSBhbyB1c3XDoXJpbyBhIGxvY2FsaXphw6fDo29cclxuICogZGEgVVJMIGF0dWFsLCBleGliaW5kbyBhcyBhbnRlY2Vzc29yYXMgY29uZm9ybWUgw6kgcmVhbGl6YWRvIGEgbmF2ZWdhw6fDo28gbmEgYXBsaWNhw6fDo28uXHJcbiAqXHJcbiAqIFF1YW5kbyBuw6NvIGhvdXZlciBlc3Bhw6dhbWVudG8gc3VmaWNpZW50ZSBwYXJhIGV4aWJpLWzDoXMsIG8gY29tcG9uZW50ZSBzZSBlbmNhcnJlZ2EgdGFtYsOpbVxyXG4gKiBkZSBhZ3J1cGFyIGFzIFVSTHMgYW50ZWNlc3NvcmFzLCBnZXJhbmRvIGFzc2ltIHVtIMOtY29uZSBxdWUgcGVybWl0ZSBhIHZpc3VhbGl6YcOnw6NvIGVtIGNhc2NhdGEuXHJcbiAqXHJcbiAqIENhc28gdW0gZW5kZXJlw6dvIHNlamEgZXNwZWNpZmljYWRvIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgLCBvIGNvbXBvbmVudGUgcGVybWl0ZSBhbyB1c3XDoXJpb1xyXG4gKiBmYXZvcml0YXIgYSBVUkwuXHJcbiAqXHJcbiAqIEhhdmVuZG8gbmVjZXNzaWRhZGUgZGUgaW5jbHVpciBwYXLDom1ldHJvcyBuYSByZXF1aXNpw6fDo28gZG8gc2VydmnDp28sXHJcbiAqIG8gY29tcG9uZW50ZSBkaXNww7VlIGRhIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCBxdWUgcmVjZWJlIHVtIG9iamV0byBjb250ZW5kbyBhcyBpbmZvcm1hw6fDtWVzLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudCB7XHJcbiAgICBpdGVtc1ZpZXc6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+O1xyXG4gICAgcHJpdmF0ZSBfaXRlbXM7XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHBvLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cclxuICAgICAqID4gUGFyYSB1dGlsaXphciBlc3RhIHByb3ByaWVkYWRlLCBvIMO6bHRpbW8gYFBvQnJlYWRjcnVtYkl0ZW1gIGRhIGxpc3RhIGRlIGl0ZW1zIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYCBkZXZlIHRlciB1bSBsaW5rIGluZm9ybWFkby5cclxuICAgICAqXHJcbiAgICAgKiA+IEEgQVBJIGRldmUgZXN0YXIgcHJlcGFyYWRhIHBhcmEgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8gYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YC5cclxuICAgICAqXHJcbiAgICAgKiBBbyBpbmljaWFyLCBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gR0VUIG5hIFVSTCBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCBlIGRldmUgcmV0b3JuYXIgYSBwcm9wcmllZGFkZVxyXG4gICAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXHJcbiAgICAgKlxyXG4gICAgICogQW8gY2xpY2FyIGVtIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIFBPU1QgY29tIG8gbGluayBlIGEgcHJvcHJpZWRhZGUgYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YFxyXG4gICAgICogZGVmaW5pZG9zIG5vIMO6bHRpbW8gaXRlbSBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXHJcbiAgICAgKlxyXG4gICAgICogPiBDYXNvIGFsZ3VtIHBhcsOibWV0cm8gc2VqYSBkZWZpbmlkbyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAsIG8gbWVzbW8gc2Vyw6EgZW52aWFkbyBwYXJhIGEgQVBJIGUgcmV0b3JuYXLDoVxyXG4gICAgICogYXDDs3MgZmF6ZXIgdW0gR0VUIG91IFBPU1QuXHJcbiAgICAgKlxyXG4gICAgICogRXhlbXBsbyBkZSBVUkwgY29udGVuZG8gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogaHR0cHM6Ly9wby11aS5pby9zYW1wbGUvYXBpL2Zhdm9yaXRlXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBBbyBmYXplciBvIEdFVCBvIGBwby1icmVhZGNydW1iYCBjb25jYXRlbmEgbyBsaW5rIGNvbSBhIFVSTCBkZSBzZXJ2acOnby4gRXhlbXBsbzpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIEdFVCBodHRwOi8vPGRvbWFpbj4vYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBHRVQgaHR0cDovL3BvLmNvbS5ici9zYW1wbGUvYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBQT1NUXHJcbiAgICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogJy9leGFtcGxlJyB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBDYXNvIHBvc3N1YSBwYXLDom1ldHJvcyBkZWZpbmlkb3MgbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgOlxyXG4gICAgICpcclxuICAgICAqIGBgYFxyXG4gICAgICogUE9TVFxyXG4gICAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvJyB9XCIgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiB7IGlzRmF2b3JpdGU6IGZhbHNlLCB1cmw6IFwiL2V4YW1wbGVcIiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG8nIH1cIiB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZmF2b3JpdGVTZXJ2aWNlPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfYnJlYWRjcnVtYl8uXHJcbiAgICAgKlxyXG4gICAgICogKipFeGVtcGxvOioqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIHsgbGFiZWw6ICdQbyBQb3J0YWwnLCBsaW5rOiAncG9ydGFsJyB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc2V0IGl0ZW1zKGl0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPik7XHJcbiAgICBnZXQgaXRlbXMoKTogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE9iamV0byBxdWUgcG9zc2liaWxpdGEgbyBlbnZpbyBkZSBwYXLDom1ldHJvcyBhZGljaW9uYWlzIMOgIHJlcXVpc2nDp8Ojby5cclxuICAgICAqL1xyXG4gICAgcGFyYW1zU2VydmljZT86IG9iamVjdDtcclxuICAgIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIHJlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG59XHJcbiJdfQ==