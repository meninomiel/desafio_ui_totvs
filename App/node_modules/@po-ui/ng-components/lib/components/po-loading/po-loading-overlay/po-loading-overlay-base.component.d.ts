import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoLoadingOverlayLiterals } from './interfaces/po-loading-overlay-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poLoadingOverlayLiteralsDefault: {
    en: PoLoadingOverlayLiterals;
    es: PoLoadingOverlayLiterals;
    pt: PoLoadingOverlayLiterals;
    ru: PoLoadingOverlayLiterals;
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export declare class PoLoadingOverlayBaseComponent {
    private languageService;
    private _screenLock?;
    private _text?;
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock: boolean);
    get screenLock(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value: string);
    get text(): string;
    constructor(languageService: PoLanguageService);
    private getTextDefault;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLoadingOverlayBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoLoadingOverlayBaseComponent, never, never, { "text": "p-text"; "screenLock": "p-screen-lock"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbG9hZGluZy1vdmVybGF5LWxpdGVyYWxzLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQ6IHtcclxuICAgIGVuOiBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM7XHJcbiAgICBlczogUG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzO1xyXG4gICAgcHQ6IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscztcclxuICAgIHJ1OiBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM7XHJcbn07XHJcbi8qKlxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogRXN0ZSBjb21wb25lbnRlIG1vc3RyYSBhbyB1c3XDoXJpbyB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBlIGJsb3F1ZWlhIGEgcMOhZ2luYSBpbnRlaXJhIG91IG8gY29udGFpbmVyIGVzY29saGlkbyxcclxuICogZW5xdWFudG8gYWd1YXJkYSBhIHJlc3Bvc3RhIGRlIGFsZ3VtYSByZXF1aXNpw6fDo28uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xvYWRpbmdPdmVybGF5QmFzZUNvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTtcclxuICAgIHByaXZhdGUgX3NjcmVlbkxvY2s/O1xyXG4gICAgcHJpdmF0ZSBfdGV4dD87XHJcbiAgICAvKipcclxuICAgICAqIEBvcHRpb25hbFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIERlZmluZSBzZSBvICpvdmVybGF5KiBzZXLDoSBhcGxpY2FkbyBhIHVtICpjb250YWluZXIqIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxyXG4gICAgICpcclxuICAgICAqIFBhcmEgdXRpbGl6YXIgbyBjb21wb25lbnRlIGNvbW8gdW0gKmNvbnRhaW5lciosIG8gZWxlbWVudG8gcGFpIGRldmVyw6EgcmVjZWJlciB1bWEgcG9zacOnw6NvIHJlbGF0aXZhLCBwb3IgZXhlbXBsbzpcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmVcIj5cclxuICAgICAqXHJcbiAgICAgKiAgPHBvLWNoYXJ0IFtwLXNlcmllc109XCJbeyB2YWx1ZTogMTAsIGNhdGVnb3J5OiAnRXhhbXBsZScgfV1cIj5cclxuICAgICAqICA8L3BvLWNoYXJ0PlxyXG4gICAgICpcclxuICAgICAqICA8cG8tbG9hZGluZy1vdmVybGF5PlxyXG4gICAgICogIDwvcG8tbG9hZGluZy1vdmVybGF5PlxyXG4gICAgICogPC9kaXY+XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICAgKi9cclxuICAgIHNldCBzY3JlZW5Mb2NrKHNjcmVlbkxvY2s6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IHNjcmVlbkxvY2soKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQG9wdGlvbmFsXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxyXG4gICAgICpcclxuICAgICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFsqKlBvSTE4bioqXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSBuYXZlZ2Fkb3IuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgYENhcnJlZ2FuZG9gXHJcbiAgICAgKi9cclxuICAgIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IHRleHQoKTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IobGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSk7XHJcbiAgICBwcml2YXRlIGdldFRleHREZWZhdWx0O1xyXG59XHJcbiJdfQ==