import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PoComponentInjectorService } from '../../services/po-component-injector/po-component-injector.service';
import { PoHttpRequesControltService } from './po-http-request-control-service';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoHttpRequestInterceptorService implements HttpInterceptor {
    private controlHttpRequest;
    private poComponentInjector;
    private loadingOverlayComponent;
    private pendingRequests;
    private overlayRequests;
    constructor(controlHttpRequest: PoHttpRequesControltService, poComponentInjector: PoComponentInjectorService);
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    getCountPendingRequests(): Observable<any>;
    private buildLoading;
    private destroyLoading;
    private requestCloneWithoutHeaderParam;
    private setCountPendingRequests;
    private setCountOverlayRequests;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoHttpRequestInterceptorService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1jb21wb25lbnQtaW5qZWN0b3IvcG8tY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb0h0dHBSZXF1ZXNDb250cm9sdFNlcnZpY2UgfSBmcm9tICcuL3BvLWh0dHAtcmVxdWVzdC1jb250cm9sLXNlcnZpY2UnO1xyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gc2VydmnDp28gUE8gSHR0cCBSZXF1ZXN0IEludGVyY2VwdG9yIHJlYWxpemEgYSBjb250YWJpbGl6YcOnw6NvIGRlIHJlcXVpc2nDp8O1ZXMgcGVuZGVudGVzIG5hIGFwbGljYcOnw6NvLlxyXG4gKlxyXG4gKiBFeGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIG7Do28gZWZldHVhciBhIGNvbnRhYmlsaXphw6fDo28gZGFzIHJlcXVpc2nDp8O1ZXMgcGVuZGVudGVzLCB1dGlsaXphbmRvIG8gcGFyw6JtZXRyb1xyXG4gKiBgWC1QTy1Oby1Db3VudC1QZW5kaW5nLVJlcXVlc3RzYC4gUGFyYSBpc3NvIGRldmUgc2VyIGluZm9ybWFkbyBubyBjYWJlw6dhbGhvIGRhIHJlcXVpc2nDp8OjbyBjb20gbyB2YWxvciBgJ3RydWUnYCxcclxuICogcG9yIGV4ZW1wbG86XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAuLi5cclxuICogIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLU5vLUNvdW50LVBlbmRpbmctUmVxdWVzdHMnOiAndHJ1ZScgfTtcclxuICpcclxuICogIHRoaXMuaHR0cC5nZXQoYC9jdXN0b21lcnMvMWAsIHsgaGVhZGVyczogaGVhZGVycyB9KTtcclxuICogLi4uXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBQYXJhIG9idGVyIGEgcXVhbnRpZGFkZSBkZSByZXF1aXNpw6fDtWVzIHBlbmRlbnRlcywgZGV2ZSBpbnNjcmV2ZXItc2Ugbm8gbcOpdG9kbyBgZ2V0Q291bnRQZW5kaW5nUmVxdWVzdHNgIGRvXHJcbiAqIHNlcnZpw6dvIGBQb0h0dHBSZXF1ZXN0SW50ZXJjZXB0b3JTZXJ2aWNlYCwgY29tIGlzc28sIGFvIHJlYWxpemFyIHJlcXVpc2nDp8O1ZXMgdXRpbGl6YW5kbyBgSHR0cENsaWVudGAsXHJcbiAqIHNlcsOhIHJldG9ybmFkbyBhIHF1YW50aWRhZGUgZGUgcmVxdWlzacOnw7VlcyBwZW5kZW50ZXMuXHJcbiAqXHJcbiAqIFRhbWLDqW0gZXhpc3RlIGEgcG9zc2liaWxkYWRlIGRlIHRyYXZhciBhIHRlbGEgZSBtb3N0cmFyIHVtYSBpbWFnZW0gZGUgX2xvYWRpbmdfIGR1cmFudGUgbyBwcm9jZXNzYW1lbnRvIGRlIHVtYSByZXF1aXNpw6fDo29cclxuICogZGV2ZS1zZSBwYXNzYXIgbyBwYXLDom1ldHJvIGBYLVBPLVNjcmVlbi1Mb2NrYCBubyBjYWJlw6dhbGhvIGRhIHJlcXVpc2nDp8OjbyBjb20gdmFsb3IgYCd0cnVlJ2AuXHJcbiAqXHJcbiAqIHBvciBleGVtcGxvOlxyXG4gKlxyXG4gKiBgYGBcclxuICogLi4uXHJcbiAqICBjb25zdCBoZWFkZXJzID0geyAnWC1QTy1TY3JlZW4tTG9jayc6ICd0cnVlJyB9O1xyXG4gKlxyXG4gKiAgdGhpcy5odHRwLmdldChgL2N1c3RvbWVycy8xYCwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG4gKiAuLi5cclxuICpcclxuICogYGBgXHJcbiAqID4gQXDDs3MgYSB2YWxpZGHDp8OjbyBubyBpbnRlcmNlcHRvciwgbyBwYXLDom1ldHJvIHNlcsOhIHJlbW92aWRvIGRvIGNhYmXDp2FsaG8gZGEgcmVxdWlzacOnw6NvLlxyXG4gKlxyXG4gKiBBbyBpbXBvcnRhciBvIG3Ds2R1bG8gYFBvTW9kdWxlYCBuYSBhcGxpY2HDp8OjbywgbyBgcG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yYCDDqSBhdXRvbWF0aWNhbWVudGUgY29uZmlndXJhZG8gc2VtIGEgbmVjZXNzaWRhZGVcclxuICogZGUgcXVhbHF1ZXIgY29uZmlndXJhw6fDo28gZXh0cmEuXHJcbiAqXHJcbiAqXHJcbiAqIFNlZ3VlIGFiYWl4byB1bSBleGVtcGxvIGRlIHVzbzpcclxuICpcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBASW5qZWN0YWJsZSgpXHJcbiAqIGV4cG9ydCBjbGFzcyBDdXN0b21lcnNTZXJ2aWNlIHtcclxuICpcclxuICogIGhlYWRlcnMgPSB7ICdYLVBPLU5vLUNvdW50LVBlbmRpbmctUmVxdWVzdHMnOiB0cnVlLCAnWC1QTy1TY3JlZW4tTG9jayc6ICd0cnVlJyB9XHJcbiAqICBwZW5kaW5nUmVxdWVzdHM6IG51bWJlciA9IDA7XHJcbiAqICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICpcclxuICogIGNvbnN0cnVjdG9yKFxyXG4gKiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAqICAgIHByaXZhdGUgaHR0cFJlcXVlc3RJbnRlcmNlcHRvcjogUG9IdHRwUmVxdWVzdEludGVyY2VwdG9yU2VydmljZSkgeyB9XHJcbiAqXHJcbiAqICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICogICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICogIH1cclxuICpcclxuICogIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gKiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuaHR0cFJlcXVlc3RJbnRlcmNlcHRvci5nZXRDb3VudFBlbmRpbmdSZXF1ZXN0cygpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICogICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cyA9IGRhdGE7XHJcbiAqICAgIH0pO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgZ2V0Q3VzdG9tZXJzKCkge1xyXG4gKiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgL2N1c3RvbWVycy8xYCwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgLi4uXHJcbiAqXHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIDxleGFtcGxlIG5hbWU9J3BvLWh0dHAtcmVxdWVzdC1pbnRlcmNlcHRvci1sYWJzJyB0aXRsZT0nUE8gSHR0cCBSZXF1ZXN0IEludGVyY2VwdG9yIExhYnMnPlxyXG4gKiAgPGZpbGUgbmFtZT0nc2FtcGxlLXBvLWh0dHAtcmVxdWVzdC1pbnRlcmNlcHRvci1sYWJzLmNvbXBvbmVudC50cyc+IDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9J3NhbXBsZS1wby1odHRwLXJlcXVlc3QtaW50ZXJjZXB0b3ItbGFicy5jb21wb25lbnQuaHRtbCc+IDwvZmlsZT5cclxuICogPC9leGFtcGxlPlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9IdHRwUmVxdWVzdEludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgICBwcml2YXRlIGNvbnRyb2xIdHRwUmVxdWVzdDtcclxuICAgIHByaXZhdGUgcG9Db21wb25lbnRJbmplY3RvcjtcclxuICAgIHByaXZhdGUgbG9hZGluZ092ZXJsYXlDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHBlbmRpbmdSZXF1ZXN0cztcclxuICAgIHByaXZhdGUgb3ZlcmxheVJlcXVlc3RzO1xyXG4gICAgY29uc3RydWN0b3IoY29udHJvbEh0dHBSZXF1ZXN0OiBQb0h0dHBSZXF1ZXNDb250cm9sdFNlcnZpY2UsIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKTtcclxuICAgIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgZ2V0Q291bnRQZW5kaW5nUmVxdWVzdHMoKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHJpdmF0ZSBidWlsZExvYWRpbmc7XHJcbiAgICBwcml2YXRlIGRlc3Ryb3lMb2FkaW5nO1xyXG4gICAgcHJpdmF0ZSByZXF1ZXN0Q2xvbmVXaXRob3V0SGVhZGVyUGFyYW07XHJcbiAgICBwcml2YXRlIHNldENvdW50UGVuZGluZ1JlcXVlc3RzO1xyXG4gICAgcHJpdmF0ZSBzZXRDb3VudE92ZXJsYXlSZXF1ZXN0cztcclxufVxyXG4iXX0=