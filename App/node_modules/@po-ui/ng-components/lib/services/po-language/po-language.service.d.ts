/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoLanguageService {
    set languageDefault(language: string);
    get languageDefault(): string;
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    getLanguage(): string;
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    getLanguageDefault(): string;
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    getShortLanguage(): string;
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguage(language: string): void;
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguageDefault(language: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLanguageService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwby1sYW5ndWFnZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZG9jc1ByaXZhdGVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgZ2VyZW5jaWFyIGFzIGxpbmd1YWdlbnMgZGEgYXBsaWNhw6fDo28uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xhbmd1YWdlU2VydmljZSB7XHJcbiAgICBzZXQgbGFuZ3VhZ2VEZWZhdWx0KGxhbmd1YWdlOiBzdHJpbmcpO1xyXG4gICAgZ2V0IGxhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICpcclxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBvIGlkaW9tYSBhdGl2by5cclxuICAgICAqXHJcbiAgICAgKiBBIGJ1c2NhIGRvIGlkaW9tYSBzZXLDoSBmZWl0YSBuYSBzZWd1aW50ZSBvcmRlbTpcclxuICAgICAqXHJcbiAgICAgKiAgIDEgLSBvIGlkaW9tYSBxdWUgZm9pIGFybWF6ZW5hZG8gbm8gKmxvY2FsU3RvcmFnZSosIGF0cmF2w6lzIGRvIG3DqXRvZG8gYHNldExhbmd1YWdlKClgIHV0aWxpemFkbyBwZWxvIGkxOG4uXHJcbiAgICAgKlxyXG4gICAgICogICAyIC0gbyB2YWxvciBpbnNlcmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpcyBkbyBwYXLDom1ldHJvIGBjb25maWdgLCBzZW5kbyBvIGlkaW9tYSBpbnNlcmlkb1xyXG4gICAgICogbmEgcHJvcHJpZWRhZGUgYGxhbmd1YWdlYCBkYSBpbnRlcmZhY2UgYFBvSTE4bkNvbmZpZ0RlZmF1bHRgLlxyXG4gICAgICpcclxuICAgICAqICAgMyAtIG8gaWRpb21hIGRvIG5hdmVnYWRvciB1dGlsaXphZG8uXHJcbiAgICAgKlxyXG4gICAgICogPiBDYXNvIG8gaWRpb21hIGRvIG5hdmVnYWRvciBuw6NvIHNlamEgc3Vwb3J0YWRvIHBlbG8gUE8gKGBwdGAsIGBlbmAsIGBlc2Agb3UgYHJ1YCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxyXG4gICAgICpcclxuICAgICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgYXRpdm8uXHJcbiAgICAgKi9cclxuICAgIGdldExhbmd1YWdlKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hICpkZWZhdWx0KiBkYSBhcGxpY2HDp8OjbyBkZWZpbmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpc1xyXG4gICAgICogZG8gcGFyw6JtZXRybyBgY29uZmlnYC5cclxuICAgICAqXHJcbiAgICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hICpkZWZhdWx0Ki5cclxuICAgICAqL1xyXG4gICAgZ2V0TGFuZ3VhZ2VEZWZhdWx0KCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIGEgYWJyZXZpYcOnw6NvIGRvIGlkaW9tYSBhdGl2byBuYSBhcGxpY2HDp8Ojby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBgcHRgXHJcbiAgICAgKlxyXG4gICAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGFicmV2aWFkYSBkbyBpZGlvbWEgYXRpdm8uXHJcbiAgICAgKi9cclxuICAgIGdldFNob3J0TGFuZ3VhZ2UoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBNw6l0b2RvIHBhcmEgc2FsdmFyIG8gaWRpb21hIGRhIGFwbGljYcOnw6NvIG5vICpzdG9yYWdlKiwgdXRpbGl6YWRvIHBlbG8gc2VydmnDp28gZG8gaTE4bi5cclxuICAgICAqXHJcbiAgICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIG3DqXRvZG8sIHRvZG9zIG9zIG3Ds2R1bG9zIGRhIGFwbGljYcOnw6NvIHV0aWxpemFyw6NvIG8gaWRpb21hIGRlZmluaWRvLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBzaWdsYSBkbyBpZGlvbWEuXHJcbiAgICAgKlxyXG4gICAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcclxuICAgICAqIHBvZGVuZG8gc2VyIGFkaWNpb25hZG8gb3V0cmFzIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBwYcOtcywgcG9yIGV4ZW1wbG86IGBwdGAsIGBwdC1CUmAsIGBwdC1icmAsIGBlbmAgb3UgYGVuLVVTYC5cclxuICAgICAqXHJcbiAgICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXHJcbiAgICAgKi9cclxuICAgIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBNw6l0b2RvIHF1ZSBkZWZpbmUgbyBpZGlvbWEgY29uZmlndXJhZG8gYSBwYXJ0aXIgZG8gcGFyw6JtZXRybyBgY29uZmlnYCB1dGlsaXphZG8gcGVsbyBtw7NkdWxvIGRvIGkxOG4uXHJcbiAgICAgKlxyXG4gICAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBzZXJ2acOnbywgYXBlbmFzIG8gbcOzZHVsbyBkbyBpMThuIHJlZmVyZW50ZSBhIGVzdGEgY29uZmlndXJhw6fDo28gdXRpbGl6YXLDoSBvIGlkaW9tYSBkZWZpbmlkby5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxyXG4gICAgICpcclxuICAgICAqIEVzdGEgc2lnbGEgZGV2ZSBzZXIgY29tcG9zdGEgcG9yIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBpZGlvbWEsXHJcbiAgICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXHJcbiAgICAgKlxyXG4gICAgICogPiBDYXNvIHNlamEgaW5mb3JtYWRvIHVtIHZhbG9yIGRpZmVyZW50ZSBkZXN0ZSBwYWRyw6NvLCBvIG1lc21vIHNlcsOhIGlnbm9yYWRvLlxyXG4gICAgICovXHJcbiAgICBzZXRMYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQ7XHJcbn1cclxuIl19