import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { PoComponentInjectorService } from './../po-component-injector/po-component-injector.service';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-component-injector/po-component-injector.service";
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
let PoNotificationService = class PoNotificationService extends PoNotificationBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === PoToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(() => {
                this.destroyToaster(componentRef);
            }, toaster.duration);
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.poComponentInjector.destroyComponentInApplication(toaster);
        for (let count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
};
PoNotificationService.ctorParameters = () => [
    { type: PoComponentInjectorService }
];
PoNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(i0.ɵɵinject(i1.PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
PoNotificationService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [PoComponentInjectorService])
], PoNotificationService);
export { PoNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1ub3RpZmljYXRpb24vcG8tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7QUFFdkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFLSCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFzQixTQUFRLHlCQUF5QjtJQUNsRSxZQUFvQixtQkFBK0M7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFEVSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTRCO0lBRW5FLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBa0I7UUFDOUIsTUFBTSxZQUFZLEdBQXNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWxILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwQyxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFZO1FBQ3pCLElBQUksS0FBSyxDQUFDO1FBRVYsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsS0FBSyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUU7WUFDN0QsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdkI7YUFBTTtZQUNMLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQzFCO1FBRUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsbUJBQW1CLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEUsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU8saUJBQWlCLENBQUMsWUFBaUI7UUFDekMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUFuRDBDLDBCQUEwQjs7O0FBRHhELHFCQUFxQjtJQUhqQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO3FDQUV5QywwQkFBMEI7R0FEeEQscUJBQXFCLENBb0RqQztTQXBEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UgfSBmcm9tICcuLy4uL3BvLWNvbXBvbmVudC1pbmplY3Rvci9wby1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBQb05vdGlmaWNhdGlvbkJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9wby1ub3RpZmljYXRpb24tYmFzZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvVG9hc3RlciB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLW9yaWVudGF0aW9uLmVudW0nO1xuaW1wb3J0IHsgUG9Ub2FzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9wby10b2FzdGVyL3BvLXRvYXN0ZXIuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW5vdGlmaWNhdGlvbi1iYXNpY1wiIHRpdGxlPVwiUE8gTm90aWZpY2F0aW9uIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1ub3RpZmljYXRpb24tbGFic1wiIHRpdGxlPVwiUE8gTm90aWZpY2F0aW9uIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzL3NhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbm90aWZpY2F0aW9uLXNhbGVzXCIgdGl0bGU9XCJQTyBOb3RpZmljYXRpb24gLSBTYWxlc1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzL3NhbXBsZS1wby1ub3RpZmljYXRpb24tc2FsZXMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzL3NhbXBsZS1wby1ub3RpZmljYXRpb24tc2FsZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQb05vdGlmaWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBQb05vdGlmaWNhdGlvbkJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yOiBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjcmVhdGVUb2FzdGVyKHRvYXN0ZXI6IFBvVG9hc3Rlcik6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSB0aGlzLnBvQ29tcG9uZW50SW5qZWN0b3IuY3JlYXRlQ29tcG9uZW50SW5BcHBsaWNhdGlvbihQb1RvYXN0ZXJDb21wb25lbnQpO1xuXG4gICAgdG9hc3Rlci5jb21wb25lbnRSZWYgPSBjb21wb25lbnRSZWY7XG5cbiAgICBjb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maWdUb2FzdGVyKHRvYXN0ZXIpO1xuXG4gICAgaWYgKHRvYXN0ZXIub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgdGhpcy5zdGFja1RvcC5wdXNoKGNvbXBvbmVudFJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2tCb3R0b20ucHVzaChjb21wb25lbnRSZWYpO1xuICAgIH1cblxuICAgIHRoaXMub2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmKTtcblxuICAgIGlmICh0b2FzdGVyLmFjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kZXN0cm95VG9hc3Rlcihjb21wb25lbnRSZWYpO1xuICAgICAgfSwgdG9hc3Rlci5kdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveVRvYXN0ZXIodG9hc3RlcjogYW55KTogdm9pZCB7XG4gICAgbGV0IHN0YWNrO1xuXG4gICAgaWYgKHRvYXN0ZXIuaW5zdGFuY2Uub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tCb3R0b207XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSBzdGFjay5pbmRleE9mKHRvYXN0ZXIpO1xuICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICB0aGlzLnBvQ29tcG9uZW50SW5qZWN0b3IuZGVzdHJveUNvbXBvbmVudEluQXBwbGljYXRpb24odG9hc3Rlcik7XG5cbiAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc3RhY2subGVuZ3RoOyBjb3VudCsrKSB7XG4gICAgICBzdGFja1tjb3VudF0uaW5zdGFuY2UuY2hhbmdlUG9zaXRpb24oY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmOiBhbnkpIHtcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub2JzZXJ2YWJsZU9uQ2xvc2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICB9KTtcbiAgfVxufVxuIl19