import { __decorate, __metadata } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../utils/util';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
export const poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
export const poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
let PoDialogComponent = class PoDialogComponent {
    constructor() {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: () => { } };
    }
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.closeSubscription = this.poModal.onXClosed.subscribe(close => this.destroy());
    }
    // Fecha o poModal
    close() {
        this.poModal.close();
        this.destroy();
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o poModal
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                }
            };
        }
    }
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    }
    setDialogLiterals(dialogOptions, dialogType) {
        const alertLiterals = poDialogAlertLiteralsDefault;
        const confirmLiterals = poDialogConfirmLiteralsDefault;
        const literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = Object.assign(Object.assign(Object.assign({}, alertLiterals[poLocaleDefault]), alertLiterals[browserLanguage()]), literals);
        }
        else {
            this.literalsConfirm = Object.assign(Object.assign(Object.assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[browserLanguage()]), literals);
        }
    }
};
__decorate([
    ViewChild(PoModalComponent, { static: true }),
    __metadata("design:type", PoModalComponent)
], PoDialogComponent.prototype, "poModal", void 0);
PoDialogComponent = __decorate([
    Component({
        template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
    })
], PoDialogComponent);
export { PoDialogComponent };
//# sourceMappingURL=data:application/json;base64,