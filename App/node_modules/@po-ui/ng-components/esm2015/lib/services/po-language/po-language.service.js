import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, poLocaleDefault, poLocales } from '../../utils/util';
import * as i0 from "@angular/core";
const poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
const poLocaleKey = 'PO_USER_LOCALE';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
let PoLanguageService = class PoLanguageService {
    set languageDefault(language) {
        if (language && isLanguage(language)) {
            localStorage.setItem(poDefaultLanguage, language);
        }
    }
    get languageDefault() {
        return localStorage.getItem(poDefaultLanguage);
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    getLanguage() {
        const language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    getLanguageDefault() {
        return this.languageDefault;
    }
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    getShortLanguage() {
        const language = this.getLanguage();
        const shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    }
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguage(language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    }
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguageDefault(language) {
        this.languageDefault = language;
    }
};
PoLanguageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
PoLanguageService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], PoLanguageService);
export { PoLanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRWhILE1BQU0saUJBQWlCLEdBQUcscUJBQXFCLENBQUM7QUFDaEQsTUFBTSxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7QUFFckM7Ozs7OztHQU1HO0FBSUgsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFDNUIsSUFBSSxlQUFlLENBQUMsUUFBZ0I7UUFDbEMsSUFBSSxRQUFRLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3BDLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxXQUFXO1FBQ1QsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFFbkcsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxnQkFBZ0I7UUFDZCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakQsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILFdBQVcsQ0FBQyxRQUFnQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUVELFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsa0JBQWtCLENBQUMsUUFBZ0I7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7O0FBdEdZLGlCQUFpQjtJQUg3QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csaUJBQWlCLENBc0c3QjtTQXRHWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGdldEJyb3dzZXJMYW5ndWFnZSwgZ2V0U2hvcnRMYW5ndWFnZSwgaXNMYW5ndWFnZSwgcG9Mb2NhbGVEZWZhdWx0LCBwb0xvY2FsZXMgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuY29uc3QgcG9EZWZhdWx0TGFuZ3VhZ2UgPSAnUE9fREVGQVVMVF9MQU5HVUFHRSc7XG5jb25zdCBwb0xvY2FsZUtleSA9ICdQT19VU0VSX0xPQ0FMRSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBnZXJlbmNpYXIgYXMgbGluZ3VhZ2VucyBkYSBhcGxpY2HDp8Ojby5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9MYW5ndWFnZVNlcnZpY2Uge1xuICBzZXQgbGFuZ3VhZ2VEZWZhdWx0KGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZ3VhZ2UgJiYgaXNMYW5ndWFnZShsYW5ndWFnZSkpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBvRGVmYXVsdExhbmd1YWdlLCBsYW5ndWFnZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwb0RlZmF1bHRMYW5ndWFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBvIGlkaW9tYSBhdGl2by5cbiAgICpcbiAgICogQSBidXNjYSBkbyBpZGlvbWEgc2Vyw6EgZmVpdGEgbmEgc2VndWludGUgb3JkZW06XG4gICAqXG4gICAqICAgMSAtIG8gaWRpb21hIHF1ZSBmb2kgYXJtYXplbmFkbyBubyAqbG9jYWxTdG9yYWdlKiwgYXRyYXbDqXMgZG8gbcOpdG9kbyBgc2V0TGFuZ3VhZ2UoKWAgdXRpbGl6YWRvIHBlbG8gaTE4bi5cbiAgICpcbiAgICogICAyIC0gbyB2YWxvciBpbnNlcmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpcyBkbyBwYXLDom1ldHJvIGBjb25maWdgLCBzZW5kbyBvIGlkaW9tYSBpbnNlcmlkb1xuICAgKiBuYSBwcm9wcmllZGFkZSBgbGFuZ3VhZ2VgIGRhIGludGVyZmFjZSBgUG9JMThuQ29uZmlnRGVmYXVsdGAuXG4gICAqXG4gICAqICAgMyAtIG8gaWRpb21hIGRvIG5hdmVnYWRvciB1dGlsaXphZG8uXG4gICAqXG4gICAqID4gQ2FzbyBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgbsOjbyBzZWphIHN1cG9ydGFkbyBwZWxvIFBPIChgcHRgLCBgZW5gLCBgZXNgIG91IGBydWApLCBzZXLDoSByZXRvcm5hZG8gdmFsb3IgYHB0YC5cbiAgICpcbiAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGRvIGlkaW9tYSBhdGl2by5cbiAgICovXG4gIGdldExhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwb0xvY2FsZUtleSkgfHwgdGhpcy5sYW5ndWFnZURlZmF1bHQgfHwgZ2V0QnJvd3Nlckxhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gbGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hICpkZWZhdWx0KiBkYSBhcGxpY2HDp8OjbyBkZWZpbmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpc1xuICAgKiBkbyBwYXLDom1ldHJvIGBjb25maWdgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hICpkZWZhdWx0Ki5cbiAgICovXG4gIGdldExhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlRGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIGEgYWJyZXZpYcOnw6NvIGRvIGlkaW9tYSBhdGl2byBuYSBhcGxpY2HDp8Ojby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHB0YFxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgYWJyZXZpYWRhIGRvIGlkaW9tYSBhdGl2by5cbiAgICovXG4gIGdldFNob3J0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcbiAgICBjb25zdCBzaG9ydExhbmd1YWdlID0gZ2V0U2hvcnRMYW5ndWFnZShsYW5ndWFnZSk7XG5cbiAgICByZXR1cm4gcG9Mb2NhbGVzLmluY2x1ZGVzKHNob3J0TGFuZ3VhZ2UpID8gc2hvcnRMYW5ndWFnZSA6IHBvTG9jYWxlRGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBwYXJhIHNhbHZhciBvIGlkaW9tYSBkYSBhcGxpY2HDp8OjbyBubyAqc3RvcmFnZSosIHV0aWxpemFkbyBwZWxvIHNlcnZpw6dvIGRvIGkxOG4uXG4gICAqXG4gICAqID4gQW8gZGVmaW5pciB1bSBpZGlvbWEgcG9yIGVzdGUgbcOpdG9kbywgdG9kb3Mgb3MgbcOzZHVsb3MgZGEgYXBsaWNhw6fDo28gdXRpbGl6YXLDo28gbyBpZGlvbWEgZGVmaW5pZG8uXG4gICAqXG4gICAqIEBwYXJhbSBsYW5ndWFnZSBzaWdsYSBkbyBpZGlvbWEuXG4gICAqXG4gICAqIEVzdGEgc2lnbGEgZGV2ZSBzZXIgY29tcG9zdGEgcG9yIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBpZGlvbWEsXG4gICAqIHBvZGVuZG8gc2VyIGFkaWNpb25hZG8gb3V0cmFzIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBwYcOtcywgcG9yIGV4ZW1wbG86IGBwdGAsIGBwdC1CUmAsIGBwdC1icmAsIGBlbmAgb3UgYGVuLVVTYC5cbiAgICpcbiAgICogPiBDYXNvIHNlamEgaW5mb3JtYWRvIHVtIHZhbG9yIGRpZmVyZW50ZSBkZXN0ZSBwYWRyw6NvLCBvIG1lc21vIHNlcsOhIGlnbm9yYWRvLlxuICAgKi9cbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghaXNMYW5ndWFnZShsYW5ndWFnZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwb0xvY2FsZUtleSwgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcXVlIGRlZmluZSBvIGlkaW9tYSBjb25maWd1cmFkbyBhIHBhcnRpciBkbyBwYXLDom1ldHJvIGBjb25maWdgIHV0aWxpemFkbyBwZWxvIG3Ds2R1bG8gZG8gaTE4bi5cbiAgICpcbiAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBzZXJ2acOnbywgYXBlbmFzIG8gbcOzZHVsbyBkbyBpMThuIHJlZmVyZW50ZSBhIGVzdGEgY29uZmlndXJhw6fDo28gdXRpbGl6YXLDoSBvIGlkaW9tYSBkZWZpbmlkby5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAqL1xuICBzZXRMYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubGFuZ3VhZ2VEZWZhdWx0ID0gbGFuZ3VhZ2U7XG4gIH1cbn1cbiJdfQ==