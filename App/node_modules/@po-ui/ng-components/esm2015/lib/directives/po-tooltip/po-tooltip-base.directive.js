import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
const CONTENT_MAX_LENGTH = 140;
const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 */
let PoTooltipBaseDirective = class PoTooltipBaseDirective {
    constructor() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
     */
    set tooltip(tooltip) {
        if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
            this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
        }
        else {
            this._tooltip = tooltip;
        }
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
};
__decorate([
    Input('p-tooltip'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoTooltipBaseDirective.prototype, "tooltip", null);
__decorate([
    Input('p-tooltip-position'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoTooltipBaseDirective.prototype, "tooltipPosition", null);
PoTooltipBaseDirective = __decorate([
    Directive()
], PoTooltipBaseDirective);
export { PoTooltipBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcG8tdG9vbHRpcC9wby10b29sdGlwLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUUxRyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLDJCQUEyQixHQUFHLFFBQVEsQ0FBQztBQUU3Qzs7Ozs7Ozs7Ozs7R0FXRztBQUdILElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBQW5DO1FBQ1UsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUNwQixxQkFBZ0IsR0FBWSxRQUFRLENBQUM7SUFpRGpELENBQUM7SUEvQ0M7Ozs7T0FJRztJQUNpQixJQUFJLE9BQU8sQ0FBQyxPQUFlO1FBQzdDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztTQUN6QjtJQUNILENBQUM7SUFDRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F3Qkc7SUFDMEIsSUFBSSxlQUFlLENBQUMsUUFBZ0I7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQztJQUMzRyxDQUFDO0lBQ0QsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7Q0FDRixDQUFBO0FBMUNxQjtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzs7cURBTWxCO0FBOEI0QjtJQUE1QixLQUFLLENBQUMsb0JBQW9CLENBQUM7Ozs2REFFM0I7QUEvQ1Usc0JBQXNCO0lBRGxDLFNBQVMsRUFBRTtHQUNDLHNCQUFzQixDQW1EbEM7U0FuRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQT19DT05UUk9MX1BPU0lUSU9OUyB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLmNvbnN0YW50cyc7XG5cbmNvbnN0IENPTlRFTlRfTUFYX0xFTkdUSCA9IDE0MDtcbmNvbnN0IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVCA9ICdib3R0b20nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEEgZGlyZXRpdmEgcG8tdG9vbHRpcCBkZXZlIHNlciB1dGlsaXphZGEgcGFyYSBvZmVyZWNlciBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgcXVhbmRvIG9zIHVzdcOhcmlvc1xuICogcGFzc2FtIG8gbW91c2Ugc29icmUgbyBlbGVtZW50byBhbHZvIGFvIHF1YWwgZWxhIGVzdMOhIGF0cmlidcOtZGEuXG4gKlxuICogTyBjb250ZcO6ZG8gw6kgZm9ybWFkbyBwb3IgdW0gcGVxdWVubyB0ZXh0byBxdWUgZGV2ZSBjb250cmlidWlyIHBhcmEgdW1hIHRvbWFkYSBkZSBkZWNpc8OjbyBvdVxuICogb3JpZW50YcOnw6NvIGRvIHVzdcOhcmlvLiBBIGF0aXZhw6fDo28gZGVsZSBwb2RlIGVzdGFyIGVtIHF1YWxxdWVyIGNvbXBvbmVudGUgb3UgdGFnIEhUTUwuXG4gKlxuICogUGFyYSB0ZXh0b3MgbWFpb3JlcyBvdSBubyBjYXNvIGRlIGhhdmVyIGEgbmVjZXNzaWRhZGUgZGUgdXRpbGl6YXIgYWxndW0gb3V0cm8gZWxlbWVudG8gY29tb1xuICogY29udGXDumRvIGRldmUtc2UgdXRpbGl6YXIgbyBbKipwby1wb3BvdmVyKipdKGh0dHBzOi8vcG8tdWkuaW8vZG9jdW1lbnRhdGlvbi9wby1wb3BvdmVyP3ZpZXc9ZG9jKS5cbiAqL1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb1Rvb2x0aXBCYXNlRGlyZWN0aXZlIHtcbiAgcHJpdmF0ZSBfdG9vbHRpcDogc3RyaW5nID0gJyc7XG4gIHByb3RlY3RlZCBfdG9vbHRpcFBvc2l0aW9uPzogc3RyaW5nID0gJ2JvdHRvbSc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBlIGF0cmlidWkgdW0gdGV4dG8gYW8gcG8tdG9vbHRpcCwgY29tIGxpbWl0YcOnw6NvIGRlIDE0MCBjYXJhY3RlcmVzLlxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAnKSBzZXQgdG9vbHRpcCh0b29sdGlwOiBzdHJpbmcpIHtcbiAgICBpZiAodG9vbHRpcCAmJiB0b29sdGlwLmxlbmd0aCA+IENPTlRFTlRfTUFYX0xFTkdUSCkge1xuICAgICAgdGhpcy5fdG9vbHRpcCA9IHRvb2x0aXAuc3Vic3RyaW5nKDAsIENPTlRFTlRfTUFYX0xFTkdUSCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Rvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cbiAgfVxuICBnZXQgdG9vbHRpcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9vbHRpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIHBvc2nDp8OjbyBxdWUgbyBwby10b29sdGlwIGFicmlyw6EgZW0gcmVsYcOnw6NvIGFvIGNvbXBvbmVudGUgYWx2by4gU3VnZXJlLXNlIHF1ZSBzZWphXG4gICAqIHVzYWRhIGEgb3JpZW50YcOnw6NvIFwiYm90dG9tXCIgKGFiYWl4byksIHBvcsOpbSBvIG1lc21vIMOpIGZsZXjDrXZlbCBlIHNlcsOhIHJvdGFjaW9uYWRvXG4gICAqIGF1dG9tYXRpY2FtZW50ZSBwYXJhIHNlIGFkZXF1YXIgYSB0ZWxhLCBjYXNvIG5lY2Vzc8OhcmlvLlxuICAgKlxuICAgKiBQb3Npw6fDtWVzIHbDoWxpZGFzOlxuICAgKiAtIGByaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgcmlnaHQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGByaWdodC10b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWJhaXhvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLWxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFiYWl4byBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnQtdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdC1ib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFjaW1hIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhY2ltYSBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3AtbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGJvdHRvbVxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAtcG9zaXRpb24nKSBzZXQgdG9vbHRpcFBvc2l0aW9uKHBvc2l0aW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b29sdGlwUG9zaXRpb24gPSBQT19DT05UUk9MX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3NpdGlvbikgPyBwb3NpdGlvbiA6IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVDtcbiAgfVxuICBnZXQgdG9vbHRpcFBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBQb3NpdGlvbjtcbiAgfVxufVxuIl19