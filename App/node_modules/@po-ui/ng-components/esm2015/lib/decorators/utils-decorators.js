/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RlY29yYXRvcnMvdXRpbHMtZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFbEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUNqRCxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7SUFDL0IsTUFBTSxzQkFBc0IsR0FBb0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQztJQUV2RixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUU7UUFDM0MsS0FBSyxFQUFFO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFbEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUNyRSxNQUFNLG1CQUFtQixHQUFHLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFbkYsT0FBTztRQUNMLEdBQUcsRUFBRSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUM7UUFDcEQsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLENBQUM7S0FDL0QsQ0FBQztBQUNKLENBQUM7QUFDRCxTQUFTLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFrQixFQUFFLG1CQUEyQjtJQUNqRixPQUFPLFVBQVUsS0FBSztRQUNwQixJQUFJLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtZQUNoRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxrQkFBZ0QsRUFBRSxlQUF1QjtJQUN2RixPQUFPO1FBQ0wsT0FBTyxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsTUFBVyxFQUFFLFlBQW9CLEVBQUUsYUFBcUI7SUFDNUYsTUFBTSxlQUFlLEdBQUcsT0FBTyxZQUFZLEVBQUUsQ0FBQztJQUU5QyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7UUFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLGVBQWUsK0NBQStDLGFBQWEsYUFBYSxDQUFDLENBQUM7S0FDckg7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUU7UUFDN0MsWUFBWSxFQUFFLElBQUk7UUFDbEIsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDLENBQUM7SUFFSCxPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UgfSBmcm9tICcuL3Byb3BlcnR5LWRlY29yYXRvci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEZ1bsOnw6NvIHV0aWxpemFkYSBwZWxhIGbDoWJyaWNhIGRlIGRlY29yYWRvcmVzIHBhcmEgdmFsaWRhciB1bWEgcHJvcHJpZWRhZGUgZGUgdW1hIGNsYXNzZSBkdXJhbnRlXG4gKiBvIGNpY2xvIGRlIHZpZGEgZG8gQW5ndWxhci5cbiAqXG4gKiBAcGFyYW0gZGVjb3JhdG9yUHJvcGVydGllcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIFBvUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UuXG4gKiBAcGFyYW0gbGlmZWN5Y2xlTmFtZSBjbGljbyBkZSB2aWRhIHF1ZSBzZSBkZXNlamEgZXhlY3V0YXIgY29tIGEgdmFsaWRhw6fDo28uXG4gKiBAcGFyYW0gY2FsbGJhY2sgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBwYXJhIHZhbGlkYWRhciBhIHByb3ByaWVkYWRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eU9uTGlmZUN5Y2xlKFxuICBkZWNvcmF0b3JQcm9wZXJ0aWVzOiBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSxcbiAgbGlmZWN5Y2xlTmFtZTogc3RyaW5nLFxuICBjYWxsYmFjazogRnVuY3Rpb25cbikge1xuICBjb25zdCB7IHRhcmdldCwgcHJvcGVydHkgfSA9IGRlY29yYXRvclByb3BlcnRpZXM7XG4gIGNvbnN0IGVtcHR5RnVuY3Rpb24gPSAoKSA9PiB7fTtcbiAgY29uc3QgbGlmZWN5Y2xlRnVuY3Rpb25DbG9uZTogRnVuY3Rpb24gfCBudWxsID0gdGFyZ2V0W2xpZmVjeWNsZU5hbWVdIHx8IGVtcHR5RnVuY3Rpb247XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbGlmZWN5Y2xlTmFtZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHByb3BlcnR5LCB0YXJnZXQpO1xuICAgICAgbGlmZWN5Y2xlRnVuY3Rpb25DbG9uZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogRnVuw6fDo28gdXRpbGl6YWRhIHBlbGEgZsOhYnJpY2EgZGUgZGVjb3JhZG9yZXMgcGFyYSBhbHRlcmFyL21hbmlwdWxhciBvIHZhbG9yIGRlIHVtYSBwcm9wcmllZGFkZS5cbiAqXG4gKiA+IEVzdGUgZGVjb3JhdG9yIGlyw6EgY3JpYXIgb3MgbcOpdG9kb3MgZ2V0IGUgc2V0IGludGVybmFtZW50ZS4gUG9ydGFudG8sXG4gKiDDqSBpbXBvcnRhbnRlICoqbsOjbyoqIGNyaWFyIG5vbWVzIHByaXZhZG9zIHBhcmEgYXMgcHJvcHJpZWRhZGVzIHV0aWxpemFuZG9cbiAqIGAkJF9fbm9tZURhUHJvcHJpZWRhZGVgIGFvIHV0aWxpemFyIGVzdGUgZGVjb3JhdG9yLCBwb2lzIGVsYSBzZXLDoSBzb2JyZXNjcml0YSBwZWxhIHByb3ByaWVkYWRlIHByaXZhZGFcbiAqIGNyaWFkYSBwZWxvIGRlY29yYXRvci5cbiAqXG4gKiBAcGFyYW0gZGVjb3JhdG9yUHJvcGVydGllcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIFBvUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UuXG4gKiBAcGFyYW0gZGVjb3JhdG9yTmFtZSBub21lIGRvIGRlY29yYXRvclxuICogQHBhcmFtIGNhbGxiYWNrIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcGFyYSBhbHRlcmFyIG8gdmFsb3IgZGEgcHJvcHJpZWRhZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVZhbHVlQnlDYWxsYmFjayhcbiAgZGVjb3JhdG9yUHJvcGVydGllczogUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UsXG4gIGRlY29yYXRvck5hbWU6IHN0cmluZyxcbiAgY2FsbGJhY2s6IEZ1bmN0aW9uXG4pIHtcbiAgY29uc3QgeyB0YXJnZXQsIHByb3BlcnR5LCBvcmlnaW5hbERlc2NyaXB0b3IgfSA9IGRlY29yYXRvclByb3BlcnRpZXM7XG4gIGNvbnN0IHByaXZhdGVQcm9wZXJ0eU5hbWUgPSBjcmVhdGVQcml2YXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVjb3JhdG9yTmFtZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGdldHRlcihvcmlnaW5hbERlc2NyaXB0b3IsIHByaXZhdGVQcm9wZXJ0eU5hbWUpLFxuICAgIHNldDogc2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgY2FsbGJhY2ssIHByaXZhdGVQcm9wZXJ0eU5hbWUpXG4gIH07XG59XG5mdW5jdGlvbiBzZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBjYWxsYmFjazogRnVuY3Rpb24sIHByaXZhdGVQcm9wZXJ0eU5hbWU6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKTogdm9pZCB7XG4gICAgaWYgKG9yaWdpbmFsRGVzY3JpcHRvciAmJiBvcmlnaW5hbERlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBvcmlnaW5hbERlc2NyaXB0b3Iuc2V0LmJpbmQodGhpcykoY2FsbGJhY2sodmFsdWUpKTtcbiAgICB9XG5cbiAgICB0aGlzW3ByaXZhdGVQcm9wZXJ0eU5hbWVdID0gY2FsbGJhY2sodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+LCBwcml2YXRlUHJvcE5hbWU6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcmlnaW5hbERlc2NyaXB0b3IgJiYgb3JpZ2luYWxEZXNjcmlwdG9yLmdldCA/IG9yaWdpbmFsRGVzY3JpcHRvci5nZXQuYmluZCh0aGlzKSgpIDogdGhpc1twcml2YXRlUHJvcE5hbWVdO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJpdmF0ZVByb3BlcnR5KHRhcmdldDogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgZGVjb3JhdG9yTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHByaXZhdGVQcm9wTmFtZSA9IGAkJF9fJHtwcm9wZXJ0eU5hbWV9YDtcblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lKSkge1xuICAgIGNvbnNvbGUud2FybihgVGhlIHByb3AgXCIke3ByaXZhdGVQcm9wTmFtZX1cIiBpcyBhbHJlYWR5IGV4aXN0LCBpdCB3aWxsIGJlIG92ZXJyaWRlZCBieSAke2RlY29yYXRvck5hbWV9IGRlY29yYXRvci5gKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcblxuICByZXR1cm4gcHJpdmF0ZVByb3BOYW1lO1xufVxuIl19