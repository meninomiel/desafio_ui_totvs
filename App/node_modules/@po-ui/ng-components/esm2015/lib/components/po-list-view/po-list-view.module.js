import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PoButtonModule } from '../po-button/po-button.module';
import { PoPopupModule } from '../po-popup/po-popup.module';
import { PoListViewComponent } from './po-list-view.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @description
 *
 * Módulo do componente `po-list-view`.
 *
 * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
let PoListViewModule = class PoListViewModule {
};
PoListViewModule = __decorate([
    NgModule({
        imports: [CommonModule, RouterModule, PoButtonModule, PoPopupModule],
        declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
        exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
        providers: [],
        schemas: []
    })
], PoListViewModule);
export { PoListViewModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbGlzdC12aWV3L3BvLWxpc3Qtdmlldy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlFQUF5RSxDQUFDO0FBQzdILE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBRTFIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFRSCxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtDQUFHLENBQUE7QUFBbkIsZ0JBQWdCO0lBUDVCLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQztRQUNwRSxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxrQ0FBa0MsRUFBRSxpQ0FBaUMsQ0FBQztRQUMxRyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxrQ0FBa0MsRUFBRSxpQ0FBaUMsQ0FBQztRQUNyRyxTQUFTLEVBQUUsRUFBRTtRQUNiLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQztHQUNXLGdCQUFnQixDQUFHO1NBQW5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgUG9CdXR0b25Nb2R1bGUgfSBmcm9tICcuLi9wby1idXR0b24vcG8tYnV0dG9uLm1vZHVsZSc7XG5pbXBvcnQgeyBQb1BvcHVwTW9kdWxlIH0gZnJvbSAnLi4vcG8tcG9wdXAvcG8tcG9wdXAubW9kdWxlJztcblxuaW1wb3J0IHsgUG9MaXN0Vmlld0NvbXBvbmVudCB9IGZyb20gJy4vcG8tbGlzdC12aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBNw7NkdWxvIGRvIGNvbXBvbmVudGUgYHBvLWxpc3Qtdmlld2AuXG4gKlxuICogPiBQYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIGRvIGNvbXBvbmVudGUgYHBvLWxpc3Qtdmlld2AsIGRldmUgc2VyIGltcG9ydGFkbyBvIG3Ds2R1bG8gYEJyb3dzZXJBbmltYXRpb25zTW9kdWxlYCBub1xuICogPiBtw7NkdWxvIHByaW5jaXBhbCBkYSBzdWEgYXBsaWNhw6fDo28uXG4gKlxuICogTcOzZHVsbyBkYSBhcGxpY2HDp8OjbzpcbiAqIGBgYFxuICogaW1wb3J0IHsgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuICogaW1wb3J0IHsgUG9Nb2R1bGUgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XG4gKiAuLi5cbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgQnJvd3Nlck1vZHVsZSxcbiAqICAgICBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSxcbiAqICAgICAuLi5cbiAqICAgICBQb01vZHVsZVxuICogICBdLFxuICogICBkZWNsYXJhdGlvbnM6IFtcbiAqICAgICBBcHBDb21wb25lbnQsXG4gKiAgICAgLi4uXG4gKiAgIF0sXG4gKiAgIHByb3ZpZGVyczogW10sXG4gKiAgIGJvb3RzdHJhcDogW0FwcENvbXBvbmVudF1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHsgfVxuICogYGBgXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIFJvdXRlck1vZHVsZSwgUG9CdXR0b25Nb2R1bGUsIFBvUG9wdXBNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtQb0xpc3RWaWV3Q29tcG9uZW50LCBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlLCBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbUG9MaXN0Vmlld0NvbXBvbmVudCwgUG9MaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSwgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXSxcbiAgc2NoZW1hczogW11cbn0pXG5leHBvcnQgY2xhc3MgUG9MaXN0Vmlld01vZHVsZSB7fVxuIl19