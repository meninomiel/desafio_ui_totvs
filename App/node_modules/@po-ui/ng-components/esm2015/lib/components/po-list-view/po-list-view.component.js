import { __decorate, __metadata } from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { AfterContentInit, ChangeDetectorRef, Component, ContentChild, DoCheck, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { PoPopupComponent } from '../po-popup/po-popup.component';
import { PoListViewBaseComponent } from './po-list-view-base.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
let PoListViewComponent = class PoListViewComponent extends PoListViewBaseComponent {
    constructor(changeDetector, differs) {
        super();
        this.changeDetector = changeDetector;
        this.differ = differs.find([]).create(null);
    }
    get hasContentTemplate() {
        return !!this.listViewContentTemplate;
    }
    get hasDetailTemplate() {
        return !!this.listViewDetailTemplate;
    }
    get displayShowMoreButton() {
        return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
    }
    get showButtonsActions() {
        return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
    }
    get showPopupActions() {
        return this.visibleActions && this.visibleActions.length > 2;
    }
    get titleHasAction() {
        return this.titleAction.observers.length > 0;
    }
    get visibleActions() {
        return this.actions && this.actions.filter(action => action.visible !== false);
    }
    ngAfterContentInit() {
        this.initShowDetail();
    }
    ngDoCheck() {
        this.checkItemsChange();
    }
    checkTitleType(item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    getItemTitle(item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title
            ? this.listViewContentTemplate.title(item)
            : item[this.propertyTitle];
    }
    hasItems() {
        return this.items && this.items.length > 0;
    }
    returnBooleanValue(listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function')
            ? listViewAction.disabled(item)
            : listViewAction.disabled;
    }
    trackBy(index) {
        return index;
    }
    togglePopup(item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    }
    checkItemsChange() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    }
    initShowDetail() {
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(item => (item.$showDetail = this.listViewDetailTemplate.showDetail(item)));
        }
    }
};
PoListViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: IterableDiffers }
];
__decorate([
    ContentChild(PoListViewContentTemplateDirective, { static: true }),
    __metadata("design:type", PoListViewContentTemplateDirective)
], PoListViewComponent.prototype, "listViewContentTemplate", void 0);
__decorate([
    ContentChild(PoListViewDetailTemplateDirective, { static: true }),
    __metadata("design:type", PoListViewDetailTemplateDirective)
], PoListViewComponent.prototype, "listViewDetailTemplate", void 0);
__decorate([
    ViewChild('popup', { static: true }),
    __metadata("design:type", PoPopupComponent)
], PoListViewComponent.prototype, "poPopupComponent", void 0);
PoListViewComponent = __decorate([
    Component({
        selector: 'po-list-view',
        template: "<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\"\n>\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\"\n        />\n        <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <input\n                  class=\"po-input po-checkbox-group-input\"\n                  type=\"checkbox\"\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\"\n                />\n                <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a\n                *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <a\n                *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <span\n                *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button\n                *ngFor=\"let action of visibleActions\"\n                p-small=\"true\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-type]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\"\n              >\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span\n                #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\"\n              >\n              </span>\n            </div>\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n",
        animations: [
            trigger('showHideDetail', [
                state('*', style({ 'overflow-y': 'visible' })),
                state('void', style({ 'overflow-y': 'hidden' })),
                transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
            ])
        ]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, IterableDiffers])
], PoListViewComponent);
export { PoListViewComponent };
//# sourceMappingURL=data:application/json;base64,