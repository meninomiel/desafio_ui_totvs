import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
let PoListViewDetailTemplateDirective = class PoListViewDetailTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
PoListViewDetailTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
__decorate([
    Input('p-show-detail'),
    __metadata("design:type", Function)
], PoListViewDetailTemplateDirective.prototype, "showDetail", void 0);
PoListViewDetailTemplateDirective = __decorate([
    Directive({
        selector: '[p-list-view-detail-template]'
    }),
    __metadata("design:paramtypes", [TemplateRef])
], PoListViewDetailTemplateDirective);
export { PoListViewDetailTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWxpc3Qtdmlldy9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNENHO0FBSUgsSUFBYSxpQ0FBaUMsR0FBOUMsTUFBYSxpQ0FBaUM7SUFZNUMsc0VBQXNFO0lBQ3RFLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7Q0FDckQsQ0FBQTs7WUFEaUMsV0FBVzs7QUFIbkI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7cUVBQStCO0FBVjNDLGlDQUFpQztJQUg3QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsK0JBQStCO0tBQzFDLENBQUM7cUNBY2dDLFdBQVc7R0FiaEMsaUNBQWlDLENBYzdDO1NBZFksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFBvTGlzdFZpZXdDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamFtIGFwcmVzZW50YWRhcyBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgZGUgY2FkYSBpdGVtLCBjb25zdHJ1aW5kbyB1bVxuICogYm90w6NvIGBFeGliaXIgZGV0YWxoZXNgIGFiYWl4byBkbyBjb250ZcO6ZG8gcHJpbmNpcGFsIGRvIGl0ZW0uXG4gKlxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxuICogIC0gSXRlbTogYGl0ZW1gIGRldGVybWluYSBvIGl0ZW0gZGEgbGluaGEgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgaW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBwb2RlIHNlciB1c2FkYSBkZSBkdWFzIGZvcm1hczogZXhwbMOtY2l0YSBvdSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqXG4gKiAgIDxuZy10ZW1wbGF0ZSBwLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUgbGV0LWl0ZW0gbGV0LWNvZGU9XCJpbmRleFwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtNlwiIHAtbGFiZWw9XCJDb2RlXCIgW3AtdmFsdWVdPVwiY29kZVwiPjwvcG8taW5mbz5cbiAqICAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtMTJcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxuICogICAgIDwvZGl2PlxuICogICA8L25nLXRlbXBsYXRlPlxuICpcbiAqIDwvcG8tbGlzdC12aWV3PlxuICpcbiAqIC4uLlxuICogYGBgXG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICA8ZGl2ICpwLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGU9XCJsZXQgaXRlbSwgbGV0IGk9aW5kZXhcIiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgIDwvZGl2PlxuICogPC9wby1saXN0LXZpZXc+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3AtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFBvTGlzdFZpZXdEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gYGJvb2xlYW5gLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gYSB2YWxpZGHDp8OjbyBwYXJhIHF1ZSBvIGRldGFsaGUgZGUgaXRlbVxuICAgKiBkYSBsaXN0YSBpbmljaWUgYWJlcnRvIG91IGZlY2hhZG8uXG4gICAqXG4gICAqL1xuICBASW5wdXQoJ3Atc2hvdy1kZXRhaWwnKSBzaG93RGV0YWlsOiAoaXRlbSkgPT4gYm9vbGVhbjtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG4iXX0=