import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { browserLanguage, convertToBoolean, poLocaleDefault } from '../../utils/util';
import { PoMenuComponent } from '../po-menu';
export const poNavbarLiteralsDefault = {
    en: {
        navbarLinks: 'Navbar links'
    },
    es: {
        navbarLinks: 'Navbar links'
    },
    pt: {
        navbarLinks: 'Navbar links'
    },
    ru: {
        navbarLinks: 'Navbar связи'
    }
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 */
let PoNavbarBaseComponent = class PoNavbarBaseComponent {
    constructor() {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value) {
        this._iconActions = Array.isArray(value) ? value : [];
    }
    get iconActions() {
        return this._iconActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poNavbarLiteralsDefault[poLocaleDefault]), poNavbarLiteralsDefault[browserLanguage()]), value);
        }
        else {
            this._literals = poNavbarLiteralsDefault[browserLanguage()];
        }
    }
    get literals() {
        return this._literals || poNavbarLiteralsDefault[browserLanguage()];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value) {
        this._logo = value;
        if (this.menu) {
            this.validateMenuLogo();
        }
    }
    get logo() {
        return this._logo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value) {
        this._shadow = convertToBoolean(value);
    }
    get shadow() {
        return this._shadow;
    }
};
__decorate([
    Input('p-icon-actions'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoNavbarBaseComponent.prototype, "iconActions", null);
__decorate([
    Input('p-items'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoNavbarBaseComponent.prototype, "items", null);
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoNavbarBaseComponent.prototype, "literals", null);
__decorate([
    Input('p-logo'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoNavbarBaseComponent.prototype, "logo", null);
__decorate([
    Input('p-menu'),
    __metadata("design:type", PoMenuComponent)
], PoNavbarBaseComponent.prototype, "menu", void 0);
__decorate([
    Input('p-shadow'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoNavbarBaseComponent.prototype, "shadow", null);
PoNavbarBaseComponent = __decorate([
    Directive()
], PoNavbarBaseComponent);
export { PoNavbarBaseComponent };
//# sourceMappingURL=data:application/json;base64,