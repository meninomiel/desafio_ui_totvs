import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { PoNavbarItemComponent } from './po-navbar-item/po-navbar-item.component';
let PoNavbarItemsComponent = class PoNavbarItemsComponent {
    constructor(router) {
        this.router = router;
    }
    ngOnDestroy() {
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToRoute();
    }
    selectItem(item) {
        this.selectedItem = item;
    }
    checkActiveItemByUrl(urlRouter) {
        this.selectedItem = this.items.find(item => item.link === urlRouter);
    }
    checkRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkRouterChildrenFragments();
                this.checkActiveItemByUrl(urlRouter);
            }
        });
    }
};
PoNavbarItemsComponent.ctorParameters = () => [
    { type: Router }
];
__decorate([
    ViewChild('navbarItemsContainer', { read: ElementRef, static: true }),
    __metadata("design:type", ElementRef)
], PoNavbarItemsComponent.prototype, "navbarItemsContainer", void 0);
__decorate([
    ViewChildren(PoNavbarItemComponent, { read: ElementRef }),
    __metadata("design:type", QueryList)
], PoNavbarItemsComponent.prototype, "allNavbarItems", void 0);
__decorate([
    Input('p-items'),
    __metadata("design:type", Array)
], PoNavbarItemsComponent.prototype, "items", void 0);
PoNavbarItemsComponent = __decorate([
    Component({
        selector: 'po-navbar-items',
        template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        (p-click)=\"selectItem(item)\"\n      >\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
    }),
    __metadata("design:paramtypes", [Router])
], PoNavbarItemsComponent);
export { PoNavbarItemsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWl0ZW1zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbmF2YmFyL3BvLW5hdmJhci1pdGVtcy9wby1uYXZiYXItaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFNbEYsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFXakMsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBRXRDLFdBQVc7UUFDVCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQWtCO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxTQUFpQjtRQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU8sNEJBQTRCO1FBQ2xDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2RixPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVGLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxRCxJQUFJLEdBQUcsWUFBWSxhQUFhLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFO2dCQUNuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUFoQzZCLE1BQU07O0FBTnFDO0lBQXRFLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUF1QixVQUFVO29FQUFDO0FBRTdDO0lBQTFELFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQzs4QkFBaUIsU0FBUzs4REFBTTtBQUV4RTtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzhCQUFRLEtBQUs7cURBQWU7QUFUbEMsc0JBQXNCO0lBSmxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IsbWVBQStDO0tBQ2hELENBQUM7cUNBWTRCLE1BQU07R0FYdkIsc0JBQXNCLENBMkNsQztTQTNDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvTmF2YmFySXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbmF2YmFyLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTmF2YmFySXRlbUNvbXBvbmVudCB9IGZyb20gJy4vcG8tbmF2YmFyLWl0ZW0vcG8tbmF2YmFyLWl0ZW0uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tbmF2YmFyLWl0ZW1zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLW5hdmJhci1pdGVtcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9OYXZiYXJJdGVtc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgc2VsZWN0ZWRJdGVtOiBQb05hdmJhckl0ZW07XG5cbiAgcHJpdmF0ZSByb3V0ZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIEBWaWV3Q2hpbGQoJ25hdmJhckl0ZW1zQ29udGFpbmVyJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgbmF2YmFySXRlbXNDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZHJlbihQb05hdmJhckl0ZW1Db21wb25lbnQsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBhbGxOYXZiYXJJdGVtczogUXVlcnlMaXN0PGFueT47XG5cbiAgQElucHV0KCdwLWl0ZW1zJykgaXRlbXM6IEFycmF5PFBvTmF2YmFySXRlbT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge31cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJvdXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmliZVRvUm91dGUoKTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbTogUG9OYXZiYXJJdGVtKSB7XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0FjdGl2ZUl0ZW1CeVVybCh1cmxSb3V0ZXI6IHN0cmluZykge1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gdGhpcy5pdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5saW5rID09PSB1cmxSb3V0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1JvdXRlckNoaWxkcmVuRnJhZ21lbnRzKCkge1xuICAgIGNvbnN0IGNoaWxkcmVuUHJpbWFyeSA9IHRoaXMucm91dGVyLnBhcnNlVXJsKHRoaXMucm91dGVyLnVybCkucm9vdC5jaGlsZHJlblsncHJpbWFyeSddO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuUHJpbWFyeSA/IGAvJHtjaGlsZHJlblByaW1hcnkuc2VnbWVudHMubWFwKGl0ID0+IGl0LnBhdGgpLmpvaW4oJy8nKX1gIDogJyc7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvUm91dGUoKSB7XG4gICAgdGhpcy5yb3V0ZVN1YnNjcmlwdGlvbiA9IHRoaXMucm91dGVyLmV2ZW50cy5zdWJzY3JpYmUodmFsID0+IHtcbiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kIHx8IHZhbCBpbnN0YW5jZW9mIE5hdmlnYXRpb25DYW5jZWwpIHtcbiAgICAgICAgY29uc3QgdXJsUm91dGVyID0gdGhpcy5jaGVja1JvdXRlckNoaWxkcmVuRnJhZ21lbnRzKCk7XG4gICAgICAgIHRoaXMuY2hlY2tBY3RpdmVJdGVtQnlVcmwodXJsUm91dGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19