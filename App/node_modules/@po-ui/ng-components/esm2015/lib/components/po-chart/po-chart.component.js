import { __decorate, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, DoCheck, ElementRef, HostListener, IterableDiffers, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartColors } from './po-chart-colors.constant';
import { PoChartDonutComponent } from './po-chart-types/po-chart-donut/po-chart-donut.component';
import { PoChartGaugeComponent } from './po-chart-types/po-chart-gauge/po-chart-gauge.component';
import { PoChartPieComponent } from './po-chart-types/po-chart-pie/po-chart-pie.component';
import { PoChartType } from './enums/po-chart-type.enum';
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
let PoChartComponent = class PoChartComponent extends PoChartBaseComponent {
    constructor(changeDetector, componentFactoryResolver, differs) {
        super();
        this.changeDetector = changeDetector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.differs = differs;
        this.calculatedElement = false;
        this.initialized = false;
        this.windowResizeListener = new Subject();
        this.mappings = {
            [PoChartType.Donut]: PoChartDonutComponent,
            [PoChartType.Gauge]: PoChartGaugeComponent,
            [PoChartType.Pie]: PoChartPieComponent
        };
        this.colors = [];
        this.onResize = () => this.windowResizeListener.next();
        this.differ = this.differs.find([]).create(null);
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    ngDoCheck() {
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    }
    ngOnDestroy() {
        this.removeWindowResizeListener();
    }
    ngOnInit() {
        this.getSeriesColor();
    }
    rebuildComponent() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
    }
    chartLegendHeight(chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    }
    checkingForSerieChanges() {
        if (this.componentRef && this.differ) {
            const changeSeries = this.differ.diff(this.chartSeries);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    }
    createComponent() {
        const componentType = this.getComponentType(this.type);
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        const instance = this.componentRef.instance;
        this.setChartProperties(instance);
        return instance;
    }
    dynamicComponentSetting() {
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    getSeriesColor() {
        const colorsLength = PoChartColors.length - 1;
        if (!this.chartSeries) {
            return (this.colors = PoChartColors[colorsLength]);
        }
        if (this.type === PoChartType.Gauge) {
            return (this.colors = PoChartColors[0]);
        }
        const seriesLength = this.chartSeries.length - 1;
        if (seriesLength > colorsLength) {
            let colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            const quantityDuplicates = seriesLength / colorsLength;
            for (let i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return (this.colors = colors);
        }
        return (this.colors = PoChartColors[seriesLength]);
    }
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = () => { };
        }
    }
    setChartProperties(instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegendHeight(this.chartLegend);
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? [...this.colors] : [];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    }
    setClickSubscribe(instance) {
        instance.onSerieClick.subscribe(event => {
            this.onSeriesClick(event);
        });
    }
    setHoverSubscribe(instance) {
        instance.onSerieHover.subscribe(event => {
            this.onSeriesHover(event);
        });
    }
    setResizeListenerSubscribe(instance) {
        this.windowResizeListener.subscribe(() => {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegendHeight(this.chartLegend);
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        });
    }
};
PoChartComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers }
];
__decorate([
    ViewChild('chartContainer', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], PoChartComponent.prototype, "chartContainer", void 0);
__decorate([
    ViewChild('chartHeader', { static: true }),
    __metadata("design:type", ElementRef)
], PoChartComponent.prototype, "chartHeader", void 0);
__decorate([
    ViewChild('chartLegend', { read: ElementRef }),
    __metadata("design:type", ElementRef)
], PoChartComponent.prototype, "chartLegend", void 0);
__decorate([
    ViewChild('chartWrapper', { static: true }),
    __metadata("design:type", ElementRef)
], PoChartComponent.prototype, "chartWrapper", void 0);
__decorate([
    HostListener('window:resize'),
    __metadata("design:type", Object)
], PoChartComponent.prototype, "onResize", void 0);
PoChartComponent = __decorate([
    Component({
        selector: 'po-chart',
        template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"!isChartGaugeType\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-colors]=\"colors\" [p-series]=\"series\"> </po-chart-legend>\n</ng-template>\n"
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef,
        ComponentFactoryResolver,
        IterableDiffers])
], PoChartComponent);
export { PoChartComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsWUFBWSxFQUNaLE9BQU8sRUFDUCxVQUFVLEVBQ1YsWUFBWSxFQUNaLGVBQWUsRUFDZixTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFFakcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDakcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDM0YsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBS0gsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBaUIsU0FBUSxvQkFBb0I7SUF3QnhELFlBQ1MsY0FBaUMsRUFDaEMsd0JBQWtELEVBQ2xELE9BQXdCO1FBRWhDLEtBQUssRUFBRSxDQUFDO1FBSkQsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ2hDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUExQjFCLHNCQUFpQixHQUFZLEtBQUssQ0FB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Y0FBYyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUFlLFVBQVU7c0RBQUM7QUFpQnRFO0lBREMsWUFBWSxDQUFDLGVBQWUsQ0FBQzs7a0RBQ29CO0FBdkN2QyxnQkFBZ0I7SUFKNUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFVBQVU7UUFDcEIsaWZBQXdDO0tBQ3pDLENBQUM7cUNBMEJ5QixpQkFBaUI7UUFDTix3QkFBd0I7UUFDekMsZUFBZTtHQTNCdkIsZ0JBQWdCLENBa0w1QjtTQWxMWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRG9DaGVjayxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJdGVyYWJsZURpZmZlcnMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9DaGFydEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoYXJ0LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvQ2hhcnRDb2xvcnMgfSBmcm9tICcuL3BvLWNoYXJ0LWNvbG9ycy5jb25zdGFudCc7XG5pbXBvcnQgeyBQb0NoYXJ0RG9udXRDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoYXJ0LXR5cGVzL3BvLWNoYXJ0LWRvbnV0L3BvLWNoYXJ0LWRvbnV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0NoYXJ0RHluYW1pY1R5cGVDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoYXJ0LXR5cGVzL3BvLWNoYXJ0LWR5bmFtaWMtdHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9DaGFydEdhdWdlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9DaGFydFBpZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtcGllL3BvLWNoYXJ0LXBpZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvQ2hhcnRCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hhcnQtYmFzaWNcIiB0aXRsZT1cIlBPIENoYXJ0IEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGFydC1iYXNpYy9zYW1wbGUtcG8tY2hhcnQtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hhcnQtYmFzaWMvc2FtcGxlLXBvLWNoYXJ0LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWNoYXJ0LWxhYnNcIiB0aXRsZT1cIlBPIENoYXJ0IExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoYXJ0LWxhYnMvc2FtcGxlLXBvLWNoYXJ0LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hhcnQtbGFicy9zYW1wbGUtcG8tY2hhcnQtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jaGFydC1jb2ZmZWUtcmFua2luZ1wiIHRpdGxlPVwiUE8gQ2hhcnQgLSBDb2ZmZWUgUmFua2luZ1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hhcnQtY29mZmVlLXJhbmtpbmcvc2FtcGxlLXBvLWNoYXJ0LWNvZmZlZS1yYW5raW5nLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoYXJ0LWNvZmZlZS1yYW5raW5nL3NhbXBsZS1wby1jaGFydC1jb2ZmZWUtcmFua2luZy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1jaGFydCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jaGFydC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9DaGFydENvbXBvbmVudCBleHRlbmRzIFBvQ2hhcnRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25EZXN0cm95LCBPbkluaXQge1xuICBwcml2YXRlIGNhbGN1bGF0ZWRFbGVtZW50OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8e30+O1xuICBwcml2YXRlIGRpZmZlcjogYW55O1xuICBwcml2YXRlIGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgd2luZG93UmVzaXplTGlzdGVuZXI6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcHJpdmF0ZSBtYXBwaW5ncyA9IHtcbiAgICBbUG9DaGFydFR5cGUuRG9udXRdOiBQb0NoYXJ0RG9udXRDb21wb25lbnQsXG4gICAgW1BvQ2hhcnRUeXBlLkdhdWdlXTogUG9DaGFydEdhdWdlQ29tcG9uZW50LFxuICAgIFtQb0NoYXJ0VHlwZS5QaWVdOiBQb0NoYXJ0UGllQ29tcG9uZW50XG4gIH07XG5cbiAgY29sb3JzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgQFZpZXdDaGlsZCgnY2hhcnRDb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICBjaGFydENvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZjtcblxuICBAVmlld0NoaWxkKCdjaGFydEhlYWRlcicsIHsgc3RhdGljOiB0cnVlIH0pIGNoYXJ0SGVhZGVyOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0TGVnZW5kJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIGNoYXJ0TGVnZW5kOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0V3JhcHBlcicsIHsgc3RhdGljOiB0cnVlIH0pIGNoYXJ0V3JhcHBlcjogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnNcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZGlmZmVyID0gdGhpcy5kaWZmZXJzLmZpbmQoW10pLmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGdldCBpc0NoYXJ0R2F1Z2VUeXBlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFBvQ2hhcnRUeXBlLkdhdWdlO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScpXG4gIG9uUmVzaXplID0gKCkgPT4gdGhpcy53aW5kb3dSZXNpemVMaXN0ZW5lci5uZXh0KCk7XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIGNvbnN0IGNoYXJXcmFwcGVyV2lkdGggPSB0aGlzLmNoYXJ0V3JhcHBlci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuXG4gICAgLy8gUGVybWl0ZSBxdWUgbyBjaGFydCBzZWphIGNhbGN1bGFkbyBuYSBwcmltZWlyYSB2ZXogcXVlIG8gY29tcG9uZW50ZSB0b3JuYS1zZSB2aXPDrXZlbCxcbiAgICAvLyBldml0YW5kbyBjb20gaXNzbywgcHJvYmxlbWFzIGNvbSBUYWJzIG91IERpdnMgcXVlIGluaWNpZW0gZXNjb25kaWRhcy5cbiAgICBpZiAoY2hhcldyYXBwZXJXaWR0aCAmJiAhdGhpcy5jYWxjdWxhdGVkRWxlbWVudCAmJiB0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZWRFbGVtZW50ID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2V0U2VyaWVzQ29sb3IoKTtcbiAgICAgIHRoaXMuZHluYW1pY0NvbXBvbmVudFNldHRpbmcoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNraW5nRm9yU2VyaWVDaGFuZ2VzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZVdpbmRvd1Jlc2l6ZUxpc3RlbmVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmdldFNlcmllc0NvbG9yKCk7XG4gIH1cblxuICByZWJ1aWxkQ29tcG9uZW50KCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy5nZXRTZXJpZXNDb2xvcigpO1xuICAgICAgdGhpcy5keW5hbWljQ29tcG9uZW50U2V0dGluZygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hhcnRMZWdlbmRIZWlnaHQoY2hhcnRMZWdlbmQ6IEVsZW1lbnRSZWYpIHtcbiAgICByZXR1cm4gY2hhcnRMZWdlbmQgPyBjaGFydExlZ2VuZC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCA6IDA7XG4gIH1cblxuICBwcml2YXRlIGNoZWNraW5nRm9yU2VyaWVDaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZiAmJiB0aGlzLmRpZmZlcikge1xuICAgICAgY29uc3QgY2hhbmdlU2VyaWVzID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLmNoYXJ0U2VyaWVzKTtcbiAgICAgIGlmIChjaGFuZ2VTZXJpZXMpIHtcbiAgICAgICAgdGhpcy5nZXRTZXJpZXNDb2xvcigpO1xuICAgICAgICB0aGlzLnJlYnVpbGRDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNvbXBvbmVudCgpIHtcbiAgICBjb25zdCBjb21wb25lbnRUeXBlID0gdGhpcy5nZXRDb21wb25lbnRUeXBlKHRoaXMudHlwZSk7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudFR5cGUpO1xuXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLmNoYXJ0Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcblxuICAgIGNvbnN0IGluc3RhbmNlID0gPFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudD50aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcblxuICAgIHRoaXMuc2V0Q2hhcnRQcm9wZXJ0aWVzKGluc3RhbmNlKTtcblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIHByaXZhdGUgZHluYW1pY0NvbXBvbmVudFNldHRpbmcoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xuXG4gICAgdGhpcy5zZXRSZXNpemVMaXN0ZW5lclN1YnNjcmliZShpbnN0YW5jZSk7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgdGhpcy5zZXRDbGlja1N1YnNjcmliZShpbnN0YW5jZSk7XG4gICAgdGhpcy5zZXRIb3ZlclN1YnNjcmliZShpbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBvbmVudFR5cGUodHlwZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBwaW5nc1t0eXBlTmFtZV07XG4gIH1cblxuICBwcml2YXRlIGdldFNlcmllc0NvbG9yKCkge1xuICAgIGNvbnN0IGNvbG9yc0xlbmd0aCA9IFBvQ2hhcnRDb2xvcnMubGVuZ3RoIC0gMTtcblxuICAgIGlmICghdGhpcy5jaGFydFNlcmllcykge1xuICAgICAgcmV0dXJuICh0aGlzLmNvbG9ycyA9IFBvQ2hhcnRDb2xvcnNbY29sb3JzTGVuZ3RoXSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnR5cGUgPT09IFBvQ2hhcnRUeXBlLkdhdWdlKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY29sb3JzID0gUG9DaGFydENvbG9yc1swXSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VyaWVzTGVuZ3RoID0gdGhpcy5jaGFydFNlcmllcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHNlcmllc0xlbmd0aCA+IGNvbG9yc0xlbmd0aCkge1xuICAgICAgbGV0IGNvbG9ycyA9IFBvQ2hhcnRDb2xvcnNbY29sb3JzTGVuZ3RoXTtcblxuICAgICAgLy8gcmVjdXBlcmEgbyByZXN1bHRhZG8gZGEgZGl2aXNhbyBlbnRyZSB0YW1hbmhvIGRhcyBzZXJpZXMgZSBvIG51bWVybyBkZSBjb3JlcyBkaXNwb25pdmVpc1xuICAgICAgY29uc3QgcXVhbnRpdHlEdXBsaWNhdGVzID0gc2VyaWVzTGVuZ3RoIC8gY29sb3JzTGVuZ3RoO1xuXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBxdWFudGl0eUR1cGxpY2F0ZXM7IGkrKykge1xuICAgICAgICBjb2xvcnMgPSBjb2xvcnMuY29uY2F0KFBvQ2hhcnRDb2xvcnNbY29sb3JzTGVuZ3RoXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAodGhpcy5jb2xvcnMgPSBjb2xvcnMpO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5jb2xvcnMgPSBQb0NoYXJ0Q29sb3JzW3Nlcmllc0xlbmd0aF0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVXaW5kb3dSZXNpemVMaXN0ZW5lcigpIHtcbiAgICBpZiAodGhpcy5vblJlc2l6ZSkge1xuICAgICAgdGhpcy5vblJlc2l6ZSA9ICgpID0+IHt9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0Q2hhcnRQcm9wZXJ0aWVzKGluc3RhbmNlOiBQb0NoYXJ0RHluYW1pY1R5cGVDb21wb25lbnQpIHtcbiAgICBpbnN0YW5jZS5jaGFydEhlYWRlciA9IHRoaXMuY2hhcnRIZWFkZXIubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgaW5zdGFuY2UuY2hhcnRMZWdlbmQgPSB0aGlzLmNoYXJ0TGVnZW5kSGVpZ2h0KHRoaXMuY2hhcnRMZWdlbmQpO1xuICAgIGluc3RhbmNlLmNoYXJ0V3JhcHBlciA9IHRoaXMuY2hhcnRXcmFwcGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgaW5zdGFuY2UuY29sb3JzID0gQXJyYXkuaXNBcnJheSh0aGlzLmNvbG9ycykgPyBbLi4udGhpcy5jb2xvcnNdIDogW107XG4gICAgaW5zdGFuY2UuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgaW5zdGFuY2UudHlwZSA9IHRoaXMudHlwZTtcbiAgICBpbnN0YW5jZS5zZXJpZXMgPSB0aGlzLmNoYXJ0U2VyaWVzIHx8IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDbGlja1N1YnNjcmliZShpbnN0YW5jZTogUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50KSB7XG4gICAgaW5zdGFuY2Uub25TZXJpZUNsaWNrLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICB0aGlzLm9uU2VyaWVzQ2xpY2soZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRIb3ZlclN1YnNjcmliZShpbnN0YW5jZTogUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50KSB7XG4gICAgaW5zdGFuY2Uub25TZXJpZUhvdmVyLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICB0aGlzLm9uU2VyaWVzSG92ZXIoZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRSZXNpemVMaXN0ZW5lclN1YnNjcmliZShpbnN0YW5jZTogUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50KSB7XG4gICAgdGhpcy53aW5kb3dSZXNpemVMaXN0ZW5lci5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaW5zdGFuY2UuY2hhcnRIZWFkZXIgPSB0aGlzLmNoYXJ0SGVhZGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgaW5zdGFuY2UuY2hhcnRMZWdlbmQgPSB0aGlzLmNoYXJ0TGVnZW5kSGVpZ2h0KHRoaXMuY2hhcnRMZWdlbmQpO1xuICAgICAgaW5zdGFuY2UuY2hhcnRXcmFwcGVyID0gdGhpcy5jaGFydFdyYXBwZXIubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB9KTtcbiAgfVxufVxuIl19