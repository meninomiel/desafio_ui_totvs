import { __decorate, __metadata } from "tslib";
import { ElementRef, ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
const Padding = 24;
/* tslint:disable:directive-class-suffix */
let PoChartDynamicTypeComponent = class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue =
            this.type === PoChartType.Gauge
                ? 100
                : this.series.reduce((previousValue, serie) => previousValue + serie.value, 0);
    }
};
__decorate([
    ViewChild('chartBody', { static: true }),
    __metadata("design:type", ElementRef)
], PoChartDynamicTypeComponent.prototype, "chartBody", void 0);
__decorate([
    ViewChild('svgContainer', { static: true }),
    __metadata("design:type", ElementRef)
], PoChartDynamicTypeComponent.prototype, "svgContainer", void 0);
PoChartDynamicTypeComponent = __decorate([
    Directive()
], PoChartDynamicTypeComponent);
export { PoChartDynamicTypeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSTFELE1BQU0sT0FBTyxHQUFXLEVBQUUsQ0FBQztBQUUzQiwyQ0FBMkM7QUFFM0MsSUFBc0IsMkJBQTJCLEdBQWpELE1BQXNCLDJCQUEyQjtJQUFqRDtRQWFFLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLGlCQUFZLEdBQXVFLElBQUksT0FBTyxFQUFFLENBQUM7UUFDakcsaUJBQVksR0FBdUUsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNqRyxXQUFNLEdBQWUsRUFBRSxDQUFDO0lBOEIxQixDQUFDO0lBakJDLElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwrQkFBK0IsQ0FBQyxtQkFBMkIsRUFBRSxrQkFBMEIsRUFBRSxrQkFBMEI7UUFDakgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFbkcsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsVUFBVTtZQUNiLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLENBQUMsQ0FBQyxHQUFHO2dCQUNMLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDRixDQUFBO0FBckIyQztJQUF6QyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUFZLFVBQVU7OERBQUM7QUFFbkI7SUFBNUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBZSxVQUFVO2lFQUFDO0FBM0JsRCwyQkFBMkI7SUFEaEQsU0FBUyxFQUFFO0dBQ1UsMkJBQTJCLENBOENoRDtTQTlDcUIsMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4vcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2Utc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0NoYXJ0VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XG5pbXBvcnQgeyBQb0RvbnV0Q2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LWRvbnV0L3BvLWNoYXJ0LWRvbnV0LXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QaWVDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtcGllL3BvLWNoYXJ0LXBpZS1zZXJpZXMuaW50ZXJmYWNlJztcblxuY29uc3QgUGFkZGluZzogbnVtYmVyID0gMjQ7XG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXggKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB7XG4gIHByb3RlY3RlZCB3aW5kb3dSZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcbiAgcHJvdGVjdGVkIHdpbmRvd1Njcm9sbExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG4gIGNlbnRlclg6IG51bWJlcjtcbiAgY2hhcnRFbGVtZW50Q2F0ZWdvcnk6IGFueTtcbiAgY2hhcnRFbGVtZW50RGVzY3JpcHRpb246IGFueTtcbiAgY2hhcnRFbGVtZW50VmFsdWU6IGFueTtcbiAgY2hhcnRIZWFkZXI6IG51bWJlcjtcbiAgY2hhcnRMZWdlbmQ6IG51bWJlcjtcbiAgY2hhcnRXcmFwcGVyOiBudW1iZXI7XG4gIGNvbG9yczogQXJyYXk8c3RyaW5nPjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGlubmVyUmFkaXVzOiBudW1iZXIgPSAwO1xuICBvblNlcmllQ2xpY2s6IFN1YmplY3Q8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcyB8IFBvQ2hhcnRHYXVnZVNlcmllPiA9IG5ldyBTdWJqZWN0KCk7XG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzIHwgUG9DaGFydEdhdWdlU2VyaWU+ID0gbmV3IFN1YmplY3QoKTtcbiAgc2VyaWVzOiBBcnJheTxhbnk+ID0gW107XG4gIHN2Z0VsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xuICBzdmdIZWlnaHQ6IG51bWJlcjtcbiAgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50ICYgRXZlbnRUYXJnZXQ7XG4gIHRvb2x0aXBFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcbiAgdG9vbHRpcFRleHQ6IHN0cmluZztcbiAgdG90YWxWYWx1ZTogbnVtYmVyO1xuICB0eXBlOiBQb0NoYXJ0VHlwZTtcblxuICBAVmlld0NoaWxkKCdjaGFydEJvZHknLCB7IHN0YXRpYzogdHJ1ZSB9KSBjaGFydEJvZHk6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnc3ZnQ29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgc3ZnQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gIGdldCBpc0NoYXJ0R2F1Z2VUeXBlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFBvQ2hhcnRUeXBlLkdhdWdlO1xuICB9XG5cbiAgY2FsY3VsYXRlU1ZHQ29udGFpbmVyRGltZW5zaW9ucyhjaGFydFdyYXBwZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0SGVhZGVyRWxlbWVudDogbnVtYmVyLCBjaGFydExlZ2VuZEVsZW1lbnQ6IG51bWJlcikge1xuICAgIGNvbnN0IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPSB0aGlzLmhlaWdodCAtIGNoYXJ0SGVhZGVyRWxlbWVudCAtIGNoYXJ0TGVnZW5kRWxlbWVudCAtIFBhZGRpbmcgKiAyO1xuXG4gICAgdGhpcy5zdmdIZWlnaHQgPSBzdmdDb250YWluZXJIZWlnaHRDYWxjIDw9IDAgPyAwIDogc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYztcbiAgICB0aGlzLmNlbnRlclggPSBjaGFydFdyYXBwZXJFbGVtZW50IC8gMjtcbiAgfVxuXG4gIGNhbGN1bGF0ZVRvdGFsVmFsdWUoKSB7XG4gICAgdGhpcy50b3RhbFZhbHVlID1cbiAgICAgIHRoaXMudHlwZSA9PT0gUG9DaGFydFR5cGUuR2F1Z2VcbiAgICAgICAgPyAxMDBcbiAgICAgICAgOiB0aGlzLnNlcmllcy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIHNlcmllKSA9PiBwcmV2aW91c1ZhbHVlICsgc2VyaWUudmFsdWUsIDApO1xuICB9XG59XG4iXX0=