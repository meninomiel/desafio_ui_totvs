import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
let PoBreadcrumbBaseComponent = class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
};
__decorate([
    Input('p-favorite-service'),
    __metadata("design:type", String)
], PoBreadcrumbBaseComponent.prototype, "favoriteService", void 0);
__decorate([
    Input('p-items'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoBreadcrumbBaseComponent.prototype, "items", null);
__decorate([
    Input('p-params-service'),
    __metadata("design:type", Object)
], PoBreadcrumbBaseComponent.prototype, "paramsService", void 0);
PoBreadcrumbBaseComponent = __decorate([
    Directive()
], PoBreadcrumbBaseComponent);
export { PoBreadcrumbBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUlqRDs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUVILElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBQXRDO1FBQ0UsY0FBUyxHQUE0QixFQUFFLENBQUM7UUFDaEMsV0FBTSxHQUE0QixFQUFFLENBQUM7SUFnRy9DLENBQUM7SUEvQkM7Ozs7Ozs7OztPQVNHO0lBQ2UsSUFBSSxLQUFLLENBQUMsS0FBOEI7UUFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQWNGLENBQUE7QUFqQzhCO0lBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzs7a0VBQTBCO0FBWXBDO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OEJBQWtCLEtBQUs7cUNBQUwsS0FBSztzREFHdkM7QUFhMEI7SUFBMUIsS0FBSyxDQUFDLGtCQUFrQixDQUFDOztnRUFBd0I7QUE3RnZDLHlCQUF5QjtJQURyQyxTQUFTLEVBQUU7R0FDQyx5QkFBeUIsQ0FrR3JDO1NBbEdZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9CcmVhZGNydW1iSXRlbSB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1pdGVtLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIGdlcmEgdW1hIGVzdHJ1dHVyYSBkZSBuYXZlZ2HDp8OjbyBxdWUgYXByZXNlbnRhIGFvIHVzdcOhcmlvIGEgbG9jYWxpemHDp8Ojb1xuICogZGEgVVJMIGF0dWFsLCBleGliaW5kbyBhcyBhbnRlY2Vzc29yYXMgY29uZm9ybWUgw6kgcmVhbGl6YWRvIGEgbmF2ZWdhw6fDo28gbmEgYXBsaWNhw6fDo28uXG4gKlxuICogUXVhbmRvIG7Do28gaG91dmVyIGVzcGHDp2FtZW50byBzdWZpY2llbnRlIHBhcmEgZXhpYmktbMOhcywgbyBjb21wb25lbnRlIHNlIGVuY2FycmVnYSB0YW1iw6ltXG4gKiBkZSBhZ3J1cGFyIGFzIFVSTHMgYW50ZWNlc3NvcmFzLCBnZXJhbmRvIGFzc2ltIHVtIMOtY29uZSBxdWUgcGVybWl0ZSBhIHZpc3VhbGl6YcOnw6NvIGVtIGNhc2NhdGEuXG4gKlxuICogQ2FzbyB1bSBlbmRlcmXDp28gc2VqYSBlc3BlY2lmaWNhZG8gbmEgcHJvcHJpZWRhZGUgYHAtZmF2b3JpdGUtc2VydmljZWAsIG8gY29tcG9uZW50ZSBwZXJtaXRlIGFvIHVzdcOhcmlvXG4gKiBmYXZvcml0YXIgYSBVUkwuXG4gKlxuICogSGF2ZW5kbyBuZWNlc3NpZGFkZSBkZSBpbmNsdWlyIHBhcsOibWV0cm9zIG5hIHJlcXVpc2nDp8OjbyBkbyBzZXJ2acOnbyxcbiAqIG8gY29tcG9uZW50ZSBkaXNww7VlIGRhIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCBxdWUgcmVjZWJlIHVtIG9iamV0byBjb250ZW5kbyBhcyBpbmZvcm1hw6fDtWVzLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJCYXNlQ29tcG9uZW50IHtcbiAgaXRlbXNWaWV3OiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPiA9IFtdO1xuICBwcml2YXRlIF9pdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBQZXJtaXRlIGRlZmluaXIgdW1hIFVSTCBubyBjb21wb25lbnRlIGBwby1icmVhZGNydW1iYCBwYXJhIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIuXG4gICAqID4gUGFyYSB1dGlsaXphciBlc3RhIHByb3ByaWVkYWRlLCBvIMO6bHRpbW8gYFBvQnJlYWRjcnVtYkl0ZW1gIGRhIGxpc3RhIGRlIGl0ZW1zIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYCBkZXZlIHRlciB1bSBsaW5rIGluZm9ybWFkby5cbiAgICpcbiAgICogPiBBIEFQSSBkZXZlIGVzdGFyIHByZXBhcmFkYSBwYXJhIHJldG9ybmFyIHVtIG9iamV0byBubyBmb3JtYXRvIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWAuXG4gICAqXG4gICAqIEFvIGluaWNpYXIsIG8gYHBvLWJyZWFkY3J1bWJgIGZheiB1bSBHRVQgbmEgVVJMIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgIGUgZGV2ZSByZXRvcm5hciBhIHByb3ByaWVkYWRlXG4gICAqIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWAgZG8gw7psdGltbyBgUG9CcmVhZGNydW1iSXRlbWAgZGVmaW5pZG8gbmEgbGlzdGEgZGUgaXRlbnMgZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgLlxuICAgKlxuICAgKiBBbyBjbGljYXIgZW0gZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhciBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gUE9TVCBjb20gbyBsaW5rIGUgYSBwcm9wcmllZGFkZSBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gXG4gICAqIGRlZmluaWRvcyBubyDDumx0aW1vIGl0ZW0gZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgLlxuICAgKlxuICAgKiA+IENhc28gYWxndW0gcGFyw6JtZXRybyBzZWphIGRlZmluaWRvIG5hIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCwgbyBtZXNtbyBzZXLDoSBlbnZpYWRvIHBhcmEgYSBBUEkgZSByZXRvcm5hcsOhXG4gICAqIGFww7NzIGZhemVyIHVtIEdFVCBvdSBQT1NULlxuICAgKlxuICAgKiBFeGVtcGxvIGRlIFVSTCBjb250ZW5kbyBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiBodHRwczovL3BvLXVpLmlvL3NhbXBsZS9hcGkvZmF2b3JpdGVcbiAgICogYGBgXG4gICAqXG4gICAqIEFvIGZhemVyIG8gR0VUIG8gYHBvLWJyZWFkY3J1bWJgIGNvbmNhdGVuYSBvIGxpbmsgY29tIGEgVVJMIGRlIHNlcnZpw6dvLiBFeGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly88ZG9tYWluPi9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly9wby5jb20uYnIvc2FtcGxlL2FwaS9mYXZvcml0ZT91cmw9L2V4YW1wbGVcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiBQT1NUXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiAnL2V4YW1wbGUnIH1cbiAgICogYGBgXG4gICAqXG4gICAqIENhc28gcG9zc3VhIHBhcsOibWV0cm9zIGRlZmluaWRvcyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWA6XG4gICAqXG4gICAqIGBgYFxuICAgKiBQT1NUXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wbycgfVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEV4ZW1wbG9zIGRlIHJldG9ybm86XG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogXCIvZXhhbXBsZVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGlzRmF2b3JpdGU6IGZhbHNlLCB1cmw6IFwiL2V4YW1wbGVcIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wbycgfVwiIH1cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtZmF2b3JpdGUtc2VydmljZScpIGZhdm9yaXRlU2VydmljZT86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExpc3RhIGRlIGl0ZW5zIGRvIF9icmVhZGNydW1iXy5cbiAgICpcbiAgICogKipFeGVtcGxvOioqXG4gICAqIGBgYFxuICAgKiB7IGxhYmVsOiAnUG8gUG9ydGFsJywgbGluazogJ3BvcnRhbCcgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1pdGVtcycpIHNldCBpdGVtcyhpdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuaXRlbXNWaWV3ID0gW10uY29uY2F0KGl0ZW1zKTtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIHBvc3NpYmlsaXRhIG8gZW52aW8gZGUgcGFyw6JtZXRyb3MgYWRpY2lvbmFpcyDDoCByZXF1aXNpw6fDo28uXG4gICAqL1xuICBASW5wdXQoJ3AtcGFyYW1zLXNlcnZpY2UnKSBwYXJhbXNTZXJ2aWNlPzogb2JqZWN0O1xuXG4gIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcbn1cbiJdfQ==