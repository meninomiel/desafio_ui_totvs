import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToInt } from '../../utils/util';
const PO_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12'
];
const PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * @description
 *
 * @docsPrivate
 *
 * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
let PoBadgeBaseComponent = class PoBadgeBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define a cor de fundo do componente e aceita os valores:
     *
     * <span class="dot po-color-01"></span> `color-01`
     *
     * <span class="dot po-color-02"></span> `color-02`
     *
     * <span class="dot po-color-03"></span> `color-03`
     *
     * <span class="dot po-color-04"></span> `color-04`
     *
     * <span class="dot po-color-05"></span> `color-05`
     *
     * <span class="dot po-color-06"></span> `color-06`
     *
     * <span class="dot po-color-07"></span> `color-07`
     *
     * <span class="dot po-color-08"></span> `color-08`
     *
     * <span class="dot po-color-09"></span> `color-09`
     *
     * <span class="dot po-color-10"></span> `color-10`
     *
     * <span class="dot po-color-11"></span> `color-11`
     *
     * <span class="dot po-color-12"></span> `color-12`
     *
     * @default `color-07`
     */
    set color(value) {
        this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
    }
    get color() {
        return this._color;
    }
    /**
     * @description
     *
     * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
     */
    set value(value) {
        this._value = convertToInt(value);
        this.setBadgeValue(this._value);
    }
    get value() {
        return this._value;
    }
    setBadgeValue(value) {
        const validRangeValue = (value || value === 0) && value >= 0 && value < 100;
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    }
};
__decorate([
    Input('p-color'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoBadgeBaseComponent.prototype, "color", null);
__decorate([
    Input('p-value'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoBadgeBaseComponent.prototype, "value", null);
PoBadgeBaseComponent = __decorate([
    Directive()
], PoBadgeBaseComponent);
export { PoBadgeBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYmFkZ2UtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWJhZGdlL3BvLWJhZGdlLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsTUFBTSxlQUFlLEdBQUc7SUFDdEIsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0NBQ1gsQ0FBQztBQUNGLE1BQU0sc0JBQXNCLEdBQUcsVUFBVSxDQUFDO0FBRTFDOzs7Ozs7R0FNRztBQUVILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBTS9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWdDRztJQUNlLElBQUksS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO0lBQ2pGLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDZSxJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUFhO1FBQ2pDLE1BQU0sZUFBZSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDNUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDeEYsQ0FBQztDQUNGLENBQUE7QUExQm1CO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OztpREFFaEI7QUFXaUI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7O2lEQUdoQjtBQXZEVSxvQkFBb0I7SUFEaEMsU0FBUyxFQUFFO0dBQ0Msb0JBQW9CLENBaUVoQztTQWpFWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5jb25zdCBQT19CQURHRV9DT0xPUlMgPSBbXG4gICdjb2xvci0wMScsXG4gICdjb2xvci0wMicsXG4gICdjb2xvci0wMycsXG4gICdjb2xvci0wNCcsXG4gICdjb2xvci0wNScsXG4gICdjb2xvci0wNicsXG4gICdjb2xvci0wNycsXG4gICdjb2xvci0wOCcsXG4gICdjb2xvci0wOScsXG4gICdjb2xvci0xMCcsXG4gICdjb2xvci0xMScsXG4gICdjb2xvci0xMidcbl07XG5jb25zdCBQT19CQURHRV9DT0xPUl9ERUZBVUxUID0gJ2NvbG9yLTA3JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBDb21wb25lbnRlIHV0aWxpemFkbyBubyBgcG8tbWVudWAgcGFyYSBleGliaXIgcG9yIGV4ZW1wbG8gYSBxdWFudGlkYWRlIGRlIHRhcmVmYXMgcGVuZGVudGVzLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0JhZGdlQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7XG5cbiAgYmFkZ2VWYWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGNvciBkZSBmdW5kbyBkbyBjb21wb25lbnRlIGUgYWNlaXRhIG9zIHZhbG9yZXM6XG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAxXCI+PC9zcGFuPiBgY29sb3ItMDFgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAyXCI+PC9zcGFuPiBgY29sb3ItMDJgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAzXCI+PC9zcGFuPiBgY29sb3ItMDNgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA0XCI+PC9zcGFuPiBgY29sb3ItMDRgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA1XCI+PC9zcGFuPiBgY29sb3ItMDVgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA2XCI+PC9zcGFuPiBgY29sb3ItMDZgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA3XCI+PC9zcGFuPiBgY29sb3ItMDdgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA4XCI+PC9zcGFuPiBgY29sb3ItMDhgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA5XCI+PC9zcGFuPiBgY29sb3ItMDlgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEwXCI+PC9zcGFuPiBgY29sb3ItMTBgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTExXCI+PC9zcGFuPiBgY29sb3ItMTFgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEyXCI+PC9zcGFuPiBgY29sb3ItMTJgXG4gICAqXG4gICAqIEBkZWZhdWx0IGBjb2xvci0wN2BcbiAgICovXG4gIEBJbnB1dCgncC1jb2xvcicpIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29sb3IgPSBQT19CQURHRV9DT0xPUlMuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19CQURHRV9DT0xPUl9ERUZBVUxUO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBOw7ptZXJvIGV4aWJpZG8gbm8gY29tcG9uZW50ZSwgY2FzbyBvIG1lc21vIHNlamEgbWFpb3IgcXVlIDk5IG8gdmFsb3IgZXhpYmlkbyBzZXLDoSA5OSsuXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ZhbHVlID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICB0aGlzLnNldEJhZGdlVmFsdWUodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRCYWRnZVZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCB2YWxpZFJhbmdlVmFsdWUgPSAodmFsdWUgfHwgdmFsdWUgPT09IDApICYmIHZhbHVlID49IDAgJiYgdmFsdWUgPCAxMDA7XG4gICAgdGhpcy5iYWRnZVZhbHVlID0gdmFsaWRSYW5nZVZhbHVlID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlID4gOTkgPyAnOTkrJyA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19