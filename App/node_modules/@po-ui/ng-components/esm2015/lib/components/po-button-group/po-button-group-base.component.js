import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
let PoButtonGroupBaseComponent = class PoButtonGroupBaseComponent {
    constructor() {
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        /** Lista de botões. */
        this.buttons = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
};
__decorate([
    Input('p-buttons'),
    __metadata("design:type", Array)
], PoButtonGroupBaseComponent.prototype, "buttons", void 0);
__decorate([
    Input('p-small'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoButtonGroupBaseComponent.prototype, "small", null);
__decorate([
    Input('p-toggle'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoButtonGroupBaseComponent.prototype, "toggle", null);
PoButtonGroupBaseComponent = __decorate([
    Directive()
], PoButtonGroupBaseComponent);
export { PoButtonGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24tZ3JvdXAvcG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVwRSxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztBQUV0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBRUgsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUFBdkM7UUFDVSxXQUFNLEdBQWEsS0FBSyxDQUFDO1FBQ3pCLFlBQU8sR0FBWSxzQkFBc0IsQ0FBQztRQUVsRCx1QkFBdUI7UUFDSCxZQUFPLEdBQTZCLEVBQUUsQ0FBQztJQWdFN0QsQ0FBQztJQTlEQzs7Ozs7Ozs7T0FRRztJQUNlLElBQUksS0FBSyxDQUFDLEtBQWM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBUSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDZ0IsSUFBSSxNQUFNLENBQUMsS0FBYTtRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFTLE1BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFFMUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsYUFBYSxDQUFDLGFBQWdDLEVBQUUsV0FBbUI7UUFDakUsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDbEIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDL0YsQ0FBQztTQUNIO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLFFBQVEsRUFBRTtZQUN2RCxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFTyxjQUFjLENBQUMsVUFBa0I7UUFDdkMsSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsSUFBSSxFQUFFO1lBQzNDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO2FBQU0sSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsTUFBTSxFQUFFO1lBQ3BELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNyRixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRixDQUFBO0FBaEVxQjtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzhCQUFVLEtBQUs7MkRBQXlCO0FBV3pDO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7Ozt1REFFaEI7QUFpQmtCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7Ozt3REFJakI7QUF2Q1UsMEJBQTBCO0lBRHRDLFNBQVMsRUFBRTtHQUNDLDBCQUEwQixDQXFFdEM7U0FyRVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vcG8tYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQnV0dG9uR3JvdXBUb2dnbGUgfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC10b2dnbGUuZW51bSc7XG5cbmNvbnN0IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQgPSAnbm9uZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXG4gKiBDYWRhIGJvdMOjbyBkbyBncnVwbyDDqSB0cmF0YWRvIGRlIGZvcm1hIGluZGl2aWR1YWwsIHJlY2ViZW5kbyBhc3NpbSB1bSByw7N0dWxvLCB1bWEgYcOnw6NvIGJlbSBjb21vIHNlIGRldmVyw6EgZXN0YXIgaGFiaWxpdGFkbyBvdSBuw6NvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXG4gKiBwYXJhIHNlbGXDp8O1ZXMgbXVsdGlwbGFzIGUgw7puaWNhcy5cbiAqXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxuICogcGFydGUgZGUgdW0gbWVzbW8gY29udGV4dG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgdXNhciBvIGBwby1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHBvLWJ1dHRvbmAuXG4gKiAtIFByb2N1cmUgdXRpbGl6YXIgbm8gbcOheGltbyAzIGHDp8O1ZXMgcGFyYSBjYWRhIGBwby1idXR0b24tZ3JvdXBgLlxuICpcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGBwby1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGBwby1idXR0b24tZ3JvdXBgLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0J1dHRvbkdyb3VwQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b2dnbGU/OiBzdHJpbmcgPSBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xuICBASW5wdXQoJ3AtYnV0dG9ucycpIGJ1dHRvbnM6IEFycmF5PFBvQnV0dG9uR3JvdXBJdGVtPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRvcm5hIG8gZ3J1cG8gZGUgYm90w7VlcyBjb20gdGFtYW5obyBtaW5pZmljYWRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc21hbGwnKSBzZXQgc21hbGwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zbWFsbCA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IHNtYWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zbWFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIG1vZG8gZGUgc2VsZcOnw6NvIGRlIGJvdMO1ZXMuXG4gICAqXG4gICAqID4gVmVqYSBvcyB2YWxvcmVzIHbDoWxpZG9zIG5vICplbnVtKiBgUG9NdWx0aXNlbGVjdEZpbHRlck1vZGVgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgbm9uZWBcbiAgICovXG4gIEBJbnB1dCgncC10b2dnbGUnKSBzZXQgdG9nZ2xlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b2dnbGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb0J1dHRvbkdyb3VwVG9nZ2xlKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQ7XG5cbiAgICB0aGlzLmNoZWNrU2VsZWN0ZWRzKHRoaXMuX3RvZ2dsZSk7XG4gIH1cblxuICBnZXQgdG9nZ2xlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RvZ2dsZTtcbiAgfVxuXG4gIG9uQnV0dG9uQ2xpY2soYnV0dG9uQ2xpY2tlZDogUG9CdXR0b25Hcm91cEl0ZW0sIGJ1dHRvbkluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy50b2dnbGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChcbiAgICAgICAgKGJ1dHRvbiwgaW5kZXgpID0+IChidXR0b24uc2VsZWN0ZWQgPSBpbmRleCA9PT0gYnV0dG9uSW5kZXggPyAhYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA6IGZhbHNlKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudG9nZ2xlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLk11bHRpcGxlKSB7XG4gICAgICBidXR0b25DbGlja2VkLnNlbGVjdGVkID0gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1NlbGVjdGVkcyh0b2dnbGVNb2RlOiBzdHJpbmcpIHtcbiAgICBpZiAodG9nZ2xlTW9kZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5Ob25lKSB7XG4gICAgICB0aGlzLmRlc2VsZWN0QWxsQnV0dG9ucygpO1xuICAgIH0gZWxzZSBpZiAodG9nZ2xlTW9kZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5TaW5nbGUpIHtcbiAgICAgIGNvbnN0IGhhc01vcmVPbmVTZWxlY3RlZCA9IHRoaXMuYnV0dG9ucy5maWx0ZXIoYnV0dG9uID0+IGJ1dHRvbi5zZWxlY3RlZCkubGVuZ3RoID4gMTtcbiAgICAgIGlmIChoYXNNb3JlT25lU2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlc2VsZWN0QWxsQnV0dG9ucygpIHtcbiAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gKGJ1dHRvbi5zZWxlY3RlZCA9IGZhbHNlKSk7XG4gIH1cbn1cbiJdfQ==