import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange, SimpleChanges, Renderer2, ViewChild } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToInt, poLocaleDefault } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
const PoTableColumnManagerMaxColumnsDefault = 99999;
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
let PoTableColumnManagerComponent = class PoTableColumnManagerComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.columnsOptions = [];
        this.literals = Object.assign(Object.assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[browserLanguage()]);
        this.visibleColumns = [];
        this.defaultColumns = [];
        this.columns = [];
        this.visibleColumnsChange = new EventEmitter();
    }
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    ngOnInit() {
        this.updateColumnsOptions(this.columns);
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateColumnsOptions(this.columns);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    onChangeVisibleColumns(checkedColumns) {
        this.disableColumnsOptions(this.columnsOptions);
        const visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    restore() {
        this.updateColumnsOptions(this.defaultColumns);
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
        setTimeout(() => {
            this.columnsOptions = columns.map(column => (Object.assign(Object.assign({}, column), { disabled: this.isDisableColumn(column.value) })));
        });
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        const visibleColumns = [];
        columns.forEach(column => {
            if (column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail') {
                visibleColumns.push(column.property);
            }
        });
        return visibleColumns;
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        return this.columns.map(column => (Object.assign(Object.assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const columnsOptions = [];
        columns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property)
                });
            }
        });
        return columnsOptions;
    }
    onChangeColumns(columns) {
        const { firstChange, currentValue = [], previousValue = [] } = columns;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (firstChange || this.defaultColumns.length !== currentValue.length) {
            this.defaultColumns = currentValue;
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (previousValue.length !== currentValue.length) {
            this.updateColumnsOptions(currentValue);
        }
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    updateColumnsOptions(columns) {
        this.visibleColumns = this.getVisibleColumns(columns);
        this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
        this.onChangeVisibleColumns(this.visibleColumns);
    }
};
PoTableColumnManagerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
__decorate([
    Input('p-columns'),
    __metadata("design:type", Array)
], PoTableColumnManagerComponent.prototype, "columns", void 0);
__decorate([
    Input('p-max-columns'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoTableColumnManagerComponent.prototype, "maxColumns", null);
__decorate([
    Input('p-target'),
    __metadata("design:type", ElementRef)
], PoTableColumnManagerComponent.prototype, "target", void 0);
__decorate([
    Output('p-visible-columns-change'),
    __metadata("design:type", Object)
], PoTableColumnManagerComponent.prototype, "visibleColumnsChange", void 0);
__decorate([
    ViewChild(PoPopoverComponent),
    __metadata("design:type", PoPopoverComponent)
], PoTableColumnManagerComponent.prototype, "popover", void 0);
PoTableColumnManagerComponent = __decorate([
    Component({
        selector: 'po-table-column-manager',
        template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\"\n    >\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n"
    }),
    __metadata("design:paramtypes", [Renderer2])
], PoTableColumnManagerComponent);
export { PoTableColumnManagerComponent };
//# sourceMappingURL=data:application/json;base64,