import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'погрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
let PoLoadingOverlayBaseComponent = class PoLoadingOverlayBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        this.text = this.getTextDefault();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
};
PoLoadingOverlayBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
__decorate([
    Input('p-screen-lock'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoLoadingOverlayBaseComponent.prototype, "screenLock", null);
__decorate([
    Input('p-text'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoLoadingOverlayBaseComponent.prototype, "text", null);
PoLoadingOverlayBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [PoLanguageService])
], PoLoadingOverlayBaseComponent);
export { PoLoadingOverlayBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBSXRGLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHO0lBQzdDLEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFNBQVM7S0FDbkI7SUFDRCxFQUFFLEVBQTRCO1FBQzVCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCO0lBQ0QsRUFBRSxFQUE0QjtRQUM1QixPQUFPLEVBQUUsWUFBWTtLQUN0QjtJQUNELEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFVBQVU7S0FDcEI7Q0FDRixDQUFDO0FBRUY7Ozs7OztHQU1HO0FBRUgsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7SUFxRHhDLFlBQW9CLGVBQWtDO1FBQWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQXBEOUMsZ0JBQVcsR0FBYSxLQUFLLENBQUM7UUFxRHBDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFuREQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXFCRztJQUNxQixJQUFJLFVBQVUsQ0FBQyxVQUFtQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDYyxJQUFJLElBQUksQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFNTyxjQUFjO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV6RCxPQUFPLCtCQUErQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQTs7WUFUc0MsaUJBQWlCOztBQTNCOUI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7OytEQUV0QjtBQWlCZ0I7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7O3lEQUVmO0FBL0NVLDZCQUE2QjtJQUR6QyxTQUFTLEVBQUU7cUNBc0QyQixpQkFBaUI7R0FyRDNDLDZCQUE2QixDQThEekM7U0E5RFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWxvYWRpbmctb3ZlcmxheS1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdMb2FkaW5nJ1xuICB9LFxuICBlczogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz57XG4gICAgbG9hZGluZzogJ0NhcmdhbmRvJ1xuICB9LFxuICBwdDogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz57XG4gICAgbG9hZGluZzogJ0NhcnJlZ2FuZG8nXG4gIH0sXG4gIHJ1OiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPntcbiAgICBsb2FkaW5nOiAn0L/QvtCz0YDRg9C30LrQsCdcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIG1vc3RyYSBhbyB1c3XDoXJpbyB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBlIGJsb3F1ZWlhIGEgcMOhZ2luYSBpbnRlaXJhIG91IG8gY29udGFpbmVyIGVzY29saGlkbyxcbiAqIGVucXVhbnRvIGFndWFyZGEgYSByZXNwb3N0YSBkZSBhbGd1bWEgcmVxdWlzacOnw6NvLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0xvYWRpbmdPdmVybGF5QmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3NjcmVlbkxvY2s/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gKm92ZXJsYXkqIHNlcsOhIGFwbGljYWRvIGEgdW0gKmNvbnRhaW5lciogb3UgYSBww6FnaW5hIGludGVpcmEuXG4gICAqXG4gICAqIFBhcmEgdXRpbGl6YXIgbyBjb21wb25lbnRlIGNvbW8gdW0gKmNvbnRhaW5lciosIG8gZWxlbWVudG8gcGFpIGRldmVyw6EgcmVjZWJlciB1bWEgcG9zacOnw6NvIHJlbGF0aXZhLCBwb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmVcIj5cbiAgICpcbiAgICogIDxwby1jaGFydCBbcC1zZXJpZXNdPVwiW3sgdmFsdWU6IDEwLCBjYXRlZ29yeTogJ0V4YW1wbGUnIH1dXCI+XG4gICAqICA8L3BvLWNoYXJ0PlxuICAgKlxuICAgKiAgPHBvLWxvYWRpbmctb3ZlcmxheT5cbiAgICogIDwvcG8tbG9hZGluZy1vdmVybGF5PlxuICAgKiA8L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1zY3JlZW4tbG9jaycpIHNldCBzY3JlZW5Mb2NrKHNjcmVlbkxvY2s6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JlZW5Mb2NrID0gY29udmVydFRvQm9vbGVhbihzY3JlZW5Mb2NrKTtcbiAgfVxuXG4gIGdldCBzY3JlZW5Mb2NrKCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Mb2NrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgKlxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbKipQb0kxOG4qKl0oL2RvY3VtZW50YXRpb24vcG8taTE4bikgb3UgbmF2ZWdhZG9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgQ2FycmVnYW5kb2BcbiAgICovXG4gIEBJbnB1dCgncC10ZXh0Jykgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RleHQgPSB2YWx1ZSB8fCB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gIH1cblxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgdGhpcy50ZXh0ID0gdGhpcy5nZXRUZXh0RGVmYXVsdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0RGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuXG4gICAgcmV0dXJuIHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHRbbGFuZ3VhZ2VdLmxvYWRpbmc7XG4gIH1cbn1cbiJdfQ==