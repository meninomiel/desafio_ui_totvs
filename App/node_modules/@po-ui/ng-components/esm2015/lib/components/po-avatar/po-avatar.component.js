import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { PoAvatarBaseComponent } from './po-avatar-base.component';
/**
 * @docsExtends PoAvatarBaseComponent
 *
 * @example
 *
 * <example name="po-avatar-basic" title="PO Avatar Basic" >
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-labs" title="PO Avatar Labs" >
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-business-card" title="PO Avatar - Business Card" >
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
 * </example>
 */
let PoAvatarComponent = class PoAvatarComponent extends PoAvatarBaseComponent {
    ngOnInit() {
        if (!this.src) {
            this.src = undefined;
        }
    }
    onError() {
        this.src = undefined;
    }
};
PoAvatarComponent = __decorate([
    Component({
        selector: 'po-avatar',
        template: "<div class=\"po-avatar po-avatar-{{ size }}\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" (error)=\"onError()\" />\n</ng-template>\n\n<ng-template #defaultIcon>\n  <span class=\"po-icon po-icon-user po-avatar-default-icon\"></span>\n</ng-template>\n"
    })
], PoAvatarComponent);
export { PoAvatarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYXZhdGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tYXZhdGFyL3BvLWF2YXRhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUtILElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWtCLFNBQVEscUJBQXFCO0lBQzFELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUN2QixDQUFDO0NBQ0YsQ0FBQTtBQVZZLGlCQUFpQjtJQUo3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztRQUNyQiw0WUFBeUM7S0FDMUMsQ0FBQztHQUNXLGlCQUFpQixDQVU3QjtTQVZZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQXZhdGFyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tYXZhdGFyLWJhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9BdmF0YXJCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tYXZhdGFyLWJhc2ljXCIgdGl0bGU9XCJQTyBBdmF0YXIgQmFzaWNcIiA+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1hdmF0YXItYmFzaWMvc2FtcGxlLXBvLWF2YXRhci1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1hdmF0YXItYmFzaWMvc2FtcGxlLXBvLWF2YXRhci1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYXZhdGFyLWJhc2ljL3NhbXBsZS1wby1hdmF0YXItYmFzaWMuY29tcG9uZW50LmUyZS1zcGVjLnRzXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWF2YXRhci1iYXNpYy9zYW1wbGUtcG8tYXZhdGFyLWJhc2ljLmNvbXBvbmVudC5wby50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWF2YXRhci1sYWJzXCIgdGl0bGU9XCJQTyBBdmF0YXIgTGFic1wiID5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWF2YXRhci1sYWJzL3NhbXBsZS1wby1hdmF0YXItbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1hdmF0YXItbGFicy9zYW1wbGUtcG8tYXZhdGFyLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tYXZhdGFyLWJ1c2luZXNzLWNhcmRcIiB0aXRsZT1cIlBPIEF2YXRhciAtIEJ1c2luZXNzIENhcmRcIiA+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1hdmF0YXItYnVzaW5lc3MtY2FyZC9zYW1wbGUtcG8tYXZhdGFyLWJ1c2luZXNzLWNhcmQuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYXZhdGFyLWJ1c2luZXNzLWNhcmQvc2FtcGxlLXBvLWF2YXRhci1idXNpbmVzcy1jYXJkLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWF2YXRhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1hdmF0YXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvQXZhdGFyQ29tcG9uZW50IGV4dGVuZHMgUG9BdmF0YXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnNyYykge1xuICAgICAgdGhpcy5zcmMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgb25FcnJvcigpOiB2b2lkIHtcbiAgICB0aGlzLnNyYyA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19