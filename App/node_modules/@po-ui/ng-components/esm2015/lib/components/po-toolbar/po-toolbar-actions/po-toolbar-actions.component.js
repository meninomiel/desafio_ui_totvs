import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { isTypeof } from '../../../utils/util';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
const poToolbarActionsIconDefault = 'po-icon-more';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
let PoToolbarActionsComponent = class PoToolbarActionsComponent {
    constructor() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    /** Define o ícone das ações. */
    set actionsIcon(icon) {
        this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
    }
    get actionsIcon() {
        return this._actionsIcon;
    }
};
__decorate([
    Input('p-actions'),
    __metadata("design:type", Array)
], PoToolbarActionsComponent.prototype, "actions", void 0);
__decorate([
    Input('p-actions-icon'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoToolbarActionsComponent.prototype, "actionsIcon", null);
PoToolbarActionsComponent = __decorate([
    Component({
        selector: 'po-toolbar-actions',
        template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\n",
        providers: [PoControlPositionService]
    })
], PoToolbarActionsComponent);
export { PoToolbarActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdG9vbGJhci9wby10b29sYmFyLWFjdGlvbnMvcG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBSTdHLE1BQU0sMkJBQTJCLEdBQUcsY0FBYyxDQUFDO0FBRW5EOzs7Ozs7OztHQVFHO0FBTUgsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFBdEM7UUFDVSxpQkFBWSxHQUFZLDJCQUEyQixDQUFDO0lBYTlELENBQUM7SUFSQyxnQ0FBZ0M7SUFDUCxJQUFJLFdBQVcsQ0FBQyxJQUFZO1FBQ25ELElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQztJQUNwRixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7Q0FDRixDQUFBO0FBVnFCO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7OEJBQVcsS0FBSzswREFBa0I7QUFHNUI7SUFBeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDOzs7NERBRXZCO0FBVFUseUJBQXlCO0lBTHJDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsNFFBQWtEO1FBQ2xELFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO0tBQ3RDLENBQUM7R0FDVyx5QkFBeUIsQ0FjckM7U0FkWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0NvbnRyb2xQb3NpdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1jb250cm9sLXBvc2l0aW9uL3BvLWNvbnRyb2wtcG9zaXRpb24uc2VydmljZSc7XG5cbmltcG9ydCB7IFBvVG9vbGJhckFjdGlvbiB9IGZyb20gJy4uL3BvLXRvb2xiYXItYWN0aW9uLmludGVyZmFjZSc7XG5cbmNvbnN0IHBvVG9vbGJhckFjdGlvbnNJY29uRGVmYXVsdCA9ICdwby1pY29uLW1vcmUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEB1c2VkQnkgUG9Ub29sYmFyQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby10b29sYmFyLWFjdGlvbnNgIHRlbSBjb21vIG9iamV0aXZvIHJlY2ViZXIgdW1hIGxpc3RhIGRlIGHDp8O1ZXMgZSB1bSDDrWNvbmUgcXVlIHBvZGVtIHNlciBwZXJzb25hbGl6YWRvcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdG9vbGJhci1hY3Rpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRvb2xiYXItYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1BvQ29udHJvbFBvc2l0aW9uU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUG9Ub29sYmFyQWN0aW9uc0NvbXBvbmVudCB7XG4gIHByaXZhdGUgX2FjdGlvbnNJY29uPzogc3RyaW5nID0gcG9Ub29sYmFyQWN0aW9uc0ljb25EZWZhdWx0O1xuXG4gIC8qKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMuICovXG4gIEBJbnB1dCgncC1hY3Rpb25zJykgYWN0aW9ucz86IEFycmF5PFBvVG9vbGJhckFjdGlvbj47XG5cbiAgLyoqIERlZmluZSBvIMOtY29uZSBkYXMgYcOnw7Vlcy4gKi9cbiAgQElucHV0KCdwLWFjdGlvbnMtaWNvbicpIHNldCBhY3Rpb25zSWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9hY3Rpb25zSWNvbiA9IGlzVHlwZW9mKGljb24sICdzdHJpbmcnKSA/IGljb24gOiBwb1Rvb2xiYXJBY3Rpb25zSWNvbkRlZmF1bHQ7XG4gIH1cblxuICBnZXQgYWN0aW9uc0ljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGlvbnNJY29uO1xuICB9XG59XG4iXX0=