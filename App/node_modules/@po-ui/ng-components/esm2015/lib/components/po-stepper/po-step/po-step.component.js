import { __decorate, __metadata } from "tslib";
import { AfterContentInit, Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
let PoStepComponent = class PoStepComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
};
PoStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input('p-can-active-next-step'),
    __metadata("design:type", Function)
], PoStepComponent.prototype, "canActiveNextStep", void 0);
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoStepComponent.prototype, "label", void 0);
__decorate([
    Input('p-status'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoStepComponent.prototype, "status", null);
PoStepComponent = __decorate([
    Component({
        selector: 'po-step',
        template: "<ng-content></ng-content>\n"
    }),
    __metadata("design:paramtypes", [ElementRef])
], PoStepComponent);
export { PoStepComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DRztBQUtILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUErQzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUE5Q2xDLFlBQU8sR0FBcUIsZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUU3RCxhQUFhO1FBQ2IsT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO0lBMkN3QixDQUFDO0lBWDlDLG1DQUFtQztJQUNoQixJQUFJLE1BQU0sQ0FBQyxNQUF1QjtRQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFJRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVTLHlCQUF5QjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsRyxDQUFDO0NBQ0YsQ0FBQTs7WUFWaUMsVUFBVTs7QUFsQlQ7SUFBaEMsS0FBSyxDQUFDLHdCQUF3QixDQUFDOzswREFFVztBQUd6QjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs4Q0FBZTtBQUdiO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7Ozs2Q0FJakI7QUF6Q1UsZUFBZTtJQUozQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsU0FBUztRQUNuQix1Q0FBcUM7S0FDdEMsQ0FBQztxQ0FnRGdDLFVBQVU7R0EvQy9CLGVBQWUsQ0F5RDNCO1NBekRZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9TdGVwcGVyU3RhdHVzIH0gZnJvbSAnLi4vZW51bXMvcG8tc3RlcHBlci1zdGF0dXMuZW51bSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1zdGVwYCDDqSB1dGlsaXphZG8gcGFyYSBlbnZvbHZlciBlIHJlbmRlcml6YXIgbyBjb250ZcO6ZG8gZGUgdW0gcGFzc28gKCpzdGVwKikgZG8gYHBvLXN0ZXBwZXJgLCBwb3IgZXhlbXBsbzpcbiAqXG4gKiBgYGBcbiAqIDxwby1zdGVwcGVyPlxuICpcbiAqICAgIDxwby1zdGVwIHAtbGFiZWw9XCJFbmRlcmXDp29cIj5cbiAqXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIGVuZGVyZcOnbyAtLT5cbiAqXG4gKiAgICA8L3BvLXN0ZXA+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIlBhZ2FtZW50b1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gcGFnYW1lbnRvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgPC9wby1zdGVwcGVyPlxuICogYGBgXG4gKlxuICogQSByZW5kZXJpemHDp8OjbyBkbyBjb250ZcO6ZG8gZW52b2x2aWRvIG5hIHRlbGEgZSBvIGNvbnRyb2xlIGRvcyBzdGF0dXMgc8OjbyBmZWl0b3MgYXV0b21hdGljYW1lbnRlLiBObyBxdWFsLCBvIHByaW1laXJvXG4gKiBgcG8tc3RlcGAgZW5jb250cmFkbyBzZXLDoSBjb2xvY2FkbyBjb21vIGF0aXZvLCBvIHByw7N4aW1vIGZpY2EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG9zIGRlbWFpcyBmaWNhbVxuICogZGVzYWJpbGl0YWRvcyAoKmRpc2FibGVkKikuXG4gKlxuICogQW8gY2xpY2FyIG5vIGBwby1zdGVwYCBxdWUgZXN0w6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiwgbyBxdWUgZXN0w6EgYXRpdm8gZmljYXLDoSBjb20gb1xuICogc3RhdHVzIGRlIGNvbmNsdcOtZG8gKCpkb25lKikgZSBvIHByw7N4aW1vIHF1ZSBlc3RhdmEgZGVzYWJpbGl0YWRvIGZpY2Fyw6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG8gcmVzdGFudGUgcGVybWFuZWNlcsOhXG4gKiBjb20gbyBzdGF0dXMgZGVzYWJpbGl0YWRvLlxuICpcbiAqID4gQW8gdXRpbGl6YXIgbyBgcG8tc3RlcGAsIG8gY29tcG9uZW50ZSBgcG8tc3RlcHBlcmAgZnVuY2lvbmFyw6EgZGUgZm9ybWEgc2VxdWVuY2lhbCwgb3Ugc2VqYSwgbsOjbyBzZXLDoSBwb3Nzw612ZWxcbiAqIHB1bGFyIHBhcmEgb3V0cm8gYHBvLXN0ZXBgIHF1ZSBlc3RlamEgY29tIG8gc3RhdHVzIGlndWFsIGEgZGVzYWJpbGl0YWRvICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBY2Vzc2UgYSBbZG9jdW1lbnRhw6fDo28gZG8gYHBvLXN0ZXBwZXJgXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwcGVyKSBwYXJhIHRlciBtYWlzIGluZm9ybWHDp8O1ZXMgc29icmUgbyBzZXUgZnVuY2lvbmFtZW50b1xuICogZSBleGVtcGxvcyBkZSB1c28uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXN0ZXAnLFxuICB0ZW1wbGF0ZVVybDogJ3BvLXN0ZXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvU3RlcENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBwcml2YXRlIF9zdGF0dXM/OiBQb1N0ZXBwZXJTdGF0dXMgPSBQb1N0ZXBwZXJTdGF0dXMuRGlzYWJsZWQ7XG5cbiAgLy8gSUQgZG8gc3RlcFxuICBpZD86IHN0cmluZyA9IHV1aWQoKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBjaGFtYWRhIHF1YW5kbyBvIHByw7N4aW1vICpzdGVwKiBmb3IgY2xpY2FkbyBvdSBxdWFuZG8gbyBtw6l0b2RvIGBQb1N0ZXBwZXJDb21wb25lbnQubmV4dCgpYCBmb3IgY2hhbWFkby5cbiAgICogQW8gcmV0b3JuYXIgYHRydWVgIGRlZmluZSBxdWUgZXNzZSAqc3RlcCogZmljYXLDoSBhdGl2byBlIG8gYXR1YWwgY29tbyBjb25jbHXDrWRvICgqZG9uZSopLlxuICAgKiBUYW1iw6ltIGFjZWl0YSBmdW7Dp8O1ZXMgcXVlIHJldG9ybmVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YC4gQW8gcmV0b3JuYXIgdW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLFxuICAgKiBnYXJhbnRhIHF1ZSBlc3NlIGBPYnNlcnZhYmxlYCBzZXLDoSBjb21wbGV0YWRvLCBjYXNvIGhvdXZlciBhbGd1bSBlcnJvIGR1cmFudGUgbyBwcm9jZXNzbyBuw6NvIHNlcsOhIHBvc3PDrXZlbCBwcm9zc2VndWlyXG4gICAqIGFvIHByw7N4aW1vICpzdGVwKi5cbiAgICpcbiAgICogQW8gc2VyIGRpc3BhcmFkYSwgYSBtZXNtYSByZWNlYmVyw6EgcG9yIHBhcsOibWV0cm8gbyBgUG9TdGVwQ29tcG9uZW50YCBhdHVhbC5cbiAgICpcbiAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxuICAgKiBwYXJhIG8gY29udGV4dG8gZG8gY29tcG9uZW50ZSBxdWUgbyBlc3TDoSB1dGlsaXphbmRvLCBwb2RlIHNlciB1dGlsaXphZG8gYSBwcm9wcmllZGFkZSBgYmluZGAgZG8gSmF2YXNjcmlwdC5cbiAgICogUG9yIGV4ZW1wbG8sIHBhcmEgYSBmdW7Dp8OjbyBgdmFsaWRhdGVgOlxuICAgKlxuICAgKiBgYGBcbiAgICogPHBvLXN0ZXAgcC1sYWJlbD1cIlN0ZXAgMVwiIFtwLWNhbi1hY3RpdmUtbmV4dC1zdGVwXT1cInZhbGlkYXRlLmJpbmQodGhpcylcIj5cbiAgICogLi4uXG4gICAqIDwvcG8tc3RlcD5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXAnKSBjYW5BY3RpdmVOZXh0U3RlcDpcbiAgICB8ICgoY3VycmVudFN0ZXApID0+IGJvb2xlYW4pXG4gICAgfCAoKGN1cnJlbnRTdGVwKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcblxuICAvKiogVMOtdHVsbyBxdWUgc2Vyw6EgZXhpYmlkbyBkZXNjcmV2ZW5kbyBvIHBhc3NvICgqc3RlcCopLiAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIEVzdGFkbyBkZSBleGliacOnw6NvIGRvIGBwby1zdGVwYC5cbiAgQElucHV0KCdwLXN0YXR1cycpIHNldCBzdGF0dXMoc3RhdHVzOiBQb1N0ZXBwZXJTdGF0dXMpIHtcbiAgICB0aGlzLl9zdGF0dXMgPSBzdGF0dXM7XG5cbiAgICB0aGlzLnNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTtcbiAgfVxuXG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID1cbiAgICAgIHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuQWN0aXZlIHx8IHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuRXJyb3IgPyAnJyA6ICdub25lJztcbiAgfVxufVxuIl19