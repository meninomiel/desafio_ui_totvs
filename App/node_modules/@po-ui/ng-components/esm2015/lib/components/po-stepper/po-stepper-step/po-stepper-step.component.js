import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isTypeof, poLocaleDefault } from './../../../utils/util';
import { PoStepperOrientation } from '../enums/po-stepper-orientation.enum';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
const poStepperStepSizeDefault = 24;
const poStepperStepSizeMax = 64;
const poStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
 */
let PoStepperStepComponent = class PoStepperStepComponent {
    constructor() {
        this._stepIcons = false;
        this._stepSize = poStepperStepSizeDefault;
        this.literals = Object.assign(Object.assign({}, poStepLiteralsDefault[poLocaleDefault]), poStepLiteralsDefault[browserLanguage()]);
        // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
        this.activated = new EventEmitter();
        // Evento que será emitido ao clicar no *step*.
        this.click = new EventEmitter();
        // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
        this.enter = new EventEmitter();
    }
    // Label do *step*.
    set label(value) {
        this._label = isTypeof(value, 'string') ? value : `${this.literals.label} ${this.circleContent}`;
    }
    get label() {
        return this._label;
    }
    // Define o estado de exibição.
    set status(value) {
        this._status = value ? value : undefined;
        if (this.status === PoStepperStatus.Active) {
            this.activated.emit();
        }
    }
    get status() {
        return this._status;
    }
    set stepIcons(stepIcons) {
        this._stepIcons = convertToBoolean(stepIcons);
    }
    get stepIcons() {
        return this._stepIcons;
    }
    // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
    // O valor informado deve ser entre `24` e `64`.
    set stepSize(value) {
        this._stepSize =
            value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax ? value : poStepperStepSizeDefault;
    }
    get stepSize() {
        return this._stepSize;
    }
    get halfStepSize() {
        return this.stepSize / 2;
    }
    get isVerticalOrientation() {
        return this.orientation === PoStepperOrientation.Vertical;
    }
    get marginHorizontalBar() {
        return this.isVerticalOrientation ? undefined : this.halfStepSize;
    }
    getStatusClass(status) {
        switch (status) {
            case PoStepperStatus.Active:
                return 'po-stepper-step-active';
            case PoStepperStatus.Disabled:
                return 'po-stepper-step-disabled';
            case PoStepperStatus.Done:
                return 'po-stepper-step-done';
            case PoStepperStatus.Error:
                return 'po-stepper-step-error';
            default:
                return 'po-stepper-step-default';
        }
    }
    onClick() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.click.emit();
        }
    }
    onEnter() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.enter.emit();
        }
    }
};
__decorate([
    Input('p-circle-content'),
    __metadata("design:type", Object)
], PoStepperStepComponent.prototype, "circleContent", void 0);
__decorate([
    Input('p-label'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoStepperStepComponent.prototype, "label", null);
__decorate([
    Input('p-orientation'),
    __metadata("design:type", String)
], PoStepperStepComponent.prototype, "orientation", void 0);
__decorate([
    Input('p-status'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoStepperStepComponent.prototype, "status", null);
__decorate([
    Input('p-step-icons'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoStepperStepComponent.prototype, "stepIcons", null);
__decorate([
    Input('p-step-size'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoStepperStepComponent.prototype, "stepSize", null);
__decorate([
    Output('p-activated'),
    __metadata("design:type", Object)
], PoStepperStepComponent.prototype, "activated", void 0);
__decorate([
    Output('p-click'),
    __metadata("design:type", Object)
], PoStepperStepComponent.prototype, "click", void 0);
__decorate([
    Output('p-enter'),
    __metadata("design:type", Object)
], PoStepperStepComponent.prototype, "enter", void 0);
PoStepperStepComponent = __decorate([
    Component({
        selector: 'po-stepper-step',
        template: "<div class=\"po-stepper-step\" [ngClass]=\"getStatusClass(status)\" (click)=\"onClick()\" (keydown.enter)=\"onEnter()\">\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\"\n    ></div>\n\n    <po-stepper-circle [p-content]=\"circleContent\" [p-icons]=\"stepIcons\" [p-size]=\"stepSize\" [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\"\n    ></div>\n  </div>\n\n  <po-stepper-label class=\"po-stepper-step-label-position\" [p-content]=\"label\"> </po-stepper-label>\n</div>\n"
    })
], PoStepperStepComponent);
export { PoStepperStepComponent };
//# sourceMappingURL=data:application/json;base64,