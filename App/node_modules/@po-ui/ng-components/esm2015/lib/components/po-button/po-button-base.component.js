import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
const PO_BUTTON_TYPE_DEFAULT = 'default';
/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
let PoButtonBaseComponent = class PoButtonBaseComponent {
    constructor() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
        this.click = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deixa o botão menor.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `default`: estilo padrão do `po-button`.
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
     *  - `link`: o `po-button` recebe o estilo de um link.
     *
     * @default `default`
     */
    set type(value) {
        this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
};
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoButtonBaseComponent.prototype, "label", void 0);
__decorate([
    Input('p-loading'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "loading", null);
__decorate([
    Input('p-icon'),
    __metadata("design:type", String)
], PoButtonBaseComponent.prototype, "icon", void 0);
__decorate([
    Input('p-small'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "small", null);
__decorate([
    Input('p-type'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoButtonBaseComponent.prototype, "type", null);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "disabled", null);
__decorate([
    Output('p-click'),
    __metadata("design:type", Object)
], PoButtonBaseComponent.prototype, "click", void 0);
PoButtonBaseComponent = __decorate([
    Directive()
], PoButtonBaseComponent);
export { PoButtonBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24vcG8tYnV0dG9uLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXBELE1BQU0sZUFBZSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakUsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLENBQUM7QUFFekM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVILElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBQWxDO1FBQ1UsY0FBUyxHQUFhLEtBQUssQ0FBQztRQUM1QixhQUFRLEdBQWEsS0FBSyxDQUFDO1FBQzNCLFdBQU0sR0FBYSxLQUFLLENBQUM7UUFDekIsVUFBSyxHQUFZLFNBQVMsQ0FBQztRQTJGbkMsMkVBQTJFO1FBQ3hELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBQ3RELENBQUM7SUFsRkM7Ozs7Ozs7Ozs7T0FVRztJQUNpQixJQUFJLE9BQU8sQ0FBQyxLQUFjO1FBQzVDLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBU0Q7Ozs7Ozs7O09BUUc7SUFDZSxJQUFJLEtBQUssQ0FBQyxLQUFjO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ0QsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7T0FjRztJQUNjLElBQUksSUFBSSxDQUFDLEtBQWE7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO0lBQ2hGLENBQUM7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ2tCLElBQUksUUFBUSxDQUFDLEtBQWM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBUSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztDQUlGLENBQUE7QUFwRm1CO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7O29EQUFnQjtBQWFiO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7OztvREFFbEI7QUFXZ0I7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7bURBQWU7QUFXYjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7a0RBRWhCO0FBb0JnQjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOzs7aURBRWY7QUFjb0I7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7O3FEQUVuQjtBQU1rQjtJQUFsQixNQUFNLENBQUMsU0FBUyxDQUFDOztvREFBa0M7QUFoR3pDLHFCQUFxQjtJQURqQyxTQUFTLEVBQUU7R0FDQyxxQkFBcUIsQ0FpR2pDO1NBakdZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuY29uc3QgUE9fQlVUVE9OX1RZUEVTID0gWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnZGFuZ2VyJywgJ2xpbmsnXTtcbmNvbnN0IFBPX0JVVFRPTl9UWVBFX0RFRkFVTFQgPSAnZGVmYXVsdCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tYnV0dG9uYCBwZXJtaXRlIHF1ZSBvIHVzdcOhcmlvIGV4ZWN1dGUgYcOnw7VlcyBwcmVkZWZpbmlkYXMgcGVsbyBkZXNlbnZvbHZlZG9yLlxuICpcbiAqIEF0cmF2w6lzIGRvcyB0aXBvcywgw6kgcG9zc8OtdmVsIGlkZW50aWZpY2FyIGEgaW1wb3J0w6JuY2lhIGRlIGNhZGEgYcOnw6NvLCBzZW5kbyBlbGEgcHJpbcOhcmlhIChgcHJpbWFyeWApIG91IGF0w6kgbWVzbW8gdW1hXG4gKiBhw6fDo28gaXJyZXZlcnPDrXZlbCAoYGRhbmdlcmApLCBjb21vIGEgZXhjbHVzw6NvIGRlIHVtIHJlZ2lzdHJvLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcbiAqXG4gKiAtIEV2aXRlIGBsYWJlbHNgIGV4dGVuc29zIHF1ZSBxdWVicmFtIG8gbGF5b3V0IGRvIGBwby1idXR0b25gLCB1c2UgYGxhYmVsc2AgZGlyZXRvcywgY3VydG9zIGUgaW50dWl0aXZvcy5cbiAqIC0gVXRpbGl6ZSBhcGVuYXMgdW0gYHBvLWJ1dHRvbmAgY29uZmlndXJhZG8gY29tbyBgcHJpbWFyeWAgcG9yIHDDoWdpbmEuXG4gKiAtIFBhcmEgYcOnw7VlcyBpcnJldmVyc8OtdmVpcyB1c2Ugc2VtcHJlIG8gdGlwbyBgZGFuZ2VyYC5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9CdXR0b25CYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2xvYWRpbmc/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90eXBlPzogc3RyaW5nID0gJ2RlZmF1bHQnO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExhYmVsIGRvIGJvdMOjby5cbiAgICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV4aWJlIHVtIMOtY29uZSBkZSBjYXJyZWdhbWVudG8gw6AgZXNxdWVyZGEgZG8gX2xhYmVsXyBkbyBib3TDo28uXG4gICAqXG4gICAqID4gUXVhbmRvIGVzdGEgcHJvcHJpZWRhZGUgZXN0aXZlciBoYWJpbGl0YWRhLCBkZXNhYmlsaXRhcsOhIG8gYm90w6NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtbG9hZGluZycpIHNldCBsb2FkaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbG9hZGluZyA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGxvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRpbmc7XG4gIH1cblxuICAvKipcbiAgICogw41jb25lIGV4aWJpZG8gYW8gbGFkbyBlc3F1ZXJkbyBkbyBsYWJlbCBkbyBib3TDo28uXG4gICAqXG4gICAqIMOJIHBvc3PDrXZlbCB1c2FyIHF1YWxxdWVyIHVtYSBkb3Mgw61jb25lcyBkYSBbQmlibGlvdGVjYSBkZSDDrWNvbmVzXSgvZ3VpZGVzL2ljb25zKS5cbiAgICovXG4gIEBJbnB1dCgncC1pY29uJykgaWNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWl4YSBvIGJvdMOjbyBtZW5vci5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuICBnZXQgc21hbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NtYWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG8gZXN0aWxvIGRvIGBwby1idXR0b25gLlxuICAgKlxuICAgKiBWYWxvcmUgdsOhbGlkb3M6XG4gICAqICAtIGBkZWZhdWx0YDogZXN0aWxvIHBhZHLDo28gZG8gYHBvLWJ1dHRvbmAuXG4gICAqICAtIGBwcmltYXJ5YDogZGVpeGEgbyBgcG8tYnV0dG9uYCBjb20gZGVzdGFxdWUsIGRldmUgc2VyIHVzYWRvIHBhcmEgYcOnw7VlcyBwcmltw6FyaWFzLlxuICAgKiAgLSBgZGFuZ2VyYDogZGV2ZSBzZXIgdXNhZG8gcGFyYSBhw6fDtWVzIHF1ZSBvIHVzdcOhcmlvIHByZWNpc2EgdGVyIGN1aWRhZG8gYW8gZXhlY3V0YS1sw6EuXG4gICAqICAtIGBsaW5rYDogbyBgcG8tYnV0dG9uYCByZWNlYmUgbyBlc3RpbG8gZGUgdW0gbGluay5cbiAgICpcbiAgICogQGRlZmF1bHQgYGRlZmF1bHRgXG4gICAqL1xuICBASW5wdXQoJ3AtdHlwZScpIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90eXBlID0gUE9fQlVUVE9OX1RZUEVTLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogUE9fQlVUVE9OX1RZUEVfREVGQVVMVDtcbiAgfVxuICBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVzYWJpbGl0YSBvIGBwby1idXR0b25gIGUgbsOjbyBwZXJtaXRlIHF1ZSBvIHVzdcOhcmlvIGludGVyYWphIGNvbSBvIG1lc21vLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtZGlzYWJsZWQnKSBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKiogQcOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcXVhbmRvIG8gdXN1w6FyaW8gY2xpY2FyIHNvYnJlIG8gYHBvLWJ1dHRvbmAuICovXG4gIEBPdXRwdXQoJ3AtY2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8bnVsbD4oKTtcbn1cbiJdfQ==