import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTreeViewBaseComponent } from './po-tree-view-base.component';
import { PoTreeViewService } from './services/po-tree-view.service';
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="PO Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="PO Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
let PoTreeViewComponent = class PoTreeViewComponent extends PoTreeViewBaseComponent {
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    trackByFunction(index) {
        return index;
    }
};
PoTreeViewComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
PoTreeViewComponent = __decorate([
    Component({
        selector: 'po-tree-view',
        template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\" [p-item]=\"item\" [p-selectable]=\"selectable\">\n    </po-tree-view-item>\n  </ul>\n</po-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [PoTreeViewService]
    }),
    __metadata("design:paramtypes", [PoTreeViewService])
], PoTreeViewComponent);
export { PoTreeViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdHJlZS12aWV3L3BvLXRyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFcEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQU9ILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW9CLFNBQVEsdUJBQXVCO0lBSzlELFlBQW9CLGVBQWtDO1FBQ3BELEtBQUssRUFBRSxDQUFDO1FBRFUsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBRXRELENBQUM7SUFORCxJQUFJLFFBQVE7UUFDVixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBTUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBNEIsRUFBRSxFQUFFO1lBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQTRCLEVBQUUsRUFBRTtZQUN6RSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUE7O1lBakJzQyxpQkFBaUI7O0FBTDNDLG1CQUFtQjtJQU4vQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4QiwyUkFBNEM7UUFDNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7S0FDL0IsQ0FBQztxQ0FNcUMsaUJBQWlCO0dBTDNDLG1CQUFtQixDQXNCL0I7U0F0QlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby10cmVlLXZpZXctYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9UcmVlVmlld0l0ZW0gfSBmcm9tICcuL3BvLXRyZWUtdmlldy1pdGVtL3BvLXRyZWUtdmlldy1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RyZWVWaWV3U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcG8tdHJlZS12aWV3LnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBQb1RyZWVWaWV3QmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRyZWUtdmlldy1iYXNpY1wiIHRpdGxlPVwiUE8gVHJlZSBWaWV3IEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctYmFzaWMvc2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctYmFzaWMvc2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctbGFic1wiIHRpdGxlPVwiUE8gVHJlZSBWaWV3IExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzL3NhbXBsZS1wby10cmVlLXZpZXctbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctbGFicy9zYW1wbGUtcG8tdHJlZS12aWV3LWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmVcIiB0aXRsZT1cIlBPIFRyZWUgVmlldyAtIEZvbGRlciBTdHJ1Y3R1cmVcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlL3NhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS9zYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LXN1cGVybWFya2V0XCIgdGl0bGU9XCJQTyBUcmVlIFZpZXcgLSBTdXBlcm1hcmtldFwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0L3NhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0L3NhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdHJlZS12aWV3JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRyZWUtdmlldy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtQb1RyZWVWaWV3U2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUG9UcmVlVmlld0NvbXBvbmVudCBleHRlbmRzIFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZ2V0IGhhc0l0ZW1zKCkge1xuICAgIHJldHVybiAhISh0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJlZVZpZXdTZXJ2aWNlOiBQb1RyZWVWaWV3U2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5vbkV4cGFuZCgpLnN1YnNjcmliZSgodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkgPT4ge1xuICAgICAgdGhpcy5lbWl0RXhwYW5kZWQodHJlZVZpZXdJdGVtKTtcbiAgICB9KTtcblxuICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLm9uU2VsZWN0KCkuc3Vic2NyaWJlKCh0cmVlVmlld0l0ZW06IFBvVHJlZVZpZXdJdGVtKSA9PiB7XG4gICAgICB0aGlzLmVtaXRTZWxlY3RlZCh0cmVlVmlld0l0ZW0pO1xuICAgIH0pO1xuICB9XG5cbiAgdHJhY2tCeUZ1bmN0aW9uKGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbn1cbiJdfQ==