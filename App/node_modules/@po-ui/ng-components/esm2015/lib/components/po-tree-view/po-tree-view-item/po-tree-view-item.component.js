import { __decorate, __metadata } from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { PoTreeViewService } from '../services/po-tree-view.service';
let PoTreeViewItemComponent = class PoTreeViewItemComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
    }
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.item.expanded = !this.item.expanded;
        this.treeViewService.emitExpandedEvent(Object.assign({}, this.item));
    }
    onSelect(selectedItem) {
        this.treeViewService.emitSelectedEvent(Object.assign({}, selectedItem));
    }
    trackByFunction(index) {
        return index;
    }
};
PoTreeViewItemComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
__decorate([
    Input('p-item'),
    __metadata("design:type", Object)
], PoTreeViewItemComponent.prototype, "item", void 0);
__decorate([
    Input('p-selectable'),
    __metadata("design:type", Boolean)
], PoTreeViewItemComponent.prototype, "selectable", void 0);
PoTreeViewItemComponent = __decorate([
    Component({
        selector: 'po-tree-view-item',
        template: "<li class=\"po-tree-view-item\">\n  <po-tree-view-item-header\n    [p-item]=\"item\"\n    [p-selectable]=\"selectable\"\n    (p-expanded)=\"onClick($event)\"\n    (p-selected)=\"onSelect(item)\"\n  >\n  </po-tree-view-item-header>\n\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\n    <po-tree-view-item\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\n      [p-item]=\"subItem\"\n      [p-selectable]=\"selectable\"\n    >\n    </po-tree-view-item>\n  </ul>\n</li>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [
            trigger('toggleBody', [
                state('collapsed', style({
                    'overflow-y': 'hidden',
                    visibility: 'hidden',
                    opacity: 0,
                    height: '0'
                })),
                transition('expanded => collapsed', [
                    style({ height: '*' }),
                    animate(100, style({ opacity: 0 })),
                    animate(200, style({ height: 0 }))
                ]),
                transition('collapsed => expanded', [
                    style({ height: '0' }),
                    animate(100, style({ opacity: 1 })),
                    animate(200, style({ height: '*' }))
                ])
            ])
        ]
    }),
    __metadata("design:paramtypes", [PoTreeViewService])
], PoTreeViewItemComponent);
export { PoTreeViewItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LWl0ZW0vcG8tdHJlZS12aWV3LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBOEJyRSxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtJQVNsQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFBRyxDQUFDO0lBSjFELElBQUksV0FBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUlELE9BQU8sQ0FBQyxLQUFpQjtRQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sSUFBSSxDQUFDLElBQUksRUFBRyxDQUFDO0lBQzNELENBQUM7SUFFRCxRQUFRLENBQUMsWUFBNEI7UUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sWUFBWSxFQUFHLENBQUM7SUFDOUQsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUE7O1lBbEJzQyxpQkFBaUI7O0FBUnJDO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7O3FEQUFzQjtBQUVmO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7OzJEQUFxQjtBQUhoQyx1QkFBdUI7SUE1Qm5DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0Isb2tCQUFpRDtRQUNqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtRQUMvQyxVQUFVLEVBQUU7WUFDVixPQUFPLENBQUMsWUFBWSxFQUFFO2dCQUNwQixLQUFLLENBQ0gsV0FBVyxFQUNYLEtBQUssQ0FBQztvQkFDSixZQUFZLEVBQUUsUUFBUTtvQkFDdEIsVUFBVSxFQUFFLFFBQVE7b0JBQ3BCLE9BQU8sRUFBRSxDQUFDO29CQUNWLE1BQU0sRUFBRSxHQUFHO2lCQUNaLENBQUMsQ0FDSDtnQkFDRCxVQUFVLENBQUMsdUJBQXVCLEVBQUU7b0JBQ2xDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztvQkFDdEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDbkMsQ0FBQztnQkFDRixVQUFVLENBQUMsdUJBQXVCLEVBQUU7b0JBQ2xDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztvQkFDdEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztpQkFDckMsQ0FBQzthQUNILENBQUM7U0FDSDtLQUNGLENBQUM7cUNBVXFDLGlCQUFpQjtHQVQzQyx1QkFBdUIsQ0EyQm5DO1NBM0JZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UcmVlVmlld0l0ZW0gfSBmcm9tICcuL3BvLXRyZWUtdmlldy1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RyZWVWaWV3U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BvLXRyZWUtdmlldy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdHJlZS12aWV3LWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdHJlZS12aWV3LWl0ZW0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3RvZ2dsZUJvZHknLCBbXG4gICAgICBzdGF0ZShcbiAgICAgICAgJ2NvbGxhcHNlZCcsXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nLFxuICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAnMCdcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICB0cmFuc2l0aW9uKCdleHBhbmRlZCA9PiBjb2xsYXBzZWQnLCBbXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicgfSksXG4gICAgICAgIGFuaW1hdGUoMTAwLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICAgICAgICBhbmltYXRlKDIwMCwgc3R5bGUoeyBoZWlnaHQ6IDAgfSkpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJ2NvbGxhcHNlZCA9PiBleHBhbmRlZCcsIFtcbiAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcwJyB9KSxcbiAgICAgICAgYW5pbWF0ZSgxMDAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gICAgICAgIGFuaW1hdGUoMjAwLCBzdHlsZSh7IGhlaWdodDogJyonIH0pKVxuICAgICAgXSlcbiAgICBdKVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFBvVHJlZVZpZXdJdGVtQ29tcG9uZW50IHtcbiAgQElucHV0KCdwLWl0ZW0nKSBpdGVtOiBQb1RyZWVWaWV3SXRlbTtcblxuICBASW5wdXQoJ3Atc2VsZWN0YWJsZScpIHNlbGVjdGFibGU6IGJvb2xlYW47XG5cbiAgZ2V0IGhhc1N1Ykl0ZW1zKCkge1xuICAgIHJldHVybiAhISh0aGlzLml0ZW0uc3ViSXRlbXMgJiYgdGhpcy5pdGVtLnN1Ykl0ZW1zLmxlbmd0aCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyZWVWaWV3U2VydmljZTogUG9UcmVlVmlld1NlcnZpY2UpIHt9XG5cbiAgb25DbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLml0ZW0uZXhwYW5kZWQgPSAhdGhpcy5pdGVtLmV4cGFuZGVkO1xuXG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2UuZW1pdEV4cGFuZGVkRXZlbnQoeyAuLi50aGlzLml0ZW0gfSk7XG4gIH1cblxuICBvblNlbGVjdChzZWxlY3RlZEl0ZW06IFBvVHJlZVZpZXdJdGVtKSB7XG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2UuZW1pdFNlbGVjdGVkRXZlbnQoeyAuLi5zZWxlY3RlZEl0ZW0gfSk7XG4gIH1cblxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIl19