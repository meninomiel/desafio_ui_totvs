import { __decorate, __metadata, __rest } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
let PoTreeViewBaseComponent = class PoTreeViewBaseComponent {
    constructor() {
        this._items = [];
        this._selectable = false;
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao colapsar um item.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao expandir um item.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao selecionar um item.
         *
         * > Como parâmetro o componente envia o item selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao desfazer a seleção de um item.
         *
         * > Como parâmetro o componente envia o item que foi desmarcado.
         */
        this.unselected = new EventEmitter();
    }
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    set items(value) {
        this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value) {
        this._selectable = convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    emitExpanded(treeViewItem) {
        const event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit(Object.assign({}, treeViewItem));
    }
    emitSelected(treeViewItem) {
        const event = treeViewItem.selected ? 'selected' : 'unselected';
        this.updateItemsOnSelect(treeViewItem);
        this[event].emit(Object.assign({}, treeViewItem));
    }
    addChildItemInParent(childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    }
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    addItem(items, childItem, parentItem) {
        if (parentItem) {
            this.expandParentItem(childItem, parentItem);
            this.addChildItemInParent(childItem, parentItem);
            this.selectItemBySubItems(parentItem);
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    }
    selectAllItems(items, isSelected) {
        items.forEach(item => {
            if (item.subItems) {
                this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = isSelected;
        });
    }
    selectItemBySubItems(item) {
        item.selected = this.everyItemSelected(item.subItems);
    }
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    everyItemSelected(items = []) {
        const itemsLength = items.length;
        const lengthCheckedItems = items.filter(item => item.selected).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        const hasIndeterminateItems = items.filter(item => item.selected || item.selected === null).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    }
    // expande o item pai caso o filho estiver expandido.
    expandParentItem(childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    }
    getItemsByMaxLevel(items = [], level = 0, parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = __rest(item, ["subItems"]);
            if (level === poTreeViewMaxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    this.selectAllItems(subItems, currentItem.selected);
                }
                this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    getItemsWithParentSelected(items = [], parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = __rest(item, ["subItems"]);
            if (Array.isArray(subItems)) {
                this.getItemsWithParentSelected(subItems, currentItem);
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    updateItemsOnSelect(selectedItem) {
        if (selectedItem.subItems) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    }
};
__decorate([
    Input('p-items'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoTreeViewBaseComponent.prototype, "items", null);
__decorate([
    Input('p-selectable'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoTreeViewBaseComponent.prototype, "selectable", null);
__decorate([
    Output('p-collapsed'),
    __metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "collapsed", void 0);
__decorate([
    Output('p-expanded'),
    __metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "expanded", void 0);
__decorate([
    Output('p-selected'),
    __metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "selected", void 0);
__decorate([
    Output('p-unselected'),
    __metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "unselected", void 0);
PoTreeViewBaseComponent = __decorate([
    Directive()
], PoTreeViewBaseComponent);
export { PoTreeViewBaseComponent };
//# sourceMappingURL=data:application/json;base64,