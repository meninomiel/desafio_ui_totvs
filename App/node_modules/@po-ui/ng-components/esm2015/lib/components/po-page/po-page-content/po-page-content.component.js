import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Component, OnDestroy, Renderer2 } from '@angular/core';
import { PoPageContentBaseComponent } from './po-page-content-base.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
let PoPageContentComponent = class PoPageContentComponent extends PoPageContentBaseComponent {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.contentOpacity = 0;
        this.height = '90%';
        this.overflowY = 'none';
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
};
PoPageContentComponent.ctorParameters = () => [
    { type: Renderer2 }
];
PoPageContentComponent = __decorate([
    Component({
        selector: 'po-page-content',
        template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
    }),
    __metadata("design:paramtypes", [Renderer2])
], PoPageContentComponent);
export { PoPageContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tcGFnZS9wby1wYWdlLWNvbnRlbnQvcG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUU5RTs7OztHQUlHO0FBS0gsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBdUIsU0FBUSwwQkFBMEI7SUFLcEUsWUFBbUIsUUFBbUI7UUFDcEMsS0FBSyxFQUFFLENBQUM7UUFEUyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnRDLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBQzNCLFdBQU0sR0FBVyxLQUFLLENBQUM7UUFDdkIsY0FBUyxHQUFXLE1BQU0sQ0FBQztRQUl6QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0saUJBQWlCLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUVwRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxZQUF5QjtRQUN4QyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM5QyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0YsTUFBTSxTQUFTLEdBQUcsVUFBVSxHQUFHLGdCQUFnQixDQUFDO1FBRWhELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDbEUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZUFBZTtRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7O1lBdkM4QixTQUFTOztBQUwzQixzQkFBc0I7SUFKbEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixnTEFBK0M7S0FDaEQsQ0FBQztxQ0FNNkIsU0FBUztHQUwzQixzQkFBc0IsQ0E0Q2xDO1NBNUNZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9QYWdlQ29udGVudEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXBhZ2UtY29udGVudC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRvY3NFeHRlbmRzIFBvUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXBhZ2UtY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1wYWdlLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUNvbnRlbnRDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VDb250ZW50QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIGNvbnRlbnRPcGFjaXR5OiBudW1iZXIgPSAwO1xuICBoZWlnaHQ6IHN0cmluZyA9ICc5MCUnO1xuICBvdmVyZmxvd1k6IHN0cmluZyA9ICdub25lJztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbml0aWFsaXplTGlzdGVuZXJzKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUhlYWRlclNpemUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gIH1cblxuICByZWNhbGN1bGF0ZUhlYWRlclNpemUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBwYWdlSGVhZGVyRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYucG8tcGFnZS1oZWFkZXInKTtcblxuICAgICAgdGhpcy5zZXRIZWlnaHRDb250ZW50KHBhZ2VIZWFkZXJFbGVtZW50KTtcbiAgICAgIHRoaXMuY29udGVudE9wYWNpdHkgPSAxO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0SGVpZ2h0Q29udGVudChwb1BhZ2VIZWFkZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgYm9keUhlaWdodCA9IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xuICAgIGNvbnN0IHBhZ2VIZWFkZXJIZWlnaHQgPSBwb1BhZ2VIZWFkZXIgPyBwb1BhZ2VIZWFkZXIub2Zmc2V0VG9wICsgcG9QYWdlSGVhZGVyLm9mZnNldEhlaWdodCA6IDA7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gYm9keUhlaWdodCAtIHBhZ2VIZWFkZXJIZWlnaHQ7XG5cbiAgICB0aGlzLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUhlYWRlclNpemUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcbiAgfVxufVxuIl19