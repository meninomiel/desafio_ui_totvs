import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { poLocaleDefault } from './../../../utils/util';
import { PoLanguageService } from './../../../services/po-language/po-language.service';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
export const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
let PoPageListBaseComponent = class PoPageListBaseComponent extends PoPageDefaultBaseComponent {
    constructor(languageService) {
        super();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
};
PoPageListBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
__decorate([
    Input('p-breadcrumb'),
    __metadata("design:type", Object)
], PoPageListBaseComponent.prototype, "breadcrumb", void 0);
__decorate([
    Input('p-disclaimer-group'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoPageListBaseComponent.prototype, "disclaimerGroup", null);
__decorate([
    Input('p-filter'),
    __metadata("design:type", Object)
], PoPageListBaseComponent.prototype, "filter", void 0);
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoPageListBaseComponent.prototype, "literals", null);
PoPageListBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [PoLanguageService])
], PoPageListBaseComponent);
export { PoPageListBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2UtbGlzdC9wby1wYWdlLWxpc3QtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUl4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUkvRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2QyxFQUFFLEVBQXNCO1FBQ3RCLFlBQVksRUFBRSxlQUFlO0tBQzlCO0lBQ0QsRUFBRSxFQUFzQjtRQUN0QixZQUFZLEVBQUUsZ0JBQWdCO0tBQy9CO0lBQ0QsRUFBRSxFQUFzQjtRQUN0QixZQUFZLEVBQUUsY0FBYztLQUM3QjtJQUNELEVBQUUsRUFBc0I7UUFDdEIsWUFBWSxFQUFFLGlCQUFpQjtLQUNoQztDQUNGLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCxJQUFzQix1QkFBdUIsR0FBN0MsTUFBc0IsdUJBQXdCLFNBQVEsMEJBQTBCO0lBMkY5RSxZQUFZLGVBQWtDO1FBQzVDLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBL0VEOzs7Ozs7T0FNRztJQUMwQixJQUFJLGVBQWUsQ0FBQyxLQUF3QjtRQUN2RSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFRLEVBQUUsQ0FBQztTQUNqQjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0lBU0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZ0NHO0lBQ2tCLElBQUksUUFBUSxDQUFDLEtBQXlCO1FBQ3pELElBQUksS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxTQUFTLGlEQUNULHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxHQUMxQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQ3hDLEtBQUssQ0FDVCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQU9GLENBQUE7O1lBTDhCLGlCQUFpQjs7QUE3RXZCO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7OzJEQUEyQjtBQVNwQjtJQUE1QixLQUFLLENBQUMsb0JBQW9CLENBQUM7Ozs4REFNM0I7QUFXa0I7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7dURBQXNCO0FBbUNuQjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzs7dURBVW5CO0FBckZtQix1QkFBdUI7SUFENUMsU0FBUyxFQUFFO3FDQTRGbUIsaUJBQWlCO0dBM0YxQix1QkFBdUIsQ0FnRzVDO1NBaEdxQix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaXNjbGFpbWVyR3JvdXAgfSBmcm9tICcuLi8uLi9wby1kaXNjbGFpbWVyLWdyb3VwL3BvLWRpc2NsYWltZXItZ3JvdXAuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tcGFnZS1kZWZhdWx0L3BvLXBhZ2UtZGVmYXVsdC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VGaWx0ZXIgfSBmcm9tICcuLy4uL3BvLXBhZ2UtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VMaXN0TGl0ZXJhbHMgfSBmcm9tICcuL3BvLXBhZ2UtbGlzdC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb1BhZ2VMaXN0TGl0ZXJhbHM+e1xuICAgIG90aGVyQWN0aW9uczogJ090aGVyIGFjdGlvbnMnXG4gIH0sXG4gIGVzOiA8UG9QYWdlTGlzdExpdGVyYWxzPntcbiAgICBvdGhlckFjdGlvbnM6ICdPdHJhcyBhY2Npb25lcydcbiAgfSxcbiAgcHQ6IDxQb1BhZ2VMaXN0TGl0ZXJhbHM+e1xuICAgIG90aGVyQWN0aW9uczogJ091dHJhcyBhw6fDtWVzJ1xuICB9LFxuICBydTogPFBvUGFnZUxpc3RMaXRlcmFscz57XG4gICAgb3RoZXJBY3Rpb25zOiAn0JTRgNGD0LPQuNC1INC00LXQudGB0YLQstC40Y8nXG4gIH1cbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1wYWdlLWxpc3RgIMOpIHV0aWxpemFkbyBjb21vIG8gY29udGFpbmVyIHByaW5jaXBhbCBwYXJhIGFzIHRlbGFzIGRlIGxpc3RhZ2VtIGRlIGRhZG9zLFxuICogcG9kZW5kbyBzZXIgYXByZXNlbnRhZG8gY29tbyBsaXN0YSBvdSB0YWJlbGEuXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHBvc3NpYmlsaXRhIHJlYWxpemFyIGZpbHRybyBkb3MgZGFkb3MsIG5vIHF1YWwgcGVybWl0ZSBxdWUgc2VqYSBhdHJpYnVpZG8gdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgbm8gbW9tZW50b1xuICogZGEgZmlsdHJhZ2VtLiBFc3RlIGNvbXBvcnRhbWVudG8gcG9kZSBzZXIgYWNpb25hZG8gdGFudG8gYW8gKmNsaWNrKiBkbyDDrWNvbmUgW3BvLWljb24tc2VhcmNoXSgvZ3VpZGVzL2ljb25zKVxuICogcXVhbnRvIGFvIHByZXNzaW9uYXIgZGEgdGVjbGEgKkVOVEVSKiBxdWFuZG8gbyBmb2NvIGVzdGl2ZXIgbm8gY2FtcG8gZGUgcGVzcXVpc2EuXG4gKlxuICogUGFyYSBmYWNpbGl0YXIgYSBtYW5pcHVsYcOnw6NvIGUgdmlzdWFsaXphw6fDo28gZG9zIGZpbHRyb3MgYXBsaWNhZG9zLCDDqSBwb3Nzw612ZWwgdGFtYsOpbSB1dGlsaXphciBvIGNvbXBvbmVudGVcbiAqIFtgcG8tZGlzY2xhaW1lci1ncm91cGBdKC9kb2N1bWVudGF0aW9uL3BvLWRpc2NsYWltZXItZ3JvdXApLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1BhZ2VMaXN0QmFzZUNvbXBvbmVudCBleHRlbmRzIFBvUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfZGlzY2xhaW1lckdyb3VwPzogUG9EaXNjbGFpbWVyR3JvdXA7XG4gIHByaXZhdGUgX2xpdGVyYWxzOiBQb1BhZ2VMaXN0TGl0ZXJhbHM7XG5cbiAgcHJvdGVjdGVkIGxhbmd1YWdlOiBzdHJpbmc7XG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9CcmVhZGNydW1iYC5cbiAgICovXG4gIEBJbnB1dCgncC1icmVhZGNydW1iJykgYnJlYWRjcnVtYj86IFBvQnJlYWRjcnVtYjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9EaXNjbGFpbWVyR3JvdXBgLlxuICAgKi9cbiAgQElucHV0KCdwLWRpc2NsYWltZXItZ3JvdXAnKSBzZXQgZGlzY2xhaW1lckdyb3VwKHZhbHVlOiBQb0Rpc2NsYWltZXJHcm91cCkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gPGFueT57fTtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXNjbGFpbWVyR3JvdXAgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBkaXNjbGFpbWVyR3JvdXAoKTogUG9EaXNjbGFpbWVyR3JvdXAge1xuICAgIHJldHVybiB0aGlzLl9kaXNjbGFpbWVyR3JvdXA7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgaW1wbGVtZW50YSBhcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIGBQb1BhZ2VGaWx0ZXJgLlxuICAgKi9cbiAgQElucHV0KCdwLWZpbHRlcicpIGZpbHRlcjogUG9QYWdlRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGBwby1wYWdlLWxpc3RgLlxuICAgKlxuICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VMaXN0TGl0ZXJhbHMgPSB7XG4gICAqICAgIG90aGVyQWN0aW9uczogJ01haXMgYcOnw7VlcydcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VMaXN0TGl0ZXJhbHMgPSB7XG4gICAqICAgIG90aGVyQWN0aW9uczogJ0HDp8O1ZXMgZGEgcMOhZ2luYSdcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlLlxuICAgKlxuICAgKiBgYGBcbiAgICogPHBvLXBhZ2UtbGlzdFxuICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XG4gICAqIDwvcG8tcGFnZS1saXN0PlxuICAgKiBgYGBcbiAgICpcbiAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGRlIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gW2BQb0kxOG5TZXJ2aWNlYF0oL2RvY3VtZW50YXRpb24vcG8taTE4bikgb3UgKmJyb3dzZXIqLlxuICAgKi9cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1BhZ2VMaXN0TGl0ZXJhbHMpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB7XG4gICAgICAgIC4uLnBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4ucG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0gcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICB9XG59XG4iXX0=