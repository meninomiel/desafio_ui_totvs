import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
const poCalendarServiceFirstWeekDayDefault = 0;
let PoCalendarService = class PoCalendarService {
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
};
PoCalendarService = __decorate([
    Injectable()
], PoCalendarService);
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvc2VydmljZXMvcG8tY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxNQUFNLG9DQUFvQyxHQUFXLENBQUMsQ0FBQztBQUd2RCxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUM1QixVQUFVLENBQUMsSUFBUyxFQUFFLEtBQVUsRUFBRSxlQUFvQixJQUFJLEVBQUUsZ0JBQXFCLElBQUk7UUFDbkYsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ3hELE1BQU0sS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxNQUFNLEtBQUssR0FBZSxFQUFFLENBQUM7UUFDN0IsSUFBSSxJQUFJLEdBQWUsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFcEMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVMsRUFBRSxLQUFVO1FBQzdCLE1BQU0sWUFBWSxHQUFHLFVBQVUsSUFBUztZQUN0QyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxhQUFhLENBQUMsSUFBUztRQUNyQixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxvQ0FBb0MsRUFBRTtZQUNsRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRixDQUFBO0FBM0NZLGlCQUFpQjtJQUQ3QixVQUFVLEVBQUU7R0FDQSxpQkFBaUIsQ0EyQzdCO1NBM0NZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgcG9DYWxlbmRhclNlcnZpY2VGaXJzdFdlZWtEYXlEZWZhdWx0OiBudW1iZXIgPSAwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhclNlcnZpY2Uge1xuICBtb250aERhdGVzKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5Rm9ybWF0dGVyOiBhbnkgPSBudWxsLCB3ZWVrRm9ybWF0dGVyOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBtb250aCAhPT0gJ251bWJlcicgfHwgbW9udGggPCAwIHx8IG1vbnRoID4gMTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdtb250aCBtdXN0IGJlIGEgbnVtYmVyIChKYW4gaXMgMCknKTtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWVrczogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCB3ZWVrOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuXG4gICAgaWYgKHllYXIgPj0gMCAmJiB5ZWFyIDwgMTAwKSB7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKHllYXIpO1xuICAgIH1cblxuICAgIGRhdGUgPSB0aGlzLndlZWtTdGFydERhdGUoZGF0ZSk7XG5cbiAgICBkbyB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHdlZWsucHVzaChkYXlGb3JtYXR0ZXIgPyBkYXlGb3JtYXR0ZXIoZGF0ZSkgOiBkYXRlKTtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICB3ZWVrcy5wdXNoKHdlZWtGb3JtYXR0ZXIgPyB3ZWVrRm9ybWF0dGVyKHdlZWspIDogd2Vlayk7XG4gICAgICB3ZWVrID0gW107XG4gICAgfSB3aGlsZSAoZGF0ZS5nZXRNb250aCgpIDw9IG1vbnRoICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0geWVhcik7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgbW9udGhEYXlzKHllYXI6IGFueSwgbW9udGg6IGFueSkge1xuICAgIGNvbnN0IGdldERheU9yWmVybyA9IGZ1bmN0aW9uIChkYXRlOiBhbnkpIHtcbiAgICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoID8gZGF0ZSA6IDA7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5tb250aERhdGVzKHllYXIsIG1vbnRoLCBnZXREYXlPclplcm8pO1xuICB9XG5cbiAgd2Vla1N0YXJ0RGF0ZShkYXRlOiBhbnkpIHtcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgd2hpbGUgKHN0YXJ0RGF0ZS5nZXREYXkoKSAhPT0gcG9DYWxlbmRhclNlcnZpY2VGaXJzdFdlZWtEYXlEZWZhdWx0KSB7XG4gICAgICBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBzdGFydERhdGU7XG4gIH1cbn1cbiJdfQ==