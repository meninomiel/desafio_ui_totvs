import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
let PoCalendarLangService = class PoCalendarLangService {
    constructor() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    getMonth(month) {
        return this.months[month][this.language];
    }
    getMonthLabel() {
        return this.monthLabel[this.language];
    }
    getMonthsArray() {
        const arrMonths = Array();
        for (let i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    }
    getWeekDays(day) {
        return this.shortWeekDays[day][this.language];
    }
    getWeekDaysArray() {
        const arrWeekDays = Array();
        for (let i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    }
    getYearLabel() {
        return this.yearLabel[this.language];
    }
    setLanguage(language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = language === 'pt' || language === 'en' || language === 'es' ? language : 'pt';
        }
    }
};
PoCalendarLangService = __decorate([
    Injectable()
], PoCalendarLangService);
export { PoCalendarLangService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1jYWxlbmRhci9zZXJ2aWNlcy9wby1jYWxlbmRhci5sYW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFBbEM7UUFDVSxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRWhCLFdBQU0sR0FBRztZQUNmO2dCQUNFLEVBQUUsRUFBRSxTQUFTO2dCQUNiLEVBQUUsRUFBRSxTQUFTO2dCQUNiLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsV0FBVztnQkFDZixFQUFFLEVBQUUsVUFBVTtnQkFDZCxFQUFFLEVBQUUsU0FBUzthQUNkO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsTUFBTTtnQkFDVixFQUFFLEVBQUUsS0FBSztnQkFDVCxFQUFFLEVBQUUsTUFBTTthQUNYO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxNQUFNO2dCQUNWLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsUUFBUTtnQkFDWixFQUFFLEVBQUUsUUFBUTtnQkFDWixFQUFFLEVBQUUsUUFBUTthQUNi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O1NBQ3hEO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBZ0I7UUFDMUIsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDcEMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQy9GO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUExSlkscUJBQXFCO0lBRGpDLFVBQVUsRUFBRTtHQUNBLHFCQUFxQixDQTBKakM7U0ExSlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhckxhbmdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBsYW5ndWFnZSA9ICdwdCc7XG5cbiAgcHJpdmF0ZSBtb250aHMgPSBbXG4gICAge1xuICAgICAgcHQ6ICdKYW5laXJvJyxcbiAgICAgIGVuOiAnSmFudWFyeScsXG4gICAgICBlczogJ0VuZXJvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdGZXZlcmVpcm8nLFxuICAgICAgZW46ICdGZWJydWFyeScsXG4gICAgICBlczogJ0ZlYnJlcm8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ01hcsOnbycsXG4gICAgICBlbjogJ01hcmNoJyxcbiAgICAgIGVzOiAnTWFyem8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0FicmlsJyxcbiAgICAgIGVuOiAnQXByaWwnLFxuICAgICAgZXM6ICdBYnJpbCdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnTWFpbycsXG4gICAgICBlbjogJ01heScsXG4gICAgICBlczogJ01heW8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0p1bmhvJyxcbiAgICAgIGVuOiAnSnVuZScsXG4gICAgICBlczogJ0p1bmlvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdKdWxobycsXG4gICAgICBlbjogJ0p1bHknLFxuICAgICAgZXM6ICdKdWxpbydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnQWdvc3RvJyxcbiAgICAgIGVuOiAnQXVndXN0JyxcbiAgICAgIGVzOiAnQWdvc3RvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdTZXRlbWJybycsXG4gICAgICBlbjogJ1NlcHRlbWJlcicsXG4gICAgICBlczogJ1NldGllbWJyZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnT3V0dWJybycsXG4gICAgICBlbjogJ09jdG9iZXInLFxuICAgICAgZXM6ICdPY3R1YnJlJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdOb3ZlbWJybycsXG4gICAgICBlbjogJ05vdmVtYmVyJyxcbiAgICAgIGVzOiAnTm92aWVtYnJlJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdEZXplbWJybycsXG4gICAgICBlbjogJ0RlY2VtYmVyJyxcbiAgICAgIGVzOiAnRGljaWVtYnJlJ1xuICAgIH1cbiAgXTtcblxuICBwcml2YXRlIHNob3J0V2Vla0RheXMgPSBbXG4gICAge1xuICAgICAgcHQ6ICdEb20nLFxuICAgICAgZW46ICdTdW4nLFxuICAgICAgZXM6ICdEb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NlZycsXG4gICAgICBlbjogJ01vbicsXG4gICAgICBlczogJ0x1bidcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnVGVyJyxcbiAgICAgIGVuOiAnVHVlJyxcbiAgICAgIGVzOiAnTWFyJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdRdWEnLFxuICAgICAgZW46ICdXZWQnLFxuICAgICAgZXM6ICdNacOpJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdRdWknLFxuICAgICAgZW46ICdUaHUnLFxuICAgICAgZXM6ICdKdWUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NleCcsXG4gICAgICBlbjogJ0ZyaScsXG4gICAgICBlczogJ1ZpZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU8OhYicsXG4gICAgICBlbjogJ1NhdCcsXG4gICAgICBlczogJ1PDoWInXG4gICAgfVxuICBdO1xuXG4gIHByaXZhdGUgbW9udGhMYWJlbCA9IHtcbiAgICBwdDogJ03DqnMnLFxuICAgIGVuOiAnTW9udGgnLFxuICAgIGVzOiAnTWVzJ1xuICB9O1xuXG4gIHByaXZhdGUgeWVhckxhYmVsID0ge1xuICAgIHB0OiAnQW5vJyxcbiAgICBlbjogJ1llYXInLFxuICAgIGVzOiAnQcOxbydcbiAgfTtcblxuICBnZXRNb250aChtb250aDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGhzW21vbnRoXVt0aGlzLmxhbmd1YWdlXTtcbiAgfVxuXG4gIGdldE1vbnRoTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGhMYWJlbFt0aGlzLmxhbmd1YWdlXTtcbiAgfVxuXG4gIGdldE1vbnRoc0FycmF5KCkge1xuICAgIGNvbnN0IGFyck1vbnRocyA9IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1vbnRocy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyTW9udGhzLnB1c2godGhpcy5tb250aHNbaV1bdGhpcy5sYW5ndWFnZV0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyTW9udGhzO1xuICB9XG5cbiAgZ2V0V2Vla0RheXMoZGF5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5zaG9ydFdlZWtEYXlzW2RheV1bdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICBnZXRXZWVrRGF5c0FycmF5KCkge1xuICAgIGNvbnN0IGFycldlZWtEYXlzID0gQXJyYXkoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2hvcnRXZWVrRGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyV2Vla0RheXMucHVzaCh0aGlzLnNob3J0V2Vla0RheXNbaV1bdGhpcy5sYW5ndWFnZV0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyV2Vla0RheXM7XG4gIH1cblxuICBnZXRZZWFyTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhckxhYmVsW3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZykge1xuICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZS5sZW5ndGggPj0gMikge1xuICAgICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDIpO1xuICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlID09PSAncHQnIHx8IGxhbmd1YWdlID09PSAnZW4nIHx8IGxhbmd1YWdlID09PSAnZXMnID8gbGFuZ3VhZ2UgOiAncHQnO1xuICAgIH1cbiAgfVxufVxuIl19