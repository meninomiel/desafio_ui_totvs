import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { PoCalendarLangService } from './services/po-calendar.lang.service';
import { PoDateService } from '../../services/po-date';
const poCalendarLocales = ['pt', 'en', 'es'];
const poCalendarLocaleDefault = 'pt';
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
let PoCalendarBaseComponent = class PoCalendarBaseComponent {
    constructor(poDate, poCalendarLangService) {
        this.poDate = poDate;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     *
     * @default `pt`
     */
    set locale(locale) {
        this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    }
};
PoCalendarBaseComponent.ctorParameters = () => [
    { type: PoDateService },
    { type: PoCalendarLangService }
];
__decorate([
    Input('p-locale'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoCalendarBaseComponent.prototype, "locale", null);
__decorate([
    Input('p-max-date'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoCalendarBaseComponent.prototype, "maxDate", null);
__decorate([
    Input('p-min-date'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoCalendarBaseComponent.prototype, "minDate", null);
__decorate([
    Output('p-change'),
    __metadata("design:type", Object)
], PoCalendarBaseComponent.prototype, "change", void 0);
PoCalendarBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [PoDateService, PoCalendarLangService])
], PoCalendarBaseComponent);
export { PoCalendarBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV2RCxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3QyxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQztBQUVyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQStCRztBQUVILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBbUhsQyxZQUFtQixNQUFxQixFQUFTLHFCQUE0QztRQUExRSxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQVMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQTdHN0YsZUFBVSxHQUFZLEtBQUssQ0FBQztRQU01QixrQkFBYSxHQUFlLEtBQUssRUFBRSxDQUFDO1FBRXBDLG9CQUFlLEdBQWUsS0FBSyxFQUFFLENBQUM7UUFFdEMsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsZ0JBQVcsR0FBWSxLQUFLLENBQUM7UUFNbkIsY0FBUyxHQUFRLElBQUksQ0FBQztRQUN0QixvQkFBZSxHQUFRLElBQUksQ0FBQztRQUM1QixVQUFLLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQXVGbkMsMkRBQTJEO1FBQ3ZDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBRXdDLENBQUM7SUF2RmpHOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDZ0IsSUFBSSxNQUFNLENBQUMsTUFBYztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztRQUNyRixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F1Qkc7SUFDa0IsSUFBSSxPQUFPLENBQUMsT0FBWTtRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFDRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXVCRztJQUNrQixJQUFJLE9BQU8sQ0FBQyxPQUFZO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBT0Qsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDckUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDakUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDRixDQUFBOztZQVI0QixhQUFhO1lBQWdDLHFCQUFxQjs7QUF6RTFFO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OztxREFHakI7QUE2Qm9CO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7OztzREFFbkI7QUE2Qm9CO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7OztzREFFbkI7QUFNbUI7SUFBbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQzs7dURBQXFDO0FBakg3Qyx1QkFBdUI7SUFEbkMsU0FBUyxFQUFFO3FDQW9IaUIsYUFBYSxFQUFnQyxxQkFBcUI7R0FuSGxGLHVCQUF1QixDQTJIbkM7U0EzSFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9DYWxlbmRhckxhbmdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wby1jYWxlbmRhci5sYW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9EYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWRhdGUnO1xuXG5jb25zdCBwb0NhbGVuZGFyTG9jYWxlcyA9IFsncHQnLCAnZW4nLCAnZXMnXTtcbmNvbnN0IHBvQ2FsZW5kYXJMb2NhbGVEZWZhdWx0ID0gJ3B0JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGBwby1jYWxlbmRhcmAgw6kgdW0gY29tcG9uZW50ZSBwYXJhIHNlbGXDp8OjbyBkZSBkYXRhcy4gRWxlIHBlcm1pdGUgdW1hIGbDoWNpbCBuYXZlZ2HDp8OjbyBjbGljYW5kbyBuYXMgc2V0YXNcbiAqIGRlIGRpcmVjaW9uYW1lbnRvIGUgbm9zICpsYWJlbHMqIGRvIGFubyBvdSBtw6pzLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gKlxuICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICogYGBgXG4gKlxuICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICogYGBgXG4gKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gKiBgYGBcbiAqXG4gKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICogYGBgXG4gKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICogYGBgXG4gKlxuICogPiBJbmRlcGVuZGVudGVtZW50ZSBkbyBmb3JtYXRvIHV0aWxpemFkbywgbyBjb21wb25lbnRlIHRyYXRhIG8gdmFsb3IgZG8gKm1vZGVsKiBpbnRlcm5hbWVudGUgY29tIG9cbiAqIGZvcm1hdG8gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKiouXG4gKlxuICogSW1wb3J0YW50ZTpcbiAqXG4gKiAtIENhc28gc2VqYSBkZWZpbmlkYSB1bWEgZGF0YSBmb3JhIGRvIHJhbmdlIGRhIGRhdGEgbcOtbmltYSBlIGRhdGEgbcOheGltYSB2aWEgKm5nTW9kZWwqIG8gY29tcG9uZW50ZSBtb3N0cmFyw6FcbiAqIGEgZGF0YSBkZXNhYmlsaXRhZGEgcG9yw6ltIG8gKm1vZGVsKiBuw6NvIHNlcsOhIGFsdGVyYWRvLlxuICogLSBDYXNvIHNlamEgZGVmaW5pZGEgdW1hIGRhdGEgaW52w6FsaWRhIGEgbWVzbWEgbsOjbyBzZXLDoSBhdHJpYnXDrWRhIGFvIGNhbGVuZMOhcmlvIHBvcsOpbSBvICptb2RlbCogbWFudGVyw6EgYSBkYXRhIGludsOhbGlkYS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhckJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF9sb2NhbGU6IHN0cmluZztcbiAgcHJpdmF0ZSBfbWF4RGF0ZTogRGF0ZTtcbiAgcHJpdmF0ZSBfbWluRGF0ZTogRGF0ZTtcblxuICBjdXJyZW50WWVhcjogbnVtYmVyO1xuICBkYXlWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIGRpc3BsYXlEYXlzOiBBcnJheTxudW1iZXI+O1xuICBkaXNwbGF5RGVjYWRlOiBBcnJheTxudW1iZXI+O1xuICBkaXNwbGF5RmluYWxEZWNhZGU6IG51bWJlcjtcbiAgZGlzcGxheU1vbnRoOiBhbnk7XG4gIGRpc3BsYXlNb250aE51bWJlcjogbnVtYmVyO1xuICBkaXNwbGF5TW9udGhzOiBBcnJheTxhbnk+ID0gQXJyYXkoKTtcbiAgZGlzcGxheVN0YXJ0RGVjYWRlOiBudW1iZXI7XG4gIGRpc3BsYXlXZWVrRGF5czogQXJyYXk8YW55PiA9IEFycmF5KCk7XG4gIGRpc3BsYXlZZWFyOiBudW1iZXI7XG4gIG1vbnRoVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICB5ZWFyVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBjdXJyZW50TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgcHJvdGVjdGVkIGRhdGU6IERhdGU7XG4gIHByb3RlY3RlZCBkYXRlSXNvOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBsYXN0RGlzcGxheTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgb25Ub3VjaGVkOiBhbnkgPSBudWxsO1xuICBwcm90ZWN0ZWQgcHJvcGFnYXRlQ2hhbmdlOiBhbnkgPSBudWxsO1xuICBwcm90ZWN0ZWQgdG9kYXk6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICBwcm90ZWN0ZWQgdmFsaWRhdG9yQ2hhbmdlOiBhbnk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSWRpb21hIGRvIGNhbGVuZMOhcmlvLlxuICAgKlxuICAgKiBWYWxvcmVzIHbDoWxpZG9zOlxuICAgKiAgLSBgcHRgXG4gICAqICAtIGBlbmBcbiAgICogIC0gYGVzYFxuICAgKlxuICAgKiBAZGVmYXVsdCBgcHRgXG4gICAqL1xuICBASW5wdXQoJ3AtbG9jYWxlJykgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvY2FsZSA9IHBvQ2FsZW5kYXJMb2NhbGVzLmluY2x1ZGVzKGxvY2FsZSkgPyBsb2NhbGUgOiBwb0NhbGVuZGFyTG9jYWxlRGVmYXVsdDtcbiAgICB0aGlzLmluaXRpYWxpemVMYW5ndWFnZSgpO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGRhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhLlxuICAgKlxuICAgKiBQb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gICAqXG4gICAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtbWF4LWRhdGUnKSBzZXQgbWF4RGF0ZShtYXhEYXRlOiBhbnkpIHtcbiAgICB0aGlzLl9tYXhEYXRlID0gdGhpcy5wb0RhdGUuZ2V0RGF0ZUZvckRhdGVSYW5nZShtYXhEYXRlLCBmYWxzZSk7XG4gIH1cbiAgZ2V0IG1heERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21heERhdGU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBkYXRhIG3DrW5pbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYS5cbiAgICpcbiAgICogUG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICAgKlxuICAgKiAtICoqRGF0YSBlIGhvcmEgY29tYmluYWRvcyAoRTg2MDFEWncpOiB5eXl5LW1tLWRkVGhoOm1tOnNzK3wtaGg6bW0qKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKDIwMTcsIDEwLCAyOCk7XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLW1pbi1kYXRlJykgc2V0IG1pbkRhdGUobWluRGF0ZTogYW55KSB7XG4gICAgdGhpcy5fbWluRGF0ZSA9IHRoaXMucG9EYXRlLmdldERhdGVGb3JEYXRlUmFuZ2UobWluRGF0ZSwgdHJ1ZSk7XG4gIH1cbiAgZ2V0IG1pbkRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21pbkRhdGU7XG4gIH1cblxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBzZWxlY2lvbmFyIHVtIGRpYSBkbyBjYWxlbmTDoXJpby4gKi9cbiAgQE91dHB1dCgncC1jaGFuZ2UnKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcG9EYXRlOiBQb0RhdGVTZXJ2aWNlLCBwdWJsaWMgcG9DYWxlbmRhckxhbmdTZXJ2aWNlOiBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UpIHt9XG5cbiAgaW5pdGlhbGl6ZUxhbmd1YWdlKCkge1xuICAgIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLnNldExhbmd1YWdlKHRoaXMubG9jYWxlKTtcbiAgICB0aGlzLmRpc3BsYXlXZWVrRGF5cyA9IHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdlZWtEYXlzQXJyYXkoKTtcbiAgICB0aGlzLmRpc3BsYXlNb250aHMgPSB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5nZXRNb250aHNBcnJheSgpO1xuICAgIHRoaXMuZGlzcGxheU1vbnRoID0gdGhpcy5kaXNwbGF5TW9udGhzW3RoaXMuZGlzcGxheU1vbnRoTnVtYmVyXTtcbiAgfVxufVxuIl19