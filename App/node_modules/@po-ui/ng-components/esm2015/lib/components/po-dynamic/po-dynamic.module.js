import { __decorate } from "tslib";
import { CommonModule, CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgModule } from '@angular/core';
import { PoDividerModule } from '../po-divider/po-divider.module';
import { PoFieldModule } from '../po-field/po-field.module';
import { PoInfoModule } from '../po-info/po-info.module';
import { PoTagModule } from '../po-tag/po-tag.module';
import { PoTimeModule } from '../../pipes/po-time/po-time.module';
import { PoTimePipe } from '../../pipes/po-time/po-time.pipe';
import { PoDynamicFormComponent } from './po-dynamic-form/po-dynamic-form.component';
import { PoDynamicFormFieldsComponent } from './po-dynamic-form/po-dynamic-form-fields/po-dynamic-form-fields.component';
import { PoDynamicFormLoadService } from './po-dynamic-form/po-dynamic-form-load/po-dynamic-form-load.service';
import { PoDynamicFormValidationService } from './po-dynamic-form/po-dynamic-form-validation/po-dynamic-form-validation.service';
import { PoDynamicViewComponent } from './po-dynamic-view/po-dynamic-view.component';
import { PoDynamicViewService } from './po-dynamic-view/po-dynamic-view.service';
let PoDynamicModule = class PoDynamicModule {
};
PoDynamicModule = __decorate([
    NgModule({
        imports: [CommonModule, FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule],
        declarations: [PoDynamicFormComponent, PoDynamicFormFieldsComponent, PoDynamicViewComponent],
        exports: [PoDynamicFormComponent, PoDynamicViewComponent],
        providers: [
            CurrencyPipe,
            DatePipe,
            DecimalPipe,
            PoTimePipe,
            TitleCasePipe,
            PoDynamicFormLoadService,
            PoDynamicFormValidationService,
            PoDynamicViewService
        ]
    })
], PoDynamicModule);
export { PoDynamicModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWR5bmFtaWMvcG8tZHluYW1pYy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDckYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMkVBQTJFLENBQUM7QUFDekgsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scUVBQXFFLENBQUM7QUFDL0csT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0saUZBQWlGLENBQUM7QUFDakksT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDckYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFpQmpGLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7Q0FBRyxDQUFBO0FBQWxCLGVBQWU7SUFmM0IsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDO1FBQzdHLFlBQVksRUFBRSxDQUFDLHNCQUFzQixFQUFFLDRCQUE0QixFQUFFLHNCQUFzQixDQUFDO1FBQzVGLE9BQU8sRUFBRSxDQUFDLHNCQUFzQixFQUFFLHNCQUFzQixDQUFDO1FBQ3pELFNBQVMsRUFBRTtZQUNULFlBQVk7WUFDWixRQUFRO1lBQ1IsV0FBVztZQUNYLFVBQVU7WUFDVixhQUFhO1lBQ2Isd0JBQXdCO1lBQ3hCLDhCQUE4QjtZQUM5QixvQkFBb0I7U0FDckI7S0FDRixDQUFDO0dBQ1csZUFBZSxDQUFHO1NBQWxCLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUsIEN1cnJlbmN5UGlwZSwgRGF0ZVBpcGUsIERlY2ltYWxQaXBlLCBUaXRsZUNhc2VQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9EaXZpZGVyTW9kdWxlIH0gZnJvbSAnLi4vcG8tZGl2aWRlci9wby1kaXZpZGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBQb0ZpZWxkTW9kdWxlIH0gZnJvbSAnLi4vcG8tZmllbGQvcG8tZmllbGQubW9kdWxlJztcbmltcG9ydCB7IFBvSW5mb01vZHVsZSB9IGZyb20gJy4uL3BvLWluZm8vcG8taW5mby5tb2R1bGUnO1xuaW1wb3J0IHsgUG9UYWdNb2R1bGUgfSBmcm9tICcuLi9wby10YWcvcG8tdGFnLm1vZHVsZSc7XG5pbXBvcnQgeyBQb1RpbWVNb2R1bGUgfSBmcm9tICcuLi8uLi9waXBlcy9wby10aW1lL3BvLXRpbWUubW9kdWxlJztcbmltcG9ydCB7IFBvVGltZVBpcGUgfSBmcm9tICcuLi8uLi9waXBlcy9wby10aW1lL3BvLXRpbWUucGlwZSc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZHNDb21wb25lbnQgfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tZmllbGRzL3BvLWR5bmFtaWMtZm9ybS1maWVsZHMuY29tcG9uZW50JztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1Mb2FkU2VydmljZSB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtL3BvLWR5bmFtaWMtZm9ybS1sb2FkL3BvLWR5bmFtaWMtZm9ybS1sb2FkLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9wby1keW5hbWljLXZpZXcvcG8tZHluYW1pYy12aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0R5bmFtaWNWaWV3U2VydmljZSB9IGZyb20gJy4vcG8tZHluYW1pYy12aWV3L3BvLWR5bmFtaWMtdmlldy5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIFBvRGl2aWRlck1vZHVsZSwgUG9JbmZvTW9kdWxlLCBQb0ZpZWxkTW9kdWxlLCBQb1RhZ01vZHVsZSwgUG9UaW1lTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbUG9EeW5hbWljRm9ybUNvbXBvbmVudCwgUG9EeW5hbWljRm9ybUZpZWxkc0NvbXBvbmVudCwgUG9EeW5hbWljVmlld0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtQb0R5bmFtaWNGb3JtQ29tcG9uZW50LCBQb0R5bmFtaWNWaWV3Q29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3VycmVuY3lQaXBlLFxuICAgIERhdGVQaXBlLFxuICAgIERlY2ltYWxQaXBlLFxuICAgIFBvVGltZVBpcGUsXG4gICAgVGl0bGVDYXNlUGlwZSxcbiAgICBQb0R5bmFtaWNGb3JtTG9hZFNlcnZpY2UsXG4gICAgUG9EeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgIFBvRHluYW1pY1ZpZXdTZXJ2aWNlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9EeW5hbWljTW9kdWxlIHt9XG4iXX0=