import { __decorate, __metadata } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
let PoDynamicFormValidationService = class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign(Object.assign({}, fields[index]), validatedField);
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return (validateFields || {
            field: {}
        });
    }
};
PoDynamicFormValidationService.ctorParameters = () => [
    { type: HttpClient }
];
PoDynamicFormValidationService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], PoDynamicFormValidationService);
export { PoDynamicFormValidationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBSWhHLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQStCLFNBQVEsc0JBQXNCO0lBQ3hFLFlBQVksSUFBZ0I7UUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUF5QixFQUFFLEtBQVU7UUFDbkQsTUFBTSxZQUFZLEdBQThCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNwRCxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FDbkUsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQ1osUUFBMkIsRUFDM0IsS0FBeUIsRUFDekIsS0FBVTtRQUVWLE1BQU0sWUFBWSxHQUE4QixFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVELGdCQUFnQixDQUFDLGtCQUE2QyxFQUFFLEVBQUUsU0FBb0MsRUFBRTtRQUN0RyxPQUFPLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQ2hDLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRixNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMsbUNBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFLLGNBQWMsQ0FBRSxDQUFDO2FBQ2hFO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUNELENBQUMsR0FBRyxNQUFNLENBQUMsQ0FDWixDQUFDO0lBQ0osQ0FBQztJQUVPLHNCQUFzQixDQUFDLGNBQW1CO1FBQ2hELE9BQU8sQ0FDTCxjQUFjLElBQUk7WUFDaEIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7WUE3Q21CLFVBQVU7O0FBRGpCLDhCQUE4QjtJQUQxQyxVQUFVLEVBQUU7cUNBRU8sVUFBVTtHQURqQiw4QkFBOEIsQ0E4QzFDO1NBOUNZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tZmllbGQtY2hhbmdlZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbic7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbiB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSBleHRlbmRzIFBvRHluYW1pY0Zvcm1PcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoaHR0cCk7XG4gIH1cblxuICBzZW5kRmllbGRDaGFuZ2UoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShmaWVsZC52YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKFxuICAgICAgbWFwKHZhbGlkYXRlRmllbGRzID0+IHRoaXMuc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpXG4gICAgKTtcbiAgfVxuXG4gIHNlbmRGb3JtQ2hhbmdlKFxuICAgIHZhbGlkYXRlOiBGdW5jdGlvbiB8IHN0cmluZyxcbiAgICBmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLFxuICAgIHZhbHVlOiBhbnlcbiAgKTogT2JzZXJ2YWJsZTxQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbj4ge1xuICAgIGNvbnN0IGNoYW5nZWRWYWx1ZTogUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCA9IHsgcHJvcGVydHk6IGZpZWxkLnByb3BlcnR5LCB2YWx1ZSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh2YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKG1hcCh2YWxpZGF0ZUZpZWxkcyA9PiB0aGlzLnNldEZvcm1EZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpKTtcbiAgfVxuXG4gIHVwZGF0ZUZpZWxkc0Zvcm0odmFsaWRhdGVkRmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10sIGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdKSB7XG4gICAgcmV0dXJuIFsuLi52YWxpZGF0ZWRGaWVsZHNdLnJlZHVjZShcbiAgICAgICh1cGRhdGVkRmllbGRzLCB2YWxpZGF0ZWRGaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHVwZGF0ZWRGaWVsZHMuZmluZEluZGV4KGZpZWxkID0+IGZpZWxkLnByb3BlcnR5ID09PSB2YWxpZGF0ZWRGaWVsZC5wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gaW5kZXggPj0gMDtcblxuICAgICAgICBpZiAoaGFzUHJvcGVydHkpIHtcbiAgICAgICAgICB1cGRhdGVkRmllbGRzW2luZGV4XSA9IHsgLi4uZmllbGRzW2luZGV4XSwgLi4udmFsaWRhdGVkRmllbGQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xuICAgICAgfSxcbiAgICAgIFsuLi5maWVsZHNdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RmllbGREZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkczogYW55KTogYW55IHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsaWRhdGVGaWVsZHMgfHwge1xuICAgICAgICBmaWVsZDoge31cbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=