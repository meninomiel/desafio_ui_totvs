import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToInt } from './../../utils/util';
const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
let PoSlideBaseComponent = class PoSlideBaseComponent {
    constructor() {
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
};
__decorate([
    Input('p-height'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoSlideBaseComponent.prototype, "height", null);
__decorate([
    Input('p-interval'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoSlideBaseComponent.prototype, "interval", null);
__decorate([
    Input('p-slides'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoSlideBaseComponent.prototype, "slides", null);
PoSlideBaseComponent = __decorate([
    Directive()
], PoSlideBaseComponent);
export { PoSlideBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJbEQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFFcEM7Ozs7Ozs7Ozs7R0FVRztBQUVILElBQXNCLG9CQUFvQixHQUExQyxNQUFzQixvQkFBb0I7SUFBMUM7UUFDVSxjQUFTLEdBQVcsc0JBQXNCLENBQUM7SUE2RXJELENBQUM7SUF6RUM7Ozs7Ozs7T0FPRztJQUNnQixJQUFJLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ2tCLElBQUksUUFBUSxDQUFDLEtBQWE7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBQ2dCLElBQUksTUFBTSxDQUFDLEtBQXdDO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FRRixDQUFBO0FBakVvQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzs7a0RBRWpCO0FBZW9CO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7OztvREFHbkI7QUEwQmtCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OEJBQW1CLEtBQUs7cUNBQUwsS0FBSztrREFPekM7QUFsRW1CLG9CQUFvQjtJQUR6QyxTQUFTLEVBQUU7R0FDVSxvQkFBb0IsQ0E4RXpDO1NBOUVxQixvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvU2xpZGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXNsaWRlLWl0ZW0uaW50ZXJmYWNlJztcblxuY29uc3QgcG9TbGlkZUludGVydmFsRGVmYXVsdCA9IDQwMDA7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBzbGlkZSBwYXJhIHZpc3VhbGl6YcOnw6NvIGUgY29udHJvbGUgZGUgZWxlbWVudG9zIGRlIGZvcm1hIGPDrWNsaWNhLiBFeGliZSB1bSBjb25qdW50byBkZSBpbWFnZW5zIG91IGRhZG9zIHF1ZSBwZXJtaXRlbVxuICogY3VzdG9taXphciBzdWEgdmlzdWFsaXphw6fDo28gdXRpbGl6YW5kbyBhIGRpcmV0aXZhICoqW3Atc2xpZGUtY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZSkqKi5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzOlxuICogLSBVdGlsaXphciBpbWFnZW5zIG5vIHNsaWRlLCBtZXNtbyBxdWFuZG8gcG9zc3VpIGNvbnRlw7pkbyBwZXJzb25hbGl6YWRvLlxuICogLSBFdml0YXIgdXRpbGl6YXIgYXBlbmFzIHVtIHNsaWRlIGlzb2xhZG8sIHV0aWxpemUgcGVsbyBtZW5vcyBkb2lzLlxuICogLSBFdml0YXIgdXRpbGl6YXIgbWFpcyBkZSA1IHNsaWRlcywgcG9pcyBhIGlkZWlhIGRvIGNvbXBvbmVudGUgw6kgZGVzdGFjYXIgYXBlbmFzIGluZm9ybWHDp8O1ZXMgaW1wb3J0YW50ZXMuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvU2xpZGVCYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfaW50ZXJ2YWw6IG51bWJlciA9IHBvU2xpZGVJbnRlcnZhbERlZmF1bHQ7XG4gIHByaXZhdGUgX2hlaWdodD86IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2xpZGVzOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWx0dXJhIGRvIHBvLXNsaWRlLCBjYXNvIHNlamEgc2xpZGUgY29tIHRlbXBsYXRlIGN1c3RvbWl6YWRvLCBuw6NvIGFzc3VtZSBvIHZhbG9yIGBkZWZhdWx0YC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDMzNmBcbiAgICovXG4gIEBJbnB1dCgncC1oZWlnaHQnKSBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9oZWlnaHQgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBWYWxvciBlbSBtaWxpc3NlZ3VuZG9zIHF1ZSBkZWZpbmUgbyB0ZW1wbyBkZSB0cm9jYSBkb3Mgc2xpZGVzLCBjYXNvIG8gdmFsb3Igc2VqYSBtZW5vciBxdWUgYDEwMDBgIG9zIHNsaWRlcyBuw6NvIHRyb2NhbSBhdXRvbWF0aWNhbWVudGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IGA0MDAwYFxuICAgKi9cbiAgQElucHV0KCdwLWludGVydmFsJykgc2V0IGludGVydmFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgcG9TbGlkZUludGVydmFsRGVmYXVsdCk7XG4gICAgdGhpcy5faW50ZXJ2YWwgPj0gMTAwMCA/IHRoaXMuc3RhcnRJbnRlcnZhbCgpIDogdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xuICB9XG5cbiAgZ2V0IGludGVydmFsKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBkZSBpbWFnZW5zIG91IGRhZG9zIHBhcmEgbyBzbGlkZSwgcG9kZSBzZXIgZGUgdHLDqnMgZm9ybWFzOlxuICAgKlxuICAgKiAtIEFycmF5IGltcGxlbWVudGFuZG8gb2JqZXRvcyBkYSBpbnRlcmZhY2UgYFBvU2xpZGVJdGVtYDpcbiAgICogYGBgXG4gICAqIFt7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0xJywgYWN0aW9uOiAnaW1hZ2VDbGljay5iaW5kKHRoaXMpJ30sIHsgaW1hZ2U6ICcvYXNzZXRzL2ltYWdlLTInIH1dXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGRlIGBzdHJpbmdzYCBjb20gb3MgY2FtaW5ob3MgZGFzIGltYWdlbnM6XG4gICAqIGBgYFxuICAgKiBbJy9hc3NldHMvaW1hZ2UtMScsICcvYXNzZXRzL2ltYWdlLTInIF1cbiAgICogYGBgXG4gICAqIC0gQXJyYXkgY29tIGxpc3RhIGRlIGl0ZW5zIChwYXJhIHV0aWxpemFyIHRlbXBsYXRlKTpcbiAgICogYGBgXG4gICAqIFt7IGxhYmVsOiAnMScsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfSwgeyBsYWJlbDogJzInLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiA+IEFzIHNldGFzIGRlIG5hdmVnYcOnw6NvIGUgbyBjb250cm9sZSBjb20gY8OtcmN1bG9zIGFwZW5hcyBzZXLDo28gcmVuZGVyaXphZG9zIGNhc28gcG9zc3VhIG1haXMgZGUgdW0gc2xpZGUuXG4gICAqL1xuICBASW5wdXQoJ3Atc2xpZGVzJykgc2V0IHNsaWRlcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KSB7XG4gICAgdGhpcy5fc2xpZGVzID0gdmFsdWU7XG4gICAgdGhpcy5zZXRTbGlkZUl0ZW1zKHZhbHVlKTtcblxuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RhcnRTbGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzbGlkZXMoKTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2xpZGVzO1xuICB9XG5cbiAgYWJzdHJhY3Qgc2V0U2xpZGVIZWlnaHQoaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjYW5jZWxJbnRlcnZhbCgpOiB2b2lkO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0U2xpZGVJdGVtcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0U2xpZGUoKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0SW50ZXJ2YWwoKTogdm9pZDtcbn1cbiJdfQ==