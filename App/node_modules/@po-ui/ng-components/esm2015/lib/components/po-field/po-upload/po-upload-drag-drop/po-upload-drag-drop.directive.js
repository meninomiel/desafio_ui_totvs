import { __awaiter, __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../../services/po-notification/po-notification.service';
let PoUploadDragDropDirective = class PoUploadDragDropDirective {
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(() => this.dragLeave.emit(), 30);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(() => {
                    this.sendFiles(event, this.files);
                });
            }
            else {
                const files = this.getOnlyFiles(event.dataTransfer.files);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    getFilesFromEntry(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            if (entry.isFile) {
                const file = yield this.readFile(entry);
                return [file];
            }
            else if (entry.isDirectory) {
                return yield this.readDirectory(entry);
            }
        });
    }
    getOnlyDirectories(dataTransferItems) {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = [];
            // lista todas as entradas antes de analisá-las
            for (const item of dataTransferItems) {
                entries.push(item.webkitGetAsEntry());
            }
            this.files = [];
            for (const entry of entries) {
                if (entry.isFile) {
                    this.invalidFileType++;
                }
                else {
                    const newFiles = yield this.getFilesFromEntry(entry);
                    this.files = this.files.concat(newFiles);
                }
            }
        });
    }
    // return only files. If it is a directory, invalidFileType counts.
    getOnlyFiles(fileList) {
        return Array.from(fileList).reduce((newFiles, file) => {
            if (file.type) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }, []);
    }
    readFile(entry) {
        return new Promise(resolve => {
            entry.file(file => {
                resolve(file);
            });
        });
    }
    readDirectory(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            const dirReader = entry.createReader();
            let files = [];
            let newFiles;
            newFiles = yield this.readDirectoryEntries(dirReader);
            files = files.concat(newFiles);
            return files;
        });
    }
    readDirectoryEntries(dirReader) {
        return new Promise(resolve => {
            dirReader.readEntries((entries) => __awaiter(this, void 0, void 0, function* () {
                let files = [];
                for (const entry of entries) {
                    const itemFiles = yield this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            }));
        });
    }
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    setPipeArguments(literalAttributes, args) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
};
PoUploadDragDropDirective.ctorParameters = () => [
    { type: PoI18nPipe },
    { type: PoNotificationService }
];
__decorate([
    Input('p-area-element'),
    __metadata("design:type", HTMLElement)
], PoUploadDragDropDirective.prototype, "areaElement", void 0);
__decorate([
    Input('p-directory-compatible'),
    __metadata("design:type", Boolean)
], PoUploadDragDropDirective.prototype, "directoryCompatible", void 0);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", Boolean)
], PoUploadDragDropDirective.prototype, "disabled", void 0);
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object)
], PoUploadDragDropDirective.prototype, "literals", void 0);
__decorate([
    Output('p-drag-leave'),
    __metadata("design:type", EventEmitter)
], PoUploadDragDropDirective.prototype, "dragLeave", void 0);
__decorate([
    Output('p-drag-over'),
    __metadata("design:type", EventEmitter)
], PoUploadDragDropDirective.prototype, "dragOver", void 0);
__decorate([
    Output('p-file-change'),
    __metadata("design:type", EventEmitter)
], PoUploadDragDropDirective.prototype, "fileChange", void 0);
__decorate([
    HostListener('document:dragleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PoUploadDragDropDirective.prototype, "onDragLeave", null);
__decorate([
    HostListener('document:dragover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PoUploadDragDropDirective.prototype, "onDragOver", null);
__decorate([
    HostListener('document:drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PoUploadDragDropDirective.prototype, "onDrop", null);
PoUploadDragDropDirective = __decorate([
    Directive({
        selector: '[p-upload-drag-drop]',
        providers: [PoI18nPipe]
    }),
    __metadata("design:paramtypes", [PoI18nPipe, PoNotificationService])
], PoUploadDragDropDirective);
export { PoUploadDragDropDirective };
//# sourceMappingURL=data:application/json;base64,