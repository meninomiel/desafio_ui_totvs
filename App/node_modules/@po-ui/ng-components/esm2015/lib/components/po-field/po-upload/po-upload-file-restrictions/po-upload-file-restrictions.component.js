import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';
import { browserLanguage, formatBytes, poLocaleDefault } from '../../../../utils/util';
import { poUploadLiteralsDefault } from '../po-upload-base.component';
let PoUploadFileRestrictionsComponent = class PoUploadFileRestrictionsComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    get language() {
        return browserLanguage();
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y' };
        return allowedExtensions
            ? allowedExtensions
                .join(', ')
                .toUpperCase()
                .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`)
            : undefined;
    }
    setLiterals() {
        this.literals = Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
};
PoUploadFileRestrictionsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input('p-allowed-extensions'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", null);
__decorate([
    Input('p-max-files'),
    __metadata("design:type", Number)
], PoUploadFileRestrictionsComponent.prototype, "maxFiles", void 0);
__decorate([
    Input('p-max-file-size'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "maxFileSize", null);
__decorate([
    Input('p-min-file-size'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "minFileSize", null);
PoUploadFileRestrictionsComponent = __decorate([
    Component({
        selector: 'po-upload-file-restrictions',
        template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\n  </span>\n</p>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], PoUploadFileRestrictionsComponent);
export { PoUploadFileRestrictionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckcsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFPdEUsSUFBYSxpQ0FBaUMsR0FBOUMsTUFBYSxpQ0FBaUM7SUFxQzVDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtJQUFHLENBQUM7SUE5QjFCLElBQUksaUJBQWlCLENBQUMsS0FBSztRQUN4RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBSXlCLElBQUksV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRXlCLElBQUksV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBSUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU8sdUJBQXVCLENBQUMsaUJBQWdDO1FBQzlELE1BQU0sV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUUxRCxPQUFPLGlCQUFpQjtZQUN0QixDQUFDLENBQUMsaUJBQWlCO2lCQUNkLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ1YsV0FBVyxFQUFFO2lCQUNiLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDN0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNoQixDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsUUFBUSxtQ0FDUix1QkFBdUIsQ0FBQyxlQUFlLENBQUMsR0FDeEMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMxQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTs7WUF6QnFDLGlCQUFpQjs7QUE5QnRCO0lBQTlCLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQzs7OzBFQUU3QjtBQU1xQjtJQUFyQixLQUFLLENBQUMsYUFBYSxDQUFDOzttRUFBa0I7QUFFYjtJQUF6QixLQUFLLENBQUMsaUJBQWlCLENBQUM7OztvRUFFeEI7QUFNeUI7SUFBekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDOzs7b0VBRXhCO0FBM0JVLGlDQUFpQztJQUw3QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsNkJBQTZCO1FBQ3ZDLHV3QkFBMkQ7UUFDM0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztxQ0FzQ29DLGlCQUFpQjtHQXJDMUMsaUNBQWlDLENBOEQ3QztTQTlEWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIGZvcm1hdEJ5dGVzLCBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgcG9VcGxvYWRMaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuLi9wby11cGxvYWQtYmFzZS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBfYWxsb3dlZEV4dGVuc2lvbnM6IHN0cmluZztcbiAgcHJpdmF0ZSBfbWF4RmlsZVNpemU6IHN0cmluZztcbiAgcHJpdmF0ZSBfbWluRmlsZVNpemU6IHN0cmluZztcblxuICBsaXRlcmFsczogYW55O1xuXG4gIEBJbnB1dCgncC1hbGxvd2VkLWV4dGVuc2lvbnMnKSBzZXQgYWxsb3dlZEV4dGVuc2lvbnModmFsdWUpIHtcbiAgICB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucyA9IHRoaXMuZm9ybWF0QWxsb3dlZEV4dGVuc2lvbnMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgYWxsb3dlZEV4dGVuc2lvbnMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZEV4dGVuc2lvbnM7XG4gIH1cblxuICBASW5wdXQoJ3AtbWF4LWZpbGVzJykgbWF4RmlsZXM6IG51bWJlcjtcblxuICBASW5wdXQoJ3AtbWF4LWZpbGUtc2l6ZScpIHNldCBtYXhGaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21heEZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWF4RmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4RmlsZVNpemU7XG4gIH1cblxuICBASW5wdXQoJ3AtbWluLWZpbGUtc2l6ZScpIHNldCBtaW5GaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21pbkZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWluRmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRmlsZVNpemU7XG4gIH1cblxuICBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYnJvd3Nlckxhbmd1YWdlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldExpdGVyYWxzKCk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdEFsbG93ZWRFeHRlbnNpb25zKGFsbG93ZWRFeHRlbnNpb25zOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25qdW5jdGlvbiA9IHsgJ3B0JzogJ2UnLCAnZW4nOiAnYW5kJywgJ2VzJzogJ3knIH07XG5cbiAgICByZXR1cm4gYWxsb3dlZEV4dGVuc2lvbnNcbiAgICAgID8gYWxsb3dlZEV4dGVuc2lvbnNcbiAgICAgICAgICAuam9pbignLCAnKVxuICAgICAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgLnJlcGxhY2UoLywoPz1bXixdKiQpLywgYCAke2Nvbmp1bmN0aW9uW3RoaXMubGFuZ3VhZ2VdfWApXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0TGl0ZXJhbHMoKSB7XG4gICAgdGhpcy5saXRlcmFscyA9IHtcbiAgICAgIC4uLnBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0W3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXVxuICAgIH07XG5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19