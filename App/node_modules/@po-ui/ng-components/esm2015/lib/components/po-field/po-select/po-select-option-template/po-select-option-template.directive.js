import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef } from '@angular/core';
/**
 * @usedBy PoSelectComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
 *
 * > Quando utilizada em _mobile_ será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-select-option-template` com `ng-template`
 * dentro da tag `po-select`.
 *
 * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <ng-template p-select-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-select>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <div *p-select-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-select>
 * ...
 *
 * ```
 */
let PoSelectOptionTemplateDirective = class PoSelectOptionTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
PoSelectOptionTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
PoSelectOptionTemplateDirective = __decorate([
    Directive({
        selector: '[p-select-option-template]'
    }),
    __metadata("design:paramtypes", [TemplateRef])
], PoSelectOptionTemplateDirective);
export { PoSelectOptionTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLXNlbGVjdC9wby1zZWxlY3Qtb3B0aW9uLXRlbXBsYXRlL3BvLXNlbGVjdC1vcHRpb24tdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMENHO0FBSUgsSUFBYSwrQkFBK0IsR0FBNUMsTUFBYSwrQkFBK0I7SUFDMUMsc0VBQXNFO0lBQ3RFLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7Q0FDckQsQ0FBQTs7WUFEaUMsV0FBVzs7QUFGaEMsK0JBQStCO0lBSDNDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7S0FDdkMsQ0FBQztxQ0FHZ0MsV0FBVztHQUZoQywrQkFBK0IsQ0FHM0M7U0FIWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb1NlbGVjdENvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBwZXJzb25hbGl6YXIgbyBjb250ZcO6ZG8gZG9zIGl0ZW5zIGV4aWJpZG9zIG5hIGxpc3RhIHN1c3BlbnNhIGRvIGNvbXBvbmVudGUuXG4gKlxuICogPiBRdWFuZG8gdXRpbGl6YWRhIGVtIF9tb2JpbGVfIHNlcsOhIGV4aWJpZG8gbyBjb21wb25lbnRlIG5hdGl2by5cbiAqXG4gKiBQYXJhIHBlcnNvbmFsaXphciBvIGNvbnRlw7pkbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEgZGV2ZS1zZSB1dGlsaXphciBhIGRpcmV0aXZhIGBwLXNlbGVjdC1vcHRpb24tdGVtcGxhdGVgIGNvbSBgbmctdGVtcGxhdGVgXG4gKiBkZW50cm8gZGEgdGFnIGBwby1zZWxlY3RgLlxuICpcbiAqIFBhcmEgb2J0ZXIgYSByZWZlcsOqbmNpYSBkbyBpdGVtIGF0dWFsLCB1c2UgYGxldC1vcHRpb25gLCBjb20gaXNzbyB2b2PDqiB0ZXLDoSBhY2Vzc28gYW9zIHZhbG9yZXMgZSBwb2RlcsOhIHBlcnNvbmFsaXphciBzdWEgZXhpYmnDp8Ojby5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIGNvbXDDtWUtc2UgZGUgZG9pcyBtZWlvcyBwYXJhIHVzbywgZGUgZm9ybWEgZXhwbMOtY2l0YSB0YWwgY29tbyBlbSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tc2VsZWN0XG4gKiAgIG5hbWU9XCJzZWxlY3RcIlxuICogICBbKG5nTW9kZWwpXT1cInNlbGVjdFwiXG4gKiAgIFtwLW9wdGlvbnNdPVwib3B0aW9uc1wiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBwLXNlbGVjdC1vcHRpb24tdGVtcGxhdGUgbGV0LW9wdGlvbj5cbiAqICAgICAgIDxvcHRpb24tdGVtcGxhdGUgW29wdGlvbl09XCJvcHRpb25cIj48L29wdGlvbi10ZW1wbGF0ZT5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogPC9wby1zZWxlY3Q+XG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tc2VsZWN0XG4gKiAgIG5hbWU9XCJzZWxlY3RcIlxuICogICBbKG5nTW9kZWwpXT1cInNlbGVjdFwiXG4gKiAgIFtwLW9wdGlvbnNdPVwib3B0aW9uc1wiPlxuICogICAgIDxkaXYgKnAtc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZT1cImxldCBvcHRpb25cIj5cbiAqICAgICAgIDxvcHRpb24tdGVtcGxhdGUgW29wdGlvbl09XCJvcHRpb25cIj48L29wdGlvbi10ZW1wbGF0ZT5cbiAqICAgICA8L2Rpdj5cbiAqIDwvcG8tc2VsZWN0PlxuICogLi4uXG4gKlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLXNlbGVjdC1vcHRpb24tdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1NlbGVjdE9wdGlvblRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19