import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed, maxlengpoailed, minlengpoailed, patternFailed } from './../validators';
import { InputBoolean } from '../../../decorators';
import { PoMask } from './po-mask';
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 */
let PoInputBaseComponent = class PoInputBaseComponent {
    constructor() {
        this._noAutocomplete = false;
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * @default `false`
         */
        this.disabled = false;
        /** Indica que o campo será somente leitura. */
        this.readonly = false;
        /**
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        this.required = false;
        /** Se verdadeiro, o campo receberá um botão para ser limpo. */
        this.clean = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * @description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * @description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * @default `false`
         */
        this.maskFormatModel = false;
        /** Evento disparado ao sair do campo. */
        this.blur = new EventEmitter();
        /** Evento disparado ao entrar do campo. */
        this.enter = new EventEmitter();
        /** Evento disparado ao alterar valor e deixar o campo. */
        this.change = new EventEmitter();
        /** Evento disparado ao alterar valor do model. */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._maxlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._minlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    get minlength() {
        return this._minlength;
    }
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
        this.validateModel();
    }
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof PoMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    callUpdateModelWithTimeout(value) {
        setTimeout(() => this.updateModel(value));
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return {
                pattern: {
                    valid: false
                }
            };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout(() => {
                this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    }
};
__decorate([
    Input('p-auto-focus'), InputBoolean(),
    __metadata("design:type", Boolean)
], PoInputBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    Input('p-icon'),
    __metadata("design:type", String)
], PoInputBaseComponent.prototype, "icon", void 0);
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoInputBaseComponent.prototype, "label", void 0);
__decorate([
    Input('p-help'),
    __metadata("design:type", String)
], PoInputBaseComponent.prototype, "help", void 0);
__decorate([
    Input('name'),
    __metadata("design:type", String)
], PoInputBaseComponent.prototype, "name", void 0);
__decorate([
    Input('p-no-autocomplete'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoInputBaseComponent.prototype, "noAutocomplete", null);
__decorate([
    Input('p-placeholder'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "placeholder", null);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setDisabled", null);
__decorate([
    Input('p-readonly'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setReadonly", null);
__decorate([
    Input('p-required'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setRequired", null);
__decorate([
    Input('p-clean'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setClean", null);
__decorate([
    Input('p-pattern'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setPattern", null);
__decorate([
    Input('p-error-pattern'),
    __metadata("design:type", String)
], PoInputBaseComponent.prototype, "errorPattern", void 0);
__decorate([
    Input('p-maxlength'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoInputBaseComponent.prototype, "maxlength", null);
__decorate([
    Input('p-minlength'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoInputBaseComponent.prototype, "minlength", null);
__decorate([
    Input('p-mask'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setMask", null);
__decorate([
    Input('p-mask-format-model'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoInputBaseComponent.prototype, "setMaskFormatModel", null);
__decorate([
    Input('p-optional'),
    __metadata("design:type", Boolean)
], PoInputBaseComponent.prototype, "optional", void 0);
__decorate([
    Output('p-blur'),
    __metadata("design:type", EventEmitter)
], PoInputBaseComponent.prototype, "blur", void 0);
__decorate([
    Output('p-enter'),
    __metadata("design:type", EventEmitter)
], PoInputBaseComponent.prototype, "enter", void 0);
__decorate([
    Output('p-change'),
    __metadata("design:type", EventEmitter)
], PoInputBaseComponent.prototype, "change", void 0);
__decorate([
    Output('p-change-model'),
    __metadata("design:type", EventEmitter)
], PoInputBaseComponent.prototype, "changeModel", void 0);
PoInputBaseComponent = __decorate([
    Directive()
], PoInputBaseComponent);
export { PoInputBaseComponent };
//# sourceMappingURL=data:application/json;base64,