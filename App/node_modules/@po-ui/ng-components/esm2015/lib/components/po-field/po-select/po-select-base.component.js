import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, ElementRef, EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
/**
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 */
let PoSelectBaseComponent = class PoSelectBaseComponent {
    constructor(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         * > Caso mais de um elemento seja configurado com essa propriedade,
         * o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
     * Caso esta lista estiver vazia, o model será undefined.
     */
    set options(options) {
        this._options = options;
        removeDuplicatedOptions(this._options);
        removeUndefinedAndNullOptions(this._options);
        this.onUpdateOptions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente para leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    onChange(value) {
        this.change.emit(value);
    }
    validate(abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return null;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    validateModel() {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    }
};
PoSelectBaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input('p-auto-focus'), InputBoolean(),
    __metadata("design:type", Boolean)
], PoSelectBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoSelectBaseComponent.prototype, "label", void 0);
__decorate([
    Input('name'),
    __metadata("design:type", String)
], PoSelectBaseComponent.prototype, "name", void 0);
__decorate([
    Input('p-help'),
    __metadata("design:type", String)
], PoSelectBaseComponent.prototype, "help", void 0);
__decorate([
    Input('p-placeholder'),
    __metadata("design:type", String)
], PoSelectBaseComponent.prototype, "placeholder", void 0);
__decorate([
    Input('p-optional'),
    __metadata("design:type", Boolean)
], PoSelectBaseComponent.prototype, "optional", void 0);
__decorate([
    Input('p-options'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoSelectBaseComponent.prototype, "options", null);
__decorate([
    Output('p-change'),
    __metadata("design:type", EventEmitter)
], PoSelectBaseComponent.prototype, "change", void 0);
__decorate([
    Output('ngModelChange'),
    __metadata("design:type", EventEmitter)
], PoSelectBaseComponent.prototype, "ngModelChange", void 0);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoSelectBaseComponent.prototype, "disabled", null);
__decorate([
    Input('p-readonly'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoSelectBaseComponent.prototype, "readonly", null);
__decorate([
    Input('p-required'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoSelectBaseComponent.prototype, "required", null);
PoSelectBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
], PoSelectBaseComponent);
export { PoSelectBaseComponent };
//# sourceMappingURL=data:application/json;base64,