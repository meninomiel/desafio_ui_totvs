import { __awaiter, __decorate, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { convertImageToBase64, isExternalLink, isIE } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoModalComponent } from '../../../po-modal';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
import { PoUploadComponent } from '../../po-upload/po-upload.component';
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
let PoRichTextModalComponent = class PoRichTextModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
        this.modalLinkConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => (this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText))
        };
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
    }
    get modalTitle() {
        if (this.modalType === 'image') {
            return this.literals.insertImage;
        }
        return this.linkConfirmAction();
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    get modalPrimaryAction() {
        return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
    }
    convertToBase64() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    emitCommand(value) {
        let command;
        if (value && this.modalType === PoRichTextModalType.Image) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    formModelValidate() {
        return (this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid);
    }
    insertElementRef() {
        return __awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (this.modalType === PoRichTextModalType.Image && !this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    openModal(type) {
        this.modalType = type;
        this.saveCursorPosition();
        if (this.modalType === PoRichTextModalType.Link) {
            this.prepareModalForLink();
            this.modalLinkConfirmAction.label = this.linkConfirmAction();
        }
        this.modal.open();
    }
    selectedLink(event) {
        this.isSelectedLink = !!event;
        this.linkElement = event;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.uploadModel = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink() {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => {
            this.formModelValidate();
        });
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
};
PoRichTextModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
__decorate([
    ViewChild('modal', { static: true }),
    __metadata("design:type", PoModalComponent)
], PoRichTextModalComponent.prototype, "modal", void 0);
__decorate([
    ViewChild('modalImageForm'),
    __metadata("design:type", NgForm)
], PoRichTextModalComponent.prototype, "modalImageForm", void 0);
__decorate([
    ViewChild('upload', { static: true }),
    __metadata("design:type", PoUploadComponent)
], PoRichTextModalComponent.prototype, "upload", void 0);
__decorate([
    ViewChild('modalImage', { static: true }),
    __metadata("design:type", ElementRef)
], PoRichTextModalComponent.prototype, "modalImage", void 0);
__decorate([
    ViewChild('modalLink', { static: true }),
    __metadata("design:type", PoModalComponent)
], PoRichTextModalComponent.prototype, "modalLink", void 0);
__decorate([
    ViewChild('modalLinkForm'),
    __metadata("design:type", NgForm)
], PoRichTextModalComponent.prototype, "modalLinkForm", void 0);
__decorate([
    Output('p-command'),
    __metadata("design:type", Object)
], PoRichTextModalComponent.prototype, "command", void 0);
__decorate([
    Output('p-link-editing'),
    __metadata("design:type", Object)
], PoRichTextModalComponent.prototype, "linkEditing", void 0);
PoRichTextModalComponent = __decorate([
    Component({
        selector: 'po-rich-text-modal',
        template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalPrimaryAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"modalTitle\"\n>\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\n</po-modal>\n\n<ng-template #modalImage>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #modalLink>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n"
    }),
    __metadata("design:paramtypes", [PoLanguageService])
], PoRichTextModalComponent);
export { PoRichTextModalComponent };
//# sourceMappingURL=data:application/json;base64,