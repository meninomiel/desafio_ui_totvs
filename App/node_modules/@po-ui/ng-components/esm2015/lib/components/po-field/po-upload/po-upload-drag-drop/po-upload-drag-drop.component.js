import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { convertToInt } from '../../../../utils/util';
import { PoUploadDragDropAreaComponent } from './po-upload-drag-drop-area/po-upload-drag-drop-area.component';
const PoUploadDragDropHeightDefault = 320;
const PoUploadDragDropHeightMin = 160;
let PoUploadDragDropComponent = class PoUploadDragDropComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this._dragDropHeight = PoUploadDragDropHeightDefault;
        this.isDragOver = false;
        this.fileChange = new EventEmitter();
        this.selectFiles = new EventEmitter();
    }
    set dragDropHeight(value) {
        const dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
        this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
    }
    get dragDropHeight() {
        return this._dragDropHeight;
    }
    focus() {
        this.dragDropAreaComponent.focus();
    }
    onAreaElement(element) {
        this.areaElement = element;
        // necessário para não ocorrer o erro HasBeenChecked
        this.changeDetector.detectChanges();
    }
    onDragLeave() {
        this.isDragOver = false;
    }
    onDragOver() {
        this.isDragOver = true;
    }
    onFileChange(files) {
        this.isDragOver = false;
        this.fileChange.emit(files);
    }
};
PoUploadDragDropComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    ViewChild('dragDropOverlay', { read: ElementRef }),
    __metadata("design:type", ElementRef)
], PoUploadDragDropComponent.prototype, "dragDropOverlayElement", void 0);
__decorate([
    ViewChild(PoUploadDragDropAreaComponent, { static: true }),
    __metadata("design:type", PoUploadDragDropAreaComponent)
], PoUploadDragDropComponent.prototype, "dragDropAreaComponent", void 0);
__decorate([
    Input('p-directory-compatible'),
    __metadata("design:type", Boolean)
], PoUploadDragDropComponent.prototype, "directoryCompatible", void 0);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", Boolean)
], PoUploadDragDropComponent.prototype, "disabled", void 0);
__decorate([
    Input('p-drag-drop-height'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PoUploadDragDropComponent.prototype, "dragDropHeight", null);
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object)
], PoUploadDragDropComponent.prototype, "literals", void 0);
__decorate([
    Output('p-file-change'),
    __metadata("design:type", EventEmitter)
], PoUploadDragDropComponent.prototype, "fileChange", void 0);
__decorate([
    Output('p-select-files'),
    __metadata("design:type", EventEmitter)
], PoUploadDragDropComponent.prototype, "selectFiles", void 0);
PoUploadDragDropComponent = __decorate([
    Component({
        selector: 'po-upload-drag-drop',
        template: "<po-upload-drag-drop-area-overlay\n  #dragDropOverlay\n  *ngIf=\"isDragOver\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-literals]=\"literals\"\n  [p-target]=\"dragDropAreaComponent.elementRef\"\n  (p-area-element)=\"onAreaElement($event)\"\n>\n</po-upload-drag-drop-area-overlay>\n\n<po-upload-drag-drop-area\n  p-upload-drag-drop\n  [p-area-element]=\"areaElement\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-height]=\"dragDropHeight\"\n  [p-literals]=\"literals\"\n  [p-overlay]=\"false\"\n  (p-drag-leave)=\"onDragLeave()\"\n  (p-drag-over)=\"onDragOver()\"\n  (p-file-change)=\"onFileChange($event)\"\n  (p-select-files)=\"selectFiles.emit()\"\n>\n</po-upload-drag-drop-area>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], PoUploadDragDropComponent);
export { PoUploadDragDropComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWRyYWctZHJvcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLXVwbG9hZC9wby11cGxvYWQtZHJhZy1kcm9wL3BvLXVwbG9hZC1kcmFnLWRyb3AuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFHOUcsTUFBTSw2QkFBNkIsR0FBRyxHQUFHLENBQUM7QUFDMUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUM7QUFPdEMsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUE2QnBDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQTVCN0Msb0JBQWUsR0FBWSw2QkFBNkIsQ0FBQztRQUdqRSxlQUFVLEdBQVksS0FBSyxDQUFDO1FBcUJILGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV2RCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRTNCLENBQUM7SUFoQjVCLElBQUksY0FBYyxDQUFDLEtBQWE7UUFDM0QsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO1FBRTFFLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxHQUFHLHlCQUF5QixDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO0lBQ2pILENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFVRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBb0I7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFFM0Isb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0YsQ0FBQTs7WUExQnFDLGlCQUFpQjs7QUF2QkQ7SUFBbkQsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDOzhCQUF5QixVQUFVO3lFQUFDO0FBQzNCO0lBQTNELFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBd0IsNkJBQTZCO3dFQUFDO0FBRWhGO0lBQWhDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQzs7c0VBQThCO0FBRXpDO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7OzJEQUFtQjtBQUVWO0lBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzs7OytEQUkzQjtBQU1vQjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzsyREFBNEI7QUFFdkI7SUFBeEIsTUFBTSxDQUFDLGVBQWUsQ0FBQzs4QkFBYSxZQUFZOzZEQUFnQztBQUV2RDtJQUF6QixNQUFNLENBQUMsZ0JBQWdCLENBQUM7OEJBQWMsWUFBWTs4REFBZ0M7QUEzQnhFLHlCQUF5QjtJQUxyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLDh3QkFBbUQ7UUFDbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztxQ0E4Qm9DLGlCQUFpQjtHQTdCMUMseUJBQXlCLENBdURyQztTQXZEWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1VwbG9hZERyYWdEcm9wQXJlYUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdXBsb2FkLWRyYWctZHJvcC1hcmVhL3BvLXVwbG9hZC1kcmFnLWRyb3AtYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9VcGxvYWRMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdXBsb2FkLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmNvbnN0IFBvVXBsb2FkRHJhZ0Ryb3BIZWlnaHREZWZhdWx0ID0gMzIwO1xuY29uc3QgUG9VcGxvYWREcmFnRHJvcEhlaWdodE1pbiA9IDE2MDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdXBsb2FkLWRyYWctZHJvcCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby11cGxvYWQtZHJhZy1kcm9wLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9VcGxvYWREcmFnRHJvcENvbXBvbmVudCB7XG4gIHByaXZhdGUgX2RyYWdEcm9wSGVpZ2h0PzogbnVtYmVyID0gUG9VcGxvYWREcmFnRHJvcEhlaWdodERlZmF1bHQ7XG5cbiAgYXJlYUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBpc0RyYWdPdmVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQFZpZXdDaGlsZCgnZHJhZ0Ryb3BPdmVybGF5JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIGRyYWdEcm9wT3ZlcmxheUVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoUG9VcGxvYWREcmFnRHJvcEFyZWFDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGRyYWdEcm9wQXJlYUNvbXBvbmVudDogUG9VcGxvYWREcmFnRHJvcEFyZWFDb21wb25lbnQ7XG5cbiAgQElucHV0KCdwLWRpcmVjdG9yeS1jb21wYXRpYmxlJykgZGlyZWN0b3J5Q29tcGF0aWJsZTogYm9vbGVhbjtcblxuICBASW5wdXQoJ3AtZGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoJ3AtZHJhZy1kcm9wLWhlaWdodCcpIHNldCBkcmFnRHJvcEhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgZHJhZ0Ryb3BIZWlnaHQgPSBjb252ZXJ0VG9JbnQodmFsdWUsIFBvVXBsb2FkRHJhZ0Ryb3BIZWlnaHREZWZhdWx0KTtcblxuICAgIHRoaXMuX2RyYWdEcm9wSGVpZ2h0ID0gZHJhZ0Ryb3BIZWlnaHQgPCBQb1VwbG9hZERyYWdEcm9wSGVpZ2h0TWluID8gUG9VcGxvYWREcmFnRHJvcEhlaWdodE1pbiA6IGRyYWdEcm9wSGVpZ2h0O1xuICB9XG5cbiAgZ2V0IGRyYWdEcm9wSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9kcmFnRHJvcEhlaWdodDtcbiAgfVxuXG4gIEBJbnB1dCgncC1saXRlcmFscycpIGxpdGVyYWxzOiBQb1VwbG9hZExpdGVyYWxzO1xuXG4gIEBPdXRwdXQoJ3AtZmlsZS1jaGFuZ2UnKSBmaWxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3Atc2VsZWN0LWZpbGVzJykgc2VsZWN0RmlsZXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5kcmFnRHJvcEFyZWFDb21wb25lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIG9uQXJlYUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmFyZWFFbGVtZW50ID0gZWxlbWVudDtcblxuICAgIC8vIG5lY2Vzc8OhcmlvIHBhcmEgbsOjbyBvY29ycmVyIG8gZXJybyBIYXNCZWVuQ2hlY2tlZFxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgb25EcmFnTGVhdmUoKSB7XG4gICAgdGhpcy5pc0RyYWdPdmVyID0gZmFsc2U7XG4gIH1cblxuICBvbkRyYWdPdmVyKCkge1xuICAgIHRoaXMuaXNEcmFnT3ZlciA9IHRydWU7XG4gIH1cblxuICBvbkZpbGVDaGFuZ2UoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJhZ092ZXIgPSBmYWxzZTtcblxuICAgIHRoaXMuZmlsZUNoYW5nZS5lbWl0KGZpbGVzKTtcbiAgfVxufVxuIl19