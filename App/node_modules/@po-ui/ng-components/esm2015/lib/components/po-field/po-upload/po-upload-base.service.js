import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse, HttpRequest, HttpResponse } from '@angular/common/http';
let PoUploadBaseService = class PoUploadBaseService {
    constructor(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    upload(url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        const filesLength = files.length;
        const uploadEvent = {
            data: {},
            file: null
        };
        for (let i = 0; i < filesLength; i++) {
            const formData = new FormData();
            const file = files[i];
            const fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    }
    sendFile(url, file, formData, uploadCallback, successCallback, errorCallback) {
        const request = this.getRequest(url, formData).subscribe(event => {
            if (event.type === HttpEventType.UploadProgress) {
                this.addRequest(file, request);
                const percentDone = Math.round((100 * event.loaded) / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }, (err) => {
            errorCallback(file, err);
        });
    }
    getRequest(url, formData) {
        const req = new HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    }
    stopRequestByFile(file, callback) {
        const requestObj = this.requests.find(req => {
            return req.file.uid === file.uid;
        });
        if (requestObj) {
            const request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    }
    removeRequest(requestObj) {
        const index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    }
    addRequest(file, request) {
        const hasRequest = this.requests.some(req => {
            return req.file.uid === file.uid;
        });
        if (!hasRequest) {
            this.requests.push({ file, request });
        }
    }
};
PoUploadBaseService.ctorParameters = () => [
    { type: HttpClient }
];
PoUploadBaseService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], PoUploadBaseService);
export { PoUploadBaseService };
//# sourceMappingURL=data:application/json;base64,