import { __decorate, __metadata } from "tslib";
import { ElementRef, Directive } from '@angular/core';
import { PoInputGeneric } from '../po-input-generic/po-input-generic';
let PoNumberBaseComponent = class PoNumberBaseComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(elementRef) {
        super(elementRef);
        this.type = 'number';
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
};
PoNumberBaseComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoNumberBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [ElementRef])
], PoNumberBaseComponent);
export { PoNumberBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbnVtYmVyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1udW1iZXIvcG8tbnVtYmVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHdEUsSUFBc0IscUJBQXFCLEdBQTNDLE1BQXNCLHFCQUFzQixTQUFRLGNBQWM7SUFHaEUsMEJBQTBCO0lBQzFCLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBSnBCLFNBQUksR0FBRyxRQUFRLENBQUM7SUFLaEIsQ0FBQztJQUVELFlBQVksQ0FBQyxDQUFNO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDM0IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRWxFLElBQUksS0FBSyxLQUFLLGNBQWMsRUFBRTtnQkFDNUIsS0FBSyxHQUFHLGNBQWMsQ0FBQztnQkFFdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUMxQztZQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxTQUFpQixFQUFFLEtBQWE7UUFDN0MsSUFBSSxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7WUFDekMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFaEUsSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDdkQsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDOUQ7WUFFRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFLO1FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBRWpGLHVGQUF1RjtvQkFDdkYsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTt3QkFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ25EO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7aUJBQzFDO2FBQ0Y7aUJBQU07Z0JBQ0wsb0RBQW9EO2dCQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxxRUFBcUU7UUFFckUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFhO1FBQ2hDLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFLO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTs7WUFoRXlCLFVBQVU7O0FBSmQscUJBQXFCO0lBRDFDLFNBQVMsRUFBRTtxQ0FLYyxVQUFVO0dBSmQscUJBQXFCLENBb0UxQztTQXBFcUIscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvSW5wdXRHZW5lcmljIH0gZnJvbSAnLi4vcG8taW5wdXQtZ2VuZXJpYy9wby1pbnB1dC1nZW5lcmljJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9OdW1iZXJCYXNlQ29tcG9uZW50IGV4dGVuZHMgUG9JbnB1dEdlbmVyaWMge1xuICB0eXBlID0gJ251bWJlcic7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICB9XG5cbiAgZXZlbnRPbklucHV0KGU6IGFueSkge1xuICAgIGlmICghdGhpcy5tYXNrKSB7XG4gICAgICBsZXQgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIGNvbnN0IHZhbHVlTWF4bGVuZ3RoID0gdGhpcy52YWxpZE1heExlbmd0aCh0aGlzLm1heGxlbmd0aCwgdmFsdWUpO1xuXG4gICAgICBpZiAodmFsdWUgIT09IHZhbHVlTWF4bGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWVNYXhsZW5ndGg7XG5cbiAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsT25DaGFuZ2UodGhpcy5mb3JtYXROdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZE1heExlbmd0aChtYXhsZW5ndGg6IG51bWJlciwgdmFsdWU6IHN0cmluZykge1xuICAgIGlmIChtYXhsZW5ndGggJiYgdmFsdWUubGVuZ3RoID4gbWF4bGVuZ3RoKSB7XG4gICAgICBjb25zdCBzdWJzdHJpbmdWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIG1heGxlbmd0aCk7XG5cbiAgICAgIGlmIChzdWJzdHJpbmdWYWx1ZSAmJiB0aGlzLmlzRW5kV2l0aERvdChzdWJzdHJpbmdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnN0cmluZ1ZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIG1heGxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3Vic3RyaW5nVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgd3JpdGVWYWx1ZU1vZGVsKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRFbCkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRoaXMub2JqTWFzay5jb250cm9sRm9ybWF0dGluZyhTdHJpbmcodmFsdWUpKTtcblxuICAgICAgICAgIC8vIFNlIG8gbW9kZWwgZm9yIGRlZmluaWRvIGNvbW8gZm9ybWF0YWRvLCBlbnTDo28gcHJlY2lzYSBhdHVhbGl6w6EtbG8gbm8gcHJpbWVpcm8gYWNlc3NvXG4gICAgICAgICAgaWYgKHRoaXMub2JqTWFzay5mb3JtYXRNb2RlbCkge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZVByb3BhZ2F0ZSh0aGlzLm9iak1hc2sudmFsdWVUb01vZGVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2UgZm9yIG8gdmFsb3IgZm9yIHVuZGVmaW5lZCwgZGV2ZSBsaW1wYXIgbyBjYW1wb1xuICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVtaXRlIGV2ZW50byBxdWFuZG8gbyBtb2RlbCDDqSBhdHVhbGl6YWRvLCBpbmNsdXNpdmUgYSBwcmltZWlyYSB2ZXpcblxuICAgIHRoaXMuY2hhbmdlTW9kZWwuZW1pdCh2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGlzRW5kV2l0aERvdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmxhc3RJbmRleE9mKCcuJykgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IE51bWJlcih2YWx1ZSkgOiBudWxsO1xuICB9XG59XG4iXX0=