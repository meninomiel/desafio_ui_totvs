import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, convertToBoolean, isEquals, isIE, isMobile, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { PoUploadFile } from './po-upload-file';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
import { InputBoolean } from '../../../decorators';
export const poUploadLiteralsDefault = {
    en: {
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    },
    es: {
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    },
    pt: {
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    },
    ru: {
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        deleteFile: 'удалять',
        cancel: 'отменить',
        tryAgain: 'попробуйте еще раз',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }
};
const poUploadFormFieldDefault = 'files';
const poUploadMaxFileSize = 31457280; // 30MB
const poUploadMinFileSize = 0;
/**
 * @description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 */
let PoUploadBaseComponent = class PoUploadBaseComponent {
    constructor(uploadService) {
        this.uploadService = uploadService;
        this._dragDrop = false;
        this.extensionNotAllowed = 0;
        this.quantityNotAllowed = 0;
        this.sizeNotAllowed = 0;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Define o valor do atributo `name` do componente. */
        this.name = 'file';
        /**
         * @optional
         *
         * @description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * @default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
     *
     * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
     *
     * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
     *
     * @default `false`
     */
    set directory(value) {
        this._directory = convertToBoolean(value);
        this.canHandleDirectory = this._directory && !isIE() && !isMobile();
        this.setDirectoryAttribute(this.canHandleDirectory);
    }
    get directory() {
        return this._directory;
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
     * automaticamente.
     *
     * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
     *
     * @default `false`
     */
    set dragDrop(value) {
        this._dragDrop = convertToBoolean(value);
    }
    get dragDrop() {
        return this._dragDrop;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta visualmente as informações de restrições para o upload.
     *
     * @default `false`
     */
    set hideRestrictionsInfo(value) {
        this._hideRestrictionsInfo = convertToBoolean(value);
    }
    get hideRestrictionsInfo() {
        return this._hideRestrictionsInfo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de seleção de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `selectFiles()` para seleção de arquivos.
     *
     * @default `false`
     */
    set hideSelectButton(value) {
        this._hideSelectButton = convertToBoolean(value);
    }
    get hideSelectButton() {
        return this._hideSelectButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de envio de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
     *
     * @default `false`
     */
    set hideSendButton(value) {
        this._hideSendButton = convertToBoolean(value);
    }
    get hideSendButton() {
        return this._hideSendButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-upload`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoUploadLiterals = {
     *    cancel: 'Desistir',
     *    deleteFile: 'Deletar',
     *  };
     *
     * Ou passando apenas as literais que deseja customizar:,
     *    selectFile: 'Buscar arquivo',
     * ```
     *    startSending: 'Enviar'
     *   tryAgain: 'Recomeçar',
     *
     * ```
     *  const customLiterals: PoUploadLiterals = {
     *    deleteFile: 'Deletar'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-upload
     *   [p-literals]="customLiterals">
     * </po-upload>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[browserLanguage()]), value);
        }
        else {
            this._literals = poUploadLiteralsDefault[browserLanguage()];
        }
    }
    get literals() {
        return this._literals || poUploadLiteralsDefault[browserLanguage()];
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
     * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
     */
    set fileRestrictions(restrictions) {
        this._fileRestrictions = this.initRestrictions(restrictions);
        this.setAllowedExtensions(restrictions);
    }
    get fileRestrictions() {
        return this._fileRestrictions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
     *
     * @default `files`
     */
    set formField(value) {
        this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
        this.getUploadService().formField = this.formField;
    }
    get formField() {
        return this._formField;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.currentFiles);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se pode selecionar mais de um arquivo.
     *
     * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
     */
    set isMultiple(value) {
        this._isMultiple = convertToBoolean(value);
    }
    get isMultiple() {
        return this.canHandleDirectory ? true : this._isMultiple;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.currentFiles);
    }
    get required() {
        return this._required;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    }
    isExceededFileLimit(currentFilesLength) {
        return (this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength);
    }
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    parseFiles(files) {
        let poUploadFiles = this.currentFiles || [];
        const filesLength = files.length;
        for (let i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            const file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Verifica se o arquivo está de acordo com as restrições.
    checkRestrictions(file) {
        const restrictions = this.fileRestrictions;
        if (restrictions) {
            const allowedExtensions = restrictions.allowedExtensions;
            const minFileSize = restrictions.minFileSize;
            const maxFileSize = restrictions.maxFileSize;
            const isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            const isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    }
    existsFileSameName(file, files) {
        return files.some(currentFile => file.name === currentFile.name);
    }
    getUploadService() {
        return this.uploadService;
    }
    insertFileInFiles(newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    }
    isAllowedExtension(extension, allowedExtensions = []) {
        const isAllowed = allowedExtensions.some(ext => ext.toLowerCase() === extension);
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    }
    setAllowedExtensions(restrictions = {}) {
        const _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    }
    initRestrictions(restrictions) {
        if (!restrictions) {
            return;
        }
        const minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        const maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return Object.assign(Object.assign({}, restrictions), { maxFileSize: maxFileSize, minFileSize: minFileSize });
    }
    updateExistsFileInFiles(newFile, files) {
        const fileIndex = files.findIndex(currentFile => newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded);
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    }
};
PoUploadBaseComponent.ctorParameters = () => [
    { type: PoUploadService }
];
__decorate([
    Input('p-auto-focus'), InputBoolean(),
    __metadata("design:type", Boolean)
], PoUploadBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    Input('p-directory'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "directory", null);
__decorate([
    Input('p-drag-drop-height'),
    __metadata("design:type", Number)
], PoUploadBaseComponent.prototype, "dragDropHeight", void 0);
__decorate([
    Input('p-drag-drop'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "dragDrop", null);
__decorate([
    Input('p-hide-restrictions-info'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "hideRestrictionsInfo", null);
__decorate([
    Input('p-hide-select-button'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "hideSelectButton", null);
__decorate([
    Input('p-hide-send-button'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "hideSendButton", null);
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoUploadBaseComponent.prototype, "label", void 0);
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoUploadBaseComponent.prototype, "literals", null);
__decorate([
    Input('p-help'),
    __metadata("design:type", String)
], PoUploadBaseComponent.prototype, "help", void 0);
__decorate([
    Input('p-url'),
    __metadata("design:type", String)
], PoUploadBaseComponent.prototype, "url", void 0);
__decorate([
    Input('p-restrictions'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoUploadBaseComponent.prototype, "fileRestrictions", null);
__decorate([
    Input('name'),
    __metadata("design:type", String)
], PoUploadBaseComponent.prototype, "name", void 0);
__decorate([
    Input('p-form-field'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoUploadBaseComponent.prototype, "formField", null);
__decorate([
    Input('p-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "disabled", null);
__decorate([
    Input('p-auto-upload'),
    __metadata("design:type", Boolean)
], PoUploadBaseComponent.prototype, "autoUpload", void 0);
__decorate([
    Input('p-multiple'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "isMultiple", null);
__decorate([
    Input('p-optional'),
    __metadata("design:type", Boolean)
], PoUploadBaseComponent.prototype, "optional", void 0);
__decorate([
    Input('p-required'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoUploadBaseComponent.prototype, "required", null);
__decorate([
    Output('p-upload'),
    __metadata("design:type", EventEmitter)
], PoUploadBaseComponent.prototype, "onUpload", void 0);
__decorate([
    Output('p-error'),
    __metadata("design:type", EventEmitter)
], PoUploadBaseComponent.prototype, "onError", void 0);
__decorate([
    Output('p-success'),
    __metadata("design:type", EventEmitter)
], PoUploadBaseComponent.prototype, "onSuccess", void 0);
__decorate([
    Output('ngModelChange'),
    __metadata("design:type", EventEmitter)
], PoUploadBaseComponent.prototype, "ngModelChange", void 0);
PoUploadBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [PoUploadService])
], PoUploadBaseComponent);
export { PoUploadBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby11cGxvYWQvcG8tdXBsb2FkLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDckMsRUFBRSxFQUFvQjtRQUNwQixLQUFLLEVBQUUsT0FBTztRQUNkLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFlBQVksRUFBRSxlQUFlO1FBQzdCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFlBQVksRUFBRSxlQUFlO1FBQzdCLGFBQWEsRUFBRSxpQkFBaUI7UUFDaEMsZUFBZSxFQUFFLG1CQUFtQjtRQUNwQyxxQkFBcUIsRUFBRSxrQ0FBa0M7UUFDekQsc0JBQXNCLEVBQUUsbUNB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QW1CO0FBV2xCO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7OztxREFJbkI7QUFnQm1CO0lBQW5CLE1BQU0sQ0FBQyxVQUFVLENBQUM7OEJBQVksWUFBWTt1REFBZ0M7QUFNeEQ7SUFBbEIsTUFBTSxDQUFDLFNBQVMsQ0FBQzs4QkFBVyxZQUFZO3NEQUFnQztBQU1wRDtJQUFwQixNQUFNLENBQUMsV0FBVyxDQUFDOzhCQUFhLFlBQVk7d0RBQWdDO0FBR3BEO0lBQXhCLE1BQU0sQ0FBQyxlQUFlLENBQUM7OEJBQWlCLFlBQVk7NERBQWdDO0FBcFdqRSxxQkFBcUI7SUFEMUMsU0FBUyxFQUFFO3FDQXVXMkIsZUFBZTtHQXRXaEMscUJBQXFCLENBbWdCMUM7U0FuZ0JxQixxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIGNvbnZlcnRUb0Jvb2xlYW4sIGlzRXF1YWxzLCBpc0lFLCBpc01vYmlsZSwgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyByZXF1aXJlZEZhaWxlZCB9IGZyb20gJy4uL3ZhbGlkYXRvcnMnO1xuXG5pbXBvcnQgeyBQb1VwbG9hZEZpbGUgfSBmcm9tICcuL3BvLXVwbG9hZC1maWxlJztcbmltcG9ydCB7IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9VcGxvYWRMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby11cGxvYWQtbGl0ZXJhbHMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVXBsb2FkU2VydmljZSB9IGZyb20gJy4vcG8tdXBsb2FkLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9VcGxvYWRTdGF0dXMgfSBmcm9tICcuL3BvLXVwbG9hZC1zdGF0dXMuZW51bSc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi9kZWNvcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IHBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFBvVXBsb2FkTGl0ZXJhbHM+e1xuICAgIGZpbGVzOiAnZmlsZXMnLFxuICAgIGZvbGRlcnM6ICdmb2xkZXJzJyxcbiAgICBzZWxlY3RGaWxlOiAnU2VsZWN0IGZpbGUnLFxuICAgIHNlbGVjdEZpbGVzOiAnU2VsZWN0IGZpbGVzJyxcbiAgICBzZWxlY3RGb2xkZXI6ICdTZWxlY3QgZm9sZGVyJyxcbiAgICBkZWxldGVGaWxlOiAnRGVsZXRlJyxcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxuICAgIHRyeUFnYWluOiAnVHJ5IGFnYWluJyxcbiAgICBzdGFydFNlbmRpbmc6ICdTdGFydCBzZW5kaW5nJyxcbiAgICBkcmFnRmlsZXNIZXJlOiAnRHJhZyBmaWxlcyBoZXJlJyxcbiAgICBkcmFnRm9sZGVyc0hlcmU6ICdEcmFnIGZvbGRlcnMgaGVyZScsXG4gICAgc2VsZWN0RmlsZXNPbkNvbXB1dGVyOiAnb3Igc2VsZWN0IGZpbGVzIG9uIHlvdXIgY29tcHV0ZXInLFxuICAgIHNlbGVjdEZvbGRlck9uQ29tcHV0ZXI6ICdvciBzZWxlY3QgZm9sZGVyIG9uIHlvdXIgY29tcHV0ZXInLFxuICAgIGRyb3BGaWxlc0hlcmU6ICdEcm9wIGZpbGVzIGhlcmUnLFxuICAgIGRyb3BGb2xkZXJzSGVyZTogJ0Ryb3AgZm9sZGVycyBoZXJlJyxcbiAgICBpbnZhbGlkRHJvcEFyZWE6ICd7MH0gd2VyZSBub3QgZHJvcHBlZCBpbiB0aGUgY29ycmVjdCBhcmVhJyxcbiAgICBpbnZhbGlkRmlsZVR5cGU6ICdGYWlsZWQgdG8gbG9hZCB7MH0gZmlsZShzKSBhcyBpdCBpcyBub3QgdGhlIGFsbG93ZWQgZmlsZSB0eXBlLicsXG4gICAgaW52YWxpZEFtb3VudDogJ0ZhaWxlZCB0byBsb2FkIHswfSBmaWxlKHMpLCBhcyBpdCBleGNlZWRzIHRoZSBsaW1pdCBhbW91bnQgb2YgZmlsZXMuJyxcbiAgICBpbnZhbGlkRm9ybWF0OiAnRmFpbGVkIHRvIGxvYWQgezB9IGZpbGUocyksIGFzIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBmb3JtYXQocyk6IHsxfS4nLFxuICAgIGludmFsaWRTaXplOiAnRmFpbGVkIHRvIGxvYWQgezB9IGZpbGVzKHMpLCBhcyBpdCBpcyBub3QgdGhlIGFsbG93ZWQgc2l6ZTogZnJvbSB7MX0gdG8gezJ9LicsXG4gICAgbnVtYmVyT2ZGaWxlc0FsbG93ZWQ6ICd7MH0gZmlsZShzKSBhbGxvd2VkJyxcbiAgICBhbGxvd2VkRm9ybWF0czogJ0FjY2VwdGVkIGZpbGUgZm9ybWF0czogezB9LicsXG4gICAgYWxsb3dlZEZpbGVTaXplUmFuZ2U6ICdTaXplIGxpbWl0IHBlciBmaWxlOiBmcm9tIHswfSB0byB7MX0nLFxuICAgIG1heEZpbGVTaXplQWxsb3dlZDogJ1NpemUgbGltaXQgcGVyIGZpbGU6IHswfSBtYXhpbXVtJyxcbiAgICBtaW5GaWxlU2l6ZUFsbG93ZWQ6ICdTaXplIGxpbWl0IHBlciBmaWxlOiB7MH0gbWluaW11bScsXG4gICAgZXJyb3JPY2N1cnJlZDogJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCcsXG4gICAgc2VudFdpdGhTdWNjZXNzOiAnU2VudCB3aXRoIHN1Y2Nlc3MnXG4gIH0sXG4gIGVzOiA8UG9VcGxvYWRMaXRlcmFscz57XG4gICAgZmlsZXM6ICdhcmNoaXZvcycsXG4gICAgZm9sZGVyczogJ2NhcnBldGFzJyxcbiAgICBzZWxlY3RGaWxlOiAnU2VsZWNjaW9uYXIgYXJjaGl2bycsXG4gICAgc2VsZWN0RmlsZXM6ICdTZWxlY2Npb25hciBhcmNoaXZvcycsXG4gICAgc2VsZWN0Rm9sZGVyOiAnU2VsZWNjaW9uYXIgY2FycGV0YScsXG4gICAgZGVsZXRlRmlsZTogJ0JvcnJhcicsXG4gICAgY2FuY2VsOiAnQ2FuY2VsYXInLFxuICAgIHRyeUFnYWluOiAnSW50ZW50YXIgZGUgbnVldm8nLFxuICAgIHN0YXJ0U2VuZGluZzogJ0luaWNpYXIgY2FyZ2EnLFxuICAgIGRyYWdGaWxlc0hlcmU6ICdBcnJhc3RyYSBsb3MgYXJjaGl2b3MgYXF1w60nLFxuICAgIGRyYWdGb2xkZXJzSGVyZTogJ0FycmFzdHJhIGxhcyBjYXJwZXRhcyBhcXXDrScsXG4gICAgc2VsZWN0RmlsZXNPbkNvbXB1dGVyOiAnbyBzZWxlY2Npb25hIGxvcyBhcmNoaXZvcyBlbiB0dSBjb21wdXRhZG9yYScsXG4gICAgc2VsZWN0Rm9sZGVyT25Db21wdXRlcjogJ28gc2VsZWNjaW9uYSBsYSBjYXJwZXRhIGVuIHR1IGNvbXB1dGFkb3JhJyxcbiAgICBkcm9wRmlsZXNIZXJlOiAnRGVqYSBsb3MgYXJjaGl2b3MgYXF1w60nLFxuICAgIGRyb3BGb2xkZXJzSGVyZTogJ0RlamEgbGFzIGNhcnBldGFzIGFxdcOtJyxcbiAgICBpbnZhbGlkRHJvcEFyZWE6ICdMb3MgezB9IG5vIHNlIGluc2VydGFyb24gZW4gbGEgdWJpY2FjacOzbiBjb3JyZWN0YScsXG4gICAgaW52YWxpZEZpbGVUeXBlOiAnRXJyb3IgYWwgY2FyZ2FyIHswfSBhcmNoaXZvIChzKSB5YSBxdWUgbm8gZXMgZWwgdGlwbyBkZSBhcmNoaXZvIHBlcm1pdGlkbycsXG4gICAgaW52YWxpZEFtb3VudDogJ0Vycm9yIGFsIGNhcmdhciB7MH0gYXJjaGl2byAocykgeWEgcXVlIGV4Y2VkZSBsYSBjYW50aWRhZCBsaW1pdGUgZGUgYXJjaGl2b3MuJyxcbiAgICBpbnZhbGlkRm9ybWF0OiAnRXJyb3IgYWwgY2FyZ2FyIHswfSBhcmNoaXZvIChzKSB5YSBxdWUgbm8gY29pbmNpZGUgY29uIGVsIGZvcm1hdG8gKHMpOiB7MX0uJyxcbiAgICBpbnZhbGlkU2l6ZTogJ0Vycm9yIGFsIGNhcmdhciB7MH0gYXJjaGl2byAocykgeWEgcXVlIG5vIGN1bXBsZSBjb24gZWwgdGFtYcOxbyBwZXJtaXRpZG86IGRlc2RlIHsxfSBoYXN0YSB7Mn0uJyxcbiAgICBudW1iZXJPZkZpbGVzQWxsb3dlZDogJ3swfSBhcmNoaXZvKHMpIHBlcm1pdGlkbyhzKScsXG4gICAgYWxsb3dlZEZvcm1hdHM6ICdGb3JtYXRvcyBhY2VwdGFkb3M6IHswfS4nLFxuICAgIGFsbG93ZWRGaWxlU2l6ZVJhbmdlOiAnTGltaXRlIGRlIHRhbWHDsW8gZGUgYXJjaGl2bzogZGVzZGUgezB9IGhhc3RhIHsxfScsXG4gICAgbWF4RmlsZVNpemVBbGxvd2VkOiAnTGltaXRlIGRlIHRhbWHDsW8gZGUgYXJjaGl2bzogaGFzdGEgezB9JyxcbiAgICBtaW5GaWxlU2l6ZUFsbG93ZWQ6ICdMaW1pdGUgZGUgdGFtYcOxbyBkZSBhcmNoaXZvOiBtaW5pbW8gezB9JyxcbiAgICBlcnJvck9jY3VycmVkOiAnT2N1cnJpbyB1biBlcnJvcicsXG4gICAgc2VudFdpdGhTdWNjZXNzOiAnRW52aWFkbyBjb24gw6l4aXRvJ1xuICB9LFxuICBwdDogPFBvVXBsb2FkTGl0ZXJhbHM+e1xuICAgIGZpbGVzOiAnYXJxdWl2b3MnLFxuICAgIGZvbGRlcnM6ICdkaXJldMOzcmlvcycsXG4gICAgc2VsZWN0RmlsZTogJ1NlbGVjaW9uYXIgYXJxdWl2bycsXG4gICAgc2VsZWN0RmlsZXM6ICdTZWxlY2lvbmFyIGFycXVpdm9zJyxcbiAgICBzZWxlY3RGb2xkZXI6ICdTZWxlY2lvbmFyIHBhc3RhJyxcbiAgICBkZWxldGVGaWxlOiAnRXhjbHVpcicsXG4gICAgY2FuY2VsOiAnQ2FuY2VsYXInLFxuICAgIHRyeUFnYWluOiAnVGVudGFyIE5vdmFtZW50ZScsXG4gICAgc3RhcnRTZW5kaW5nOiAnSW5pY2lhciBlbnZpbycsXG4gICAgZHJhZ0ZpbGVzSGVyZTogJ0FycmFzdGUgb3MgYXJxdWl2b3MgYXF1aScsXG4gICAgZHJhZ0ZvbGRlcnNIZXJlOiAnQXJyYXN0ZSBhcyBwYXN0YXMgYXF1aScsXG4gICAgc2VsZWN0RmlsZXNPbkNvbXB1dGVyOiAnb3Ugc2VsZWNpb25lIG9zIGFycXVpdm9zIG5vIGNvbXB1dGFkb3InLFxuICAgIHNlbGVjdEZvbGRlck9uQ29tcHV0ZXI6ICdvdSBzZWxlY2lvbmUgYSBwYXN0YSBubyBjb21wdXRhZG9yJyxcbiAgICBkcm9wRmlsZXNIZXJlOiAnU29sdGUgb3MgYXJxdWl2b3MgYXF1aScsXG4gICAgZHJvcEZvbGRlcnNIZXJlOiAnU29sdGUgYXMgcGFzdGFzIGFxdWknLFxuICAgIGludmFsaWREcm9wQXJlYTogJ09zIHswfSBuw6NvIGZvcmFtIGluc2VyaWRvcyBubyBsb2NhbCBjb3JyZXRvJyxcbiAgICBpbnZhbGlkRmlsZVR5cGU6ICdGYWxoYSBhbyBjYXJyZWdhciB7MH0gYXJxdWl2byAocyksIHBvaXMgbsOjbyDDqSBvIHRpcG8gZGUgYXJxdWl2byBwZXJtaXRpZG8nLFxuICAgIGludmFsaWRBbW91bnQ6ICdGYWxoYSBhbyBjYXJyZWdhciB7MH0gYXJxdWl2byhzKSwgcG9pcyBleGNlZGUobSkgYSBxdWFudGlkYWRlIGxpbWl0ZSBkZSBhcnF1aXZvcy4nLFxuICAgIGludmFsaWRGb3JtYXQ6ICdGYWxoYSBhbyBjYXJyZWdhciB7MH0gYXJxdWl2byhzKSwgcG9pcyBuw6NvIGNvcnJlc3BvbmRlKG0pIGFvKHMpIGZvcm1hdG8ocyk6IHsxfS4nLFxuICAgIGludmFsaWRTaXplOiAnRmFsaGEgYW8gY2FycmVnYXIgezB9IGFycXVpdm8ocyksIHBvaXMgbsOjbyBhdGVuZGUgYW8gdGFtYW5obyBwZXJtaXRpZG86IHsxfSBhdMOpIHsyfS4nLFxuICAgIG51bWJlck9mRmlsZXNBbGxvd2VkOiAnUXVhbnRpZGFkZSBtw6F4aW1hOiB7MH0gYXJxdWl2byhzKScsXG4gICAgYWxsb3dlZEZvcm1hdHM6ICdGb3JtYXRvcyBhZG90YWRvczogezB9LicsXG4gICAgYWxsb3dlZEZpbGVTaXplUmFuZ2U6ICdMaW1pdGUgZGUgdGFtYW5obyBwb3IgYXJxdWl2bzogZGUgezB9IGF0w6kgezF9JyxcbiAgICBtYXhGaWxlU2l6ZUFsbG93ZWQ6ICdMaW1pdGUgZGUgdGFtYW5obyBwb3IgYXJxdWl2bzogYXTDqSB7MH0nLFxuICAgIG1pbkZpbGVTaXplQWxsb3dlZDogJ0xpbWl0ZSBkZSB0YW1hbmhvIHBvciBhcnF1aXZvOiBubyBtw61uaW1vIHswfScsXG4gICAgZXJyb3JPY2N1cnJlZDogJ09jb3JyZXUgdW0gZXJybycsXG4gICAgc2VudFdpdGhTdWNjZXNzOiAnRW52aWFkbyBjb20gc3VjZXNzbydcbiAgfSxcbiAgcnU6IDxQb1VwbG9hZExpdGVyYWxzPntcbiAgICBmaWxlczogJ9GE0LDQudC70YsnLFxuICAgIGZvbGRlcnM6ICfQv9Cw0L/QutC4INGBINGE0LDQudC70LDQvNC4JyxcbiAgICBzZWxlY3RGaWxlOiAn0JLRi9Cx0LXRgNC40YLQtSDRhNCw0LnQuycsXG4gICAgc2VsZWN0RmlsZXM6ICfQktGL0LHQtdGA0LjRgtC1INGE0LDQudC70YsnLFxuICAgIHNlbGVjdEZvbGRlcjogJ9CS0YvQsdC10YDQuNGC0LUg0L/QsNC/0LrRgyDRgSDRhNCw0LnQu9Cw0LzQuCcsXG4gICAgZGVsZXRlRmlsZTogJ9GD0LTQsNC70Y/RgtGMJyxcbiAgICBjYW5jZWw6ICfQvtGC0LzQtdC90LjRgtGMJyxcbiAgICB0cnlBZ2FpbjogJ9C/0L7Qv9GA0L7QsdGD0LnRgtC1INC10YnQtSDRgNCw0LcnLFxuICAgIHN0YXJ0U2VuZGluZzogJ9Cd0LDRh9Cw0YLRjCDQt9Cw0LPRgNGD0LfQutGDJyxcbiAgICBkcmFnRmlsZXNIZXJlOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YTQsNC50LvRiyDRgdGO0LTQsCcsXG4gICAgZHJhZ0ZvbGRlcnNIZXJlOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YHRjtC00LAg0L/QsNC/0LrQuCcsXG4gICAgc2VsZWN0RmlsZXNPbkNvbXB1dGVyOiAn0LjQu9C4INCy0YvQsdC10YDQuNGC0LUg0YTQsNC50LvRiyDQvdCwINC60L7QvNC/0YzRjtGC0LXRgNC1JyxcbiAgICBzZWxlY3RGb2xkZXJPbkNvbXB1dGVyOiAn0LjQu9C4INCy0YvQsdC10YDQuNGC0LUg0L/QsNC/0LrRgyDQvdCwINCy0LDRiNC10Lwg0LrQvtC80L/RjNGO0YLQtdGA0LUnLFxuICAgIGRyb3BGaWxlc0hlcmU6ICfQntGB0YLQsNCy0YzRgtC1INGE0LDQudC70Ysg0LfQtNC10YHRjCcsXG4gICAgZHJvcEZvbGRlcnNIZXJlOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YHRjtC00LAg0L/QsNC/0LrQuCcsXG4gICAgaW52YWxpZERyb3BBcmVhOiAnezB9INC90LUg0LHRi9C70Lgg0LLRgdGC0LDQstC70LXQvdGLINCyINC/0YDQsNCy0LjQu9GM0L3QvtC8INC80LXRgdGC0LUuJyxcbiAgICBpbnZhbGlkRmlsZVR5cGU6ICfQndC1INGD0LTQsNC70L7RgdGMINC30LDQs9GA0YPQt9C40YLRjCDRhNCw0LnQu9GLIHswfSwg0YLQsNC6INC60LDQuiDRjdGC0L4g0L3QtdCy0LXRgNC90YvQuSDRgtC40L8g0YTQsNC50LvQsCcsXG4gICAgaW52YWxpZEFtb3VudDogJ07Do28gZm9pIHBvc3PDrXZlbCBjYXJyZWdhciBvcyBhcnF1aXZvcyB7MH0gcG9ycXVlIGVsZXMgZXhjZWRlcmFtIG8gbGltaXRlIGRlIGFycXVpdm9zLicsXG4gICAgaW52YWxpZEZvcm1hdDogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINGE0LDQudC70YsgezB9LCDRgtCw0Log0LrQsNC6INC+0L3QuCDQvdC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGCINGE0L7RgNC80LDRgtGDICjQsNC8KTogezF9LicsXG4gICAgaW52YWxpZFNpemU6ICfQndC1INGD0LTQsNC70L7RgdGMINC30LDQs9GA0YPQt9C40YLRjCDRhNCw0LnQu9GLIHswfSwg0L/QvtGB0LrQvtC70YzQutGDINC+0L3QuCDQvdC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGCINGA0LDQt9GA0LXRiNC10L3QvdC+0LzRgyDRgNCw0LfQvNC10YDRgzog0L7RgiB7MX0g0LTQviB7Mn0uJyxcbiAgICBudW1iZXJPZkZpbGVzQWxsb3dlZDogJ9Cc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQvjogezB9INGE0LDQudC70L7QsicsXG4gICAgYWxsb3dlZEZvcm1hdHM6ICfQpNC+0YDQvNCw0YLRiyDQv9GA0LjQvdGP0YLRizogezB9LicsXG4gICAgYWxsb3dlZEZpbGVTaXplUmFuZ2U6ICfQntCz0YDQsNC90LjRh9C10L3QuNC1INGA0LDQt9C80LXRgNCwINGE0LDQudC70LA6INC+0YIgezB9INC00L4gezF9JyxcbiAgICBtYXhGaWxlU2l6ZUFsbG93ZWQ6ICfQntCz0YDQsNC90LjRh9C10L3QuNC1INGA0LDQt9C80LXRgNCwINGE0LDQudC70LA6INC00L4gezB9JyxcbiAgICBtaW5GaWxlU2l6ZUFsbG93ZWQ6ICfQntCz0YDQsNC90LjRh9C10L3QuNC1INGA0LDQt9C80LXRgNCwINGE0LDQudC70LA6INC90LUg0LzQtdC90LXQtSB7MH0nLFxuICAgIGVycm9yT2NjdXJyZWQ6ICfQn9GA0L7QuNC30L7RiNC70LAg0L7RiNC40LHQutCwLicsXG4gICAgc2VudFdpdGhTdWNjZXNzOiAn0KPRgdC/0LXRiNC90L4g0L7RgtC/0YDQsNCy0LvQtdC90L4nXG4gIH1cbn07XG5cbmNvbnN0IHBvVXBsb2FkRm9ybUZpZWxkRGVmYXVsdCA9ICdmaWxlcyc7XG5cbmNvbnN0IHBvVXBsb2FkTWF4RmlsZVNpemUgPSAzMTQ1NzI4MDsgLy8gMzBNQlxuY29uc3QgcG9VcGxvYWRNaW5GaWxlU2l6ZSA9IDA7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby11cGxvYWRgIHBlcm1pdGUgcXVlIG8gdXN1w6FyaW8gZW52aWUgYXJxdWl2byhzKSBhbyBzZXJ2aWRvciBlIGFjb21wYW5oZSBvIHByb2dyZXNzby5cbiAqIEVzdGUgY29tcG9uZW50ZSB0YW1iw6ltIHBvc3NpYmlsaXRhIGFsZ3VtYXMgY29uZmlndXJhw6fDtWVzIGNvbW86XG4gKiAg4oCTIEVudmlvIGRlIGRpcmV0w7NyaW9zLCBvbmRlIGVsZSBhY2Vzc2EgbyBkaXJldMOzcmlvIHNlbGVjaW9uYWRvIGFzc2ltIGNvbW8gc2V1cyBzdWItZGlyZXTDs3Jpb3M7XG4gKiAgLSBNw7psdGlwbGEgc2VsZcOnw6NvLCBvbmRlIG8gdXN1w6FyaW8gcG9kZSBlbnZpYXIgbWFpcyBkZSB1bSBhcnF1aXZvIGFvIHNlcnZpZG9yLlxuICogIC0gQXV0byBlbnZpbywgb25kZSBvIGFycXVpdm8gw6kgZW52aWFkbyBpbWVkaWF0YW1lbnRlIGFww7NzIGEgc2VsZcOnw6NvIGRvIHVzdcOhcmlvLCBuw6NvIG5lY2Vzc2l0YW5kbyBxdWUgbyB1c3XDoXJpb1xuICogY2xpcXVlIGVtIGVudmlhci5cbiAqICAtIFJlc3RyacOnw7VlcyBkZSBmb3JtYXRvcyBkZSBhcnF1aXZvIGUgdGFtYW5oby5cbiAqICAtIEZ1bsOnw6NvIGRlIHN1Y2Vzc28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gb3MgYXJxdWl2b3MgZm9yZW0gZW52aWFkb3MgY29tIHN1Y2Vzc28uXG4gKiAgLSBGdW7Dp8OjbyBkZSBlcnJvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIGhvdXZlciBlcnJvIG5vIGVudmlvIGRvcyBhcnF1aXZvcy5cbiAqICAtIFBlcm1pdGUgaGFiaWxpdGFyIHVtYSDDoXJlYSBvbmRlIG9zIGFycXVpdm9zIHBvZGVtIHNlciBhcnJhc3RhZG9zLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1VwbG9hZEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcbiAgcHJpdmF0ZSBfZGlyZWN0b3J5PzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ/OiBib29sZWFuO1xuICBwcml2YXRlIF9kcmFnRHJvcD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZmlsZVJlc3RyaWN0aW9ucz86IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucztcbiAgcHJpdmF0ZSBfZm9ybUZpZWxkPzogc3RyaW5nO1xuICBwcml2YXRlIF9oaWRlUmVzdHJpY3Rpb25zSW5mbz86IGJvb2xlYW47XG4gIHByaXZhdGUgX2hpZGVTZWxlY3RCdXR0b24/OiBib29sZWFuO1xuICBwcml2YXRlIF9oaWRlU2VuZEJ1dHRvbj86IGJvb2xlYW47XG4gIHByaXZhdGUgX2lzTXVsdGlwbGU/OiBib29sZWFuO1xuICBwcml2YXRlIF9saXRlcmFscz86IGFueTtcbiAgcHJpdmF0ZSBfcmVxdWlyZWQ/OiBib29sZWFuO1xuXG4gIGFsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmc7XG4gIGN1cnJlbnRGaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPjtcblxuICBjYW5IYW5kbGVEaXJlY3Rvcnk6IGJvb2xlYW47XG4gIG9uTW9kZWxDaGFuZ2U6IGFueTtcbiAgb25Nb2RlbFRvdWNoZWQ6IGFueTtcblxuICBwcml2YXRlIHZhbGlkYXRvckNoYW5nZTogYW55O1xuXG4gIHByb3RlY3RlZCBleHRlbnNpb25Ob3RBbGxvd2VkID0gMDtcbiAgcHJvdGVjdGVkIHF1YW50aXR5Tm90QWxsb3dlZCA9IDA7XG4gIHByb3RlY3RlZCBzaXplTm90QWxsb3dlZCA9IDA7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxuICAgKlxuICAgKiA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLCBhcGVuYXMgbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWF1dG8tZm9jdXMnKSBASW5wdXRCb29sZWFuKCkgYXV0b0ZvY3VzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUGVybWl0ZSBhIHNlbGXDp8OjbyBkZSBkaXJldMOzcmlvcyBjb250ZW5kbyB1bSBvdSBtYWlzIGFycXVpdm9zIHBhcmEgZW52aW8uXG4gICAqXG4gICAqID4gQSBoYWJpbGl0YcOnw6NvIGRlc3RhIHByb3ByaWVkYWRlIHNlIHJlc3RyaW5nZSBhcGVuYXMgw6Agc2VsZcOnw6NvIGRlIGRpcmV0w7NyaW9zLlxuICAgKlxuICAgKiA+IERlZmluacOnw6NvIG7Do28gc3Vwb3J0YWRhIHBlbG8gYnJvd3NlciAqKkludGVybmV0IEV4cGxvcmVyKiosIHRvZGF2aWEgc2Vyw6EgcG9zc8OtdmVsIGEgc2VsZcOnw6NvIGRlIGFycXVpdm9zIHBhZHLDo28uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1kaXJlY3RvcnknKSBzZXQgZGlyZWN0b3J5KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlyZWN0b3J5ID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG5cbiAgICB0aGlzLmNhbkhhbmRsZURpcmVjdG9yeSA9IHRoaXMuX2RpcmVjdG9yeSAmJiAhaXNJRSgpICYmICFpc01vYmlsZSgpO1xuICAgIHRoaXMuc2V0RGlyZWN0b3J5QXR0cmlidXRlKHRoaXMuY2FuSGFuZGxlRGlyZWN0b3J5KTtcbiAgfVxuXG4gIGdldCBkaXJlY3RvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBlbSAqcGl4ZWxzKiBhIGFsdHVyYSBkYSDDoXJlYSBvbmRlIHBvZGVtIHNlciBhcnJhc3RhZG9zIG9zIGFycXVpdm9zLiBBIGFsdHVyYSBtw61uaW1hIGFjZWl0YSDDqSBgMTYwcHhgLlxuICAgKlxuICAgKiA+IEVzdGEgcHJvcHJpZWRhZGUgZnVuY2lvbmEgc29tZW50ZSBzZSBhIHByb3ByaWVkYWRlIGBwLWRyYWctZHJvcGAgZXN0aXZlciBoYWJpbGl0YWRhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgMzIwYFxuICAgKi9cbiAgQElucHV0KCdwLWRyYWctZHJvcC1oZWlnaHQnKSBkcmFnRHJvcEhlaWdodDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV4aWJlIGEgw6FyZWEgb25kZSDDqSBwb3Nzw612ZWwgYXJyYXN0YXIgZSBzZWxlY2lvbmFyIG9zIGFycXVpdm9zLiBRdWFuZG8gZXN0aXZlciBkZWZpbmlkYSwgb21pdGUgbyBib3TDo28gcGFyYSBzZWxlw6fDo28gZGUgYXJxdWl2b3NcbiAgICogYXV0b21hdGljYW1lbnRlLlxuICAgKlxuICAgKiA+IFJlY29tZW5kYW1vcyB1dGlsaXphciBhcGVuYXMgdW0gYHBvLXVwbG9hZGAgY29tIGVzdGEgZnVuY2lvbmFsaWRhZGUgcG9yIHRlbGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1kcmFnLWRyb3AnKSBzZXQgZHJhZ0Ryb3AodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kcmFnRHJvcCA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGRyYWdEcm9wKCkge1xuICAgIHJldHVybiB0aGlzLl9kcmFnRHJvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9jdWx0YSB2aXN1YWxtZW50ZSBhcyBpbmZvcm1hw6fDtWVzIGRlIHJlc3RyacOnw7VlcyBwYXJhIG8gdXBsb2FkLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtaGlkZS1yZXN0cmljdGlvbnMtaW5mbycpIHNldCBoaWRlUmVzdHJpY3Rpb25zSW5mbyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVSZXN0cmljdGlvbnNJbmZvID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgaGlkZVJlc3RyaWN0aW9uc0luZm8oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVSZXN0cmljdGlvbnNJbmZvO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT21pdGUgbyBib3TDo28gZGUgc2VsZcOnw6NvIGRlIGFycXVpdm9zLlxuICAgKlxuICAgKiA+IENhc28gbyB2YWxvciBkZWZpbmlkbyBzZWphIGB0cnVlYCwgY2FiZXLDoSBhbyBkZXNlbnZvbHZlZG9yIGEgcmVzcG9uc2FiaWxpZGFkZVxuICAgKiBwZWxhIGNoYW1hZGEgZG8gbcOpdG9kbyBgc2VsZWN0RmlsZXMoKWAgcGFyYSBzZWxlw6fDo28gZGUgYXJxdWl2b3MuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLXNlbGVjdC1idXR0b24nKSBzZXQgaGlkZVNlbGVjdEJ1dHRvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVTZWxlY3RCdXR0b24gPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuICBnZXQgaGlkZVNlbGVjdEJ1dHRvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZVNlbGVjdEJ1dHRvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9taXRlIG8gYm90w6NvIGRlIGVudmlvIGRlIGFycXVpdm9zLlxuICAgKlxuICAgKiA+IENhc28gbyB2YWxvciBkZWZpbmlkbyBzZWphIGB0cnVlYCwgY2FiZXLDoSBhbyBkZXNlbnZvbHZlZG9yIGEgcmVzcG9uc2FiaWxpZGFkZVxuICAgKiBwZWxhIGNoYW1hZGEgZG8gbcOpdG9kbyBgc2VuZEZpbGVzKClgIHBhcmEgZW52aW8gZG8ocykgYXJxdWl2byhzKSBzZWxlY2lvbmFkbyhzKS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWhpZGUtc2VuZC1idXR0b24nKSBzZXQgaGlkZVNlbmRCdXR0b24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlU2VuZEJ1dHRvbiA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG4gIGdldCBoaWRlU2VuZEJ1dHRvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZVNlbmRCdXR0b247XG4gIH1cblxuICAvKiogUsOzdHVsbyBkbyBjYW1wby4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLXVwbG9hZGAuXG4gICAqXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvVXBsb2FkTGl0ZXJhbHMgPSB7XG4gICAqICAgIGNhbmNlbDogJ0Rlc2lzdGlyJyxcbiAgICogICAgZGVsZXRlRmlsZTogJ0RlbGV0YXInLFxuICAgKiAgfTtcbiAgICpcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjosXG4gICAqICAgIHNlbGVjdEZpbGU6ICdCdXNjYXIgYXJxdWl2bycsXG4gICAqIGBgYFxuICAgKiAgICBzdGFydFNlbmRpbmc6ICdFbnZpYXInXG4gICAqICAgdHJ5QWdhaW46ICdSZWNvbWXDp2FyJyxcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9VcGxvYWRMaXRlcmFscyA9IHtcbiAgICogICAgZGVsZXRlRmlsZTogJ0RlbGV0YXInXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZTpcbiAgICpcbiAgICogYGBgXG4gICAqIDxwby11cGxvYWRcbiAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3BvLXVwbG9hZD5cbiAgICogYGBgXG4gICAqXG4gICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiwgZXMpLlxuICAgKi9cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1VwbG9hZExpdGVyYWxzKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xuICAgICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxuICAgICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXTtcbiAgICB9XG4gIH1cbiAgZ2V0IGxpdGVyYWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCBwb1VwbG9hZExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gIH1cblxuICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xuICBASW5wdXQoJ3AtaGVscCcpIGhlbHA/OiBzdHJpbmc7XG5cbiAgLyoqIFVSTCBxdWUgZGV2ZSBzZXIgZmVpdGEgYSByZXF1aXNpw6fDo28gY29tIG9zIGFycXVpdm9zIHNlbGVjaW9uYWRvcy4gKi9cbiAgQElucHV0KCdwLXVybCcpIHVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgc2VndWUgYSBkZWZpbmnDp8OjbyBkYSBpbnRlcmZhY2UgYFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9uc2AsXG4gICAqIHF1ZSBwb3NzaWJpbGl0YSBkZWZpbmlyIHRhbWFuaG8gbcOheGltby9tw61uaW1vIGUgZXh0ZW5zw6NvIGRvcyBhcnF1aXZvcyBwZXJtaXRpZG9zLlxuICAgKi9cbiAgQElucHV0KCdwLXJlc3RyaWN0aW9ucycpIHNldCBmaWxlUmVzdHJpY3Rpb25zKHJlc3RyaWN0aW9uczogUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zKSB7XG4gICAgdGhpcy5fZmlsZVJlc3RyaWN0aW9ucyA9IHRoaXMuaW5pdFJlc3RyaWN0aW9ucyhyZXN0cmljdGlvbnMpO1xuXG4gICAgdGhpcy5zZXRBbGxvd2VkRXh0ZW5zaW9ucyhyZXN0cmljdGlvbnMpO1xuICB9XG5cbiAgZ2V0IGZpbGVSZXN0cmljdGlvbnMoKTogUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsZVJlc3RyaWN0aW9ucztcbiAgfVxuXG4gIC8qKiBEZWZpbmUgbyB2YWxvciBkbyBhdHJpYnV0byBgbmFtZWAgZG8gY29tcG9uZW50ZS4gKi9cbiAgQElucHV0KCduYW1lJykgbmFtZTogc3RyaW5nID0gJ2ZpbGUnO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE5vbWUgZG8gY2FtcG8gZGUgZm9ybXVsw6FyaW8gcXVlIHNlcsOhIGVudmlhZG8gcGFyYSBvIHNlcnZpw6dvIGluZm9ybWFkbyBuYSBwcm9wcmllZGFkZSBgcC11cmxgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmlsZXNgXG4gICAqL1xuICBASW5wdXQoJ3AtZm9ybS1maWVsZCcpIHNldCBmb3JtRmllbGQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2Zvcm1GaWVsZCA9IHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IHBvVXBsb2FkRm9ybUZpZWxkRGVmYXVsdDtcblxuICAgIHRoaXMuZ2V0VXBsb2FkU2VydmljZSgpLmZvcm1GaWVsZCA9IHRoaXMuZm9ybUZpZWxkO1xuICB9XG5cbiAgZ2V0IGZvcm1GaWVsZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9mb3JtRmllbGQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6EgZGVzYWJpbGl0YWRvLlxuICAgKi9cbiAgQElucHV0KCdwLWRpc2FibGVkJykgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcblxuICAgIHRoaXMudmFsaWRhdGVNb2RlbCh0aGlzLmN1cnJlbnRGaWxlcyk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gZW52aW8gZG8gYXJxdWl2byBzZXLDoSBhdXRvbcOhdGljbyBhbyBzZWxlY2lvbmFyIG8gbWVzbW8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1hdXRvLXVwbG9hZCcpIGF1dG9VcGxvYWQ/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIHBvZGUgc2VsZWNpb25hciBtYWlzIGRlIHVtIGFycXVpdm8uXG4gICAqXG4gICAqID4gU2UgdXRpbGl6YWRhIGEgYHAtZGlyZWN0b3J5YCwgaGFiaWxpdGEtc2UgYXV0b21hdGljYW1lbnRlIGVzdGEgcHJvcHJpZWRhZGUuXG4gICAqL1xuICBASW5wdXQoJ3AtbXVsdGlwbGUnKSBzZXQgaXNNdWx0aXBsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzTXVsdGlwbGUgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBpc011bHRpcGxlKCkge1xuICAgIHJldHVybiB0aGlzLmNhbkhhbmRsZURpcmVjdG9yeSA/IHRydWUgOiB0aGlzLl9pc011bHRpcGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cbiAgICpcbiAgICogPiBOw6NvIHNlcsOhIGV4aWJpZGEgYSBpbmRpY2HDp8OjbyBzZTpcbiAgICogIC0gTyBjYW1wbyBjb250ZXIgYHAtcmVxdWlyZWRgO1xuICAgKiAgLSBOw6NvIHBvc3N1aXIgYHAtaGVscGAgZS9vdSBgcC1sYWJlbGAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1vcHRpb25hbCcpIG9wdGlvbmFsOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBvYnJpZ2F0w7NyaW8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1yZXF1aXJlZCcpIHNldCByZXF1aXJlZChyZXF1aXJlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX3JlcXVpcmVkID0gY29udmVydFRvQm9vbGVhbihyZXF1aXJlZCk7XG5cbiAgICB0aGlzLnZhbGlkYXRlTW9kZWwodGhpcy5jdXJyZW50RmlsZXMpO1xuICB9XG5cbiAgZ2V0IHJlcXVpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXF1aXJlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIG5vIG1vbWVudG8gZGUgcmVhbGl6YXIgbyBlbnZpbyBkbyBhcnF1aXZvLFxuICAgKiBvbmRlIHNlcsOhIHBvc3PDrXZlbCBhZGljaW9uYXIgaW5mb3JtYcOnw7VlcyBhbyBwYXLDom1ldHJvIHF1ZSBzZXLDoSBlbnZpYWRvIG5hIHJlcXVpc2nDp8Ojby5cbiAgICogw4kgcGFzc2FkbyBwb3IgcGFyw6JtZXRybyB1bSBvYmpldG8gY29tIG8gYXJxdWl2byBlIGEgcHJvcGllZGFkZSBkYXRhIG5lc3RhIHByb3ByaWVkYWRlIHBvZGUgc2VyIGluZm9ybWFkbyBhbGd1bSBkYWRvLFxuICAgKiBxdWUgc2Vyw6EgZW52aWFkbyBlbSBjb25qdW50byBjb20gbyBhcnF1aXZvIG5hIHJlcXVpc2nDp8OjbywgcG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiAgIGV2ZW50LmRhdGEgPSB7aWQ6ICdpZCBkbyB1c3VhcmlvJ307XG4gICAqIGBgYFxuICAgKi9cbiAgQE91dHB1dCgncC11cGxvYWQnKSBvblVwbG9hZD86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEV2ZW50byBzZXLDoSBkaXNwYXJhZG8gcXVhbmRvIG9jb3JyZXIgYWxndW0gZXJybyBubyBlbnZpbyBkbyBhcnF1aXZvLlxuICAgKiA+IFBvciBwYXLDom1ldHJvIHNlcsOhIHBhc3NhZG8gbyBvYmpldG8gZG8gcmV0b3JubyBxdWUgw6kgZG8gdGlwbyBgSHR0cEVycm9yUmVzcG9uc2VgLlxuICAgKi9cbiAgQE91dHB1dCgncC1lcnJvcicpIG9uRXJyb3I/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBFdmVudG8gc2Vyw6EgZGlzcGFyYWRvIHF1YW5kbyBvIGVudmlvIGRvIGFycXVpdm8gZm9yIHJlYWxpemFkbyBjb20gc3VjZXNzby5cbiAgICogPiBQb3IgcGFyw6JtZXRybyBzZXLDoSBwYXNzYWRvIG8gb2JqZXRvIGRvIHJldG9ybm8gcXVlIMOpIGRvIHRpcG8gYEh0dHBSZXNwb25zZWAuXG4gICAqL1xuICBAT3V0cHV0KCdwLXN1Y2Nlc3MnKSBvblN1Y2Nlc3M/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8vIEZ1bsOnw6NvIHBhcmEgYXR1YWxpemFyIG8gbmdNb2RlbCBkbyBjb21wb25lbnRlLCBuZWNlc3PDoXJpbyBxdWFuZG8gbsOjbyBmb3IgdXRpbGl6YWRvIGRlbnRybyBkYSAqdGFnKiBgZm9ybWAuXG4gIEBPdXRwdXQoJ25nTW9kZWxDaGFuZ2UnKSBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdXBsb2FkU2VydmljZTogUG9VcGxvYWRTZXJ2aWNlKSB7fVxuXG4gIGFic3RyYWN0IHNlbmRGZWVkYmFjaygpOiB2b2lkO1xuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Nb2RlbFRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLnZhbGlkYXRvckNoYW5nZSA9IGZuO1xuICB9XG5cbiAgdmFsaWRhdGUoYWJzdHJhY3RDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICBpZiAocmVxdWlyZWRGYWlsZWQodGhpcy5yZXF1aXJlZCwgdGhpcy5kaXNhYmxlZCwgYWJzdHJhY3RDb250cm9sLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHtcbiAgICAgICAgICB2YWxpZDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB3cml0ZVZhbHVlKG1vZGVsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAobW9kZWwpIHtcbiAgICAgIGlmICghaXNFcXVhbHModGhpcy5jdXJyZW50RmlsZXMsIG1vZGVsKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRGaWxlcyA9IHRoaXMucGFyc2VGaWxlcyhtb2RlbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEZpbGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpc0V4Y2VlZGVkRmlsZUxpbWl0KGN1cnJlbnRGaWxlc0xlbmd0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuaXNNdWx0aXBsZSAmJlxuICAgICAgdGhpcy5maWxlUmVzdHJpY3Rpb25zICYmXG4gICAgICB0aGlzLmZpbGVSZXN0cmljdGlvbnMubWF4RmlsZXMgPiAwICYmXG4gICAgICB0aGlzLmZpbGVSZXN0cmljdGlvbnMubWF4RmlsZXMgPD0gY3VycmVudEZpbGVzTGVuZ3RoXG4gICAgKTtcbiAgfVxuXG4gIC8vIEZheiBvIHBhcnNlIGRvcyBhcnF1aXZvcyBzZWxlY2lvbmFkb3MgcGFyYSBhcnF1aXZvcyBkbyBmb3JtYXRvIFBvVXBsb2FkRmlsZSBlIGF0dWFsaXphIG9zIGFycXVpdm9zIGNvcnJlbnRlcy5cbiAgcHJvdGVjdGVkIHBhcnNlRmlsZXMoZmlsZXM6IEFycmF5PEZpbGU+KTogQXJyYXk8UG9VcGxvYWRGaWxlPiB7XG4gICAgbGV0IHBvVXBsb2FkRmlsZXM6IEFycmF5PFBvVXBsb2FkRmlsZT4gPSB0aGlzLmN1cnJlbnRGaWxlcyB8fCBbXTtcbiAgICBjb25zdCBmaWxlc0xlbmd0aCA9IGZpbGVzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXNMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuaXNFeGNlZWRlZEZpbGVMaW1pdChwb1VwbG9hZEZpbGVzLmxlbmd0aCkpIHtcbiAgICAgICAgdGhpcy5xdWFudGl0eU5vdEFsbG93ZWQgPSBmaWxlc0xlbmd0aCAtIHRoaXMuZmlsZVJlc3RyaWN0aW9ucy5tYXhGaWxlcztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCBmaWxlID0gbmV3IFBvVXBsb2FkRmlsZShmaWxlc1tpXSk7XG5cbiAgICAgIGlmICh0aGlzLmNoZWNrUmVzdHJpY3Rpb25zKGZpbGUpKSB7XG4gICAgICAgIHBvVXBsb2FkRmlsZXMgPSB0aGlzLmluc2VydEZpbGVJbkZpbGVzKGZpbGUsIHBvVXBsb2FkRmlsZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNlbmRGZWVkYmFjaygpO1xuICAgIHJldHVybiBwb1VwbG9hZEZpbGVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlTW9kZWwobW9kZWw6IGFueSkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRvckNoYW5nZSkge1xuICAgICAgdGhpcy52YWxpZGF0b3JDaGFuZ2UobW9kZWwpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFZlcmlmaWNhIHNlIG8gYXJxdWl2byBlc3TDoSBkZSBhY29yZG8gY29tIGFzIHJlc3RyacOnw7Vlcy5cbiAgcHJpdmF0ZSBjaGVja1Jlc3RyaWN0aW9ucyhmaWxlOiBQb1VwbG9hZEZpbGUpOiBib29sZWFuIHtcbiAgICBjb25zdCByZXN0cmljdGlvbnMgPSB0aGlzLmZpbGVSZXN0cmljdGlvbnM7XG5cbiAgICBpZiAocmVzdHJpY3Rpb25zKSB7XG4gICAgICBjb25zdCBhbGxvd2VkRXh0ZW5zaW9ucyA9IHJlc3RyaWN0aW9ucy5hbGxvd2VkRXh0ZW5zaW9ucztcbiAgICAgIGNvbnN0IG1pbkZpbGVTaXplID0gcmVzdHJpY3Rpb25zLm1pbkZpbGVTaXplO1xuICAgICAgY29uc3QgbWF4RmlsZVNpemUgPSByZXN0cmljdGlvbnMubWF4RmlsZVNpemU7XG5cbiAgICAgIGNvbnN0IGlzQWNjZXB0ID0gYWxsb3dlZEV4dGVuc2lvbnMgPyB0aGlzLmlzQWxsb3dlZEV4dGVuc2lvbihmaWxlLmV4dGVuc2lvbiwgYWxsb3dlZEV4dGVuc2lvbnMpIDogdHJ1ZTtcbiAgICAgIGNvbnN0IGlzQWNjZXB0U2l6ZSA9IGZpbGUuc2l6ZSA+PSBtaW5GaWxlU2l6ZSAmJiBmaWxlLnNpemUgPD0gbWF4RmlsZVNpemU7XG5cbiAgICAgIGlmICghaXNBY2NlcHRTaXplKSB7XG4gICAgICAgIHRoaXMuc2l6ZU5vdEFsbG93ZWQgPSB0aGlzLnNpemVOb3RBbGxvd2VkICsgMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzQWNjZXB0ICYmIGlzQWNjZXB0U2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgZXhpc3RzRmlsZVNhbWVOYW1lKGZpbGU6IFBvVXBsb2FkRmlsZSwgZmlsZXM6IEFycmF5PFBvVXBsb2FkRmlsZT4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmlsZXMuc29tZShjdXJyZW50RmlsZSA9PiBmaWxlLm5hbWUgPT09IGN1cnJlbnRGaWxlLm5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVcGxvYWRTZXJ2aWNlKCk6IFBvVXBsb2FkU2VydmljZSB7XG4gICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmljZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5zZXJ0RmlsZUluRmlsZXMobmV3RmlsZTogUG9VcGxvYWRGaWxlLCBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPikge1xuICAgIGlmICh0aGlzLmV4aXN0c0ZpbGVTYW1lTmFtZShuZXdGaWxlLCBmaWxlcykpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUV4aXN0c0ZpbGVJbkZpbGVzKG5ld0ZpbGUsIGZpbGVzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICBmaWxlcy5wdXNoKG5ld0ZpbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWxlcy5zcGxpY2UoMCwgZmlsZXMubGVuZ3RoLCBuZXdGaWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZXM7XG4gIH1cblxuICBwcml2YXRlIGlzQWxsb3dlZEV4dGVuc2lvbihleHRlbnNpb246IHN0cmluZywgYWxsb3dlZEV4dGVuc2lvbnM6IEFycmF5PHN0cmluZz4gPSBbXSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlzQWxsb3dlZCA9IGFsbG93ZWRFeHRlbnNpb25zLnNvbWUoZXh0ID0+IGV4dC50b0xvd2VyQ2FzZSgpID09PSBleHRlbnNpb24pO1xuICAgIGlmICghaXNBbGxvd2VkKSB7XG4gICAgICB0aGlzLmV4dGVuc2lvbk5vdEFsbG93ZWQgPSB0aGlzLmV4dGVuc2lvbk5vdEFsbG93ZWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gaXNBbGxvd2VkO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRBbGxvd2VkRXh0ZW5zaW9ucyhyZXN0cmljdGlvbnM6IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgX2FsbG93ZWRFeHRlbnNpb25zID0gcmVzdHJpY3Rpb25zLmFsbG93ZWRFeHRlbnNpb25zIHx8IFtdO1xuXG4gICAgdGhpcy5hbGxvd2VkRXh0ZW5zaW9ucyA9IF9hbGxvd2VkRXh0ZW5zaW9ucy5qb2luKCcsJyk7XG4gIH1cblxuICBwcml2YXRlIGluaXRSZXN0cmljdGlvbnMocmVzdHJpY3Rpb25zOiBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnMpOiBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnMge1xuICAgIGlmICghcmVzdHJpY3Rpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWluRmlsZVNpemUgPSByZXN0cmljdGlvbnMubWluRmlsZVNpemUgfHwgcG9VcGxvYWRNaW5GaWxlU2l6ZTtcbiAgICBjb25zdCBtYXhGaWxlU2l6ZSA9IHJlc3RyaWN0aW9ucy5tYXhGaWxlU2l6ZSB8fCBwb1VwbG9hZE1heEZpbGVTaXplO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3RyaWN0aW9ucyxcbiAgICAgIG1heEZpbGVTaXplOiBtYXhGaWxlU2l6ZSxcbiAgICAgIG1pbkZpbGVTaXplOiBtaW5GaWxlU2l6ZVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUV4aXN0c0ZpbGVJbkZpbGVzKG5ld0ZpbGU6IFBvVXBsb2FkRmlsZSwgZmlsZXM6IEFycmF5PFBvVXBsb2FkRmlsZT4pIHtcbiAgICBjb25zdCBmaWxlSW5kZXggPSBmaWxlcy5maW5kSW5kZXgoXG4gICAgICBjdXJyZW50RmlsZSA9PiBuZXdGaWxlLm5hbWUgPT09IGN1cnJlbnRGaWxlLm5hbWUgJiYgY3VycmVudEZpbGUuc3RhdHVzICE9PSBQb1VwbG9hZFN0YXR1cy5VcGxvYWRlZFxuICAgICk7XG5cbiAgICBpZiAoZmlsZUluZGV4ICE9PSAtMSkge1xuICAgICAgZmlsZXMuc3BsaWNlKGZpbGVJbmRleCwgMSwgbmV3RmlsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVzO1xuICB9XG5cbiAgYWJzdHJhY3Qgc2V0RGlyZWN0b3J5QXR0cmlidXRlKHZhbHVlOiBib29sZWFuKTtcbn1cbiJdfQ==