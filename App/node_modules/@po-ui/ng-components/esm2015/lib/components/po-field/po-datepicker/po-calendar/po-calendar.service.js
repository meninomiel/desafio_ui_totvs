import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
let PoCalendarService = class PoCalendarService {
    constructor() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
};
PoCalendarService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], PoCalendarService);
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tZGF0ZXBpY2tlci9wby1jYWxlbmRhci9wby1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRzNELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBRzVCO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBUztRQUNyQixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLGVBQW9CLElBQUksRUFBRSxnQkFBcUIsSUFBSTtRQUNuRixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLEVBQUU7WUFDeEQsTUFBTSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUNsRDtRQUVELE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksR0FBZSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEMsR0FBRztZQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNsQztZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELElBQUksR0FBRyxFQUFFLENBQUM7U0FDWCxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBUyxFQUFFLEtBQVU7UUFDN0IsTUFBTSxZQUFZLEdBQUcsVUFBVSxJQUFTO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGLENBQUE7QUE3Q1ksaUJBQWlCO0lBRDdCLFVBQVUsRUFBRTs7R0FDQSxpQkFBaUIsQ0E2QzdCO1NBN0NZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgc2V0WWVhckZyb20wVG8xMDAgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgZmlyc3RXZWVrRGF5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5maXJzdFdlZWtEYXkgPSAwOyAvLyAwID0gc3VuZGF5XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSB0aGlzLmZpcnN0V2Vla0RheSkge1xuICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnREYXRlO1xuICB9XG5cbiAgbW9udGhEYXRlcyh5ZWFyOiBhbnksIG1vbnRoOiBhbnksIGRheUZvcm1hdHRlcjogYW55ID0gbnVsbCwgd2Vla0Zvcm1hdHRlcjogYW55ID0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgbW9udGggIT09ICdudW1iZXInIHx8IG1vbnRoIDwgMCB8fCBtb250aCA+IDExKSB7XG4gICAgICB0aHJvdyBFcnJvcignbW9udGggbXVzdCBiZSBhIG51bWJlciAoSmFuIGlzIDApJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2Vla3M6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgd2VlazogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcbiAgICBzZXRZZWFyRnJvbTBUbzEwMChkYXRlLCB5ZWFyKTtcbiAgICBkYXRlID0gdGhpcy53ZWVrU3RhcnREYXRlKGRhdGUpO1xuXG4gICAgZG8ge1xuICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICB3ZWVrLnB1c2goZGF5Rm9ybWF0dGVyID8gZGF5Rm9ybWF0dGVyKGRhdGUpIDogZGF0ZSk7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgd2Vla3MucHVzaCh3ZWVrRm9ybWF0dGVyID8gd2Vla0Zvcm1hdHRlcih3ZWVrKSA6IHdlZWspO1xuICAgICAgd2VlayA9IFtdO1xuICAgIH0gd2hpbGUgKGRhdGUuZ2V0TW9udGgoKSA8PSBtb250aCAmJiBkYXRlLmdldEZ1bGxZZWFyKCkgPT09IHllYXIpO1xuICAgIHJldHVybiB3ZWVrcztcbiAgfVxuXG4gIG1vbnRoRGF5cyh5ZWFyOiBhbnksIG1vbnRoOiBhbnkpIHtcbiAgICBjb25zdCBnZXREYXlPclplcm8gPSBmdW5jdGlvbiAoZGF0ZTogYW55KSB7XG4gICAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSBtb250aCA/IGRhdGUgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMubW9udGhEYXRlcyh5ZWFyLCBtb250aCwgZ2V0RGF5T3JaZXJvKTtcbiAgfVxufVxuIl19