import { __decorate, __metadata } from "tslib";
import { AfterViewInit, ElementRef, HostListener, ViewChild, Directive } from '@angular/core';
import { PoInputBaseComponent } from '../po-input/po-input-base.component';
/* tslint:disable:directive-class-suffix */
let PoInputGeneric = class PoInputGeneric extends PoInputBaseComponent {
    constructor(el) {
        super();
        this.type = 'text';
        this.el = el;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    ngAfterViewInit() {
        this.afterViewInit();
    }
    afterViewInit() {
        this.verifyAutoFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    onKeydown(e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    }
    onKeyup(e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    }
    eventOnInput(e) {
        let value = '';
        if (!this.mask) {
            value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
        }
        else {
            this.objMask.blur(e);
            this.inputEl.nativeElement.value = this.objMask.valueToInput;
            value = this.objMask.valueToModel;
        }
        this.callOnChange(value);
    }
    validMaxLength(maxlength, value) {
        return (maxlength || maxlength === 0) && value.length > maxlength
            ? value.toString().substring(0, maxlength)
            : value;
    }
    eventOnFocus(e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur(e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    eventOnClick(e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    validateClassesForPattern() {
        const value = this.getScreenValue();
        const element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    }
    verifyPattern(pattern, value) {
        return new RegExp(pattern).test(value);
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    writeValueModel(value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    }
    getScreenValue() {
        const screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
        if (this.type === 'number') {
            const parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    }
};
PoInputGeneric.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ViewChild('inp', { read: ElementRef, static: true }),
    __metadata("design:type", ElementRef)
], PoInputGeneric.prototype, "inputEl", void 0);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PoInputGeneric.prototype, "onKeydown", null);
__decorate([
    HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PoInputGeneric.prototype, "onKeyup", null);
PoInputGeneric = __decorate([
    Directive(),
    __metadata("design:paramtypes", [ElementRef])
], PoInputGeneric);
export { PoInputGeneric };
//# sourceMappingURL=data:application/json;base64,