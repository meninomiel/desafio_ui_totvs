import { __decorate, __metadata } from "tslib";
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
let PoComboFilterService = class PoComboFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    get url() {
        return this._url;
    }
    getFilteredData(param, filterParams) {
        const value = param.value;
        const filterParamsValidated = validateObjectType(filterParams);
        const params = Object.assign(Object.assign({}, filterParamsValidated), { filter: value });
        return this.http
            .get(`${this.url}`, { responseType: 'json', params: params })
            .pipe(map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            return items.map(item => {
                return this.parseToComboOption(item);
            });
        }
        return [];
    }
    parseToComboOption(item) {
        if (item && item[this.fieldValue]) {
            const label = item[this.fieldLabel];
            const value = item[this.fieldValue];
            return { label, value };
        }
    }
};
PoComboFilterService.ctorParameters = () => [
    { type: HttpClient }
];
PoComboFilterService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], PoComboFilterService);
export { PoComboFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNvbWJvL3BvLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpEOzs7Ozs7R0FNRztBQUVILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBVS9CLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFQcEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUM3QixlQUFVLEdBQVcsT0FBTyxDQUFDO0lBTVUsQ0FBQztJQUp4QyxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUlELGVBQWUsQ0FBQyxLQUFVLEVBQUUsWUFBa0I7UUFDNUMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUMxQixNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9ELE1BQU0sTUFBTSxtQ0FBUSxxQkFBcUIsS0FBRSxNQUFNLEVBQUUsS0FBSyxHQUFFLENBQUM7UUFFM0QsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQzVELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBc0IsRUFBRSxZQUFrQjtRQUN6RCxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUM7YUFDOUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEdBQVcsRUFBRSxVQUFrQixFQUFFLFVBQWtCO1FBQ2xFLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxLQUFpQjtRQUMvQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUE3QzJCLFVBQVU7O0FBVnpCLG9CQUFvQjtJQURoQyxVQUFVLEVBQUU7cUNBV2UsVUFBVTtHQVZ6QixvQkFBb0IsQ0F1RGhDO1NBdkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgUG9Db21ib0ZpbHRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tYm9PcHRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tY29tYm8tb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1Jlc3BvbnNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXJlc3BvbnNlLmludGVyZmFjZSc7XG5pbXBvcnQgeyB2YWxpZGF0ZU9iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1jb21iby5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ29tYm9GaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Db21ib0ZpbHRlciB7XG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuXG4gIGZpZWxkTGFiZWw6IHN0cmluZyA9ICdsYWJlbCc7XG4gIGZpZWxkVmFsdWU6IHN0cmluZyA9ICd2YWx1ZSc7XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0RmlsdGVyZWREYXRhKHBhcmFtOiBhbnksIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8QXJyYXk8UG9Db21ib09wdGlvbj4+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtLnZhbHVlO1xuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xuXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5maWx0ZXJQYXJhbXNWYWxpZGF0ZWQsIGZpbHRlcjogdmFsdWUgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQoYCR7dGhpcy51cmx9YCwgeyByZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zOiBwYXJhbXMgfSlcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IFBvUmVzcG9uc2UpID0+IHRoaXMucGFyc2VUb0FycmF5Q29tYm9PcHRpb24ocmVzcG9uc2UuaXRlbXMpKSk7XG4gIH1cblxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8UG9Db21ib09wdGlvbj4ge1xuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IHBhcmFtczogZmlsdGVyUGFyYW1zVmFsaWRhdGVkIH0pXG4gICAgICAucGlwZShtYXAoaXRlbSA9PiB0aGlzLnBhcnNlVG9Db21ib09wdGlvbihpdGVtKSkpO1xuICB9XG5cbiAgY29uZmlnUHJvcGVydGllcyh1cmw6IHN0cmluZywgZmllbGRMYWJlbDogc3RyaW5nLCBmaWVsZFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5maWVsZExhYmVsID0gZmllbGRMYWJlbDtcbiAgICB0aGlzLmZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVRvQXJyYXlDb21ib09wdGlvbihpdGVtczogQXJyYXk8YW55Pik6IEFycmF5PFBvQ29tYm9PcHRpb24+IHtcbiAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVRvQ29tYm9PcHRpb24oaXRlbTogYW55KTogUG9Db21ib09wdGlvbiB7XG4gICAgaWYgKGl0ZW0gJiYgaXRlbVt0aGlzLmZpZWxkVmFsdWVdKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IGl0ZW1bdGhpcy5maWVsZExhYmVsXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXRlbVt0aGlzLmZpZWxkVmFsdWVdO1xuXG4gICAgICByZXR1cm4geyBsYWJlbCwgdmFsdWUgfTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==