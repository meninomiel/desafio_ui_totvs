(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/animations'), require('@angular/router'), require('@angular/common/http'), require('@angular/forms'), require('uuid'), require('@angular/platform-browser'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@po-ui/ng-components', ['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/animations', '@angular/router', '@angular/common/http', '@angular/forms', 'uuid', '@angular/platform-browser', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['po-ui'] = global['po-ui'] || {}, global['po-ui']['ng-components'] = {}), global.ng.core, global.ng.common, global.rxjs, global.ng.animations, global.ng.router, global.ng.common.http, global.ng.forms, global.uuid$1, global.ng.platformBrowser, global.rxjs.operators));
}(this, (function (exports, core, common, rxjs, animations, router, http, forms, uuid$1, platformBrowser, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @description
     *
     * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
     * ao clicar no título de cada item.
     *
     * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
     * como no exemplo abaixo:
     *
     * ```
     * <po-accordion>
     *   <po-accordion-item p-label="PO Accordion 1">
     *      Accordion 1
     *   </po-accordion-item>
     *
     *   <po-accordion-item p-label="PO Accordion 2">
     *      Accordion 2
     *   </po-accordion-item>
     * </po-accordion>
     * ```
     *
     * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
     *
     * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
     * acesse a [documentação do PoAccordionItem](/documentation/po-accordion-item).
     */
    var PoAccordionBaseComponent = /** @class */ (function () {
        function PoAccordionBaseComponent() {
        }
        return PoAccordionBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço para poder notificar o componente `po-accordion` quando um `po-accordion-item` for
     * expandido/colapsado.
     */
    var PoAccordionService = /** @class */ (function () {
        function PoAccordionService() {
            this.subjectChild = new rxjs.Subject();
        }
        // Recebe o accordionItem
        PoAccordionService.prototype.receiveFromChildAccordionClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Envia accordionItem colapsado/expadido do accordion
        PoAccordionService.prototype.sendToParentAccordionItemClicked = function (accordionItem) {
            this.subjectChild.next(accordionItem);
        };
        PoAccordionService = __decorate([
            core.Injectable()
        ], PoAccordionService);
        return PoAccordionService;
    }());

    /**
     * @description
     *
     * Componente utilizado para renderizar os itens do `po-accordion`.
     *
     * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
     * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
     *
     * ```
     * <po-accordion>
     *   <po-accordion-item p-label="PO Accordion 1" #item1>
     *      Accordion 1
     *   </po-accordion-item>
     *
     *   <po-accordion-item p-label="PO Accordion 2">
     *      Accordion 2
     *   </po-accordion-item>
     * </po-accordion>
     * ```
     *
     * e no typescript pode-se utilizar o `@ViewChild`:
     *
     * ```
     *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
     *
     *  ngAfterContentInit() {
     *    // ou utilizar o método collapse()
     *    this.item1.expand();
     *  }
     * ```
     */
    var PoAccordionItemComponent = /** @class */ (function () {
        function PoAccordionItemComponent(accordionService) {
            this.accordionService = accordionService;
        }
        /**
         * Método para colapsar o `po-accordion-item`.
         */
        PoAccordionItemComponent.prototype.collapse = function () {
            this.expanded = false;
            this.accordionService.sendToParentAccordionItemClicked(this);
        };
        /**
         * Método para expandir o `po-accordion-item`.
         */
        PoAccordionItemComponent.prototype.expand = function () {
            this.expanded = true;
            this.accordionService.sendToParentAccordionItemClicked(this);
        };
        PoAccordionItemComponent.ctorParameters = function () { return [
            { type: PoAccordionService }
        ]; };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoAccordionItemComponent.prototype, "label", void 0);
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], PoAccordionItemComponent.prototype, "templateRef", void 0);
        PoAccordionItemComponent = __decorate([
            core.Component({
                selector: 'po-accordion-item',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [PoAccordionService])
        ], PoAccordionItemComponent);
        return PoAccordionItemComponent;
    }());

    /**
     * @docsExtends PoAccordionBaseComponent
     *
     * @example
     *
     * <example name="po-accordion-basic" title="PO Accordion Basic" >
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.html"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.ts"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-accordion-labs" title="PO Accordion Labs" >
     *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.html"> </file>
     *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-accordion-faq" title="PO Accordion - FAQs" >
     *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.html"> </file>
     *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.ts"> </file>
     * </example>
     */
    var PoAccordionComponent = /** @class */ (function (_super) {
        __extends(PoAccordionComponent, _super);
        function PoAccordionComponent(accordionService) {
            var _this = _super.call(this) || this;
            _this.accordionService = accordionService;
            _this.receiveFromChildAccordionSubscription();
            return _this;
        }
        PoAccordionComponent.prototype.ngOnDestroy = function () {
            this.accordionServiceSubscription.unsubscribe();
        };
        PoAccordionComponent.prototype.headerToggle = function (event, poAccordionItem) {
            poAccordionItem.expanded = event;
            this.toggle(poAccordionItem);
        };
        PoAccordionComponent.prototype.receiveFromChildAccordionSubscription = function () {
            var _this = this;
            this.accordionServiceSubscription = this.accordionService
                .receiveFromChildAccordionClicked()
                .subscribe(function (poAccordionItem) { return _this.toggle(poAccordionItem); });
        };
        PoAccordionComponent.prototype.toggle = function (poAccordionItem) {
            var isCurrentAccordionCollapsed = !poAccordionItem.expanded;
            if (isCurrentAccordionCollapsed) {
                this.expandedActiveAccordionItem = null;
                return;
            }
            if (this.expandedActiveAccordionItem) {
                this.expandedActiveAccordionItem.collapse();
            }
            this.expandedActiveAccordionItem = poAccordionItem;
        };
        PoAccordionComponent.ctorParameters = function () { return [
            { type: PoAccordionService }
        ]; };
        __decorate([
            core.ContentChildren(PoAccordionItemComponent),
            __metadata("design:type", core.QueryList)
        ], PoAccordionComponent.prototype, "poAccordionItems", void 0);
        PoAccordionComponent = __decorate([
            core.Component({
                selector: 'po-accordion',
                template: "<div class=\"po-accordion po-container po-container-no-padding\">\n  <section\n    *ngFor=\"let poAccordionItem of poAccordionItems\"\n    class=\"po-accordion-item\"\n    [class.po-accordion-item-active]=\"poAccordionItem.expanded\"\n  >\n    <po-accordion-item-header\n      [p-expanded]=\"poAccordionItem.expanded\"\n      [p-label]=\"poAccordionItem.label\"\n      (p-toggle)=\"headerToggle($event, poAccordionItem)\"\n    >\n    </po-accordion-item-header>\n\n    <po-accordion-item-body [p-expanded]=\"poAccordionItem.expanded\">\n      <ng-container *ngTemplateOutlet=\"poAccordionItem.templateRef\"></ng-container>\n    </po-accordion-item-body>\n  </section>\n</div>\n",
                providers: [PoAccordionService]
            }),
            __metadata("design:paramtypes", [PoAccordionService])
        ], PoAccordionComponent);
        return PoAccordionComponent;
    }(PoAccordionBaseComponent));

    var PoAccordionItemBodyComponent = /** @class */ (function () {
        function PoAccordionItemBodyComponent() {
            this.expanded = false;
        }
        __decorate([
            core.Input('p-expanded'),
            __metadata("design:type", Boolean)
        ], PoAccordionItemBodyComponent.prototype, "expanded", void 0);
        PoAccordionItemBodyComponent = __decorate([
            core.Component({
                selector: 'po-accordion-item-body',
                template: "<div class=\"po-accordion-item-body\" *ngIf=\"expanded\" @toggleBody>\n  <div class=\"po-accordion-item-body-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                animations: [
                    animations.trigger('toggleBody', [
                        animations.transition('* => void', [animations.style({ height: '*' }), animations.animate(200, animations.style({ height: 0 }))]),
                        animations.transition('void => *', [animations.style({ height: '0' }), animations.animate(200, animations.style({ height: '*' }))])
                    ])
                ]
            })
        ], PoAccordionItemBodyComponent);
        return PoAccordionItemBodyComponent;
    }());

    var PoAccordionItemHeaderComponent = /** @class */ (function () {
        function PoAccordionItemHeaderComponent() {
            this.expanded = false;
            this.toggle = new core.EventEmitter();
        }
        PoAccordionItemHeaderComponent.prototype.onClick = function () {
            this.expanded = !this.expanded;
            this.toggle.emit(this.expanded);
        };
        __decorate([
            core.Input('p-expanded'),
            __metadata("design:type", Boolean)
        ], PoAccordionItemHeaderComponent.prototype, "expanded", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoAccordionItemHeaderComponent.prototype, "label", void 0);
        __decorate([
            core.Output('p-toggle'),
            __metadata("design:type", Object)
        ], PoAccordionItemHeaderComponent.prototype, "toggle", void 0);
        PoAccordionItemHeaderComponent = __decorate([
            core.Component({
                selector: 'po-accordion-item-header',
                template: "<header class=\"po-accordion-item-header\">\n  <button class=\"po-accordion-item-header-button po-clickable\" (click)=\"onClick()\">\n    <div class=\"po-text-ellipsis po-accordion-item-header-title\">{{ label }}</div>\n    <span #icon class=\"po-icon po-accordion-item-header-icon po-icon-arrow-down\"> </span>\n  </button>\n</header>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoAccordionItemHeaderComponent);
        return PoAccordionItemHeaderComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-accordion`.
     *
     * > Para o correto funcionamento do componente `po-accordion`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoAccordionModule = /** @class */ (function () {
        function PoAccordionModule() {
        }
        PoAccordionModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [
                    PoAccordionComponent,
                    PoAccordionItemBodyComponent,
                    PoAccordionItemComponent,
                    PoAccordionItemHeaderComponent
                ],
                exports: [PoAccordionComponent, PoAccordionItemComponent]
            })
        ], PoAccordionModule);
        return PoAccordionModule;
    }());

    var PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
    var PO_AVATAR_SIZE_DEFAULT = 'md';
    /**
     * @description
     *
     * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
     * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
     *
     * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
     * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
     */
    var PoAvatarBaseComponent = /** @class */ (function () {
        function PoAvatarBaseComponent() {
            this._size = 'md';
        }
        Object.defineProperty(PoAvatarBaseComponent.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * @optional
             *
             * @description
             *
             * Tamanho de exibição do componente.
             *
             * Valores válidos:
             *  - `xs` (24x24)
             *  - `sm` (32x32)
             *  - `md` (64x64)
             *  - `lg` (96x96)
             *  - `xl` (144x144)
             *
             * @default `md`
             */
            set: function (value) {
                this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-src'),
            __metadata("design:type", String)
        ], PoAvatarBaseComponent.prototype, "src", void 0);
        __decorate([
            core.Input('p-size'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoAvatarBaseComponent.prototype, "size", null);
        PoAvatarBaseComponent = __decorate([
            core.Directive()
        ], PoAvatarBaseComponent);
        return PoAvatarBaseComponent;
    }());

    /**
     * @docsExtends PoAvatarBaseComponent
     *
     * @example
     *
     * <example name="po-avatar-basic" title="PO Avatar Basic" >
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-avatar-labs" title="PO Avatar Labs" >
     *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
     *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-avatar-business-card" title="PO Avatar - Business Card" >
     *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
     *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
     * </example>
     */
    var PoAvatarComponent = /** @class */ (function (_super) {
        __extends(PoAvatarComponent, _super);
        function PoAvatarComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoAvatarComponent.prototype.ngOnInit = function () {
            if (!this.src) {
                this.src = undefined;
            }
        };
        PoAvatarComponent.prototype.onError = function () {
            this.src = undefined;
        };
        PoAvatarComponent = __decorate([
            core.Component({
                selector: 'po-avatar',
                template: "<div class=\"po-avatar po-avatar-{{ size }}\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" (error)=\"onError()\" />\n</ng-template>\n\n<ng-template #defaultIcon>\n  <span class=\"po-icon po-icon-user po-avatar-default-icon\"></span>\n</ng-template>\n"
            })
        ], PoAvatarComponent);
        return PoAvatarComponent;
    }(PoAvatarBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-avatar.
     */
    var PoAvatarModule = /** @class */ (function () {
        function PoAvatarModule() {
        }
        PoAvatarModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoAvatarComponent],
                exports: [PoAvatarComponent]
            })
        ], PoAvatarModule);
        return PoAvatarModule;
    }());

    /**
     * @description
     *
     * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
     * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
     *
     * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
     * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
     *
     * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
     * favoritar a URL.
     *
     * Havendo necessidade de incluir parâmetros na requisição do serviço,
     * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
     */
    var PoBreadcrumbBaseComponent = /** @class */ (function () {
        function PoBreadcrumbBaseComponent() {
            this.itemsView = [];
            this._items = [];
        }
        Object.defineProperty(PoBreadcrumbBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens do _breadcrumb_.
             *
             * **Exemplo:**
             * ```
             * { label: 'Po Portal', link: 'portal' }
             * ```
             */
            set: function (items) {
                this._items = items;
                this.itemsView = [].concat(items);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-favorite-service'),
            __metadata("design:type", String)
        ], PoBreadcrumbBaseComponent.prototype, "favoriteService", void 0);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoBreadcrumbBaseComponent.prototype, "items", null);
        __decorate([
            core.Input('p-params-service'),
            __metadata("design:type", Object)
        ], PoBreadcrumbBaseComponent.prototype, "paramsService", void 0);
        PoBreadcrumbBaseComponent = __decorate([
            core.Directive()
        ], PoBreadcrumbBaseComponent);
        return PoBreadcrumbBaseComponent;
    }());

    /**
     * @docsExtends PoBreadcrumbBaseComponent
     *
     * @example
     *
     * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
     *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
     *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
     *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
     *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
     * </example>
     */
    var PoBreadcrumbComponent = /** @class */ (function (_super) {
        __extends(PoBreadcrumbComponent, _super);
        function PoBreadcrumbComponent(differs, element, renderer) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.renderer = renderer;
            _this.showDropdown = false;
            _this.showDropdownToggle = false;
            _this._breadcrumbItemsLenght = 0;
            _this.calculatedElement = false;
            _this.hiddenWithoutResize = false;
            _this.initialized = false;
            _this.wasClickedonDropdown = function (event) {
                var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
                if (clickedOutIconDropdown) {
                    _this.showDropdown = false;
                    _this.removeClickoutListener();
                }
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoBreadcrumbComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
            this.initializeResizeListener();
        };
        PoBreadcrumbComponent.prototype.ngDoCheck = function () {
            var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
                this.initBreadcrumbSize();
            }
            if (this.hiddenWithoutResize) {
                this.debounceResize();
                this.hiddenWithoutResize = false;
            }
            this.checkChangeOnItems();
        };
        PoBreadcrumbComponent.prototype.ngOnDestroy = function () {
            this.removeClickoutListener();
            this.removeResizeListener();
        };
        PoBreadcrumbComponent.prototype.toggleDropdown = function () {
            this.showDropdown = !this.showDropdown;
            this.initializeClickoutListener();
        };
        PoBreadcrumbComponent.prototype.checkClickOutElement = function (event, element) {
            return element && !element.nativeElement.contains(event.target);
        };
        PoBreadcrumbComponent.prototype.checkChangeOnItems = function () {
            if (this.differ) {
                var changes = this.differ.diff(this.items);
                if (changes) {
                    this.calcBreadcrumbItemsWidth();
                    this.calculatedElement = false;
                }
            }
        };
        PoBreadcrumbComponent.prototype.calcBreadcrumb = function () {
            var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
            var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
            if (breadcrumb <= this._breadcrumbItemsLenght) {
                this.enableBreadcrumbResponsive();
            }
            else {
                this.disableBreadcrumbResponsive();
            }
        };
        PoBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = function () {
            return this.favoriteService
                ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
                : 0;
        };
        PoBreadcrumbComponent.prototype.getBreadcrumbWidth = function (breadcrumbFavorite) {
            return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
        };
        PoBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = function () {
            var breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
            this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
                .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
                .reduce(function (a, b) { return a + b; }, 16);
        };
        PoBreadcrumbComponent.prototype.enableBreadcrumbResponsive = function () {
            this.showDropdownToggle = true;
            this.itemsView = this.items.slice(-2);
            this.dropdownItems = this.items.slice(0, -2).reverse();
        };
        PoBreadcrumbComponent.prototype.disableBreadcrumbResponsive = function () {
            this.showDropdownToggle = false;
            this.itemsView = [].concat(this.items);
            this.showDropdown = false;
        };
        PoBreadcrumbComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                if (_this.calculatedElement &&
                    !_this.hiddenWithoutResize &&
                    _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                    _this.hiddenWithoutResize = true;
                }
                else {
                    _this.calcBreadcrumb();
                }
            }, 50);
        };
        PoBreadcrumbComponent.prototype.initBreadcrumbSize = function () {
            this.calcBreadcrumbItemsWidth();
            this.calcBreadcrumb();
            this.calculatedElement = true;
        };
        PoBreadcrumbComponent.prototype.initializeClickoutListener = function () {
            this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
        };
        PoBreadcrumbComponent.prototype.initializeResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        };
        PoBreadcrumbComponent.prototype.removeClickoutListener = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
        };
        PoBreadcrumbComponent.prototype.removeResizeListener = function () {
            this.resizeListener();
        };
        PoBreadcrumbComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('breadcrumb', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoBreadcrumbComponent.prototype, "breadcrumbElement", void 0);
        __decorate([
            core.ViewChild('dropdownIcon', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoBreadcrumbComponent.prototype, "dropdownIcon", void 0);
        PoBreadcrumbComponent = __decorate([
            core.Component({
                selector: 'po-breadcrumb',
                template: "<div class=\"po-breadcrumb\" #breadcrumb>\n  <ul class=\"po-breadcrumb-items\">\n    <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"po-breadcrumb-item po-clickable\" (click)=\"toggleDropdown()\">\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView; let itemIndex = index\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === itemsView.length - 1\"\n      >\n      </po-breadcrumb-item>\n    </div>\n  </ul>\n\n  <po-breadcrumb-favorite\n    *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\"\n  >\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\" [p-items]=\"dropdownItems\"> </po-breadcrumb-dropdown>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.IterableDiffers, core.ElementRef, core.Renderer2])
        ], PoBreadcrumbComponent);
        return PoBreadcrumbComponent;
    }(PoBreadcrumbBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza o dropdown do po-breadcrumb.
     */
    var PoBreadcrumbDropdownComponent = /** @class */ (function () {
        function PoBreadcrumbDropdownComponent() {
        }
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array)
        ], PoBreadcrumbDropdownComponent.prototype, "items", void 0);
        PoBreadcrumbDropdownComponent = __decorate([
            core.Component({
                selector: 'po-breadcrumb-dropdown',
                template: "<ul class=\"po-breadcrumb-dropdown\">\n  <li class=\"po-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\">\n    {{ item.label }}\n  </li>\n</ul>\n"
            })
        ], PoBreadcrumbDropdownComponent);
        return PoBreadcrumbDropdownComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
     * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
     * objeto deve ser retornado.
     * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
     * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
     * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
     * junto com a requisição.
     *
     */
    var PoBreadcrumbFavoriteService = /** @class */ (function () {
        function PoBreadcrumbFavoriteService(http) {
            this.http = http;
        }
        Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "bodyParams", {
            get: function () {
                return this._bodyParams;
            },
            enumerable: true,
            configurable: true
        });
        PoBreadcrumbFavoriteService.prototype.configService = function (url, params, item) {
            this._url = url;
            this._bodyParams = {
                isFavorite: false,
                url: item.link,
                params: params
            };
        };
        PoBreadcrumbFavoriteService.prototype.sendStatusFavorite = function (status) {
            this.bodyParams['isFavorite'] = status;
            return this.http.post(this.url, this.bodyParams);
        };
        PoBreadcrumbFavoriteService.prototype.getFavorite = function () {
            return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
        };
        PoBreadcrumbFavoriteService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoBreadcrumbFavoriteService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoBreadcrumbFavoriteService);
        return PoBreadcrumbFavoriteService;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza o serviço de favoritar do po-breadcrumb.
     */
    var PoBreadcrumbFavoriteComponent = /** @class */ (function () {
        function PoBreadcrumbFavoriteComponent(service) {
            this.service = service;
            this.favorite = false;
        }
        PoBreadcrumbFavoriteComponent.prototype.ngOnInit = function () {
            this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
            this.getStatusFavorite();
        };
        PoBreadcrumbFavoriteComponent.prototype.ngOnDestroy = function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
            if (this.setSubscription) {
                this.setSubscription.unsubscribe();
            }
        };
        PoBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = function () {
            this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
        };
        PoBreadcrumbFavoriteComponent.prototype.getStatusFavorite = function () {
            var _this = this;
            this.getSubscription = this.service.getFavorite().subscribe(function (result) { return (_this.favorite = result.isFavorite); });
        };
        PoBreadcrumbFavoriteComponent.prototype.setStatusFavorite = function (status) {
            var _this = this;
            this.setSubscription = this.service
                .sendStatusFavorite(status)
                .subscribe(function (result) { return (_this.favorite = result.isFavorite); });
        };
        PoBreadcrumbFavoriteComponent.ctorParameters = function () { return [
            { type: PoBreadcrumbFavoriteService }
        ]; };
        __decorate([
            core.Input('p-favorite-service'),
            __metadata("design:type", String)
        ], PoBreadcrumbFavoriteComponent.prototype, "favoriteService", void 0);
        __decorate([
            core.Input('p-item-active'),
            __metadata("design:type", Object)
        ], PoBreadcrumbFavoriteComponent.prototype, "itemActive", void 0);
        __decorate([
            core.Input('p-params-service'),
            __metadata("design:type", Object)
        ], PoBreadcrumbFavoriteComponent.prototype, "paramsService", void 0);
        PoBreadcrumbFavoriteComponent = __decorate([
            core.Component({
                selector: 'po-breadcrumb-favorite',
                template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\n  <span\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\n  >\n  </span>\n\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span>\n</div>\n",
                providers: [PoBreadcrumbFavoriteService]
            }),
            __metadata("design:paramtypes", [PoBreadcrumbFavoriteService])
        ], PoBreadcrumbFavoriteComponent);
        return PoBreadcrumbFavoriteComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que renderiza cada item do po-breadcrumb.
     */
    var PoBreadcrumbItemComponent = /** @class */ (function () {
        function PoBreadcrumbItemComponent() {
            // Especifica se item é o link ativo.
            this.itemActive = false;
        }
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Function)
        ], PoBreadcrumbItemComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoBreadcrumbItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoBreadcrumbItemComponent.prototype, "link", void 0);
        __decorate([
            core.Input('p-item-active'),
            __metadata("design:type", Boolean)
        ], PoBreadcrumbItemComponent.prototype, "itemActive", void 0);
        PoBreadcrumbItemComponent = __decorate([
            core.Component({
                selector: 'po-breadcrumb-item',
                template: "<li\n  *ngIf=\"!itemActive\"\n  [class.po-breadcrumb-item]=\"link || action\"\n  [class.po-breadcrumb-item-unclickable]=\"!link && !action\"\n>\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"po-breadcrumb-item-unclickable\">\n  <label class=\"po-breadcrumb-label\">{{ label }}</label>\n</li>\n"
            })
        ], PoBreadcrumbItemComponent);
        return PoBreadcrumbItemComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-breadcrumb.
     *
     */
    var PoBreadcrumbModule = /** @class */ (function () {
        function PoBreadcrumbModule() {
        }
        PoBreadcrumbModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule],
                declarations: [
                    PoBreadcrumbComponent,
                    PoBreadcrumbDropdownComponent,
                    PoBreadcrumbFavoriteComponent,
                    PoBreadcrumbItemComponent
                ],
                exports: [PoBreadcrumbComponent]
            })
        ], PoBreadcrumbModule);
        return PoBreadcrumbModule;
    }());

    // Idiomas suportados pelas páginas
    var poLocales = ['pt', 'en', 'es', 'ru'];
    // Idioma padrão
    var poLocaleDefault = 'pt';
    /**
     * @deprecated
     * Utilize o método `getShortBrowserLanguage`.
     *
     * @description
     * Retorna idioma do browser ou o idioma padrão.
     */
    function browserLanguage() {
        return getShortBrowserLanguage();
    }
    /**
     * Converte e formata os bytes em formato mais legível para o usuário.
     *
     * Por exemplo:
     * - 31457280 em 30 MB.
     * - 21474836480 em 20 GB.
     * - 12.5666666 em 12.57 Bytes (duas casas decimais).
     *
     * @param bytes {number} Valor em bytes
     * @param decimals {number} Quantidade de casas decimais que terá após a conversão.
     */
    function formatBytes(bytes, decimals) {
        if (decimals === void 0) { decimals = 2; }
        if (!bytes) {
            return undefined;
        }
        var multiplier = 1024;
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var result = Math.floor(Math.log(bytes) / Math.log(multiplier));
        decimals = decimals < 0 ? 0 : decimals;
        return parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals)) + " " + sizes[result];
    }
    /**
     * Retorna o idioma atual do navegador
     */
    function getBrowserLanguage() {
        // navigator.userLanguage is the value for IE10
        var language = navigator.language || navigator['userLanguage'];
        var shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
    }
    /**
     * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
     *
     * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
     * será retornado a linguagem padrão (poLocaleDefault).
     */
    function getShortBrowserLanguage() {
        return getShortLanguage(getBrowserLanguage());
    }
    /**
     * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * @param language {string} linguagem.
     *
     * @returns sigla do idioma padrão {string}.
     *
     * @default pt
     */
    function getShortLanguage(language) {
        return (language || poLocaleDefault).toLowerCase().substring(0, 2);
    }
    function isLanguage(value) {
        var languageRegex = new RegExp('^[a-z]{2}(-[a-z]{2})?$', 'i');
        return languageRegex.test(value);
    }
    /* istanbul ignore next */
    function reloadCurrentPage() {
        window.location.assign(location.href);
    }
    function convertToBoolean(val) {
        if (typeof val === 'string') {
            val = val.toLowerCase().trim();
            return val === 'true' || val === 'on' || val === '';
        }
        if (typeof val === 'number') {
            return val === 1;
        }
        return !!val;
    }
    function convertToInt(value, valueDefault) {
        var validNumber = parseInt(value, 10);
        var validDefaultValue = parseInt(valueDefault, 10);
        var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
        return validNumber || validNumber === 0 ? validNumber : defaultValue;
    }
    function isTypeof(object, type) {
        return typeof object === type;
    }
    /**
     *
     * @param fn Função que será executada dentro do contexto. Podendo ser o nome da função
     * ou a referência da mesma.
     *
     * @param context Contexto do qual a função será executada.
     */
    function callFunction(fn, context, param) {
        if (isTypeof(fn, 'function')) {
            fn.call(context, param);
        }
        else {
            context[fn](param);
        }
    }
    function convertIsoToDate(value, start, end) {
        if (value) {
            var day = parseInt(value.substring(8, 10), 10);
            var month = parseInt(value.substring(5, 7), 10);
            var year = parseInt(value.substring(0, 4), 10);
            if (start) {
                var date = new Date(year, month - 1, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                return date;
            }
            else if (end) {
                var date = new Date(year, month - 1, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                return date;
            }
            else {
                var milliseconds = Date.parse(value);
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(milliseconds + timezone);
            }
        }
    }
    function convertDateToISODate(date) {
        if (date) {
            var getMonth = date.getMonth() + 1;
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            var year = formatYear(date.getFullYear());
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    function convertDateToISOExtended(date, time) {
        if (date) {
            var getMonth = date.getMonth() + 1;
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            var year = formatYear(date.getFullYear());
            var dateString = date.toString();
            if (time !== null) {
                return year + '-' + month + '-' + day + time;
            }
            else {
                return (year +
                    '-' +
                    month +
                    '-' +
                    day +
                    'T' +
                    dateString.substring(16, 24) +
                    dateString.substring(28, 31) +
                    ':' +
                    dateString.substring(31, 33));
            }
        }
        else {
            return null;
        }
    }
    /**
     * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
     * @param year Ano
     */
    function formatYear(year) {
        if (year >= 1000) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    }
    // Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
    function isIEOrEdge() {
        var userAgent = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(userAgent);
    }
    // Verifica se o navegador em que está sendo usado é Internet Explorer
    function isIE() {
        var userAgent = window.navigator.userAgent;
        return /msie\s|trident/i.test(userAgent);
    }
    // Verifica se o navegador em que está sendo usado é Firefox
    function isFirefox() {
        var userAgent = window.navigator.userAgent;
        return userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    // Verifica qual o dispositivo que está sendo usado
    function isMobile() {
        var userAgent = window.navigator.userAgent;
        return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
    }
    function isEquals(value, comparedValue) {
        return JSON.stringify(value) === JSON.stringify(comparedValue);
    }
    function isKeyCodeEnter(event) {
        return event.keyCode === 13 || event.which === 13;
    }
    /**
     * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
     * @param date Data
     * @param year Ano original
     */
    function setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    function sortOptionsByProperty(options, property) {
        options.sort(function (optionA, optionB) {
            optionA = optionA[property].toString().toLowerCase();
            optionB = optionB[property].toString().toLowerCase();
            if (optionA < optionB) {
                return -1;
            }
            if (optionA > optionB) {
                return 1;
            }
            return 0;
        });
    }
    function removeDuplicatedOptions(list) {
        var _loop_1 = function (i) {
            if (i === 0) {
                return out_i_1 = i, "continue";
            }
            if (list.findIndex(function (op) { return op.value === list[i].value; }) !== i) {
                list.splice(i, 1);
                i--;
            }
            out_i_1 = i;
        };
        var out_i_1;
        for (var i = 0; i < list.length; i++) {
            _loop_1(i);
            i = out_i_1;
        }
    }
    function removeUndefinedAndNullOptions(list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].value === undefined || list[i].value === null) {
                list.splice(i, 1);
                i--;
            }
        }
    }
    function validValue(value) {
        return (value !== null && value !== undefined && value !== '') || value === false;
    }
    function isExternalLink(url) {
        return url ? url.startsWith('http') : false;
    }
    function openExternalLink(url) {
        window.open(url, '_blank');
    }
    function getFormattedLink(link) {
        var formattedLink = '';
        // Retira todos os pontos no começo da URL.
        if (link) {
            formattedLink = link.replace(/^(\.)+/g, '');
        }
        // Verifica se foi utilizado uma rota que não comece com barra.
        if (!formattedLink.startsWith('/')) {
            formattedLink = '/'.concat(formattedLink);
        }
        return formattedLink;
    }
    /**
     * Método responsável por ordenar dois valores.
     *
     * @param leftSide Primeiro valor a ser comparado.
     * @param rightSide Segundo valor a ser comparado.
     * @param ascending Determina se será em ordem ascendente ou descendente.
     */
    function sortValues(leftSide, rightSide, ascending) {
        if (ascending === void 0) { ascending = true; }
        var left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
        var right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
        if (ascending) {
            if (left < right) {
                return -1;
            }
            else if (left > right) {
                return 1;
            }
        }
        else if (ascending === false) {
            if (left < right) {
                return 1;
            }
            else if (left > right) {
                return -1;
            }
        }
        return 0;
    }
    function validateDateRange(date, dateStart, dateEnd) {
        if (dateStart && dateEnd) {
            return date >= dateStart && date <= dateEnd;
        }
        else if (dateStart && !dateEnd) {
            return date >= dateStart;
        }
        else if (!dateStart && dateEnd) {
            return date <= dateEnd;
        }
        else {
            return true;
        }
    }
    function uuid() {
        function hex4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + hex4() + hex4();
    }
    function capitalizeFirstLetter(text) {
        return "" + text.charAt(0).toUpperCase() + text.slice(1);
    }
    /**
     * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
     * origem.
     *
     * Exemplo:
     *
     * ```
     * const people = [
     *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
     *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
     *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapArrayByProperties(people, properties);
     *
     * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
     * ```
     *
     * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
     *
     * ```
     * const customers = [
     *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
     *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
     *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
     *
     * const pattern = mapArrayByProperties(customers, properties);
     * console.log(pattern);
     *
     * // [
     * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
     * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
     * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
     * // ]
     * ```
     *
     * @param items {Array<any>} Array de items original.
     * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @returns Array<any>
     */
    function mapArrayByProperties(items, properties) {
        if (items === void 0) { items = []; }
        if (properties === void 0) { properties = []; }
        return items.map(function (item) { return mapObjectByProperties(item, properties); });
    }
    /**
     * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
     *
     * Exemplo:
     *
     * ```
     * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapObjectByProperties(person, properties);
     *
     * console.log(idAndName); // { id: 1, name: 'Fulano' }
     * ```
     *
     * @param object {Array<any>} Array de items original.
     * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @returns Array<any>
     */
    function mapObjectByProperties(object, properties) {
        if (object === void 0) { object = {}; }
        if (properties === void 0) { properties = []; }
        var getSelectedProperties = function (selectedProperties, property) {
            var _a;
            return (__assign(__assign({}, selectedProperties), (_a = {}, _a[property] = object[property], _a)));
        };
        return properties.reduce(getSelectedProperties, {});
    }
    /**
     * Retorna os valores de um objeto dentro de um array.
     *
     * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
     *
     * @param object Objeto de onde será pego os valores.
     */
    function valuesFromObject(object) {
        if (object === void 0) { object = {}; }
        return Object.keys(object).map(function (property) { return object[property]; });
    }
    /**
     * Converte um arquivo em base64.
     *
     * @param file arquivo que será convertido.
     */
    function convertImageToBase64(file) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () { return resolve(reader.result); };
            /* istanbul ignore next */
            reader.onerror = function (error) { return reject(error); };
        });
    }
    /**
     * Converte um número em decimal baseado na quantidade de casas decimais.
     *
     * Caso o valor seja inválido, será retornado o valor `undefined`.
     * Valores inválidos são: `false`, `NaN`, `strings` que não numéricas, `undefined` e `null`.
     *
     * @param number valor que será convertido
     * @param decimalsPlace quantidade de casas decimais
     */
    function convertNumberToDecimal(number, decimalsPlace) {
        var isValidValue = (number || number === 0) && !isNaN(number);
        var floatValue = isValidValue ? parseFloat(number) : undefined;
        try {
            return parseFloat(floatValue.toFixed(decimalsPlace));
        }
        catch (_a) {
            return floatValue;
        }
    }
    /**
     * Retorna uma copia do objeto sujo, sem as propriedades nulas ou indefinidas.
     * Retorna o objeto sem as propriedades que contém valores nulos ou indefinidos.
     *
     * @param dirtyObject
     */
    function clearObject(dirtyObject) {
        var cleanObject = {};
        Object.keys(dirtyObject).forEach(function (key) {
            if (dirtyObject[key] !== null && dirtyObject[key] !== undefined) {
                cleanObject[key] = dirtyObject[key];
            }
        });
        return cleanObject;
    }
    function validateObjectType(value) {
        return isTypeof(value, 'object') && !Array.isArray(value) ? value : undefined;
    }

    var poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
    var poLocaleKey = 'PO_USER_LOCALE';
    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço responsável por gerenciar as linguagens da aplicação.
     */
    var PoLanguageService = /** @class */ (function () {
        function PoLanguageService() {
        }
        Object.defineProperty(PoLanguageService.prototype, "languageDefault", {
            get: function () {
                return localStorage.getItem(poDefaultLanguage);
            },
            set: function (language) {
                if (language && isLanguage(language)) {
                    localStorage.setItem(poDefaultLanguage, language);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @description
         *
         * Método responsável por retornar o idioma ativo.
         *
         * A busca do idioma será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
         *
         *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
         * na propriedade `language` da interface `PoI18nConfigDefault`.
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
         *
         * **Retorno:** `string` com a sigla do idioma ativo.
         */
        PoLanguageService.prototype.getLanguage = function () {
            var language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
            return language && language.toLowerCase();
        };
        /**
         * @description
         *
         * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
         * do parâmetro `config`.
         *
         * **Retorno:** `string` com a sigla do idioma *default*.
         */
        PoLanguageService.prototype.getLanguageDefault = function () {
            return this.languageDefault;
        };
        /**
         * @description
         *
         * Método responsável por retornar a abreviação do idioma ativo na aplicação.
         *
         * @default `pt`
         *
         * **Retorno:** `string` com a sigla abreviada do idioma ativo.
         */
        PoLanguageService.prototype.getShortLanguage = function () {
            var language = this.getLanguage();
            var shortLanguage = getShortLanguage(language);
            return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
        };
        /**
         * @description
         *
         * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
         *
         * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        PoLanguageService.prototype.setLanguage = function (language) {
            if (!isLanguage(language)) {
                return;
            }
            localStorage.setItem(poLocaleKey, language.toLowerCase());
        };
        /**
         * @description
         *
         * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
         *
         * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        PoLanguageService.prototype.setLanguageDefault = function (language) {
            this.languageDefault = language;
        };
        PoLanguageService.ɵprov = core.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
        PoLanguageService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], PoLanguageService);
        return PoLanguageService;
    }());

    var poLoadingOverlayLiteralsDefault = {
        en: {
            loading: 'Loading'
        },
        es: {
            loading: 'Cargando'
        },
        pt: {
            loading: 'Carregando'
        },
        ru: {
            loading: 'погрузка'
        }
    };
    /**
     *
     * @description
     *
     * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
     * enquanto aguarda a resposta de alguma requisição.
     */
    var PoLoadingOverlayBaseComponent = /** @class */ (function () {
        function PoLoadingOverlayBaseComponent(languageService) {
            this.languageService = languageService;
            this._screenLock = false;
            this.text = this.getTextDefault();
        }
        Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "screenLock", {
            get: function () {
                return this._screenLock;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o *overlay* será aplicado a um *container* ou a página inteira.
             *
             * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
             *
             * ```
             * <div style="position: relative">
             *
             *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
             *  </po-chart>
             *
             *  <po-loading-overlay>
             *  </po-loading-overlay>
             * </div>
             * ```
             *
             * @default `false`
             */
            set: function (screenLock) {
                this._screenLock = convertToBoolean(screenLock);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "text", {
            get: function () {
                return this._text;
            },
            /**
             * @optional
             *
             * @description
             *
             * Texto a ser exibido no componente.
             *
             * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
             *
             * @default `Carregando`
             */
            set: function (value) {
                this._text = value || this.getTextDefault();
            },
            enumerable: true,
            configurable: true
        });
        PoLoadingOverlayBaseComponent.prototype.getTextDefault = function () {
            var language = this.languageService.getShortLanguage();
            return poLoadingOverlayLiteralsDefault[language].loading;
        };
        PoLoadingOverlayBaseComponent.ctorParameters = function () { return [
            { type: PoLanguageService }
        ]; };
        __decorate([
            core.Input('p-screen-lock'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoLoadingOverlayBaseComponent.prototype, "screenLock", null);
        __decorate([
            core.Input('p-text'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoLoadingOverlayBaseComponent.prototype, "text", null);
        PoLoadingOverlayBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoLanguageService])
        ], PoLoadingOverlayBaseComponent);
        return PoLoadingOverlayBaseComponent;
    }());

    /**
     *
     * @docsExtends PoLoadingOverlayBaseComponent
     *
     * @example
     *
     * <example name="po-loading-overlay-basic" title="PO Loading Overlay Basic">
     *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.html"> </file>
     *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-loading-overlay-labs" title="PO Loading Overlay Labs">
     *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.html"> </file>
     *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-loading-overlay-connection-test" title="PO Loading Overlay - Connection Test">
     *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.html"> </file>
     *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.ts"> </file>
     * </example>
     */
    var PoLoadingOverlayComponent = /** @class */ (function (_super) {
        __extends(PoLoadingOverlayComponent, _super);
        function PoLoadingOverlayComponent(changeDetector, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        PoLoadingOverlayComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: PoLanguageService }
        ]; };
        PoLoadingOverlayComponent = __decorate([
            core.Component({
                selector: 'po-loading-overlay',
                template: "<div [class.po-overlay-absolute]=\"!screenLock\" [class.po-overlay-fixed]=\"screenLock\">\n  <po-loading class=\"po-loading-overlay-content\" [p-text]=\"text\"></po-loading>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef, PoLanguageService])
        ], PoLoadingOverlayComponent);
        return PoLoadingOverlayComponent;
    }(PoLoadingOverlayBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que exibe um ícone de carregamento de conteúdo. A cor padrão para ele é a primária conforme o tema utilizado.
     * É possível alterá-la para um tom cinza conforme a necessidade.
     */
    var PoLoadingIconComponent = /** @class */ (function () {
        function PoLoadingIconComponent() {
        }
        Object.defineProperty(PoLoadingIconComponent.prototype, "neutralColor", {
            get: function () {
                return this._neutralColor;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição para cor neutra (cinza) para o ícone de carregamento.
             *
             * @default `false`
             */
            set: function (value) {
                this._neutralColor = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-neutral-color'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoLoadingIconComponent.prototype, "neutralColor", null);
        PoLoadingIconComponent = __decorate([
            core.Component({
                selector: 'po-loading-icon',
                template: "<div class=\"po-loading-icon\" [class.po-loading-icon-neutral-color]=\"neutralColor\">\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-1\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-2\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-3\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-4\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-5\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-6\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-7\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-8\"></span>\n</div>\n"
            })
        ], PoLoadingIconComponent);
        return PoLoadingIconComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
     * ou aguardando a resposta de alguma requisição.
     */
    var PoLoadingBaseComponent = /** @class */ (function () {
        function PoLoadingBaseComponent() {
            /**
             * Texto a ser exibido no componente.
             */
            this.text = 'Carregando';
        }
        __decorate([
            core.Input('p-text'),
            __metadata("design:type", String)
        ], PoLoadingBaseComponent.prototype, "text", void 0);
        PoLoadingBaseComponent = __decorate([
            core.Directive()
        ], PoLoadingBaseComponent);
        return PoLoadingBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoLoadingBaseComponent
     */
    var PoLoadingComponent = /** @class */ (function (_super) {
        __extends(PoLoadingComponent, _super);
        function PoLoadingComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoLoadingComponent = __decorate([
            core.Component({
                selector: 'po-loading',
                template: "<div class=\"po-loading\">\n  <po-loading-icon></po-loading-icon>\n  <span class=\"po-loading-label po-text-ellipsis\" *ngIf=\"text\">{{ text }}</span>\n</div>\n"
            })
        ], PoLoadingComponent);
        return PoLoadingComponent;
    }(PoLoadingBaseComponent));

    /**
     * @description
     *
     * Módulo do serviço `po-language`.
     */
    var PoLanguageModule = /** @class */ (function () {
        function PoLanguageModule() {
        }
        PoLanguageModule = __decorate([
            core.NgModule({
                providers: [PoLanguageService]
            })
        ], PoLanguageModule);
        return PoLanguageModule;
    }());

    /**
     *
     * @description
     *
     * Módulo do componente po-loading-overlay.
     */
    var PoLoadingModule = /** @class */ (function () {
        function PoLoadingModule() {
        }
        PoLoadingModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoLanguageModule],
                declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent],
                exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent]
            })
        ], PoLoadingModule);
        return PoLoadingModule;
    }());

    var PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
    var PO_BUTTON_TYPE_DEFAULT = 'default';
    /**
     * @description
     *
     * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
     *
     * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
     * ação irreversível (`danger`), como a exclusão de um registro.
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `po-button` configurado como `primary` por página.
     * - Para ações irreversíveis use sempre o tipo `danger`.
     */
    var PoButtonBaseComponent = /** @class */ (function () {
        function PoButtonBaseComponent() {
            this._disabled = false;
            this._loading = false;
            this._small = false;
            this._type = 'default';
            /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoButtonBaseComponent.prototype, "loading", {
            get: function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe um ícone de carregamento à esquerda do _label_ do botão.
             *
             * > Quando esta propriedade estiver habilitada, desabilitará o botão.
             *
             * @default `false`
             */
            set: function (value) {
                this._loading = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deixa o botão menor.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o estilo do `po-button`.
             *
             * Valore válidos:
             *  - `default`: estilo padrão do `po-button`.
             *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
             *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
             *  - `link`: o `po-button` recebe o estilo de um link.
             *
             * @default `default`
             */
            set: function (value) {
                this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoButtonBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoButtonBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-loading'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoButtonBaseComponent.prototype, "loading", null);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoButtonBaseComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-small'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoButtonBaseComponent.prototype, "small", null);
        __decorate([
            core.Input('p-type'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoButtonBaseComponent.prototype, "type", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoButtonBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoButtonBaseComponent.prototype, "click", void 0);
        PoButtonBaseComponent = __decorate([
            core.Directive()
        ], PoButtonBaseComponent);
        return PoButtonBaseComponent;
    }());

    /**
     * @docsExtends PoButtonBaseComponent
     *
     * @example
     *
     * <example name="po-button-basic" title="PO Button Basic">
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-button-labs" title="PO Button Labs">
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
     * </example>
     */
    var PoButtonComponent = /** @class */ (function (_super) {
        __extends(PoButtonComponent, _super);
        function PoButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoButtonComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
         *
         * focusButton() {
         *   this.button.focus();
         * }
         * ```
         */
        PoButtonComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.buttonElement.nativeElement.focus();
            }
        };
        PoButtonComponent.prototype.onClick = function () {
            this.click.emit(null);
        };
        __decorate([
            core.ViewChild('button', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoButtonComponent.prototype, "buttonElement", void 0);
        PoButtonComponent = __decorate([
            core.Component({
                selector: 'po-button',
                template: "<button\n  #button\n  class=\"po-button po-text-ellipsis\"\n  type=\"button\"\n  [class.po-button-danger]=\"type === 'danger'\"\n  [class.po-button-link]=\"type === 'link'\"\n  [class.po-button-primary]=\"type === 'primary'\"\n  [class.po-button-sm]=\"small\"\n  [class.po-clickable]=\"type === 'link'\"\n  [disabled]=\"disabled || loading\"\n  (click)=\"onClick()\"\n>\n  <div *ngIf=\"loading\" class=\"po-button-loading-icon\">\n    <po-loading-icon p-neutral-color></po-loading-icon>\n  </div>\n  <span *ngIf=\"icon\" class=\"po-icon {{ icon }}\" aria-hidden=\"true\"></span>\n  <span *ngIf=\"label\" class=\"po-button-label\">{{ label }}</span>\n</button>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoButtonComponent);
        return PoButtonComponent;
    }(PoButtonBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-button.
     */
    var PoButtonModule = /** @class */ (function () {
        function PoButtonModule() {
        }
        PoButtonModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoLoadingModule],
                declarations: [PoButtonComponent],
                exports: [PoButtonComponent]
            })
        ], PoButtonModule);
        return PoButtonModule;
    }());

    // Array de posições.
    var PO_CONTROL_POSITIONS = [
        'right',
        'right-top',
        'right-bottom',
        'top',
        'top-left',
        'top-right',
        'left',
        'left-top',
        'left-bottom',
        'bottom',
        'bottom-left',
        'bottom-right'
    ];

    var CONTENT_MAX_LENGTH = 140;
    var PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
    /**
     * @description
     *
     * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
     * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
     *
     * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
     * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
     *
     * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
     * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
     */
    var PoTooltipBaseDirective = /** @class */ (function () {
        function PoTooltipBaseDirective() {
            this._tooltip = '';
            this._tooltipPosition = 'bottom';
        }
        Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltip", {
            get: function () {
                return this._tooltip;
            },
            /**
             * @description
             *
             * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
             */
            set: function (tooltip) {
                if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                    this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
                }
                else {
                    this._tooltip = tooltip;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltipPosition", {
            get: function () {
                return this._tooltipPosition;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-tooltip acima do componente alvo.
             * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
             *
             * @default bottom
             */
            set: function (position) {
                this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-tooltip'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTooltipBaseDirective.prototype, "tooltip", null);
        __decorate([
            core.Input('p-tooltip-position'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTooltipBaseDirective.prototype, "tooltipPosition", null);
        PoTooltipBaseDirective = __decorate([
            core.Directive()
        ], PoTooltipBaseDirective);
        return PoTooltipBaseDirective;
    }());

    /**
     * @docsPrivate
     * @description
     *
     * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
     * seguintes posições:
     *
     * - `right`: Posiciona o elemento no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o elemento abaixo do componente alvo.
     * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
     * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o elemento acima do componente alvo.
     * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
     * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
     *
     * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
     * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
     */
    var poControlPositionSidesDefault = [
        'bottom',
        'bottom-left',
        'bottom-right',
        'left',
        'left-top',
        'left-bottom',
        'top',
        'top-right',
        'top-left',
        'right',
        'right-bottom',
        'right-top'
    ];
    var PoControlPositionService = /** @class */ (function () {
        function PoControlPositionService() {
            this.differenceDiagonalToWidthArrow = 3;
            this.isSetElementWidth = false;
            // offset da seta em relação ao canto do componente
            this.offsetArrow = 12;
        }
        /**
         * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
         *
         * @param value posição para exibição do elemento
         */
        PoControlPositionService.prototype.adjustPosition = function (value) {
            var position = value || 'bottom';
            this.elementPosition(position);
            this.customPositions && this.customPositions.length
                ? this.adjustCustomPosition(position)
                : this.adjustDefaultPosition(position);
        };
        /**
         * @description Retorna a direção da seta, conforme a posição do elemento.
         */
        PoControlPositionService.prototype.getArrowDirection = function () {
            return this.arrowDirection;
        };
        /**
         * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
         *
         * @param element elemento que será exibido
         * @param elementOffset offSet do elemento
         * @param targetElement elemento de onde deve partir a exibição
         * @param customPositions posições que sobrescreve as posições padrões
         * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
         * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
         */
        PoControlPositionService.prototype.setElements = function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
            if (isSetElementWidth === void 0) { isSetElementWidth = false; }
            if (isCornerAligned === void 0) { isCornerAligned = false; }
            this.element = element instanceof core.ElementRef ? element.nativeElement : element;
            this.targetElement = targetElement instanceof core.ElementRef ? targetElement.nativeElement : targetElement;
            this.elementOffset = elementOffset;
            this.customPositions = customPositions;
            this.isSetElementWidth = isSetElementWidth;
            this.isCornerAligned = isCornerAligned;
        };
        PoControlPositionService.prototype.adjustCustomPosition = function (position) {
            var positionLength = this.customPositions.length;
            var sidesCount = 0;
            while (sidesCount++ < positionLength) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, this.customPositions);
                    this.elementPosition(position);
                }
            }
        };
        PoControlPositionService.prototype.adjustDefaultPosition = function (position) {
            var mainPositions = this.getMainPositions();
            var mainPositionLength = mainPositions.length;
            var mainSidesCount = 0;
            while (mainSidesCount++ < mainPositionLength) {
                var mainPosition = this.getMainPosition(position);
                this.elementPosition(position);
                if (this.overflowMain(mainPosition)) {
                    position = this.nextPosition(mainPosition, mainPositions);
                    continue;
                }
                else if (this.overflowAllSides(position)) {
                    this.verifySubPositions(position);
                    return;
                }
                return;
            }
        };
        PoControlPositionService.prototype.elementPosition = function (position) {
            this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
        };
        PoControlPositionService.prototype.getMainPosition = function (position) {
            return position.indexOf('-') > -1 ? position.substring(0, position.indexOf('-')) : position;
        };
        PoControlPositionService.prototype.getMainPositions = function () {
            var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
            return this.customPositions && this.customPositions.length
                ? this.getMainPositionsByCustomPositions(this.customPositions)
                : defaultMainPositions;
        };
        PoControlPositionService.prototype.getMainPositionsByCustomPositions = function (customPositions) {
            var mainPositions = [];
            var customPositionsLength = customPositions.length;
            for (var i = 0; i < customPositionsLength; i++) {
                var position = customPositions[i];
                var mainPosition = this.getMainPosition(position);
                if (!mainPositions.includes(mainPosition)) {
                    mainPositions.push(mainPosition);
                }
            }
            return mainPositions;
        };
        PoControlPositionService.prototype.getOverflows = function () {
            var sizesAndPositions = this.getSizesAndPositions();
            return {
                right: sizesAndPositions.element.right > sizesAndPositions.window.innerWidth,
                top: sizesAndPositions.element.top <= 0,
                left: sizesAndPositions.element.left <= 0,
                bottom: sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight
            };
        };
        PoControlPositionService.prototype.getSizesAndPositions = function () {
            return {
                window: {
                    scrollY: window.scrollY,
                    scrollX: window.scrollX,
                    innerWidth: window.innerWidth,
                    innerHeight: window.innerHeight
                },
                element: this.element.getBoundingClientRect(),
                target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
            };
        };
        PoControlPositionService.prototype.nextPosition = function (position, positions) {
            if (positions === void 0) { positions = []; }
            var index = positions.indexOf(position);
            var nextIndex = index + 1;
            if (index > -1 && nextIndex < positions.length) {
                return positions[nextIndex];
            }
            else {
                return positions[0];
            }
        };
        PoControlPositionService.prototype.overflowAllSides = function (position) {
            var overflows = this.getOverflows();
            switch (position) {
                case 'top':
                    return overflows.top || overflows.right || overflows.left;
                case 'top-right':
                    return overflows.top || overflows.right;
                case 'top-left':
                    return overflows.top || overflows.left;
                case 'right':
                    return overflows.right || overflows.top || overflows.bottom;
                case 'right-top':
                    return overflows.right || overflows.top;
                case 'right-bottom':
                    return overflows.right || overflows.bottom;
                case 'bottom':
                    return overflows.bottom || overflows.right || overflows.left;
                case 'bottom-right':
                    return overflows.bottom || overflows.right;
                case 'bottom-left':
                    return overflows.bottom || overflows.left;
                case 'left':
                    return overflows.left || overflows.top || overflows.bottom;
                case 'left-top':
                    return overflows.left || overflows.top;
                case 'left-bottom':
                    return overflows.left || overflows.bottom;
            }
        };
        PoControlPositionService.prototype.overflowMain = function (position) {
            var overflows = this.getOverflows();
            switch (position) {
                case 'top':
                    return overflows.top;
                case 'right':
                    return overflows.right;
                case 'bottom':
                    return overflows.bottom;
                case 'left':
                    return overflows.left;
            }
        };
        PoControlPositionService.prototype.setAlignedArrowDirection = function (elementPosition) {
            switch (elementPosition) {
                case 'top-left':
                    return 'bottom-left';
                case 'top-right':
                    return 'bottom-right';
                case 'bottom-right':
                    return 'top-right';
                case 'bottom-left':
                    return 'top-left';
            }
        };
        PoControlPositionService.prototype.setAlignedBottomPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        PoControlPositionService.prototype.setAlignedElementPosition = function (position) {
            this.setElementWidth();
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'bottom-left':
                    this.setAlignedBottomPositions(0, sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
                case 'top-left':
                    this.setAlignedTopPositions(0, sizesAndPositions);
                    break;
                case 'top-right':
                    this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setAlignedArrowDirection(position);
        };
        PoControlPositionService.prototype.setAlignedTopPositions = function (displacement, sizesAndPositions) {
            this.element.style.top =
                sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        PoControlPositionService.prototype.setArrowDirection = function (elementPosition) {
            switch (elementPosition) {
                case 'top':
                    return 'bottom';
                case 'top-left':
                    return 'bottom-right';
                case 'top-right':
                    return 'bottom-left';
                case 'right':
                    return 'left';
                case 'right-top':
                    return 'left-bottom';
                case 'right-bottom':
                    return 'left-top';
                case 'bottom':
                    return 'top';
                case 'bottom-right':
                    return 'top-left';
                case 'bottom-left':
                    return 'top-right';
                case 'left':
                    return 'right';
                case 'left-bottom':
                    return 'right-top';
                case 'left-top':
                    return 'right-bottom';
            }
        };
        PoControlPositionService.prototype.setBottomPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
        };
        PoControlPositionService.prototype.setElementPosition = function (position) {
            this.setElementWidth();
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'top':
                    this.setTopPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                    break;
                case 'top-left':
                    this.setTopPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'top-right':
                    this.setTopPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'right':
                    this.setRightPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                    break;
                case 'right-top':
                    this.setRightPositions(sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'right-bottom':
                    this.setRightPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'bottom':
                    this.setBottomPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setBottomPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'bottom-left':
                    this.setBottomPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                    break;
                case 'left':
                    this.setLeftPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                    break;
                case 'left-bottom':
                    this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'left-top':
                    this.setLeftPositions(sizesAndPositions.element.height - this.offsetArrow, sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setArrowDirection(position);
        };
        PoControlPositionService.prototype.setElementWidth = function () {
            if (this.isSetElementWidth && this.targetElement) {
                this.element.style.width = this.targetElement.clientWidth + "px";
            }
        };
        PoControlPositionService.prototype.setLeftPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
            this.element.style.left =
                sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
        };
        PoControlPositionService.prototype.setRightPositions = function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
            this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
        };
        PoControlPositionService.prototype.setTopPositions = function (displacement, sizesAndPositions) {
            this.element.style.top =
                sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
        };
        PoControlPositionService.prototype.verifySubPositions = function (position) {
            if (position.indexOf('-') > -1) {
                position = position.substring(0, position.indexOf('-'));
                this.elementPosition(position);
            }
            var align = 0;
            while (align++ < 3) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, poControlPositionSidesDefault);
                    this.elementPosition(position);
                }
                else {
                    return null;
                }
            }
        };
        PoControlPositionService = __decorate([
            core.Injectable()
        ], PoControlPositionService);
        return PoControlPositionService;
    }());

    var PoTooltipControlPositionService = /** @class */ (function (_super) {
        __extends(PoTooltipControlPositionService, _super);
        function PoTooltipControlPositionService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoTooltipControlPositionService = __decorate([
            core.Injectable()
        ], PoTooltipControlPositionService);
        return PoTooltipControlPositionService;
    }(PoControlPositionService));

    /**
     * @docsExtends PoTooltipBaseDirective
     *
     * @example
     *
     * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
     *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
     *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
     *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
     *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
     *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
     *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
     * </example>
     *
     */
    var PoTooltipDirective = /** @class */ (function (_super) {
        __extends(PoTooltipDirective, _super);
        function PoTooltipDirective(elementRef, renderer, poControlPosition) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.poControlPosition = poControlPosition;
            _this.tooltipOffset = 8;
            return _this;
        }
        PoTooltipDirective.prototype.ngOnInit = function () {
            this.initScrollEventListenerFunction();
        };
        PoTooltipDirective.prototype.onMouseEnter = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.tooltip) {
                    _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                    _this.removeArrow(_this.arrowDirection);
                    _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                    _this.arrowDirection = _this.poControlPosition.getArrowDirection();
                    _this.addArrow(_this.arrowDirection);
                    _this.lastTooltipText = _this.tooltip;
                }
            });
        };
        PoTooltipDirective.prototype.onMouseLeave = function () {
            var _this = this;
            // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
            // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
            setTimeout(function () {
                _this.hideTooltip();
            });
        };
        PoTooltipDirective.prototype.addArrow = function (arrowDirection) {
            this.renderer.addClass(this.divArrow, "po-arrow-" + arrowDirection);
        };
        PoTooltipDirective.prototype.addScrollEventListener = function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        // Monta a estrutura do tooltip
        PoTooltipDirective.prototype.createTooltip = function () {
            this.tooltipContent = this.renderer.createElement('div');
            this.renderer.addClass(this.tooltipContent, 'po-tooltip');
            this.divArrow = this.renderer.createElement('div');
            this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
            this.divContent = this.renderer.createElement('div');
            this.renderer.addClass(this.divContent, 'po-tooltip-content');
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
            this.renderer.appendChild(this.tooltipContent, this.divArrow);
            this.renderer.appendChild(this.tooltipContent, this.divContent);
            this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
            this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
            this.addScrollEventListener();
        };
        PoTooltipDirective.prototype.initScrollEventListenerFunction = function () {
            var _this = this;
            this.eventListenerFunction = function () {
                if (!_this.isHidden) {
                    setTimeout(function () {
                        _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                    });
                }
            };
        };
        PoTooltipDirective.prototype.hideTooltip = function () {
            if (this.tooltipContent) {
                this.renderer.addClass(this.tooltipContent, 'po-invisible');
                this.isHidden = true;
                this.removeScrollEventListener();
            }
        };
        PoTooltipDirective.prototype.removeArrow = function (arrowDirection) {
            if (this.elementRef.nativeElement.querySelector(".po-arrow-" + arrowDirection)) {
                this.renderer.removeClass(this.divArrow, "po-arrow-" + arrowDirection);
            }
        };
        PoTooltipDirective.prototype.removeScrollEventListener = function () {
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        PoTooltipDirective.prototype.showTooltip = function () {
            this.renderer.removeClass(this.tooltipContent, 'po-invisible');
            this.updateTextContent();
            this.isHidden = false;
            this.addScrollEventListener();
        };
        PoTooltipDirective.prototype.updateTextContent = function () {
            if (this.lastTooltipText !== this.tooltip) {
                this.renderer.removeChild(this.divContent, this.textContent);
                this.textContent = this.renderer.createText(this.tooltip);
                this.renderer.appendChild(this.divContent, this.textContent);
            }
        };
        PoTooltipDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: PoTooltipControlPositionService }
        ]; };
        __decorate([
            core.HostListener('mouseenter'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PoTooltipDirective.prototype, "onMouseEnter", null);
        __decorate([
            core.HostListener('mouseleave'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PoTooltipDirective.prototype, "onMouseLeave", null);
        PoTooltipDirective = __decorate([
            core.Directive({
                selector: '[p-tooltip]',
                providers: [PoTooltipControlPositionService]
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.Renderer2,
                PoTooltipControlPositionService])
        ], PoTooltipDirective);
        return PoTooltipDirective;
    }(PoTooltipBaseDirective));

    /**
     * @description
     *
     * Módulo da diretiva Po-Tooltip.
     */
    var PoTooltipModule = /** @class */ (function () {
        function PoTooltipModule() {
        }
        PoTooltipModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoTooltipDirective],
                exports: [PoTooltipDirective]
            })
        ], PoTooltipModule);
        return PoTooltipModule;
    }());

    /**
     * @usedBy PoButtonGroupComponent
     *
     * @description
     *
     * Define o tipo de seleção dos botões do `po-button-group`.
     */

    (function (PoButtonGroupToggle) {
        /** Seleção múltipla. */
        PoButtonGroupToggle["Multiple"] = "multiple";
        /** Seleção desabilitada. */
        PoButtonGroupToggle["None"] = "none";
        /** Seleção única. */
        PoButtonGroupToggle["Single"] = "single";
    })(exports.PoButtonGroupToggle || (exports.PoButtonGroupToggle = {}));

    var PO_TOGGLE_TYPE_DEFAULT = 'none';
    /**
     * @description
     *
     * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
     * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
     *
     * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
     * para seleções multiplas e únicas.
     *
     * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
     * parte de um mesmo contexto.
     *
     * #### Boas práticas
     *
     * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
     * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
     *
     * > As recomendações do `po-button` também valem para o `po-button-group`.
     */
    var PoButtonGroupBaseComponent = /** @class */ (function () {
        function PoButtonGroupBaseComponent() {
            this._small = false;
            this._toggle = PO_TOGGLE_TYPE_DEFAULT;
            /** Lista de botões. */
            this.buttons = [];
        }
        Object.defineProperty(PoButtonGroupBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Torna o grupo de botões com tamanho minificado.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoButtonGroupBaseComponent.prototype, "toggle", {
            get: function () {
                return this._toggle;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de seleção de botões.
             *
             * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
             *
             * @default `none`
             */
            set: function (value) {
                this._toggle = Object.values(exports.PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
                this.checkSelecteds(this._toggle);
            },
            enumerable: true,
            configurable: true
        });
        PoButtonGroupBaseComponent.prototype.onButtonClick = function (buttonClicked, buttonIndex) {
            if (this.toggle === exports.PoButtonGroupToggle.Single) {
                this.buttons.forEach(function (button, index) { return (button.selected = index === buttonIndex ? !buttonClicked.selected : false); });
            }
            else if (this.toggle === exports.PoButtonGroupToggle.Multiple) {
                buttonClicked.selected = !buttonClicked.selected;
            }
        };
        PoButtonGroupBaseComponent.prototype.checkSelecteds = function (toggleMode) {
            if (toggleMode === exports.PoButtonGroupToggle.None) {
                this.deselectAllButtons();
            }
            else if (toggleMode === exports.PoButtonGroupToggle.Single) {
                var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
                if (hasMoreOneSelected) {
                    this.deselectAllButtons();
                }
            }
        };
        PoButtonGroupBaseComponent.prototype.deselectAllButtons = function () {
            this.buttons.forEach(function (button) { return (button.selected = false); });
        };
        __decorate([
            core.Input('p-buttons'),
            __metadata("design:type", Array)
        ], PoButtonGroupBaseComponent.prototype, "buttons", void 0);
        __decorate([
            core.Input('p-small'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoButtonGroupBaseComponent.prototype, "small", null);
        __decorate([
            core.Input('p-toggle'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoButtonGroupBaseComponent.prototype, "toggle", null);
        PoButtonGroupBaseComponent = __decorate([
            core.Directive()
        ], PoButtonGroupBaseComponent);
        return PoButtonGroupBaseComponent;
    }());

    /**
     * @docsExtends PoButtonGroupBaseComponent
     *
     * @example
     *
     * <example name="po-button-group-basic" title="PO Button Group Basic">
     *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.html"> </file>
     *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-button-group-labs" title="PO Button Group Labs">
     *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.html"> </file>
     *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.ts"> </file>
     * </example>
     *
     *
     * <example name="po-button-group-attendance" title="PO Button Group - Attendance">
     *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.html"> </file>
     *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.ts"> </file>
     * </example>
     *
     * <example name="po-button-group-post" title="PO Button Group - Post">
     *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.html"> </file>
     *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.ts"> </file>
     * </example>
     */
    var PoButtonGroupComponent = /** @class */ (function (_super) {
        __extends(PoButtonGroupComponent, _super);
        function PoButtonGroupComponent(viewRef) {
            var _this = _super.call(this) || this;
            // Get instance of parent to execute the actions
            _this.parentRef = viewRef['_hostView'][8];
            return _this;
        }
        PoButtonGroupComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        PoButtonGroupComponent = __decorate([
            core.Component({
                selector: 'po-button-group',
                template: "<div class=\"po-button-group-container\">\n  <po-button\n    *ngFor=\"let button of buttons; index as i\"\n    class=\"po-sm-12 po-button-group\"\n    [class.po-button-group-button-selected]=\"button.selected\"\n    [class.po-button-group-disabled]=\"button.disabled\"\n    p-tooltip-position=\"bottom\"\n    [p-disabled]=\"button.disabled\"\n    [p-icon]=\"button.icon\"\n    [p-label]=\"button.label\"\n    [p-small]=\"small\"\n    [p-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\n    (p-click)=\"button.action.call(parentRef, button); onButtonClick(button, i)\"\n  >\n  </po-button>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef])
        ], PoButtonGroupComponent);
        return PoButtonGroupComponent;
    }(PoButtonGroupBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-button-group.
     */
    var PoButtonGroupModule = /** @class */ (function () {
        function PoButtonGroupModule() {
        }
        PoButtonGroupModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoButtonModule, PoTooltipModule],
                declarations: [PoButtonGroupComponent],
                exports: [PoButtonGroupComponent]
            })
        ], PoButtonGroupModule);
        return PoButtonGroupModule;
    }());

    var PoCalendarLangService = /** @class */ (function () {
        function PoCalendarLangService() {
            this.language = 'pt';
            this.months = [
                {
                    pt: 'Janeiro',
                    en: 'January',
                    es: 'Enero'
                },
                {
                    pt: 'Fevereiro',
                    en: 'February',
                    es: 'Febrero'
                },
                {
                    pt: 'Março',
                    en: 'March',
                    es: 'Marzo'
                },
                {
                    pt: 'Abril',
                    en: 'April',
                    es: 'Abril'
                },
                {
                    pt: 'Maio',
                    en: 'May',
                    es: 'Mayo'
                },
                {
                    pt: 'Junho',
                    en: 'June',
                    es: 'Junio'
                },
                {
                    pt: 'Julho',
                    en: 'July',
                    es: 'Julio'
                },
                {
                    pt: 'Agosto',
                    en: 'August',
                    es: 'Agosto'
                },
                {
                    pt: 'Setembro',
                    en: 'September',
                    es: 'Setiembre'
                },
                {
                    pt: 'Outubro',
                    en: 'October',
                    es: 'Octubre'
                },
                {
                    pt: 'Novembro',
                    en: 'November',
                    es: 'Noviembre'
                },
                {
                    pt: 'Dezembro',
                    en: 'December',
                    es: 'Diciembre'
                }
            ];
            this.shortWeekDays = [
                {
                    pt: 'Dom',
                    en: 'Sun',
                    es: 'Dom'
                },
                {
                    pt: 'Seg',
                    en: 'Mon',
                    es: 'Lun'
                },
                {
                    pt: 'Ter',
                    en: 'Tue',
                    es: 'Mar'
                },
                {
                    pt: 'Qua',
                    en: 'Wed',
                    es: 'Mié'
                },
                {
                    pt: 'Qui',
                    en: 'Thu',
                    es: 'Jue'
                },
                {
                    pt: 'Sex',
                    en: 'Fri',
                    es: 'Vie'
                },
                {
                    pt: 'Sáb',
                    en: 'Sat',
                    es: 'Sáb'
                }
            ];
            this.monthLabel = {
                pt: 'Mês',
                en: 'Month',
                es: 'Mes'
            };
            this.yearLabel = {
                pt: 'Ano',
                en: 'Year',
                es: 'Año'
            };
        }
        PoCalendarLangService.prototype.getMonth = function (month) {
            return this.months[month][this.language];
        };
        PoCalendarLangService.prototype.getMonthLabel = function () {
            return this.monthLabel[this.language];
        };
        PoCalendarLangService.prototype.getMonthsArray = function () {
            var arrMonths = Array();
            for (var i = 0; i < this.months.length; i++) {
                arrMonths.push(this.months[i][this.language]);
            }
            return arrMonths;
        };
        PoCalendarLangService.prototype.getWeekDays = function (day) {
            return this.shortWeekDays[day][this.language];
        };
        PoCalendarLangService.prototype.getWeekDaysArray = function () {
            var arrWeekDays = Array();
            for (var i = 0; i < this.shortWeekDays.length; i++) {
                arrWeekDays.push(this.shortWeekDays[i][this.language]);
            }
            return arrWeekDays;
        };
        PoCalendarLangService.prototype.getYearLabel = function () {
            return this.yearLabel[this.language];
        };
        PoCalendarLangService.prototype.setLanguage = function (language) {
            if (language && language.length >= 2) {
                language = language.toLowerCase().slice(0, 2);
                this.language = language === 'pt' || language === 'en' || language === 'es' ? language : 'pt';
            }
        };
        PoCalendarLangService = __decorate([
            core.Injectable()
        ], PoCalendarLangService);
        return PoCalendarLangService;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
     */
    var PoDateService = /** @class */ (function () {
        function PoDateService() {
            this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
            this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
        }
        /**
         * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
         *
         * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param minDate Definir `true` caso seja `minDate`.
         * @param maxDate Definir `true` caso seja `maxDate`.
         */
        PoDateService.prototype.convertIsoToDate = function (dateString, minDate, maxDate) {
            if (dateString) {
                var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
                if (minDate) {
                    var date = new Date(year, month - 1, day, 0, 0, 0);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else if (maxDate) {
                    var date = new Date(year, month - 1, day, 23, 59, 59);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else {
                    var miliseconds = Date.parse(dateString);
                    var timezone = new Date().getTimezoneOffset() * 60000;
                    return new Date(miliseconds + timezone);
                }
            }
        };
        /**
         * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
         *
         * @param date Data no formato `Date`.
         */
        PoDateService.prototype.convertDateToISO = function (date) {
            if (date) {
                var fullYear = date.getFullYear();
                var getMonth = date.getMonth() + 1;
                var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
                var month = getMonth < 10 ? '0' + getMonth : getMonth;
                var year = this.formatYear(fullYear);
                return year + '-' + month + '-' + day;
            }
            else {
                return null;
            }
        };
        /**
         * Método responsável por adicionar zeros a esquerda do anos em formato string.
         *
         * @param year Ano a ser validado.
         */
        PoDateService.prototype.formatYear = function (year) {
            if (year > 999) {
                return year.toString();
            }
            if (year > 99 && year < 1000) {
                return "0" + year;
            }
            if (year > 9 && year < 100) {
                return "00" + year;
            }
            if (year >= 0 && year < 10) {
                return "000" + year;
            }
        };
        /**
         * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
         *
         * @param isoDate Ano em formato string.
         */
        PoDateService.prototype.getDateFromIso = function (isoDate) {
            var day = parseInt(isoDate.substring(8, 10), 10);
            var month = parseInt(isoDate.substring(5, 7), 10);
            var year = parseInt(isoDate.substring(0, 4), 10);
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
         * caso `isMindate` seja igual a `false` .
         *
         * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
         */
        PoDateService.prototype.getDateForDateRange = function (date, isMinDate) {
            var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
            if (date instanceof Date) {
                var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
                var validDate = new (Date.bind.apply(Date, __spread([void 0, year, month, day], lastHour)))();
                this.setYearFrom0To100(validDate, year);
                return validDate;
            }
            else if (this.isValidIso(date)) {
                return this.convertIsoToDate(date, isMinDate, !isMinDate);
            }
        };
        /**
         * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
         * @param dateA primeira data
         * @param dateB segunda data
         */
        PoDateService.prototype.isDateRangeValid = function (dateA, dateB) {
            if (dateA === void 0) { dateA = ''; }
            if (dateB === void 0) { dateB = ''; }
            var dateASplitted = dateA.split('-').map(function (item) { return parseInt(item, 10); });
            var dateBSplitted = dateB.split('-').map(function (item) { return parseInt(item, 10); });
            for (var index = 0; index <= dateASplitted.length; index++) {
                if (dateASplitted[index] > dateBSplitted[index]) {
                    return true;
                }
                else if (dateASplitted[index] < dateBSplitted[index]) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
         *
         * @param stringDate Data.
         */
        PoDateService.prototype.isValidIso = function (stringDate) {
            return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
        };
        /**
         * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
         *
         * @param date Data.
         * @param year .
         */
        PoDateService.prototype.setYearFrom0To100 = function (date, year) {
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
        };
        /**
         * Método responsável por ordenar duas datas.
         *
         * @param leftSide Primeira data a ser comparada.
         * @param rightSide Segunda data a ser comparada.
         * @param ascending Determina se será em ordem crescente ou decrescente.
         */
        PoDateService.prototype.sortDate = function (leftSide, rightSide, ascending) {
            return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
        };
        /**
         * Método responsável por retornar o dia , mês e ano de uma data informada.
         *
         * @param date Valor da data.
         */
        PoDateService.prototype.splitDate = function (date) {
            var year = date.getFullYear();
            var month = date.getMonth();
            var day = date.getDate();
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
         *
         * @param date Data a ser validada.
         * @param minDate Data inicial.
         * @param maxDate Data final.
         */
        PoDateService.prototype.validateDateRange = function (date, minDate, maxDate) {
            if (minDate && maxDate) {
                return date >= minDate && date <= maxDate;
            }
            else if (minDate && !maxDate) {
                return date >= minDate;
            }
            else if (!minDate && maxDate) {
                return date <= maxDate;
            }
            else {
                return true;
            }
        };
        /**
         * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
         * 'Date' padrão do javascript.
         *
         * @param date Data que será validada.
         */
        PoDateService.prototype.validateDate = function (date) {
            var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
            return this.isValidIso(validDate) ? validDate : undefined;
        };
        PoDateService = __decorate([
            core.Injectable()
        ], PoDateService);
        return PoDateService;
    }());

    /**
     * @description
     *
     * Módulo do serviço `po-date`.
     */
    var PoDateTimeModule = /** @class */ (function () {
        function PoDateTimeModule() {
        }
        PoDateTimeModule = __decorate([
            core.NgModule({
                providers: [PoDateService],
                bootstrap: []
            })
        ], PoDateTimeModule);
        return PoDateTimeModule;
    }());

    var poCalendarLocales = ['pt', 'en', 'es'];
    var poCalendarLocaleDefault = 'pt';
    /**
     * @description
     *
     * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
     * de direcionamento e nos *labels* do ano ou mês.
     *
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     *
     * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
     * formato **Data (E8601DAw.): yyyy-mm-dd**.
     *
     * Importante:
     *
     * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
     * a data desabilitada porém o *model* não será alterado.
     * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
     */
    var PoCalendarBaseComponent = /** @class */ (function () {
        function PoCalendarBaseComponent(poDate, poCalendarLangService) {
            this.poDate = poDate;
            this.poCalendarLangService = poCalendarLangService;
            this.dayVisible = false;
            this.displayMonths = Array();
            this.displayWeekDays = Array();
            this.monthVisible = false;
            this.yearVisible = false;
            this.onTouched = null;
            this.propagateChange = null;
            this.today = new Date();
            /** Evento disparado ao selecionar um dia do calendário. */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoCalendarBaseComponent.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            /**
             * @optional
             *
             * @description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             *
             * @default `pt`
             */
            set: function (locale) {
                this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
                this.initializeLanguage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "maxDate", {
            get: function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data máxima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: function (maxDate) {
                this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCalendarBaseComponent.prototype, "minDate", {
            get: function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data mínima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: function (minDate) {
                this._minDate = this.poDate.getDateForDateRange(minDate, true);
            },
            enumerable: true,
            configurable: true
        });
        PoCalendarBaseComponent.prototype.initializeLanguage = function () {
            this.poCalendarLangService.setLanguage(this.locale);
            this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
            this.displayMonths = this.poCalendarLangService.getMonthsArray();
            this.displayMonth = this.displayMonths[this.displayMonthNumber];
        };
        PoCalendarBaseComponent.ctorParameters = function () { return [
            { type: PoDateService },
            { type: PoCalendarLangService }
        ]; };
        __decorate([
            core.Input('p-locale'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoCalendarBaseComponent.prototype, "locale", null);
        __decorate([
            core.Input('p-max-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoCalendarBaseComponent.prototype, "maxDate", null);
        __decorate([
            core.Input('p-min-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoCalendarBaseComponent.prototype, "minDate", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", Object)
        ], PoCalendarBaseComponent.prototype, "change", void 0);
        PoCalendarBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoDateService, PoCalendarLangService])
        ], PoCalendarBaseComponent);
        return PoCalendarBaseComponent;
    }());

    var poCalendarServiceFirstWeekDayDefault = 0;
    var PoCalendarService = /** @class */ (function () {
        function PoCalendarService() {
        }
        PoCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
            if (dayFormatter === void 0) { dayFormatter = null; }
            if (weekFormatter === void 0) { weekFormatter = null; }
            if (typeof month !== 'number' || month < 0 || month > 11) {
                throw Error('month must be a number (Jan is 0)');
            }
            var weeks = [];
            var week = [];
            var i = 0;
            var date = new Date(year, month, 1);
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
            date = this.weekStartDate(date);
            do {
                for (i = 0; i < 7; i++) {
                    week.push(dayFormatter ? dayFormatter(date) : date);
                    date = new Date(date.getTime());
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(weekFormatter ? weekFormatter(week) : week);
                week = [];
            } while (date.getMonth() <= month && date.getFullYear() === year);
            return weeks;
        };
        PoCalendarService.prototype.monthDays = function (year, month) {
            var getDayOrZero = function (date) {
                return date.getMonth() === month ? date : 0;
            };
            return this.monthDates(year, month, getDayOrZero);
        };
        PoCalendarService.prototype.weekStartDate = function (date) {
            var startDate = new Date(date.getTime());
            while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
                startDate.setDate(startDate.getDate() - 1);
            }
            return startDate;
        };
        PoCalendarService = __decorate([
            core.Injectable()
        ], PoCalendarService);
        return PoCalendarService;
    }());

    /* istanbul ignore next */
    var providers = [
        PoCalendarService,
        PoCalendarLangService,
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoCalendarComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoCalendarComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoCalendarBaseComponent
     *
     * @example
     *
     * <example name="po-calendar-basic" title="PO Calendar Basic" >
     *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
     *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-calendar-labs" title="PO Calendar Labs" >
     *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
     *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
     *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
     *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
     * </example>
     */
    var PoCalendarComponent = /** @class */ (function (_super) {
        __extends(PoCalendarComponent, _super);
        function PoCalendarComponent(poCalendarService, poCalendarLangService, poDate) {
            var _this = _super.call(this, poDate, poCalendarLangService) || this;
            _this.poCalendarService = poCalendarService;
            return _this;
        }
        PoCalendarComponent.prototype.ngOnInit = function () {
            this.init();
        };
        PoCalendarComponent.prototype.getBackgroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
        };
        PoCalendarComponent.prototype.getDayBackgroundColor = function (date) {
            return this.getDayColor(date, 'background');
        };
        PoCalendarComponent.prototype.getDayForegroundColor = function (date) {
            return this.getDayColor(date, 'foreground');
        };
        PoCalendarComponent.prototype.getForegroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
        };
        PoCalendarComponent.prototype.getMonthLabel = function () {
            return this.poCalendarLangService.getMonthLabel();
        };
        PoCalendarComponent.prototype.getYearLabel = function () {
            return this.poCalendarLangService.getYearLabel();
        };
        PoCalendarComponent.prototype.onNextMonth = function () {
            this.displayMonthNumber < 11
                ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
                : this.updateDisplay(this.displayYear + 1, 0);
        };
        PoCalendarComponent.prototype.onPreviousMonth = function () {
            this.displayMonthNumber > 0
                ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1)
                : this.updateDisplay(this.displayYear - 1, 11);
        };
        // Ao selecionar uma data
        PoCalendarComponent.prototype.onSelectDate = function (date) {
            this.date = date;
            this.dateIso = this.poDate.convertDateToISO(date);
            if (this.propagateChange) {
                this.propagateChange(this.dateIso);
            }
            this.change.emit(this.dateIso);
        };
        // Ao selecionar um mês
        PoCalendarComponent.prototype.onSelectMonth = function (year, month) {
            this.selectDay();
            this.updateDisplay(year, month);
        };
        // Ao selecionar um ano
        PoCalendarComponent.prototype.onSelectYear = function (year, month) {
            // Se veio da tela de seleção de mês
            this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
            this.currentYear = year;
            this.updateDisplay(year, month);
        };
        PoCalendarComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCalendarComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoCalendarComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoCalendarComponent.prototype.selectDay = function () {
            this.dayVisible = true;
            this.monthVisible = false;
            this.yearVisible = false;
            this.lastDisplay = 'day';
        };
        PoCalendarComponent.prototype.selectMonth = function () {
            this.dayVisible = false;
            this.monthVisible = true;
            this.yearVisible = false;
            this.lastDisplay = 'month';
        };
        PoCalendarComponent.prototype.selectYear = function () {
            this.dayVisible = false;
            this.monthVisible = false;
            this.yearVisible = true;
        };
        PoCalendarComponent.prototype.updateYear = function (value) {
            this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
        };
        PoCalendarComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoCalendarComponent.prototype.validate = function (c) {
            return null;
        };
        PoCalendarComponent.prototype.writeValue = function (value) {
            if (value) {
                this.writeDate(value);
            }
            else {
                this.date = undefined;
                this.updateDate(this.today);
            }
        };
        PoCalendarComponent.prototype.addAllYearsInDecade = function (year) {
            var i;
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        };
        PoCalendarComponent.prototype.equalsDate = function (date1, date2) {
            try {
                return (date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate());
            }
            catch (error) {
                return false;
            }
        };
        // Obtém um array de todos os anos desta década
        PoCalendarComponent.prototype.getDecadeArray = function (year) {
            this.displayDecade = Array();
            if (year % 10 !== 0) {
                while (year % 10 !== 0) {
                    year--;
                }
            }
            this.updateDecade(year);
        };
        PoCalendarComponent.prototype.getColorForDate = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local + "-selected"
                : "po-calendar-box-" + local + "-selected-disabled";
        };
        PoCalendarComponent.prototype.getColorForDateRange = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local
                : "po-calendar-box-" + local + "-disabled";
        };
        PoCalendarComponent.prototype.getColorForToday = function (date, local) {
            return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
                ? "po-calendar-box-" + local + "-today"
                : "po-calendar-box-" + local + "-today-disabled";
        };
        PoCalendarComponent.prototype.getDayColor = function (date, local) {
            if (this.equalsDate(date, this.date)) {
                return this.getColorForDate(date, local);
            }
            else if (this.equalsDate(date, this.today)) {
                return this.getColorForToday(date, local);
            }
            else {
                return this.getColorForDateRange(date, local);
            }
        };
        PoCalendarComponent.prototype.init = function () {
            this.date && this.poDate.isValidIso(this.poDate.convertDateToISO(this.date))
                ? this.updateDate(this.date)
                : this.updateDate(this.today);
            this.initializeLanguage();
            this.selectDay();
        };
        PoCalendarComponent.prototype.selectDateFromDate = function (date) {
            this.date = date;
            this.onSelectDate(this.date);
        };
        PoCalendarComponent.prototype.selectDateFromIso = function (stringDate) {
            var _a = this.poDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
            var date = new Date(year, month - 1, day);
            this.poDate.setYearFrom0To100(date, year);
            this.date = date;
            this.onSelectDate(this.date);
        };
        PoCalendarComponent.prototype.updateDate = function (date) {
            if (date) {
                this.currentMonthNumber = date.getMonth();
                this.currentYear = date.getFullYear();
                this.updateDisplay(this.currentYear, this.currentMonthNumber);
            }
        };
        PoCalendarComponent.prototype.updateDecade = function (year) {
            this.addAllYearsInDecade(year);
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        };
        PoCalendarComponent.prototype.updateDisplay = function (year, month) {
            var calendarArray = this.poCalendarService.monthDays(year, month);
            this.displayDays = [].concat.apply([], calendarArray);
            this.displayMonthNumber = month;
            this.displayMonth = this.displayMonths[month];
            this.displayYear = year;
            this.getDecadeArray(year);
        };
        PoCalendarComponent.prototype.writeDate = function (value) {
            value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
            this.updateDate(this.date);
        };
        PoCalendarComponent.prototype.writeDateIso = function (value) {
            this.poDate.isValidIso(value) ? this.selectDateFromIso(value) : (this.date = undefined);
        };
        PoCalendarComponent.ctorParameters = function () { return [
            { type: PoCalendarService },
            { type: PoCalendarLangService },
            { type: PoDateService }
        ]; };
        PoCalendarComponent = __decorate([
            core.Component({
                selector: 'po-calendar',
                template: "<div class=\"po-calendar\">\n  <div *ngIf=\"dayVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"onNextMonth()\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeekDays\">\n          {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\"\n        >\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-1)\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(1)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getMonthLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-10)\"></span>\n      <div class=\"po-calendar-nav-title\">{{ displayStartDecade }} - {{ displayFinalDecade }}</div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(10)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getYearLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: providers
            }),
            __metadata("design:paramtypes", [PoCalendarService,
                PoCalendarLangService,
                PoDateService])
        ], PoCalendarComponent);
        return PoCalendarComponent;
    }(PoCalendarBaseComponent));

    /**
     * @description
     * Módulo do componente `po-calendar`.
     */
    var PoCalendarModule = /** @class */ (function () {
        function PoCalendarModule() {
        }
        PoCalendarModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoCalendarComponent],
                exports: [PoCalendarComponent],
                providers: [PoCalendarLangService, PoCalendarService]
            })
        ], PoCalendarModule);
        return PoCalendarModule;
    }());

    /**
     * @usedBy PoChartComponent
     *
     * @description
     *
     * *Enum* `PoChartType` para especificação dos tipos de gráficos.
     */

    (function (PoChartType) {
        /**
         * Exibe os dados em formato de rosca, dividindo em partes proporcionais.
         */
        PoChartType["Donut"] = "donut";
        /**
         * O gráfico de *gauge* fornece como opção uma melhor relação de intensidade de dados que nos gráficos de pizza padrão ou rosca, uma vez
         * que o centro em branco pode ser usado para exibir dados adicionais relacionados.
         */
        PoChartType["Gauge"] = "gauge";
        /**
         * Exibe os dados em formato circular, dividindo proporcionalmente em fatias.
         */
        PoChartType["Pie"] = "pie";
    })(exports.PoChartType || (exports.PoChartType = {}));

    var poChartDefaultHeight = 400;
    var poChartMinHeight = 200;
    var poChartTypeDefault = exports.PoChartType.Pie;
    /**
     * @description
     *
     * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
     * visualização destes dados mais agradável.
     *
     * Através de suas principais propriedades é possível definir o tipo de gráfico, uma altura e um título.
     *
     * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
     * e outra que será executada ao passar o *mouse* sobre o elemento.
     *
     * #### Boas práticas
     *
     * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
     * - Para exibir a intensidade de um único dado dê preferência ao tipo `gauge`.
     */
    var PoChartBaseComponent = /** @class */ (function () {
        function PoChartBaseComponent() {
            this._type = poChartTypeDefault;
            this.poChartType = exports.PoChartType;
            /**
             * @optional
             *
             * @description
             *
             * Evento executado quando o usuário clicar sobre um elemento do gráfico.
             *
             * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
             */
            this.seriesClick = new core.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
             *
             * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
             */
            this.seriesHover = new core.EventEmitter();
        }
        Object.defineProperty(PoChartBaseComponent.prototype, "height", {
            get: function () {
                return this._height || this.setDefaultHeight();
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do gráfico.
             *
             * O valor padrão dos gráficos são:
             * - para o tipo *gauge*: `200px`;
             * - para os demais tipos: `400px`.
             *
             * > O valor mínimo aceito nesta propriedade é 200.
             *
             * @default `400px`
             */
            set: function (value) {
                var intValue = convertToInt(value);
                var height;
                if (isTypeof(value, 'number')) {
                    height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
                }
                else {
                    height = this.setDefaultHeight();
                }
                this._height = height;
                this.rebuildComponent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            /**
             * @description
             *
             * Define os elementos do gráfico que serão criados dinamicamente.
             *
             * > A coleção de objetos deve implementar alguma das interfaces abaixo:
             * - `PoDonutChartSeries`
             * - `PoPieChartSeries`
             * - `PoChartGaugeSerie`
             */
            set: function (value) {
                this._series = value || [];
                this.chartSeries = Array.isArray(this._series)
                    ? __spread(this._series) : this.transformObjectToArrayObject(this._series);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo de gráfico.
             *
             * > Veja os valores válidos no *enum* `PoChartType`.
             *
             * @default `PoChartType.Pie`
             */
            set: function (value) {
                this._type = Object.values(exports.PoChartType).includes(value) ? value : poChartTypeDefault;
                this.rebuildComponent();
            },
            enumerable: true,
            configurable: true
        });
        PoChartBaseComponent.prototype.onSeriesClick = function (event) {
            this.seriesClick.emit(event);
        };
        PoChartBaseComponent.prototype.onSeriesHover = function (event) {
            this.seriesHover.emit(event);
        };
        PoChartBaseComponent.prototype.setDefaultHeight = function () {
            return this.type === exports.PoChartType.Gauge ? poChartMinHeight : poChartDefaultHeight;
        };
        PoChartBaseComponent.prototype.transformObjectToArrayObject = function (serie) {
            return typeof serie === 'object' && Object.keys(serie).length ? [__assign({}, serie)] : [];
        };
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoChartBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-series'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoChartBaseComponent.prototype, "series", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoChartBaseComponent.prototype, "title", void 0);
        __decorate([
            core.Input('p-type'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoChartBaseComponent.prototype, "type", null);
        __decorate([
            core.Output('p-series-click'),
            __metadata("design:type", Object)
        ], PoChartBaseComponent.prototype, "seriesClick", void 0);
        __decorate([
            core.Output('p-series-hover'),
            __metadata("design:type", Object)
        ], PoChartBaseComponent.prototype, "seriesHover", void 0);
        PoChartBaseComponent = __decorate([
            core.Directive()
        ], PoChartBaseComponent);
        return PoChartBaseComponent;
    }());

    // Array de cores para gráficos definido pela equipe de UX PO.
    var PoChartColors = [
        ['#29B6C5'],
        ['#0C6C94', '#29B6C5'],
        ['#0C6C94', '#29B6C5', '#C9ECF0'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
        ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
        ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
        ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
        [
            '#0C6C94',
            '#00BAD5',
            '#00A7C7',
            '#0197B8',
            '#0088AC',
            '#23789F',
            '#2B6992',
            '#315C87',
            '#364E7C',
            '#36436F',
            '#32285C'
        ],
        [
            '#0C6C94',
            '#00BAD5',
            '#00A7C7',
            '#0197B8',
            '#0088AC',
            '#23789F',
            '#2B6992',
            '#315C87',
            '#364E7C',
            '#36436F',
            '#333565',
            '#32285C'
        ]
    ];
    // Cores que será utilizado texto preto
    var PoSeriesTextBlack = ['#94DAE2', '#C9ECF0'];

    var poChartAnimationDurationTime = 1500;
    var poChartAngleStepInterval = (Math.PI * 2) / Math.floor(poChartAnimationDurationTime / 60);
    var poChartCompleteCircle = 0.0001;
    var poChartGaugeStartAngle = -Math.PI;
    var poChartPadding = 24;
    var poChartStartAngle = -Math.PI / 2;
    // tamanho da largura da serie proporcional ao grafico do tipo Donut, o valor 0.27 fica proximo de 32px
    var poChartDonutSerieWidth = 0.27;
    // tamanho da largura da serie proporcional ao grafico do tipo Gauge, o valor 0.04 fica proximo de 8px
    var poChartGaugeSerieWidth = 0.06;

    var Padding = 24;
    /* tslint:disable:directive-class-suffix */
    var PoChartDynamicTypeComponent = /** @class */ (function () {
        function PoChartDynamicTypeComponent() {
            this.innerRadius = 0;
            this.onSerieClick = new rxjs.Subject();
            this.onSerieHover = new rxjs.Subject();
            this.series = [];
        }
        Object.defineProperty(PoChartDynamicTypeComponent.prototype, "isChartGaugeType", {
            get: function () {
                return this.type === exports.PoChartType.Gauge;
            },
            enumerable: true,
            configurable: true
        });
        PoChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
            var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
            this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
            this.centerX = chartWrapperElement / 2;
        };
        PoChartDynamicTypeComponent.prototype.calculateTotalValue = function () {
            this.totalValue =
                this.type === exports.PoChartType.Gauge
                    ? 100
                    : this.series.reduce(function (previousValue, serie) { return previousValue + serie.value; }, 0);
        };
        __decorate([
            core.ViewChild('chartBody', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoChartDynamicTypeComponent.prototype, "chartBody", void 0);
        __decorate([
            core.ViewChild('svgContainer', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoChartDynamicTypeComponent.prototype, "svgContainer", void 0);
        PoChartDynamicTypeComponent = __decorate([
            core.Directive()
        ], PoChartDynamicTypeComponent);
        return PoChartDynamicTypeComponent;
    }());

    var poChartBlackColor = '#000000';
    var poChartWhiteColor = '#ffffff';
    var PoChartCircular = /** @class */ (function (_super) {
        __extends(PoChartCircular, _super);
        function PoChartCircular(el, ngZone, renderer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.ngZone = ngZone;
            _this.renderer = renderer;
            _this.chartItemStartAngle = poChartStartAngle;
            _this.windowResizeEmitter = new rxjs.Subject();
            _this.chartItemsEndAngleList = [];
            _this.svgPathElementsList = [];
            _this.svgTextElementsList = [];
            return _this;
        }
        Object.defineProperty(PoChartCircular.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (value) {
                this._series = this.getSeriesWithValue(value);
            },
            enumerable: true,
            configurable: true
        });
        PoChartCircular.prototype.ngOnDestroy = function () {
            this.removeWindowResizeListener();
            this.removeWindowScrollListener();
            this.animationRunning = false;
        };
        PoChartCircular.prototype.ngOnInit = function () {
            this.chartInitSetup();
            this.setEventListeners();
        };
        PoChartCircular.prototype.removeTooltip = function () {
            if (this.tooltipElement) {
                this.renderer.addClass(this.tooltipElement, 'po-invisible');
            }
        };
        PoChartCircular.prototype.drawPath = function (path, chartItemStartAngle, chartItemEndAngle) {
            var largeArc = chartItemEndAngle - chartItemStartAngle > Math.PI;
            var sinAlpha = Math.sin(chartItemStartAngle);
            var cosAlpha = Math.cos(chartItemStartAngle);
            var sinBeta = Math.sin(chartItemEndAngle);
            var cosBeta = Math.cos(chartItemEndAngle);
            var startX = this.centerX + cosAlpha * this.centerX;
            var startY = this.centerX + sinAlpha * this.centerX;
            var endX = this.centerX + cosBeta * this.centerX;
            var endY = this.centerX + sinBeta * this.centerX;
            var startInnerX = this.centerX + cosAlpha * this.innerRadius;
            var startInnerY = this.centerX + sinAlpha * this.innerRadius;
            var endInnerX = this.centerX + cosBeta * this.innerRadius;
            var endInnerY = this.centerX + sinBeta * this.innerRadius;
            var halfGaugeCoordinates = [
                'M',
                startX,
                startY,
                'A',
                this.centerX,
                this.centerX,
                0,
                '0,1',
                endX,
                endY,
                'A',
                1,
                1,
                0,
                '0,1',
                endInnerX,
                endInnerY,
                'A',
                this.innerRadius,
                this.innerRadius,
                0,
                '0,0',
                startInnerX,
                startInnerY,
                'A',
                1,
                1,
                0,
                '0,1',
                startX,
                startY,
                'Z'
            ].join(' ');
            var pathCoordinates = [
                'M',
                startX,
                startY,
                'A',
                this.centerX,
                this.centerX,
                0,
                largeArc ? '1,1' : '0,1',
                endX,
                endY,
                'L',
                endInnerX,
                endInnerY,
                'A',
                this.innerRadius,
                this.innerRadius,
                0,
                largeArc ? '1,0' : '0,0',
                startInnerX,
                startInnerY,
                'Z'
            ].join(' ');
            return path.setAttribute('d', this.isChartGaugeType ? halfGaugeCoordinates : pathCoordinates);
        };
        PoChartCircular.prototype.getSeriesWithValue = function (series) {
            var _this = this;
            var newSeries = [];
            series.forEach(function (serie, index) {
                if (serie.value > 0) {
                    newSeries.push(__assign(__assign({}, serie), { color: _this.colors[index] }));
                }
            });
            return newSeries;
        };
        PoChartCircular.prototype.animationSetup = function () {
            this.chartItemEndAngle = this.chartItemsEndAngleList[0];
            this.animationRunning = true;
            this.drawPathInit();
        };
        PoChartCircular.prototype.appendGaugeBackgroundPathElement = function (svgPathsWrapper) {
            var svgPath = this.renderer.createElement('svg:path', 'svg');
            this.renderer.setAttribute(svgPath, 'class', 'po-chart-gauge-base-path');
            svgPathsWrapper.appendChild(svgPath);
            this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        };
        PoChartCircular.prototype.calculateAngleRadians = function () {
            var _this = this;
            this.series.forEach(function (serie, index) { return (_this.chartItemsEndAngleList[index] = _this.calculateEndAngle(serie.value, _this.totalValue)); });
        };
        PoChartCircular.prototype.calculateCurrentEndAngle = function (angleCurrentPosition) {
            var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
            if (isSerieDrawCompleted) {
                return this.chartItemStartAngle + this.chartItemEndAngle - poChartCompleteCircle;
            }
            else {
                return this.chartItemStartAngle + angleCurrentPosition;
            }
        };
        PoChartCircular.prototype.calculateEndAngle = function (value, totalValue) {
            var endAngle = (value / totalValue) * (Math.PI * 2);
            return this.isChartGaugeType ? endAngle / 2 : endAngle;
        };
        PoChartCircular.prototype.calculateSVGDimensions = function () {
            this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
            this.innerRadius = this.setInnerRadius(this.type);
        };
        PoChartCircular.prototype.changeTooltipPosition = function (event) {
            if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
                this.showTooltip();
            }
            var tooltipPositions = this.setTooltipPositions(event);
            this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
            this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
        };
        PoChartCircular.prototype.chartInitSetup = function () {
            this.calculateSVGDimensions();
            this.calculateTotalValue();
            this.calculateAngleRadians();
            this.createSVGElements();
            this.animationSetup();
        };
        PoChartCircular.prototype.checkingIfScrollsWithPoPage = function () {
            var poPageContent = document.getElementsByClassName('po-page-content');
            return poPageContent.length ? poPageContent[0] : window;
        };
        PoChartCircular.prototype.createPath = function (serie, svgPathsWrapper) {
            var svgPath = this.renderer.createElement('svg:path', 'svg');
            this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
            this.renderer.setAttribute(svgPath, 'fill', serie.color);
            this.setElementAttributes(svgPath, serie);
            svgPathsWrapper.appendChild(svgPath);
            this.renderer.appendChild(this.svgElement, svgPathsWrapper);
            this.svgPathElementsList.push(svgPath);
        };
        PoChartCircular.prototype.createPaths = function () {
            var _this = this;
            var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
            if (this.isChartGaugeType) {
                this.appendGaugeBackgroundPathElement(svgPathsWrapper);
                // Tratamento para evitar que o path desenhe os arcos referentes ao border radius do path.
                if (this.isSerieValueEqualZero()) {
                    return;
                }
            }
            this.series.forEach(function (serie) { return _this.createPath(serie, svgPathsWrapper); });
        };
        PoChartCircular.prototype.createText = function (serie) {
            var value = serie.value;
            var svgG = this.renderer.createElement('svg:g', 'svg');
            var svgText = this.renderer.createElement('svg:text', 'svg');
            var fontSize = this.getFontSize();
            var textColor = this.getTextColor(serie.color);
            svgText.textContent = this.getPercentValue(value, this.totalValue) + '%';
            this.renderer.setAttribute(svgText, 'class', 'po-path-item');
            this.renderer.setAttribute(svgText, 'fill', textColor);
            this.renderer.setAttribute(svgText, 'font-size', fontSize);
            this.renderer.setAttribute(svgText, 'fill-opacity', '0');
            this.setElementAttributes(svgText, serie);
            this.renderer.appendChild(svgG, svgText);
            this.renderer.appendChild(this.svgElement, svgG);
            this.svgTextElementsList.push(svgText);
        };
        PoChartCircular.prototype.createTexts = function () {
            var _this = this;
            if (this.type === exports.PoChartType.Donut) {
                this.series.forEach(function (serie) { return _this.createText(serie); });
            }
        };
        PoChartCircular.prototype.createSVGElements = function () {
            var viewBoxHeight = this.isChartGaugeType
                ? this.centerX + this.centerX * poChartGaugeSerieWidth
                : this.chartWrapper;
            var preserveAspectRatio = this.isChartGaugeType ? 'xMidYMax' : 'xMidYMin';
            this.svgElement = this.renderer.createElement('svg:svg', 'svg');
            this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + viewBoxHeight);
            this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', preserveAspectRatio + " meet");
            this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
            this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
            this.svgContainer.nativeElement.appendChild(this.svgElement);
            this.createPaths();
            this.createTexts();
        };
        PoChartCircular.prototype.drawPathInit = function () {
            var _this = this;
            if (!this.animationRunning) {
                return;
            }
            else {
                this.ngZone.runOutsideAngular(function () { return _this.drawSeries(); });
            }
        };
        PoChartCircular.prototype.drawSeries = function (currentSerieIndex, angleCurrentPosition) {
            if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
            if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
            var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
            var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
            if (isFinishedDrawingAllSeries) {
                return;
            }
            if (isFinishedDrawingCurrentSeries) {
                this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
                currentSerieIndex++;
                this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
                angleCurrentPosition = 0;
            }
            else {
                angleCurrentPosition += poChartAngleStepInterval;
                this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
                this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            }
            window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
        };
        PoChartCircular.prototype.emitEventOnEnter = function (event) {
            this.onSerieHover.next(event);
        };
        PoChartCircular.prototype.getFontSize = function () {
            var fontSizePorcent = 0.04;
            var fontSize = fontSizePorcent * this.chartWrapper;
            return fontSize.toFixed(0) + "px";
        };
        PoChartCircular.prototype.getPercentValue = function (value, totalValue) {
            var percentValue = (value / totalValue) * 100;
            var floatPercentValue = convertNumberToDecimal(percentValue, 2);
            return String(floatPercentValue).replace('.', ',');
        };
        PoChartCircular.prototype.getTextColor = function (color) {
            if (PoSeriesTextBlack.includes(color)) {
                return poChartBlackColor;
            }
            return poChartWhiteColor;
        };
        PoChartCircular.prototype.getTooltipValue = function (value) {
            if (this.type === exports.PoChartType.Pie) {
                return value.toString();
            }
            return this.getPercentValue(value, this.totalValue) + '%';
        };
        PoChartCircular.prototype.isSerieValueEqualZero = function () {
            return this.series.length && this.series[0].value === 0;
        };
        PoChartCircular.prototype.onMouseClick = function () {
            var serieOnClick;
            if (this.isChartGaugeType) {
                var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
                serieOnClick = serie;
            }
            else {
                serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
            }
            this.onSerieClick.next(serieOnClick);
        };
        PoChartCircular.prototype.onMouseEnter = function (event) {
            var serieOnEnter;
            if (!this.isChartGaugeType) {
                this.tooltipElement = this.chartBody.nativeElement.querySelector('.po-chart-tooltip');
                this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
                this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
                this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
                this.showTooltip();
                this.changeTooltipPosition(event);
                serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
            }
            else {
                var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
                this.chartElementDescription = event.target.getAttributeNS(null, 'data-tooltip-category');
                serieOnEnter = serie;
            }
            this.emitEventOnEnter(serieOnEnter);
        };
        PoChartCircular.prototype.onWindowResize = function () {
            this.calculateSVGDimensions();
            this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
            this.windowResizeEmitter.next();
        };
        PoChartCircular.prototype.removeWindowResizeListener = function () {
            if (this.windowResizeListener) {
                this.windowResizeListener();
            }
        };
        PoChartCircular.prototype.removeWindowScrollListener = function () {
            if (this.windowScrollListener) {
                this.windowScrollListener();
            }
        };
        PoChartCircular.prototype.setEventListeners = function () {
            var _this = this;
            var chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
            chartSeries = Array.from(chartSeries);
            chartSeries.forEach(function (serie) {
                _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
                _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
                if (!_this.isChartGaugeType) {
                    _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
                    _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
                }
            });
            this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
            this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
        };
        PoChartCircular.prototype.setInnerRadius = function (type) {
            var serieWidth;
            switch (type) {
                case exports.PoChartType.Donut: {
                    serieWidth = poChartDonutSerieWidth;
                    break;
                }
                case exports.PoChartType.Gauge: {
                    serieWidth = poChartGaugeSerieWidth;
                    break;
                }
                case exports.PoChartType.Pie: {
                    return 0;
                }
            }
            return this.centerX - this.centerX * serieWidth;
        };
        PoChartCircular.prototype.setTextProperties = function (text, startAngle, endAngle) {
            // necessário text.getClientRects().length para contornar erro de console causado no Firefox
            if (this.type === exports.PoChartType.Donut && text.getClientRects().length) {
                // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
                var centerAngle = (startAngle + endAngle) / 2;
                var textBox = text.getBBox();
                var halfTextWidth = textBox.width / 2;
                var halfTextHeight = textBox.height / 2;
                // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
                var radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
                var xCoordinate = radius * Math.cos(centerAngle) + this.centerX - halfTextWidth;
                var yCoordinate = radius * Math.sin(centerAngle) + this.centerX + halfTextHeight / 2;
                text.setAttribute('x', xCoordinate);
                text.setAttribute('y', yCoordinate);
                text.setAttribute('fill-opacity', '1');
            }
        };
        PoChartCircular.prototype.setTooltipPositions = function (event) {
            var displacement = 8;
            return {
                left: event.clientX - this.tooltipElement.offsetWidth / 2,
                top: event.clientY - this.tooltipElement.offsetHeight - displacement
            };
        };
        PoChartCircular.prototype.setElementAttributes = function (svgElement, serie) {
            var value = serie.value, category = serie.category, tooltip = serie.tooltip, description = serie.description;
            this.renderer.setAttribute(svgElement, 'data-tooltip-value', "" + value);
            if (this.isChartGaugeType) {
                this.renderer.setAttribute(svgElement, 'data-tooltip-description', description);
            }
            else {
                var tooltipValue = this.getTooltipValue(value);
                this.renderer.setAttribute(svgElement, 'data-tooltip-category', category);
                this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || category + ": " + tooltipValue);
            }
        };
        PoChartCircular.prototype.showTooltip = function () {
            this.renderer.removeClass(this.tooltipElement, 'po-invisible');
        };
        return PoChartCircular;
    }(PoChartDynamicTypeComponent));

    var PoChartDonutComponent = /** @class */ (function (_super) {
        __extends(PoChartDonutComponent, _super);
        /* istanbul ignore next */
        function PoChartDonutComponent(el, ngZone, renderer) {
            var _this = _super.call(this, el, ngZone, renderer) || this;
            _this.chartItemStartAngle = poChartStartAngle;
            return _this;
        }
        PoChartDonutComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.Renderer2 }
        ]; };
        PoChartDonutComponent = __decorate([
            core.Component({
                selector: 'po-chart-donut',
                template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.NgZone, core.Renderer2])
        ], PoChartDonutComponent);
        return PoChartDonutComponent;
    }(PoChartCircular));

    var PoChartGaugeTextContentComponent = /** @class */ (function () {
        function PoChartGaugeTextContentComponent(changeDetection) {
            this.changeDetection = changeDetection;
        }
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "gaugeWidth", {
            get: function () {
                return this._gaugeWidth;
            },
            set: function (value) {
                this._gaugeWidth = value;
                this.checkTextDescriptionSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "serie", {
            get: function () {
                return this._serie;
            },
            set: function (serie) {
                if (serie) {
                    this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
                    this._serie = __assign({}, serie);
                }
                else {
                    this._serie = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieDescription", {
            get: function () {
                return this.serie && this.serie.description;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieValue", {
            get: function () {
                return this.serie && this.serie.value >= 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "maxDescriptionWidth", {
            get: function () {
                // Diferença contemplando a largura do path base e padding interno.
                var subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
                var descriptionWidth = this.gaugeWidth - subtractionArea;
                return { 'max-width': descriptionWidth + "px" };
            },
            enumerable: true,
            configurable: true
        });
        PoChartGaugeTextContentComponent.prototype.ngAfterViewInit = function () {
            this.checkTextDescriptionSize();
        };
        PoChartGaugeTextContentComponent.prototype.checkTextDescriptionSize = function () {
            var _this = this;
            if (this.descriptionElement) {
                // tooltip necessário para contornar comportamento inesperado do tooltip.
                setTimeout(function () {
                    _this.tooltip = _this.isEllipsisActive();
                });
                this.changeDetection.detectChanges();
            }
        };
        PoChartGaugeTextContentComponent.prototype.convertValueInPercentFormat = function (value) {
            var decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
            return decimalValue + "%";
        };
        PoChartGaugeTextContentComponent.prototype.isEllipsisActive = function () {
            var isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
            return isExceededWidth ? this.serie.description : undefined;
        };
        PoChartGaugeTextContentComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('p-gauge-width'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoChartGaugeTextContentComponent.prototype, "gaugeWidth", null);
        __decorate([
            core.Input('p-serie'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoChartGaugeTextContentComponent.prototype, "serie", null);
        __decorate([
            core.ViewChild('description', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoChartGaugeTextContentComponent.prototype, "descriptionElement", void 0);
        PoChartGaugeTextContentComponent = __decorate([
            core.Component({
                selector: 'po-chart-gauge-text-content',
                template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\n    {{ serie?.description }}\n  </p>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoChartGaugeTextContentComponent);
        return PoChartGaugeTextContentComponent;
    }());

    var PoChartGaugeComponent = /** @class */ (function (_super) {
        __extends(PoChartGaugeComponent, _super);
        /* istanbul ignore next */
        function PoChartGaugeComponent(changeDetection, componentFactoryResolver, el, ngZone, renderer) {
            var _this = _super.call(this, el, ngZone, renderer) || this;
            _this.changeDetection = changeDetection;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.chartItemStartAngle = poChartGaugeStartAngle;
            _this._series = [];
            return _this;
        }
        Object.defineProperty(PoChartGaugeComponent.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (series) {
                this._series = this.getGaugeSerie(series);
            },
            enumerable: true,
            configurable: true
        });
        PoChartGaugeComponent.prototype.ngAfterViewInit = function () {
            this.drawBasePath();
            this.createComponent();
        };
        PoChartGaugeComponent.prototype.createComponent = function () {
            var factory = this.componentFactoryResolver.resolveComponentFactory(PoChartGaugeTextContentComponent);
            var componentRef = this.svgContainerRef.createComponent(factory);
            var instance = componentRef.instance;
            instance.serie = this.series.length && this.series[0];
            instance.gaugeWidth = this.getGaugeBaseWidth();
            this.resizeListenerSubscription(instance);
        };
        PoChartGaugeComponent.prototype.checkGaugeValueLimits = function (value) {
            if (value <= 0) {
                return 0;
            }
            else if (value >= 100) {
                return 100;
            }
            else {
                return value;
            }
        };
        PoChartGaugeComponent.prototype.drawBasePath = function () {
            var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
            this.drawPath(basePath, this.chartItemStartAngle, 0);
        };
        PoChartGaugeComponent.prototype.getGaugeBaseWidth = function () {
            var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
            if (basePath) {
                return basePath.getBoundingClientRect().width;
            }
        };
        PoChartGaugeComponent.prototype.getGaugeSerie = function (series) {
            if (series === void 0) { series = []; }
            var _a = __read(series, 1), serie = _a[0];
            if (serie && typeof serie === 'object') {
                return [
                    __assign(__assign({}, serie), { color: this.colors[0], value: this.checkGaugeValueLimits(serie.value) })
                ];
            }
            return [];
        };
        PoChartGaugeComponent.prototype.resizeListenerSubscription = function (instance) {
            var _this = this;
            this.windowResizeEmitter.subscribe(function () {
                instance.gaugeWidth = _this.getGaugeBaseWidth();
                _this.changeDetection.detectChanges();
            });
        };
        PoChartGaugeComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ComponentFactoryResolver },
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('svgContainer', { static: true, read: core.ViewContainerRef }),
            __metadata("design:type", core.ViewContainerRef)
        ], PoChartGaugeComponent.prototype, "svgContainerRef", void 0);
        PoChartGaugeComponent = __decorate([
            core.Component({
                selector: 'po-chart-gauge',
                template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef,
                core.ComponentFactoryResolver,
                core.ElementRef,
                core.NgZone,
                core.Renderer2])
        ], PoChartGaugeComponent);
        return PoChartGaugeComponent;
    }(PoChartCircular));

    var PoChartPieComponent = /** @class */ (function (_super) {
        __extends(PoChartPieComponent, _super);
        /* istanbul ignore next */
        function PoChartPieComponent(el, ngZone, renderer) {
            var _this = _super.call(this, el, ngZone, renderer) || this;
            _this.chartItemStartAngle = poChartStartAngle;
            return _this;
        }
        PoChartPieComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.Renderer2 }
        ]; };
        PoChartPieComponent = __decorate([
            core.Component({
                selector: 'po-chart-pie',
                template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.NgZone, core.Renderer2])
        ], PoChartPieComponent);
        return PoChartPieComponent;
    }(PoChartCircular));

    /**
     * @docsExtends PoChartBaseComponent
     *
     * @example
     *
     * <example name="po-chart-basic" title="PO Chart Basic">
     *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
     *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-chart-labs" title="PO Chart Labs">
     *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
     *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
     *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
     *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
     * </example>
     */
    var PoChartComponent = /** @class */ (function (_super) {
        __extends(PoChartComponent, _super);
        function PoChartComponent(changeDetector, componentFactoryResolver, differs) {
            var _a;
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.differs = differs;
            _this.calculatedElement = false;
            _this.initialized = false;
            _this.windowResizeListener = new rxjs.Subject();
            _this.mappings = (_a = {},
                _a[exports.PoChartType.Donut] = PoChartDonutComponent,
                _a[exports.PoChartType.Gauge] = PoChartGaugeComponent,
                _a[exports.PoChartType.Pie] = PoChartPieComponent,
                _a);
            _this.colors = [];
            _this.onResize = function () { return _this.windowResizeListener.next(); };
            _this.differ = _this.differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(PoChartComponent.prototype, "isChartGaugeType", {
            get: function () {
                return this.type === exports.PoChartType.Gauge;
            },
            enumerable: true,
            configurable: true
        });
        PoChartComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
        };
        PoChartComponent.prototype.ngDoCheck = function () {
            var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
            // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (charWrapperWidth && !this.calculatedElement && this.initialized) {
                this.calculatedElement = true;
                this.getSeriesColor();
                this.dynamicComponentSetting();
            }
            this.checkingForSerieChanges();
        };
        PoChartComponent.prototype.ngOnDestroy = function () {
            this.removeWindowResizeListener();
        };
        PoChartComponent.prototype.ngOnInit = function () {
            this.getSeriesColor();
        };
        PoChartComponent.prototype.rebuildComponent = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.getSeriesColor();
                this.dynamicComponentSetting();
            }
        };
        PoChartComponent.prototype.chartLegendHeight = function (chartLegend) {
            return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
        };
        PoChartComponent.prototype.checkingForSerieChanges = function () {
            if (this.componentRef && this.differ) {
                var changeSeries = this.differ.diff(this.chartSeries);
                if (changeSeries) {
                    this.getSeriesColor();
                    this.rebuildComponent();
                }
            }
        };
        PoChartComponent.prototype.createComponent = function () {
            var componentType = this.getComponentType(this.type);
            var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentRef = this.chartContainer.createComponent(factory);
            var instance = this.componentRef.instance;
            this.setChartProperties(instance);
            return instance;
        };
        PoChartComponent.prototype.dynamicComponentSetting = function () {
            var instance = this.createComponent();
            this.setResizeListenerSubscribe(instance);
            this.changeDetector.detectChanges();
            this.setClickSubscribe(instance);
            this.setHoverSubscribe(instance);
        };
        PoChartComponent.prototype.getComponentType = function (typeName) {
            return this.mappings[typeName];
        };
        PoChartComponent.prototype.getSeriesColor = function () {
            var colorsLength = PoChartColors.length - 1;
            if (!this.chartSeries) {
                return (this.colors = PoChartColors[colorsLength]);
            }
            if (this.type === exports.PoChartType.Gauge) {
                return (this.colors = PoChartColors[0]);
            }
            var seriesLength = this.chartSeries.length - 1;
            if (seriesLength > colorsLength) {
                var colors = PoChartColors[colorsLength];
                // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
                var quantityDuplicates = seriesLength / colorsLength;
                for (var i = 1; i <= quantityDuplicates; i++) {
                    colors = colors.concat(PoChartColors[colorsLength]);
                }
                return (this.colors = colors);
            }
            return (this.colors = PoChartColors[seriesLength]);
        };
        PoChartComponent.prototype.removeWindowResizeListener = function () {
            if (this.onResize) {
                this.onResize = function () { };
            }
        };
        PoChartComponent.prototype.setChartProperties = function (instance) {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegendHeight(this.chartLegend);
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
            instance.colors = Array.isArray(this.colors) ? __spread(this.colors) : [];
            instance.height = this.height;
            instance.type = this.type;
            instance.series = this.chartSeries || [];
        };
        PoChartComponent.prototype.setClickSubscribe = function (instance) {
            var _this = this;
            instance.onSerieClick.subscribe(function (event) {
                _this.onSeriesClick(event);
            });
        };
        PoChartComponent.prototype.setHoverSubscribe = function (instance) {
            var _this = this;
            instance.onSerieHover.subscribe(function (event) {
                _this.onSeriesHover(event);
            });
        };
        PoChartComponent.prototype.setResizeListenerSubscribe = function (instance) {
            var _this = this;
            this.windowResizeListener.subscribe(function () {
                instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
                instance.chartLegend = _this.chartLegendHeight(_this.chartLegend);
                instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
            });
        };
        PoChartComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ComponentFactoryResolver },
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.ViewChild('chartContainer', { read: core.ViewContainerRef, static: true }),
            __metadata("design:type", core.ViewContainerRef)
        ], PoChartComponent.prototype, "chartContainer", void 0);
        __decorate([
            core.ViewChild('chartHeader', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoChartComponent.prototype, "chartHeader", void 0);
        __decorate([
            core.ViewChild('chartLegend', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoChartComponent.prototype, "chartLegend", void 0);
        __decorate([
            core.ViewChild('chartWrapper', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoChartComponent.prototype, "chartWrapper", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Object)
        ], PoChartComponent.prototype, "onResize", void 0);
        PoChartComponent = __decorate([
            core.Component({
                selector: 'po-chart',
                template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"!isChartGaugeType\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-colors]=\"colors\" [p-series]=\"series\"> </po-chart-legend>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef,
                core.ComponentFactoryResolver,
                core.IterableDiffers])
        ], PoChartComponent);
        return PoChartComponent;
    }(PoChartBaseComponent));

    var PoChartLegendComponent = /** @class */ (function () {
        function PoChartLegendComponent() {
        }
        __decorate([
            core.Input('p-colors'),
            __metadata("design:type", Array)
        ], PoChartLegendComponent.prototype, "colors", void 0);
        __decorate([
            core.Input('p-series'),
            __metadata("design:type", Object)
        ], PoChartLegendComponent.prototype, "series", void 0);
        PoChartLegendComponent = __decorate([
            core.Component({
                selector: 'po-chart-legend',
                template: "<div class=\"po-chart-legend\">\n  <div class=\"po-chart-legend-container\">\n    <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n      <div class=\"po-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n      <span class=\"po-chart-legend-text\">{{ serie.category }}</span>\n    </div>\n  </div>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoChartLegendComponent);
        return PoChartLegendComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-chart`.
     */
    var PoChartModule = /** @class */ (function () {
        function PoChartModule() {
        }
        PoChartModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoTooltipModule],
                declarations: [
                    PoChartComponent,
                    PoChartDonutComponent,
                    PoChartGaugeComponent,
                    PoChartGaugeTextContentComponent,
                    PoChartPieComponent,
                    PoChartLegendComponent
                ],
                exports: [PoChartComponent]
            })
        ], PoChartModule);
        return PoChartModule;
    }());

    /**
     * @description
     *
     * O `po-container` é um componente que visa facilitar o agrupamento de conteúdos.
     * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
     * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
     * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
     * assim possibilitando o tratamento para diferentes resoluções.
     */
    var PoContainerBaseComponent = /** @class */ (function () {
        function PoContainerBaseComponent() {
            this._noBorder = false;
            this._noPadding = false;
            this._noShadow = false;
        }
        Object.defineProperty(PoContainerBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-container`.
             *
             * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
             */
            set: function (value) {
                this._height = convertToInt(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noBorder", {
            get: function () {
                return this._noBorder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a borda e a sombra em torno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noBorder = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noPadding", {
            get: function () {
                return this._noPadding;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o espaçamento interno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noPadding = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoContainerBaseComponent.prototype, "noShadow", {
            get: function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o sombreamento em torno do `po-container`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noShadow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoContainerBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-no-border'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoContainerBaseComponent.prototype, "noBorder", null);
        __decorate([
            core.Input('p-no-padding'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoContainerBaseComponent.prototype, "noPadding", null);
        __decorate([
            core.Input('p-no-shadow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoContainerBaseComponent.prototype, "noShadow", null);
        PoContainerBaseComponent = __decorate([
            core.Directive()
        ], PoContainerBaseComponent);
        return PoContainerBaseComponent;
    }());

    /**
     * @docsExtends PoContainerBaseComponent
     *
     * @example
     *
     * <example name="po-container-basic" title="PO Container Basic">
     *  <file name="sample-po-container-basic/sample-po-container-basic.component.html"> </file>
     *  <file name="sample-po-container-basic/sample-po-container-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-container-labs" title="PO Container Labs">
     *  <file name="sample-po-container-labs/sample-po-container-labs.component.html"> </file>
     *  <file name="sample-po-container-labs/sample-po-container-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-container-dashboard" title="PO Container - Dashboard">
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.html"> </file>
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.ts"> </file>
     *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.service.ts"> </file>
     * </example>
     */
    var PoContainerComponent = /** @class */ (function (_super) {
        __extends(PoContainerComponent, _super);
        function PoContainerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoContainerComponent = __decorate([
            core.Component({
                selector: 'po-container',
                template: "<div\n  class=\"po-container\"\n  [class.po-container-no-border]=\"noBorder\"\n  [class.po-container-no-padding]=\"noPadding\"\n  [class.po-container-no-shadow]=\"noShadow\"\n  [style.height]=\"height ? height + 'px' : 'auto'\"\n>\n  <ng-content></ng-content>\n</div>\n"
            })
        ], PoContainerComponent);
        return PoContainerComponent;
    }(PoContainerBaseComponent));

    /**
     * @description
     *
     * Módulo do componente `po-container`.
     */
    var PoContainerModule = /** @class */ (function () {
        function PoContainerModule() {
        }
        PoContainerModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                exports: [PoContainerComponent],
                declarations: [PoContainerComponent]
            })
        ], PoContainerModule);
        return PoContainerModule;
    }());

    var PO_DISCLAIMER_TYPES = ['default', 'danger'];
    var PO_DISCLAIMER_DEFAULT_TYPE = 'default';
    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente po-disclaimer é responsável por representar tags.
     * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
     * como por exemplo, no po-multi-select.
     *
     */
    var PoDisclaimerBaseComponent = /** @class */ (function () {
        function PoDisclaimerBaseComponent() {
            this._type = 'default';
            this._hideClose = false;
            this.showDisclaimer = true;
            /**
             * Evento disparado ao fechar o disclaimer.
             * Para este evento será passado como parâmetro um objeto com value, label e property.
             */
            this.closeAction = new core.EventEmitter();
        }
        Object.defineProperty(PoDisclaimerBaseComponent.prototype, "hideClose", {
            get: function () {
                return this._hideClose;
            },
            /**
             * @description
             *
             * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
             * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
             *
             * @default false
             */
            set: function (value) {
                this._hideClose = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDisclaimerBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @description
             *
             * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
             *
             * @default default
             * @optional
             */
            set: function (type) {
                this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
            },
            enumerable: true,
            configurable: true
        });
        PoDisclaimerBaseComponent.prototype.close = function () {
            this.showDisclaimer = false;
            this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
        };
        PoDisclaimerBaseComponent.prototype.getLabel = function () {
            return this.label ? this.label : this.value;
        };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDisclaimerBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", String)
        ], PoDisclaimerBaseComponent.prototype, "value", void 0);
        __decorate([
            core.Input('p-property'),
            __metadata("design:type", String)
        ], PoDisclaimerBaseComponent.prototype, "property", void 0);
        __decorate([
            core.Input('p-hide-close'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDisclaimerBaseComponent.prototype, "hideClose", null);
        __decorate([
            core.Output('p-close-action'),
            __metadata("design:type", core.EventEmitter)
        ], PoDisclaimerBaseComponent.prototype, "closeAction", void 0);
        __decorate([
            core.Input('p-type'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDisclaimerBaseComponent.prototype, "type", null);
        PoDisclaimerBaseComponent = __decorate([
            core.Directive()
        ], PoDisclaimerBaseComponent);
        return PoDisclaimerBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoDisclaimerBaseComponent
     *
     * @examplePrivate
     *
     * <example-private name="po-disclaimer" title="PO Disclaimer">
     *   <file name="sample-po-disclaimer.component.html"> </file>
     *   <file name="sample-po-disclaimer.component.ts"> </file>
     * </example-private>
     */
    var PoDisclaimerComponent = /** @class */ (function (_super) {
        __extends(PoDisclaimerComponent, _super);
        function PoDisclaimerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoDisclaimerComponent.prototype.onKeyPress = function (event) {
            if (isKeyCodeEnter(event)) {
                this.close();
            }
        };
        PoDisclaimerComponent = __decorate([
            core.Component({
                selector: 'po-disclaimer',
                template: "<div *ngIf=\"showDisclaimer === true\" class=\"po-disclaimer\">\n  <span class=\"po-disclaimer-label\" [class.po-disclaimer-label-danger]=\"type === 'danger'\">\n    {{ getLabel() }}\n  </span>\n\n  <span\n    *ngIf=\"hideClose === false\"\n    class=\"po-disclaimer-remove po-icon po-icon-close po-clickable\"\n    tabindex=\"0\"\n    [class.po-disclaimer-remove-danger]=\"type === 'danger'\"\n    (click)=\"close()\"\n    (keydown)=\"onKeyPress($event)\"\n  >\n  </span>\n</div>\n"
            })
        ], PoDisclaimerComponent);
        return PoDisclaimerComponent;
    }(PoDisclaimerBaseComponent));

    /**
     * @description
     * Módulo do componente po-disclaimer.
     */
    var PoDisclaimerModule = /** @class */ (function () {
        function PoDisclaimerModule() {
        }
        PoDisclaimerModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoDisclaimerComponent],
                exports: [PoDisclaimerComponent]
            })
        ], PoDisclaimerModule);
        return PoDisclaimerModule;
    }());

    var poDisclaimerGroupLiteralsDefault = {
        en: { removeAll: 'Remove all' },
        es: { removeAll: 'Eliminar todos' },
        pt: { removeAll: 'Remover todos' }
    };
    /**
     * @description
     *
     * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
     *
     * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
     * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
     *
     * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
     * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
     *
     * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
     */
    var PoDisclaimerGroupBaseComponent = /** @class */ (function () {
        function PoDisclaimerGroupBaseComponent(differs) {
            this._disclaimers = [];
            this._hideRemoveAll = false;
            this.previousDisclaimers = [];
            this.literals = __assign(__assign({}, poDisclaimerGroupLiteralsDefault[poLocaleDefault]), poDisclaimerGroupLiteralsDefault[browserLanguage()]);
            /** Função que será disparada quando a lista de *disclaimers* for modificada. */
            this.change = new core.EventEmitter();
            this.differ = differs.find([]).create(null);
        }
        Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "disclaimers", {
            get: function () {
                return this._disclaimers;
            },
            /** Lista de *disclaimers*. */
            /**
             * @description
             *
             * Lista de *disclaimers*.
             *
             * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
             *
             * Exemplo adicionando um *disclaimer* no array:
             *
             * ```
             * this.disclaimers = [...this.disclaimers, disclaimer];
             * ```
             *
             * ou
             *
             * ```
             * this.disclaimers = this.disclaimers.concat(disclaimer);
             * ```
             */
            set: function (value) {
                this.previousDisclaimers = __spread(this.disclaimers);
                this._disclaimers = this.checkDisclaimers(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
            get: function () {
                return this._hideRemoveAll;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o botão para remover todos os *disclaimers* do grupo.
             *
             * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        PoDisclaimerGroupBaseComponent.prototype.ngDoCheck = function () {
            this.checkChanges();
        };
        PoDisclaimerGroupBaseComponent.prototype.closeItem = function (disclaimer, emitChange) {
            if (emitChange === void 0) { emitChange = true; }
            var itemIndex = this.disclaimers.findIndex(function (d) { return d['$id'] === disclaimer['$id']; });
            this.disclaimers.splice(itemIndex, 1);
            if (emitChange) {
                this.emitChangeDisclaimers();
            }
        };
        PoDisclaimerGroupBaseComponent.prototype.isRemoveAll = function () {
            return !this.hideRemoveAll && this.disclaimers.filter(function (c) { return !c.hideClose; }).length > 1;
        };
        PoDisclaimerGroupBaseComponent.prototype.onKeyPress = function (event) {
            if (isKeyCodeEnter(event)) {
                this.removeAllItems();
            }
        };
        PoDisclaimerGroupBaseComponent.prototype.removeAllItems = function () {
            var _this = this;
            var removeItems = [];
            this.disclaimers.forEach(function (disclaimer) {
                if (!disclaimer.hideClose) {
                    removeItems.push(disclaimer);
                }
            });
            removeItems.forEach(function (disclaimer) { return _this.closeItem(disclaimer, false); });
            this.emitChangeDisclaimers();
        };
        PoDisclaimerGroupBaseComponent.prototype.checkChanges = function () {
            if (this.differ) {
                var changes = this.differ.diff(this.disclaimers);
                if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                    this.emitChangeDisclaimers();
                }
            }
        };
        PoDisclaimerGroupBaseComponent.prototype.checkDisclaimers = function (disclaimers) {
            if (Array.isArray(disclaimers)) {
                for (var i = 0; i < disclaimers.length; i++) {
                    var disclaimer = disclaimers[i];
                    if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                        disclaimer['$id'] = uuid$1.v4();
                    }
                    else {
                        disclaimers.splice(i, 1);
                        i--;
                    }
                }
                return disclaimers;
            }
            return [];
        };
        PoDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = function (disclaimers) {
            var _this = this;
            var currentValues = disclaimers;
            if (currentValues.length !== this.previousDisclaimers.length) {
                return true;
            }
            return currentValues.some(function (disclaimer, index) {
                return disclaimer.value !== _this.previousDisclaimers[index].value ||
                    disclaimer.property !== _this.previousDisclaimers[index].property;
            });
        };
        PoDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = function () {
            var _this = this;
            setTimeout(function () {
                _this.change.emit(_this.disclaimers);
            });
            this.previousDisclaimers = __spread(this._disclaimers);
        };
        PoDisclaimerGroupBaseComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.Input('p-disclaimers'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoDisclaimerGroupBaseComponent.prototype, "disclaimers", null);
        __decorate([
            core.Input('p-hide-remove-all'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoDisclaimerGroupBaseComponent.prototype, "title", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoDisclaimerGroupBaseComponent.prototype, "change", void 0);
        PoDisclaimerGroupBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [core.IterableDiffers])
        ], PoDisclaimerGroupBaseComponent);
        return PoDisclaimerGroupBaseComponent;
    }());

    /**
     * @docsExtends PoDisclaimerGroupBaseComponent
     *
     * @example
     *
     * <example name="po-disclaimer-group-basic" title="PO Disclaimer Group Basic">
     *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-disclaimer-group-labs" title="PO Disclaimer Group Labs">
     *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-disclaimer-group-sw-planets" title="PO Disclaimer Group - Star Wars Planets">
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
     *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
     * </example>
     *
     */
    var PoDisclaimerGroupComponent = /** @class */ (function (_super) {
        __extends(PoDisclaimerGroupComponent, _super);
        function PoDisclaimerGroupComponent(differs) {
            return _super.call(this, differs) || this;
        }
        PoDisclaimerGroupComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        PoDisclaimerGroupComponent = __decorate([
            core.Component({
                selector: 'po-disclaimer-group',
                template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\">\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\n\n  <po-disclaimer-remove\n    *ngIf=\"isRemoveAll()\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (p-remove-all-action)=\"removeAllItems()\"\n  >\n  </po-disclaimer-remove>\n\n  <po-disclaimer\n    *ngFor=\"let disclaimer of disclaimers\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-hide-close]=\"disclaimer.hideClose\"\n    [p-label]=\"disclaimer.label\"\n    [p-property]=\"disclaimer.property\"\n    [p-value]=\"disclaimer.value\"\n    (p-close-action)=\"closeItem(disclaimer)\"\n  >\n  </po-disclaimer>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.IterableDiffers])
        ], PoDisclaimerGroupComponent);
        return PoDisclaimerGroupComponent;
    }(PoDisclaimerGroupBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Este é um componente interno utilizado pelo po-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
     * po-disclaimers do grupo.
     */
    var PoDisclaimerRemoveComponent = /** @class */ (function () {
        function PoDisclaimerRemoveComponent() {
            /** Ação para remover todos.  */
            this.removeAllAction = new core.EventEmitter();
        }
        // Emite a ação de remover todos.
        PoDisclaimerRemoveComponent.prototype.removeAction = function () {
            this.removeAllAction.emit();
        };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDisclaimerRemoveComponent.prototype, "label", void 0);
        __decorate([
            core.Output('p-remove-all-action'),
            __metadata("design:type", Object)
        ], PoDisclaimerRemoveComponent.prototype, "removeAllAction", void 0);
        PoDisclaimerRemoveComponent = __decorate([
            core.Component({
                selector: 'po-disclaimer-remove',
                template: "<po-disclaimer\n  class=\"po-clickable\"\n  tabindex=\"0\"\n  p-hide-close=\"true\"\n  p-type=\"danger\"\n  [p-label]=\"label\"\n  (click)=\"removeAction()\"\n>\n</po-disclaimer>\n"
            })
        ], PoDisclaimerRemoveComponent);
        return PoDisclaimerRemoveComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-disclaimer-group.
     */
    var PoDisclaimerGroupModule = /** @class */ (function () {
        function PoDisclaimerGroupModule() {
        }
        PoDisclaimerGroupModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoDisclaimerModule],
                declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent],
                exports: [PoDisclaimerGroupComponent]
            })
        ], PoDisclaimerGroupModule);
        return PoDisclaimerGroupModule;
    }());

    /**
     * @description
     *
     * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
     * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
     */
    var PoDividerBaseComponent = /** @class */ (function () {
        function PoDividerBaseComponent() {
        }
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDividerBaseComponent.prototype, "label", void 0);
        PoDividerBaseComponent = __decorate([
            core.Directive()
        ], PoDividerBaseComponent);
        return PoDividerBaseComponent;
    }());

    /**
     * @docsExtends PoDividerBaseComponent
     *
     * @example
     *
     * <example name="po-divider-basic" title="PO Divider Basic" >
     *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.html"> </file>
     *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-divider-labs" title="PO Divider Labs" >
     *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.html"> </file>
     *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-divider-user-detail" title="PO Divider - User Detail" >
     *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.html"> </file>
     *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.ts"> </file>
     * </example>
     */
    var PoDividerComponent = /** @class */ (function (_super) {
        __extends(PoDividerComponent, _super);
        function PoDividerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoDividerComponent = __decorate([
            core.Component({
                selector: 'po-divider',
                template: "<div class=\"po-divider\">\n  <div *ngIf=\"label\" class=\"po-divider-label\">{{ label }}</div>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoDividerComponent);
        return PoDividerComponent;
    }(PoDividerBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-divider.
     */
    var PoDividerModule = /** @class */ (function () {
        function PoDividerModule() {
        }
        PoDividerModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoDividerComponent],
                exports: [PoDividerComponent]
            })
        ], PoDividerModule);
        return PoDividerModule;
    }());

    var poPopupDefaultPosition = 'bottom-left';
    /**
     * @description
     *
     * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
     * Ele abre sobreposto aos outros componentes.
     *
     * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
     *
     * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
     * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
     *
     * ```
     * <po-popup [p-target]="target">
     *   <div p-popup-header-template>
     *     <div>
     *       Dev PO
     *     </div>
     *     <div>
     *       dev.po@po-ui.com.br
     *     </div>
     *   </div>
     * </po-popup >
     * ```
     */
    var PoPopupBaseComponent = /** @class */ (function () {
        function PoPopupBaseComponent() {
            this._hideArrow = false;
            this._isCornerAlign = false;
            this._position = poPopupDefaultPosition;
            this.arrowDirection = 'top-right';
            this.showPopup = false;
        }
        Object.defineProperty(PoPopupBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "hideArrow", {
            get: function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a seta do componente *popup*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "isCornerAlign", {
            get: function () {
                return this._isCornerAlign;
            },
            // Define se o `po-popup` será alinhado pelos cantos do elemento target.
            set: function (value) {
                this._isCornerAlign = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "position", {
            get: function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
             * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popup acima do componente alvo.
             * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
             *
             * @default `bottom-left`
             */
            set: function (value) {
                this._position = PO_CONTROL_POSITIONS.includes(value) ? value : poPopupDefaultPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "customPositions", {
            get: function () {
                return this._customPositions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
             * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
             *
             * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
             * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popup acima do componente alvo.
             * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
             */
            set: function (value) {
                this._customPositions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopupBaseComponent.prototype, "target", {
            get: function () {
                return this._target;
            },
            /**
             * @description
             *
             * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
             * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
             *
             * ```
             * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
             *   Credit Actions
             * </span>
             *
             * <po-popup #popup
             *   [p-actions]="actions"
             *   [p-target]="icon">
             * </po-popup>
             * ```
             *
             * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
             *
             * ```
             * // component.html
             *
             * <po-button #poButton
             *   p-label="Open Popover"
             *   (p-click)="popup.toggle()">
             * </po-button>
             *
             * <po-popup #popup
             *   [p-actions]="actions"
             *   [p-target]="poButtonRef">
             * </po-popup>
             *
             * // component.ts
             *
             * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
             * ```
             */
            set: function (value) {
                this._target = value instanceof core.ElementRef ? value.nativeElement : value;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoPopupBaseComponent.prototype, "actions", null);
        __decorate([
            core.Input('p-hide-arrow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoPopupBaseComponent.prototype, "hideArrow", null);
        __decorate([
            core.Input('p-is-corner-align'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoPopupBaseComponent.prototype, "isCornerAlign", null);
        __decorate([
            core.Input('p-position'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPopupBaseComponent.prototype, "position", null);
        __decorate([
            core.Input('p-custom-positions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoPopupBaseComponent.prototype, "customPositions", null);
        __decorate([
            core.Input('p-target'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPopupBaseComponent.prototype, "target", null);
        PoPopupBaseComponent = __decorate([
            core.Directive()
        ], PoPopupBaseComponent);
        return PoPopupBaseComponent;
    }());

    /**
     *
     * @docsExtends PoPopupBaseComponent
     *
     * @example
     *
     * <example name="po-popup-basic" title="PO Popup - Basic">
     *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
     *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-popup-labs" title="PO Popup - Labs">
     *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
     *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-popup-email" title="PO Popup Email">
     *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
     *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
     * </example>
     *
     */
    var PoPopupComponent = /** @class */ (function (_super) {
        __extends(PoPopupComponent, _super);
        function PoPopupComponent(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.poControlPosition = poControlPosition;
            _this.changeDetector = changeDetector;
            _this.onScroll = function () {
                if (_this.showPopup) {
                    _this.close();
                }
            };
            _this.parentRef = viewContainerRef['_hostView'][8];
            return _this;
        }
        /**
         * Fecha o componente *popup*.
         *
         * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
         */
        PoPopupComponent.prototype.close = function () {
            this.removeListeners();
            this.showPopup = false;
        };
        PoPopupComponent.prototype.onActionClick = function (popupAction) {
            var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
            if (popupAction && popupAction.action && actionNoDisabled) {
                this.close();
                return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
            }
            if (popupAction && popupAction.url && actionNoDisabled) {
                this.close();
                return this.openUrl(popupAction.url);
            }
        };
        /**
         * Abre o componente *popup*.
         *
         * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        PoPopupComponent.prototype.open = function (param) {
            this.oldTarget = this.target;
            this.param = param;
            this.showPopup = true;
            this.changeDetector.detectChanges();
            this.validateInitialContent();
        };
        PoPopupComponent.prototype.returnBooleanValue = function (popupAction, property) {
            return isTypeof(popupAction[property], 'function')
                ? popupAction[property](this.param || popupAction)
                : popupAction[property];
        };
        /**
         * Responsável por abrir e fechar o *popup*.
         *
         * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
         *
         * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        PoPopupComponent.prototype.toggle = function (param) {
            this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
        };
        PoPopupComponent.prototype.clickedOutDisabledItem = function (event) {
            var containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
                this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
            return !containsItemDisabled;
        };
        PoPopupComponent.prototype.clickedOutHeaderTemplate = function (event) {
            var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
            return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
        };
        PoPopupComponent.prototype.clickedOutTarget = function (event) {
            return this.target && !this.target.contains(event.target);
        };
        PoPopupComponent.prototype.closePopupOnClickout = function (event) {
            if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
                this.close();
            }
        };
        PoPopupComponent.prototype.elementContains = function (element, className) {
            return element && element.classList.contains(className);
        };
        PoPopupComponent.prototype.hasContentToShow = function () {
            return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
        };
        PoPopupComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.close();
            });
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.closePopupOnClickout(event);
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoPopupComponent.prototype.openUrl = function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        PoPopupComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoPopupComponent.prototype.setPosition = function () {
            this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
            this.poControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.poControlPosition.getArrowDirection();
        };
        PoPopupComponent.prototype.validateInitialContent = function () {
            if (this.hasContentToShow()) {
                this.setPosition();
                this.initializeListeners();
            }
            else {
                this.close();
            }
        };
        PoPopupComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: router.Router },
            { type: PoControlPositionService },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('popupRef', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoPopupComponent.prototype, "popupRef", void 0);
        PoPopupComponent = __decorate([
            core.Component({
                selector: 'po-popup',
                template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div\n      *ngIf=\"action.visible !== false\"\n      [class.po-popup-item-default]=\"action.type !== 'danger'\"\n      [class.po-popup-item-danger]=\"action.type === 'danger'\"\n      [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.po-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\"\n    >\n      <span *ngIf=\"action.icon\" class=\"po-icon {{ action.icon }} po-popup-icon-item\"></span>\n      {{ action.label }}\n    </div>\n  </ng-container>\n</div>\n",
                providers: [PoControlPositionService]
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef,
                core.Renderer2,
                router.Router,
                PoControlPositionService,
                core.ChangeDetectorRef])
        ], PoPopupComponent);
        return PoPopupComponent;
    }(PoPopupBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-popup.
     */
    var PoPopupModule = /** @class */ (function () {
        function PoPopupModule() {
        }
        PoPopupModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoPopupComponent],
                exports: [PoPopupComponent],
                providers: [],
                schemas: []
            })
        ], PoPopupModule);
        return PoPopupModule;
    }());

    /**
     * @description
     *
     * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
     *
     * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
     * no módulo principal para o correto funcionamento deste componente:
     *
     * ```
     * import { RouterModule } from '@angular/router';
     *
     * @NgModule({
     *   imports: [
     *     ...
     *     RouterModule.forRoot([]),
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   exports: [],
     *   providers: [],
     *   bootstrap: [
     *     AppComponent
     *   ]
     * })
     * export class AppModule { }
     * ```
     * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
     * [/Configurando as rotas do po-menu](/guides/getting-started).
     */
    var PoDropdownBaseComponent = /** @class */ (function () {
        function PoDropdownBaseComponent() {
            this._disabled = false;
            this.icon = 'po-icon-arrow-down';
            this.open = false;
        }
        Object.defineProperty(PoDropdownBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDropdownBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoDropdownBaseComponent.prototype, "actions", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDropdownBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDropdownBaseComponent.prototype, "label", void 0);
        PoDropdownBaseComponent = __decorate([
            core.Directive()
        ], PoDropdownBaseComponent);
        return PoDropdownBaseComponent;
    }());

    /**
     * @docsExtends PoDropdownBaseComponent
     *
     * @example
     *
     * <example name="po-dropdown-basic" title="PO Dropdown Basic" >
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.html"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.ts"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-dropdown-labs" title="PO Dropdown Labs" >
     *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.html"> </file>
     *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-dropdown-social-network" title="PO Dropdown - Social Network" >
     *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.html"> </file>
     *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.ts"> </file>
     * </example>
     */
    var PoDropdownComponent = /** @class */ (function (_super) {
        __extends(PoDropdownComponent, _super);
        function PoDropdownComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.onScroll = function () {
                if (_this.open) {
                    _this.hideDropdown();
                }
            };
            return _this;
        }
        PoDropdownComponent.prototype.onKeyDown = function (event) {
            if (isKeyCodeEnter(event)) {
                this.toggleDropdown();
            }
        };
        PoDropdownComponent.prototype.toggleDropdown = function () {
            this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
        };
        PoDropdownComponent.prototype.checkClickArea = function (event) {
            return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
        };
        PoDropdownComponent.prototype.hideDropdown = function () {
            this.icon = 'po-icon-arrow-down';
            this.removeListeners();
            this.popupRef.close();
            this.open = false;
        };
        PoDropdownComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnDropdown(event);
            });
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.hideDropdown();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoDropdownComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoDropdownComponent.prototype.showDropdown = function () {
            this.icon = 'po-icon-arrow-up';
            this.initializeListeners();
            this.popupRef.open();
            this.open = true;
        };
        PoDropdownComponent.prototype.wasClickedOnDropdown = function (event) {
            var clickedOnDropdown = this.checkClickArea(event);
            if (!clickedOnDropdown) {
                this.hideDropdown();
            }
        };
        PoDropdownComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('dropdownRef', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDropdownComponent.prototype, "dropdownRef", void 0);
        __decorate([
            core.ViewChild('popupRef'),
            __metadata("design:type", Object)
        ], PoDropdownComponent.prototype, "popupRef", void 0);
        PoDropdownComponent = __decorate([
            core.Component({
                selector: 'po-dropdown',
                template: "<div\n  #dropdownRef\n  class=\"po-dropdown\"\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\n  (click)=\"toggleDropdown()\"\n  (keydown)=\"onKeyDown($event)\"\n>\n  <div class=\"po-dropdown-button\" [ngClass]=\"{ 'po-dropdown-button-disabled': disabled }\">\n    {{ label }}\n    <div class=\"po-dropdown-icon po-icon {{ icon }}\"></div>\n  </div>\n\n  <po-popup\n    #popupRef\n    p-hide-arrow\n    p-is-corner-align\n    p-position=\"bottom-left\"\n    [p-actions]=\"actions\"\n    [p-custom-positions]=\"['bottom-left', 'top-left']\"\n    [p-target]=\"dropdownRef\"\n  >\n  </po-popup>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], PoDropdownComponent);
        return PoDropdownComponent;
    }(PoDropdownBaseComponent));

    /**
     * @description
     * Módulo do componente po-dropdown.
     */
    var PoDropdownModule = /** @class */ (function () {
        function PoDropdownModule() {
        }
        PoDropdownModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoPopupModule],
                declarations: [PoDropdownComponent],
                exports: [PoDropdownComponent]
            })
        ], PoDropdownModule);
        return PoDropdownModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o po-field-container.
     * Essa margem inferior pode conter uma mensagem de erro.
     */
    var PoFieldContainerBottomComponent = /** @class */ (function () {
        function PoFieldContainerBottomComponent() {
            /**
             * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
             * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
        }
        __decorate([
            core.Input('p-error-pattern'),
            __metadata("design:type", String)
        ], PoFieldContainerBottomComponent.prototype, "errorPattern", void 0);
        PoFieldContainerBottomComponent = __decorate([
            core.Component({
                selector: 'po-field-container-bottom',
                template: "<div class=\"po-field-container-bottom\">\n  <span *ngIf=\"errorPattern\" class=\"po-field-container-bottom-text-error\">\n    <span class=\"po-icon po-icon-warning po-field-container-icon-error\"></span>\n    {{ errorPattern }}\n  </span>\n</div>\n"
            })
        ], PoFieldContainerBottomComponent);
        return PoFieldContainerBottomComponent;
    }());

    /**
     * @docsPrivate
     *
     * Componente de uso interno, responsável por atribuir uma label para o campo
     */
    var PoFieldContainerComponent = /** @class */ (function () {
        function PoFieldContainerComponent() {
            this._optional = false;
        }
        Object.defineProperty(PoFieldContainerComponent.prototype, "optional", {
            get: function () {
                return this._optional;
            },
            /** Indica se o campo será opcional. */
            set: function (value) {
                this._optional = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        PoFieldContainerComponent.prototype.getOptionalText = function () {
            var browserLanguage = getShortBrowserLanguage();
            var optional = {
                pt: '(Opcional)',
                en: '(Optional)',
                es: '(Opcional)'
            };
            return optional[browserLanguage];
        };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoFieldContainerComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoFieldContainerComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoFieldContainerComponent.prototype, "optional", null);
        PoFieldContainerComponent = __decorate([
            core.Component({
                selector: 'po-field-container',
                template: "<div class=\"po-field-container\">\n  <div class=\"po-field-container-title\">\n    <span class=\"po-field-title\">{{ label }}</span>\n    <span class=\"po-field-optional\" *ngIf=\"optional && (label || help)\">{{ getOptionalText() }}</span>\n  </div>\n\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\n\n  <ng-content></ng-content>\n</div>\n"
            })
        ], PoFieldContainerComponent);
        return PoFieldContainerComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-field-container`.
     */
    var PoFieldContainerModule = /** @class */ (function () {
        function PoFieldContainerModule() {
        }
        PoFieldContainerModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent],
                declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent]
            })
        ], PoFieldContainerModule);
        return PoFieldContainerModule;
    }());

    /**
     * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
     * o ciclo de vida do Angular.
     *
     * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
     * @param lifecycleName clico de vida que se deseja executar com a validação.
     * @param callback função que será executada para validadar a propriedade.
     */
    function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
        var target = decoratorProperties.target, property = decoratorProperties.property;
        var emptyFunction = function () { };
        var lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
        Object.defineProperty(target, lifecycleName, {
            value: function () {
                callback.call(this, property, target);
                lifecycleFunctionClone.call(this);
            }
        });
    }
    /**
     * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
     *
     * > Este decorator irá criar os métodos get e set internamente. Portanto,
     * é importante **não** criar nomes privados para as propriedades utilizando
     * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
     * criada pelo decorator.
     *
     * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
     * @param decoratorName nome do decorator
     * @param callback função que será executada para alterar o valor da propriedade
     */
    function changeValueByCallback(decoratorProperties, decoratorName, callback) {
        var target = decoratorProperties.target, property = decoratorProperties.property, originalDescriptor = decoratorProperties.originalDescriptor;
        var privatePropertyName = createPrivateProperty(target, property, decoratorName);
        return {
            get: getter(originalDescriptor, privatePropertyName),
            set: setter(originalDescriptor, callback, privatePropertyName)
        };
    }
    function setter(originalDescriptor, callback, privatePropertyName) {
        return function (value) {
            if (originalDescriptor && originalDescriptor.set) {
                originalDescriptor.set.bind(this)(callback(value));
            }
            this[privatePropertyName] = callback(value);
        };
    }
    function getter(originalDescriptor, privatePropName) {
        return function () {
            return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
        };
    }
    function createPrivateProperty(target, propertyName, decoratorName) {
        var privatePropName = "$$__" + propertyName;
        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
            console.warn("The prop \"" + privatePropName + "\" is already exist, it will be overrided by " + decoratorName + " decorator.");
        }
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true
        });
        return privatePropName;
    }

    /**
     * Converte o valor de um campo de entrada para booleano.
     *
     * Forma de utilização:
     *
     * ```
     * @Input('p-loading') @InputBoolean() loading: boolean;
     * ```
     */
    function InputBoolean() {
        return function (target, property, originalDescriptor) {
            var decoratorProperties = { target: target, property: property, originalDescriptor: originalDescriptor };
            return changeValueByCallback(decoratorProperties, 'InputBoolean', convertToBoolean);
        };
    }

    /**
     * @docsPrivate
     *
     * @description
     *
     * Verifica se uma entrada de um componente foi preenchida.
     *
     * Na ausência da propriedade o decorator irá disparar um warn no console
     * do navegador do usuário.
     *
     * > Esta verificação é feita apenas no ngOnInit do componente.
     *
     * Forma de utilização:
     * ```
     * @Input('p-label') @InputRequired() label: string;
     * ```
     *
     * Referência:
     * https://netbasal.com/how-to-add-angular-component-input-validation-b078a30af97f
     * https://medium.com/@abdelelmedny/angular-input-decorators-5d38089070aa
     */
    function InputRequired() {
        return function (target, property) {
            var decoratorProperties = { target: target, property: property };
            validatePropertyOnLifeCycle(decoratorProperties, 'ngOnInit', validateProperty);
        };
    }
    function validateProperty(property, target) {
        if (this[property] == null) {
            console.warn(target.constructor.name + ": " + property + " is required, but was not provided");
        }
    }

    function requiredFailed(required, disabled, value) {
        var valid = (typeof value === 'string' && value) ||
            (typeof value === 'object' && value && value.length) ||
            (typeof value === 'number' && (value || value === 0)) ||
            (typeof value === 'boolean' && value);
        return required && !disabled && !valid;
    }
    function maxlengpoailed(maxlength, value) {
        var validMaxlength = maxlength || maxlength === 0;
        var validValue = (value || value === 0) && value.toString();
        return validMaxlength && validValue && validValue.length > Number(maxlength);
    }
    function minlengpoailed(minlength, value) {
        var validMinlength = minlength || minlength === 0;
        var validValue = (value || value === 0) && value.toString();
        return validMinlength && validValue && validValue.length < Number(minlength);
    }
    function patternFailed(pattern, value) {
        var reg;
        try {
            reg = new RegExp(pattern);
        }
        catch (e) {
            return true;
        }
        return pattern && value && !reg.test(value);
    }
    function minFailed(min, value) {
        var validValue = value || value === 0;
        var validMin = min || min === 0;
        return validValue && validMin && value < min;
    }
    function maxFailed(max, value) {
        var validValue = value || value === 0;
        var validMax = max || max === 0;
        return validValue && validMax && value > max;
    }
    function dateFailed(value) {
        return value && isNaN(Date.parse(value));
    }

    var poCheckboxGroupColumnsDefaultLength = 6;
    var poCheckboxGroupColumnsTotalLength = 12;
    /**
     * @description
     *
     * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
     * utilizando a tecla de espaço ou o clique do mouse, várias opções.
     *
     * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
     *
     * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
     *
     * ```
     * favorites = ['PO', 'Angular'];
     * ```
     *
     * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
     * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
     * deve setar a propriedade `p-indeterminate` como `true`.
     *
     * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
     *
     * ```
     * favorites = {
     *  PO: true,
     *  Angular: true,
     *  VueJS: false,
     *  React: null // indeterminado
     * };
     * ```
     */
    var PoCheckboxGroupBaseComponent = /** @class */ (function () {
        function PoCheckboxGroupBaseComponent() {
            this.checkedOptions = {};
            this.checkedOptionsList = [];
            this.mdColumns = poCheckboxGroupColumnsDefaultLength;
            this._columns = poCheckboxGroupColumnsDefaultLength;
            this._disabled = false;
            this._indeterminate = false;
            this._required = false;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
            /** Evento disparado ao alterar valor do campo */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
             * - É possível exibir as opções entre `1` e `4` colunas.
             * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
             * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
             * o *grid system* será composto por `2` colunas.
             * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
             *
             * @default `2`
             *
             */
            set: function (value) {
                var columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todos os itens do checkbox.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "indeterminate", {
            get: function () {
                return this._indeterminate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
             * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
             *
             * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
             * `ngModel`, diferente do array que contém apenas os valores selecionados.
             *
             * @default `false`
             */
            set: function (indeterminate) {
                this._indeterminate = convertToBoolean(indeterminate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * @optional
             *
             * @description
             * Lista de opções que serão exibidas
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
             */
            set: function (value) {
                this._options = Array.isArray(value) ? value : [];
                this.removeDuplicatedOptions();
                this.setCheckboxGroupOptionsView(this.options);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: true,
            configurable: true
        });
        PoCheckboxGroupBaseComponent.prototype.changeValue = function () {
            var value = this.checkIndeterminate();
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(value);
        };
        PoCheckboxGroupBaseComponent.prototype.checkIndeterminate = function () {
            return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
        };
        PoCheckboxGroupBaseComponent.prototype.checkOption = function (value) {
            if (!this._disabled && !value.disabled) {
                this.checkOptionModel(value);
                this.changeValue();
            }
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoCheckboxGroupBaseComponent.prototype.writeValue = function (optionsModel) {
            if (optionsModel && this.checkedOptions !== optionsModel) {
                this.generateCheckOptions(optionsModel);
            }
            else {
                this.checkedOptionsList = [];
                this.checkedOptions = {};
            }
        };
        PoCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoCheckboxGroupBaseComponent.prototype.validate = function (abstractControl) {
            if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
                this.isInvalidIndeterminate()) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoCheckboxGroupBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoCheckboxGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        PoCheckboxGroupBaseComponent.prototype.checkOptionModel = function (optionChecked) {
            this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
            if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
                this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
            }
            else if (!this.indeterminate) {
                this.checkedOptionsList.push(optionChecked.value);
            }
        };
        PoCheckboxGroupBaseComponent.prototype.generateCheckOptions = function (optionsModel) {
            var _this = this;
            this.checkedOptions = {};
            if (optionsModel instanceof Array) {
                this.checkedOptionsList = optionsModel;
                this.options.forEach(function (option) {
                    _this.checkedOptions[option.value] = optionsModel.includes(option.value);
                });
            }
            else {
                this.options.forEach(function (option) {
                    optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                    _this.checkedOptions = optionsModel;
                });
            }
        };
        PoCheckboxGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
            var gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
        };
        PoCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = function () {
            if (this.indeterminate && this.required && this.checkedOptions) {
                return Object.values(this.checkedOptions).every(function (value) { return value === false; });
            }
            return false;
        };
        PoCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = function () {
            var _this = this;
            this.options.forEach(function (option, index) {
                var duplicatedIndex = _this.options.findIndex(function (optionFind) { return optionFind.value === option.value; }) === index;
                if (!duplicatedIndex) {
                    _this.options.splice(_this.options.indexOf(option), 1);
                }
            });
        };
        PoCheckboxGroupBaseComponent.prototype.setCheckboxGroupOptionsView = function (optionsList) {
            this.checkboxGroupOptionsView = optionsList.map(function (option) {
                return __assign(__assign({}, option), { id: uuid() });
            });
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoCheckboxGroupBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoCheckboxGroupBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoCheckboxGroupBaseComponent.prototype, "columns", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoCheckboxGroupBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoCheckboxGroupBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-indeterminate'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoCheckboxGroupBaseComponent.prototype, "indeterminate", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoCheckboxGroupBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoCheckboxGroupBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoCheckboxGroupBaseComponent.prototype, "options", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoCheckboxGroupBaseComponent.prototype, "required", null);
        __decorate([
            core.Output('ngModelChange'),
            __metadata("design:type", core.EventEmitter)
        ], PoCheckboxGroupBaseComponent.prototype, "ngModelChange", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoCheckboxGroupBaseComponent.prototype, "change", void 0);
        PoCheckboxGroupBaseComponent = __decorate([
            core.Directive()
        ], PoCheckboxGroupBaseComponent);
        return PoCheckboxGroupBaseComponent;
    }());

    /**
     * @docsExtends PoCheckboxGroupBaseComponent
     *
     * @example
     *
     * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
     *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
     *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
     *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
     *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
     *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
     *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
     * </example>
     */
    var PoCheckboxGroupComponent = /** @class */ (function (_super) {
        __extends(PoCheckboxGroupComponent, _super);
        function PoCheckboxGroupComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        PoCheckboxGroupComponent_1 = PoCheckboxGroupComponent;
        PoCheckboxGroupComponent.prototype.ngAfterViewChecked = function () {
            this.changeDetector.detectChanges();
        };
        PoCheckboxGroupComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
         *
         * focusCheckbox() {
         *   this.checkbox.focus();
         * }
         * ```
         */
        PoCheckboxGroupComponent.prototype.focus = function () {
            var _this = this;
            if (this.checkboxLabels && !this.disabled) {
                var checkboxLabel = this.checkboxLabels.find(function (_, index) { return !_this.options[index].disabled; });
                if (checkboxLabel) {
                    checkboxLabel.nativeElement.focus();
                }
            }
        };
        PoCheckboxGroupComponent.prototype.onKeyDown = function (event, option) {
            var spaceBar = 32;
            if (event.which === spaceBar || event.keyCode === spaceBar) {
                this.checkOption(option);
                event.preventDefault();
            }
        };
        PoCheckboxGroupComponent.prototype.trackByFn = function (index) {
            return index;
        };
        var PoCheckboxGroupComponent_1;
        PoCheckboxGroupComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChildren('checkboxLabel'),
            __metadata("design:type", core.QueryList)
        ], PoCheckboxGroupComponent.prototype, "checkboxLabels", void 0);
        PoCheckboxGroupComponent = PoCheckboxGroupComponent_1 = __decorate([
            core.Component({
                selector: 'po-checkbox-group',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content po-checkbox-group-content\">\n    <div class=\"po-row po-pt-1 po-pb-1\">\n      <div\n        *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\"\n      >\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.po-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"option.id\"\n          [required]=\"required\"\n          [value]=\"option.value\"\n        />\n\n        <label\n          #checkboxLabel\n          class=\"po-checkbox-group-label\"\n          [class.po-clickable]=\"!option.disabled && !disabled\"\n          [for]=\"option.id\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\"\n        >\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoCheckboxGroupComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoCheckboxGroupComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoCheckboxGroupComponent);
        return PoCheckboxGroupComponent;
    }(PoCheckboxGroupBaseComponent));

    /**
     * @description
     *
     * Módulo do componente `po-checkbox-group`.
     */
    var PoCheckboxGroupModule = /** @class */ (function () {
        function PoCheckboxGroupModule() {
        }
        PoCheckboxGroupModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule, PoFieldContainerModule],
                exports: [PoCheckboxGroupComponent],
                declarations: [PoCheckboxGroupComponent]
            })
        ], PoCheckboxGroupModule);
        return PoCheckboxGroupModule;
    }());

    /**
     * @description
     *
     * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
     *
     * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
     *
     * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
     * `po-table` e os demais componentes do PO.
     *
     * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
     * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
     *
     * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
     */
    var PoModalBaseComponent = /** @class */ (function () {
        function PoModalBaseComponent() {
            this._hideClose = false;
            this._size = 'md';
            /**
             * Define o fechamento da modal ao clicar fora da mesma.
             * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
             */
            this.clickOut = false;
            // Controla se a modal fica oculto ou visível, por padrão é oculto
            this.isHidden = true;
            // Event emmiter para quando a modal é fechada pelo 'X'.
            this.onXClosed = new core.EventEmitter();
        }
        Object.defineProperty(PoModalBaseComponent.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * Define o tamanho da modal.
             *
             * Valores válidos:
             *  - `sm` (pequeno)
             *  - `md` (médio)
             *  - `lg` (grande)
             *  - `xl` (extra grande)
             *  - `auto` (automático)
             *
             * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
             * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
             *
             * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
             */
            set: function (value) {
                var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
                this._size = sizes.indexOf(value) > -1 ? value : 'md';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoModalBaseComponent.prototype, "setClickOut", {
            set: function (value) {
                this.clickOut = value === '' ? false : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoModalBaseComponent.prototype, "hideClose", {
            get: function () {
                return this._hideClose;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o ícone de fechar do cabeçalho da modal.
             *
             * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideClose = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /** Função para fechar a modal. */
        PoModalBaseComponent.prototype.close = function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.isHidden = true;
            if (xClosed) {
                this.onXClosed.emit(xClosed);
            }
        };
        /** Função para abrir a modal. */
        PoModalBaseComponent.prototype.open = function () {
            this.validPrimaryAction();
            this.isHidden = false;
        };
        PoModalBaseComponent.prototype.validPrimaryAction = function () {
            var _this = this;
            if (!this.primaryAction) {
                this.primaryAction = {
                    action: function () { return _this.close(); },
                    label: 'Ok'
                };
            }
            if (!this.primaryAction['action']) {
                this.primaryAction['action'] = function () { return _this.close(); };
            }
            if (!this.primaryAction['label']) {
                this.primaryAction['label'] = 'Ok';
            }
        };
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoModalBaseComponent.prototype, "title", void 0);
        __decorate([
            core.Input('p-primary-action'),
            __metadata("design:type", Object)
        ], PoModalBaseComponent.prototype, "primaryAction", void 0);
        __decorate([
            core.Input('p-secondary-action'),
            __metadata("design:type", Object)
        ], PoModalBaseComponent.prototype, "secondaryAction", void 0);
        __decorate([
            core.Input('p-size'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoModalBaseComponent.prototype, "size", null);
        __decorate([
            core.Input('p-click-out'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoModalBaseComponent.prototype, "setClickOut", null);
        __decorate([
            core.Input('p-hide-close'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoModalBaseComponent.prototype, "hideClose", null);
        PoModalBaseComponent = __decorate([
            core.Directive()
        ], PoModalBaseComponent);
        return PoModalBaseComponent;
    }());

    var PoModalService = /** @class */ (function () {
        function PoModalService() {
        }
        PoModalService = __decorate([
            core.Injectable()
        ], PoModalService);
        return PoModalService;
    }());

    /**
     * @docsExtends PoModalBaseComponent
     *
     * @example
     *
     * <example name="po-modal-basic" title="PO Modal Basic">
     *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.html"> </file>
     *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-modal-labs" title="PO Modal Labs">
     *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.html"> </file>
     *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-modal-fruits-salad" title="PO Modal - Fruits Salad">
     *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.html"> </file>
     *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.ts"> </file>
     * </example>
     */
    var PoModalComponent = /** @class */ (function (_super) {
        __extends(PoModalComponent, _super);
        function PoModalComponent(poModalService, renderer, changeDetector) {
            var _this = _super.call(this) || this;
            _this.poModalService = poModalService;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
            _this.id = uuid$1.v4();
            return _this;
        }
        PoModalComponent.prototype.close = function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.poModalService.modalActive = undefined;
            _super.prototype.close.call(this, xClosed);
            this.removeEventListeners();
            if (this.sourceElement) {
                this.sourceElement.focus();
            }
        };
        PoModalComponent.prototype.closeModalOnEscapeKey = function (event) {
            if (!this.hideClose) {
                event.preventDefault();
                event.stopPropagation();
                this.close();
            }
        };
        PoModalComponent.prototype.getPrimaryActionButtonType = function () {
            return this.primaryAction.danger ? 'danger' : 'primary';
        };
        PoModalComponent.prototype.getSecondaryActionButtonType = function () {
            return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
        };
        PoModalComponent.prototype.onClickOut = function (event) {
            if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
                this.close();
            }
        };
        PoModalComponent.prototype.open = function () {
            this.sourceElement = document.activeElement;
            _super.prototype.open.call(this);
            this.handleFocus();
        };
        PoModalComponent.prototype.handleFocus = function () {
            var _this = this;
            this.poModalService.modalActive = this.id;
            setTimeout(function () {
                if (_this.modalContent) {
                    _this.initFocus();
                    document.addEventListener('focus', _this.focusFunction, true);
                }
            });
        };
        PoModalComponent.prototype.initFocus = function () {
            var _this = this;
            this.focusFunction = function (event) {
                _this.poModalService.modalActive = _this.poModalService.modalActive || _this.id;
                var modalElement = _this.modalContent.nativeElement;
                if (!modalElement.contains(event.target) && _this.poModalService.modalActive === _this.id) {
                    event.stopPropagation();
                    _this.firstElement.focus();
                }
            };
            this.setFirstElement();
            if (this.hideClose) {
                this.firstElement.focus();
            }
            else {
                var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] || this.modalContent.nativeElement;
                firstFieldElement.focus();
            }
        };
        PoModalComponent.prototype.removeEventListeners = function () {
            document.removeEventListener('focus', this.focusFunction, true);
        };
        PoModalComponent.prototype.setFirstElement = function () {
            this.firstElement =
                this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
        };
        PoModalComponent.ctorParameters = function () { return [
            { type: PoModalService },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('modalContent', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoModalComponent.prototype, "modalContent", void 0);
        PoModalComponent = __decorate([
            core.Component({
                selector: 'po-modal',
                template: "<div *ngIf=\"!isHidden\" class=\"po-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\">\n  <div class=\"po-modal-overlay\">\n    <div class=\"po-modal-container po-pb-2 po-pt-2\" (mousedown)=\"onClickOut($event)\">\n      <div class=\"po-modal-vertical-align\">\n        <div #modalContent class=\"po-modal-content po-modal-{{ size }}\" tabindex=\"-1\">\n          <div class=\"po-modal-header\">\n            <div class=\"po-modal-title po-text-ellipsis\">\n              {{ title }}\n            </div>\n\n            <a *ngIf=\"!hideClose\" class=\"po-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\">\n              <span class=\"po-icon po-icon-close\"></span>\n            </a>\n          </div>\n\n          <div class=\"po-modal-body\">\n            <ng-content></ng-content>\n          </div>\n\n          <div class=\"po-modal-footer\">\n            <po-button\n              *ngIf=\"secondaryAction\"\n              [p-disabled]=\"secondaryAction.disabled\"\n              [p-label]=\"secondaryAction.label\"\n              [p-loading]=\"secondaryAction.loading\"\n              [p-type]=\"getSecondaryActionButtonType()\"\n              (p-click)=\"secondaryAction.action()\"\n            >\n            </po-button>\n\n            <po-button\n              class=\"po-button-modal-first-action\"\n              [p-disabled]=\"primaryAction.disabled\"\n              [p-label]=\"primaryAction.label\"\n              [p-loading]=\"primaryAction.loading\"\n              [p-type]=\"getPrimaryActionButtonType()\"\n              (p-click)=\"primaryAction.action()\"\n            >\n            </po-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [PoModalService,
                core.Renderer2,
                core.ChangeDetectorRef])
        ], PoModalComponent);
        return PoModalComponent;
    }(PoModalBaseComponent));

    /**
     * @description
     * Módulo do componente po-modal
     */
    var PoModalModule = /** @class */ (function () {
        function PoModalModule() {
        }
        PoModalModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoButtonModule],
                declarations: [PoModalComponent],
                exports: [PoModalComponent],
                providers: [PoModalService]
            })
        ], PoModalModule);
        return PoModalModule;
    }());

    var PoProgressBarComponent = /** @class */ (function () {
        function PoProgressBarComponent() {
        }
        Object.defineProperty(PoProgressBarComponent.prototype, "valueScale", {
            get: function () {
                return "" + this.value / 100;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-indeterminate'),
            __metadata("design:type", Boolean)
        ], PoProgressBarComponent.prototype, "indeterminate", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Number)
        ], PoProgressBarComponent.prototype, "value", void 0);
        PoProgressBarComponent = __decorate([
            core.Component({
                selector: 'po-progress-bar',
                template: "<div [class.po-progress-bar-indeterminate]=\"indeterminate\">\n  <div class=\"po-progress-bar-element po-progress-bar-primary\" [style.transform]=\"'scaleX(' + valueScale + ')'\"></div>\n  <div class=\"po-progress-bar-element po-progress-bar-secondary\"></div>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoProgressBarComponent);
        return PoProgressBarComponent;
    }());

    /**
     * @usedBy PoProgressComponent
     *
     * @description
     *
     * *Enum* `PoProgressStatus` para os status de barra de progresso.
     */

    (function (PoProgressStatus) {
        /** Define o status `default` para a barra de progresso. */
        PoProgressStatus["Default"] = "default";
        /** Define o status de `error` para a barra de progresso. */
        PoProgressStatus["Error"] = "error";
        /** Define o status de `success` para a barra de progresso. */
        PoProgressStatus["Success"] = "success";
    })(exports.PoProgressStatus || (exports.PoProgressStatus = {}));

    var poProgressMaxValue = 100;
    var poProgressMinValue = 0;
    /**
     * @description
     *
     * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
     *
     * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
     */
    var PoProgressBaseComponent = /** @class */ (function () {
        function PoProgressBaseComponent() {
            this._value = 0;
            /**
             * @optional
             *
             * @description
             *
             * Status da barra de progresso que indicará visualmente ao usuário
             * o andamento, por exemplo, se a mesma foi concluída com sucesso.
             *
             * @default `PoProgressStatus.Default`
             */
            this.status = exports.PoProgressStatus.Default;
            /**
             * @optional
             *
             * @description
             *
             * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
             *
             * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
             *
             * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
             * o ícone de cancelamento não será exibido.
             */
            this.cancel = new core.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
             *
             * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
             * `PoProgressStatus.Error`.
             */
            this.retry = new core.EventEmitter();
        }
        Object.defineProperty(PoProgressBaseComponent.prototype, "indeterminate", {
            get: function () {
                return this._indeterminate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
             *
             * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
             *
             * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
             *
             * @default `false`
             */
            set: function (indeterminate) {
                this._indeterminate = convertToBoolean(indeterminate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoProgressBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor que representará o progresso.
             *
             * > Os valores aceitos são números inteiros de `0` à `100`.
             *
             * @default `0`
             */
            set: function (value) {
                var integerValue = convertToInt(value, poProgressMinValue);
                var isProgressRangeValue = this.isProgressRangeValue(integerValue);
                this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
            },
            enumerable: true,
            configurable: true
        });
        PoProgressBaseComponent.prototype.isProgressRangeValue = function (value) {
            return value >= poProgressMinValue && value <= poProgressMaxValue;
        };
        __decorate([
            core.Input('p-indeterminate'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoProgressBaseComponent.prototype, "indeterminate", null);
        __decorate([
            core.Input('p-info'),
            __metadata("design:type", String)
        ], PoProgressBaseComponent.prototype, "info", void 0);
        __decorate([
            core.Input('p-info-icon'),
            __metadata("design:type", String)
        ], PoProgressBaseComponent.prototype, "infoIcon", void 0);
        __decorate([
            core.Input('p-status'),
            __metadata("design:type", String)
        ], PoProgressBaseComponent.prototype, "status", void 0);
        __decorate([
            core.Input('p-text'),
            __metadata("design:type", String)
        ], PoProgressBaseComponent.prototype, "text", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoProgressBaseComponent.prototype, "value", null);
        __decorate([
            core.Output('p-cancel'),
            __metadata("design:type", core.EventEmitter)
        ], PoProgressBaseComponent.prototype, "cancel", void 0);
        __decorate([
            core.Output('p-retry'),
            __metadata("design:type", core.EventEmitter)
        ], PoProgressBaseComponent.prototype, "retry", void 0);
        PoProgressBaseComponent = __decorate([
            core.Directive()
        ], PoProgressBaseComponent);
        return PoProgressBaseComponent;
    }());

    /**
     * @docsExtends PoProgressBaseComponent
     *
     * @example
     * <example name="po-progress-basic" title="PO Progress Basic">
     *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.html"> </file>
     *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-progress-labs" title="PO Progress Labs">
     *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.html"> </file>
     *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-progress-publication" title="PO Progress - Publication">
     *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.html"> </file>
     *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.ts"> </file>
     * </example>
     */
    var PoProgressComponent = /** @class */ (function (_super) {
        __extends(PoProgressComponent, _super);
        function PoProgressComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PoProgressComponent.prototype, "isAllowCancel", {
            get: function () {
                return !!this.cancel.observers.length && this.status !== exports.PoProgressStatus.Success;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "isAllowProgressInfo", {
            get: function () {
                return !!(this.info || this.infoIcon || this.isAllowCancel || this.isAllowRetry);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "isAllowRetry", {
            get: function () {
                return !!this.retry.observers.length && this.status === exports.PoProgressStatus.Error;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoProgressComponent.prototype, "statusClass", {
            get: function () {
                if (this.status === exports.PoProgressStatus.Success) {
                    return 'po-progress-success';
                }
                if (this.status === exports.PoProgressStatus.Error) {
                    return 'po-progress-error';
                }
                return 'po-progress-default';
            },
            enumerable: true,
            configurable: true
        });
        PoProgressComponent.prototype.emitCancellation = function () {
            this.cancel.emit(this.status);
        };
        PoProgressComponent.prototype.emitRetry = function () {
            this.retry.emit();
        };
        PoProgressComponent = __decorate([
            core.Component({
                selector: 'po-progress',
                template: "<div class=\"po-progress\" [ngClass]=\"statusClass\">\n  <label *ngIf=\"text\" class=\"po-progress-description-mobile po-progress-description-text\">\n    {{ text }}\n  </label>\n\n  <po-progress-bar class=\"po-progress-bar\" [p-indeterminate]=\"indeterminate\" [p-value]=\"value\"> </po-progress-bar>\n\n  <div *ngIf=\"text\" class=\"po-progress-description\">\n    <label class=\"po-progress-description-text\">\n      {{ text }}\n    </label>\n  </div>\n\n  <div *ngIf=\"isAllowProgressInfo\" class=\"po-progress-info\">\n    <span *ngIf=\"infoIcon\" class=\"po-progress-info-icon po-icon {{ infoIcon }}\"></span>\n    <span *ngIf=\"info\" class=\"po-progress-info-text\">{{ info }}</span>\n\n    <button\n      *ngIf=\"isAllowRetry\"\n      class=\"po-progress-info-icon-action po-icon po-icon-refresh po-clickable\"\n      (click)=\"emitRetry()\"\n    ></button>\n\n    <button\n      *ngIf=\"isAllowCancel\"\n      class=\"po-progress-info-icon-action po-icon po-icon-close po-clickable\"\n      (click)=\"emitCancellation()\"\n    ></button>\n  </div>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoProgressComponent);
        return PoProgressComponent;
    }(PoProgressBaseComponent));

    /**
     * @description
     *
     * Módulo do componente `po-progress`.
     */
    var PoProgressModule = /** @class */ (function () {
        function PoProgressModule() {
        }
        PoProgressModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                exports: [PoProgressComponent],
                declarations: [PoProgressBarComponent, PoProgressComponent]
            })
        ], PoProgressModule);
        return PoProgressModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Enum que contém paleta de 12 cores.
     */
    var PoColorPaletteEnum;
    (function (PoColorPaletteEnum) {
        /** #0c9abe */
        PoColorPaletteEnum["Color01"] = "color-01";
        /** #2c85c8 */
        PoColorPaletteEnum["Color02"] = "color-02";
        /** #2c43c8 */
        PoColorPaletteEnum["Color03"] = "color-03";
        /** #5843c8 */
        PoColorPaletteEnum["Color04"] = "color-04";
        /** #ab43c8 */
        PoColorPaletteEnum["Color05"] = "color-05";
        /** #ab4391 */
        PoColorPaletteEnum["Color06"] = "color-06";
        /** #c64840 */
        PoColorPaletteEnum["Color07"] = "color-07";
        /** #ea9b3e */
        PoColorPaletteEnum["Color08"] = "color-08";
        /** #abc249 */
        PoColorPaletteEnum["Color09"] = "color-09";
        /** #56b96b */
        PoColorPaletteEnum["Color10"] = "color-10";
        /** #00b28e */
        PoColorPaletteEnum["Color11"] = "color-11";
        /** #06a6a5 */
        PoColorPaletteEnum["Color12"] = "color-12";
    })(PoColorPaletteEnum || (PoColorPaletteEnum = {}));

    var PoColorPaletteService = /** @class */ (function () {
        function PoColorPaletteService() {
        }
        PoColorPaletteService.prototype.getColor = function (value) {
            return Object.values(PoColorPaletteEnum).includes(value.color)
                ? value.color
                : this.getColorFromType(value.type || value.color);
        };
        PoColorPaletteService.prototype.getColorFromType = function (type) {
            switch (type) {
                case 'danger':
                    return PoColorPaletteEnum.Color07;
                case 'success':
                    return PoColorPaletteEnum.Color11;
                case 'warning':
                    return PoColorPaletteEnum.Color08;
                default:
                    return PoColorPaletteEnum.Color01;
            }
        };
        PoColorPaletteService = __decorate([
            core.Injectable()
        ], PoColorPaletteService);
        return PoColorPaletteService;
    }());

    /**
     * @description
     *
     * Módulo do serviço `po-color-palette`.
     */
    var PoColorPaletteModule = /** @class */ (function () {
        function PoColorPaletteModule() {
        }
        PoColorPaletteModule = __decorate([
            core.NgModule({
                providers: [PoColorPaletteService],
                bootstrap: []
            })
        ], PoColorPaletteModule);
        return PoColorPaletteModule;
    }());

    var PoComponentInjectorService = /** @class */ (function () {
        function PoComponentInjectorService(componentResolver, applicationRef, injector) {
            this.componentResolver = componentResolver;
            this.applicationRef = applicationRef;
            this.injector = injector;
        }
        // Cria um dinamicamente no ApplicationRef
        PoComponentInjectorService.prototype.createComponentInApplication = function (component) {
            var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
            this.applicationRef.attachView(componentRef.hostView);
            var domElem = componentRef.hostView.rootNodes[0];
            document.body.appendChild(domElem);
            return componentRef;
        };
        // Destrói o componente e remove do ApplicationRef
        PoComponentInjectorService.prototype.destroyComponentInApplication = function (componentRef) {
            this.applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        };
        PoComponentInjectorService.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core.ApplicationRef },
            { type: core.Injector }
        ]; };
        PoComponentInjectorService.ɵprov = core.ɵɵdefineInjectable({ factory: function PoComponentInjectorService_Factory() { return new PoComponentInjectorService(core.ɵɵinject(core.ComponentFactoryResolver), core.ɵɵinject(core.ApplicationRef), core.ɵɵinject(core.INJECTOR)); }, token: PoComponentInjectorService, providedIn: "root" });
        PoComponentInjectorService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.ApplicationRef,
                core.Injector])
        ], PoComponentInjectorService);
        return PoComponentInjectorService;
    }());

    var PoComponentInjectorModule = /** @class */ (function () {
        function PoComponentInjectorModule() {
        }
        PoComponentInjectorModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [],
                exports: [],
                providers: [PoComponentInjectorService],
                bootstrap: []
            })
        ], PoComponentInjectorModule);
        return PoComponentInjectorModule;
    }());

    /**
     * @description
     *
     * Módulo do serviço po-control-position.
     */
    var PoControlPositionModule = /** @class */ (function () {
        function PoControlPositionModule() {
        }
        PoControlPositionModule = __decorate([
            core.NgModule({
                providers: [PoControlPositionService]
            })
        ], PoControlPositionModule);
        return PoControlPositionModule;
    }());

    /**
     * @docsPrivate
     *
     * @usedBy PoDialogService
     *
     * @description
     * Enums para as ações do componente po-dialog-base.service.
     */

    (function (PoDialogType) {
        // Enum para alert
        PoDialogType[PoDialogType["Alert"] = 0] = "Alert";
        // Enum para confirm
        PoDialogType[PoDialogType["Confirm"] = 1] = "Confirm";
    })(exports.PoDialogType || (exports.PoDialogType = {}));

    var poDialogAlertLiteralsDefault = {
        en: { ok: 'Ok' },
        es: { ok: 'Ok' },
        pt: { ok: 'Ok' },
        ru: { ok: 'Ок' }
    };
    var poDialogConfirmLiteralsDefault = {
        en: { cancel: 'Cancel', confirm: 'Confirm' },
        es: { cancel: 'Cancelar', confirm: 'Confirmar' },
        pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
        ru: { cancel: 'отменить', confirm: 'подтвердить' }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que serve como container do po-dialog.service
     */
    var PoDialogComponent = /** @class */ (function () {
        function PoDialogComponent() {
            // Objeto primary do poModal
            this.primaryAction = { label: 'ok', action: function () { } };
        }
        PoDialogComponent.prototype.ngOnDestroy = function () {
            this.closeSubscription.unsubscribe();
        };
        PoDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.closeSubscription = this.poModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
        };
        // Fecha o poModal
        PoDialogComponent.prototype.close = function () {
            this.poModal.close();
            this.destroy();
        };
        PoDialogComponent.prototype.destroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
            }
        };
        // Insere os valores recebidos de this.open para o poModal
        PoDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
            var _this = this;
            this.primaryAction = {
                label: primaryLabel,
                action: function () {
                    if (primaryAction) {
                        primaryAction();
                    }
                    _this.close();
                }
            };
            if (secondaryLabel) {
                this.secondaryAction = {
                    label: secondaryLabel,
                    action: function () {
                        if (secondaryAction) {
                            secondaryAction();
                        }
                        _this.close();
                    }
                };
            }
        };
        // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
        PoDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
            this.title = dialogOptions.title;
            this.message = dialogOptions.message;
            this.componentRef = componentRef;
            this.setDialogLiterals(dialogOptions, dialogType);
            switch (dialogType) {
                case exports.PoDialogType.Confirm: {
                    this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel);
                    break;
                }
                case exports.PoDialogType.Alert: {
                    this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                    break;
                }
            }
            this.poModal.open();
        };
        PoDialogComponent.prototype.setDialogLiterals = function (dialogOptions, dialogType) {
            var alertLiterals = poDialogAlertLiteralsDefault;
            var confirmLiterals = poDialogConfirmLiteralsDefault;
            var literals = dialogOptions.literals;
            if (dialogType === exports.PoDialogType.Alert) {
                this.literalsAlert = __assign(__assign(__assign({}, alertLiterals[poLocaleDefault]), alertLiterals[browserLanguage()]), literals);
            }
            else {
                this.literalsConfirm = __assign(__assign(__assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[browserLanguage()]), literals);
            }
        };
        __decorate([
            core.ViewChild(PoModalComponent, { static: true }),
            __metadata("design:type", PoModalComponent)
        ], PoDialogComponent.prototype, "poModal", void 0);
        PoDialogComponent = __decorate([
            core.Component({
                template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
            })
        ], PoDialogComponent);
        return PoDialogComponent;
    }());

    /**
     * @description
     *
     * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
     * necessidade do desenvolvedor.
     */
    var PoDialogBaseService = /** @class */ (function () {
        function PoDialogBaseService() {
        }
        /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
        PoDialogBaseService.prototype.confirm = function (confirmOptions) {
            this.openDialog(exports.PoDialogType.Confirm, confirmOptions);
        };
        /** Exibe um diálogo de alerta. */
        PoDialogBaseService.prototype.alert = function (alertOptions) {
            this.openDialog(exports.PoDialogType.Alert, alertOptions);
        };
        return PoDialogBaseService;
    }());

    /**
     * @docsExtends PoDialogBaseService
     *
     * @example
     *
     * <example name="po-dialog-basic" title="PO Dialog Basic">
     *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
     *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dialog-labs" title="PO Dialog Labs">
     *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
     *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-dialog-cancel-credit-card" title="PO Dialog - Cancel Credit Card">
     *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
     *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
     * </example>
     */
    var PoDialogService = /** @class */ (function (_super) {
        __extends(PoDialogService, _super);
        function PoDialogService(poComponentInjector) {
            var _this = _super.call(this) || this;
            _this.poComponentInjector = poComponentInjector;
            return _this;
        }
        PoDialogService.prototype.openDialog = function (dialogType, dialogOptions) {
            var componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.open(dialogOptions, dialogType, componentRef);
        };
        PoDialogService.ctorParameters = function () { return [
            { type: PoComponentInjectorService }
        ]; };
        PoDialogService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PoComponentInjectorService])
        ], PoDialogService);
        return PoDialogService;
    }(PoDialogBaseService));

    var PoDialogModule = /** @class */ (function () {
        function PoDialogModule() {
        }
        PoDialogModule = __decorate([
            core.NgModule({
                declarations: [PoDialogComponent],
                imports: [PoModalModule],
                exports: [PoDialogComponent],
                providers: [PoDialogService]
            })
        ], PoDialogModule);
        return PoDialogModule;
    }());

    /**
     * @description
     *
     * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
     * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
     * os parâmetros serão substituidos de acordo com a ordem informada.
     *
     * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
     * de acordo como deve ser exibido após a sua transformação.
     *
     * ```
     * const i18nPT = {
     *   pagination: 'Página {1} de {2} páginas.',
     *   totalPages: 'Total de {totalPages} encontradas.'
     * };
     * ```
     *
     * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
     * informada na literal.
     *
     * ```
     * {{ i18nPT.pagination | poI18n:[1,10] }}
     * {{ i18nPT.totalPages | poI18n:10 }}
     * ```
     */
    var PoI18nBasePipe = /** @class */ (function () {
        function PoI18nBasePipe() {
        }
        PoI18nBasePipe.prototype.transform = function (value, args) {
            var e_1, _a;
            if (!value) {
                return '';
            }
            if (!(args instanceof Array)) {
                args = [args];
            }
            try {
                for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                    var arg = args_1_1.value;
                    value = value.replace(/(\{\w*\})+/, arg);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return value;
        };
        return PoI18nBasePipe;
    }());

    /**
     * @docsExtends PoI18nBasePipe
     *
     * @example
     * <example name='po-i18n-pipe-labs' title='PO i18n Pipe Labs' >
     *  <file name='sample-po-i18n-pipe-labs.component.html'> </file>
     *  <file name='sample-po-i18n-pipe-labs.component.ts'> </file>
     *  <file name='sample-po-i18n-pipe.component.html'> </file>
     *  <file name='sample-po-i18n-pipe.component.ts'> </file>
     * </example>
     */
    var PoI18nPipe = /** @class */ (function (_super) {
        __extends(PoI18nPipe, _super);
        function PoI18nPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoI18nPipe = __decorate([
            core.Pipe({
                name: 'poI18n'
            })
        ], PoI18nPipe);
        return PoI18nPipe;
    }(PoI18nBasePipe));

    /**
     * @docsPrivate
     *
     * Enums para a orientação da notificação, do componente po-toaster-base.component.
     */

    (function (PoToasterOrientation) {
        /** Orientção do componente fica no rodapé */
        PoToasterOrientation[PoToasterOrientation["Bottom"] = 0] = "Bottom";
        /** Orientção do componente fica no topo */
        PoToasterOrientation[PoToasterOrientation["Top"] = 1] = "Top";
    })(exports.PoToasterOrientation || (exports.PoToasterOrientation = {}));

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente po-toaster foi construído para exibir notificações para o usuário.
     */
    var PoToasterBaseComponent = /** @class */ (function () {
        function PoToasterBaseComponent() {
            /** Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página. */
            this.orientation = exports.PoToasterOrientation.Bottom;
        }
        return PoToasterBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * Enums para os tipos de notificação, do componente po-toaster-base.component.
     */

    (function (PoToasterType) {
        /** Enum para informações do tipo "Erro" */
        PoToasterType[PoToasterType["Error"] = 0] = "Error";
        /** Enum para informações do tipo "Informação" */
        PoToasterType[PoToasterType["Information"] = 1] = "Information";
        /** Enum para informações do tipo "Sucesso" */
        PoToasterType[PoToasterType["Success"] = 2] = "Success";
        /** Enum para informações do tipo "Atenção" */
        PoToasterType[PoToasterType["Warning"] = 3] = "Warning";
    })(exports.PoToasterType || (exports.PoToasterType = {}));

    /**
     * @docsPrivate
     *
     * @docsExtends PoToasterBaseComponent
     */
    var PoToasterComponent = /** @class */ (function (_super) {
        __extends(PoToasterComponent, _super);
        function PoToasterComponent(changeDetector, elementeRef) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.elementeRef = elementeRef;
            /* Margem do Toaster referênte à sua orientação e posição*/
            _this.margin = 20;
            /* Observable para monitorar o Close to Toaster */
            _this.observableOnClose = new rxjs.Subject();
            /* Mostra ou oculta o Toaster */
            _this.showToaster = true;
            /* Posição do Toaster*/
            _this.toasterPosition = 'po-toaster-bottom';
            return _this;
        }
        /* Muda a posição do Toaster na tela*/
        PoToasterComponent.prototype.changePosition = function (position) {
            this.elementeRef.nativeElement.style.display = 'table';
            this.margin = 6 + 44 * position + position * 6;
            if (this.orientation === exports.PoToasterOrientation.Top) {
                this.toaster.nativeElement.style.top = this.margin + 'px';
            }
            else {
                this.toaster.nativeElement.style.bottom = this.margin + 'px';
            }
        };
        /* Fecha o componente Toaster */
        PoToasterComponent.prototype.close = function () {
            this.showToaster = false;
            this.observableOnClose.next(true);
        };
        /* Configura o Toaster com os atributos passados para ele */
        PoToasterComponent.prototype.configToaster = function (poToaster) {
            this.type = poToaster.type;
            this.message = poToaster.message;
            this.orientation = poToaster.orientation;
            this.position = poToaster.position;
            this.action = poToaster.action;
            this.actionLabel = poToaster.actionLabel ? poToaster.actionLabel : 'Fechar';
            this.componentRef = poToaster.componentRef;
            /* Muda a orientação do Toaster */
            if (this.orientation === exports.PoToasterOrientation.Top) {
                this.toasterPosition = 'po-toaster-top';
            }
            /* Muda a posição do Toaster */
            this.changePosition(this.position);
            /* Switch para o tipo de Toaster */
            switch (this.type) {
                case exports.PoToasterType.Error: {
                    this.toasterType = 'po-toaster-error';
                    this.icon = 'po-icon-close';
                    break;
                }
                case exports.PoToasterType.Information: {
                    this.toasterType = 'po-toaster-info';
                    this.icon = 'po-icon-info';
                    break;
                }
                case exports.PoToasterType.Success: {
                    this.toasterType = 'po-toaster-success';
                    this.icon = 'po-icon-ok';
                    break;
                }
                case exports.PoToasterType.Warning: {
                    this.toasterType = 'po-toaster-warning';
                    this.icon = 'po-icon-warning';
                    break;
                }
            }
            this.changeDetector.detectChanges();
        };
        PoToasterComponent.prototype.getShowToaster = function () {
            return this.showToaster;
        };
        PoToasterComponent.prototype.getIcon = function () {
            return this.icon;
        };
        PoToasterComponent.prototype.getToasterPosition = function () {
            return this.toasterPosition;
        };
        PoToasterComponent.prototype.getToasterType = function () {
            return this.toasterType;
        };
        /* Chama a função passada pelo atributo `action` */
        PoToasterComponent.prototype.poToasterAction = function () {
            this.action(this);
        };
        PoToasterComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('toaster'),
            __metadata("design:type", core.ElementRef)
        ], PoToasterComponent.prototype, "toaster", void 0);
        PoToasterComponent = __decorate([
            core.Component({
                selector: 'po-toaster',
                template: "<div\n  #toaster\n  *ngIf=\"getShowToaster()\"\n  class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\"\n  (click)=\"close()\"\n>\n  <div class=\"po-toaster-message\"><span class=\"po-icon {{ getIcon() }}\"></span> {{ message }}</div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"poToasterAction()\" class=\"po-toaster-action\">\n    {{ actionLabel }}\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef, core.ElementRef])
        ], PoToasterComponent);
        return PoToasterComponent;
    }(PoToasterBaseComponent));

    var PoNotificationModule = /** @class */ (function () {
        function PoNotificationModule() {
        }
        PoNotificationModule = __decorate([
            core.NgModule({
                declarations: [PoToasterComponent],
                imports: [common.CommonModule],
                exports: [],
                providers: [],
                bootstrap: []
            })
        ], PoNotificationModule);
        return PoNotificationModule;
    }());

    var PoServicesModule = /** @class */ (function () {
        function PoServicesModule() {
        }
        PoServicesModule = __decorate([
            core.NgModule({
                declarations: [PoI18nPipe],
                imports: [
                    PoColorPaletteModule,
                    PoComponentInjectorModule,
                    PoControlPositionModule,
                    PoDateTimeModule,
                    PoDialogModule,
                    PoLanguageModule,
                    PoNotificationModule
                ],
                exports: [
                    PoColorPaletteModule,
                    PoComponentInjectorModule,
                    PoControlPositionModule,
                    PoDateTimeModule,
                    PoDialogModule,
                    PoI18nPipe,
                    PoNotificationModule
                ],
                providers: [],
                bootstrap: []
            })
        ], PoServicesModule);
        return PoServicesModule;
    }());

    var PO_POPOVER_DEFAULT_POSITION = 'right';
    var PO_POPOVER_DEFAULT_TRIGGER = 'click';
    var PO_POPOVER_TRIGGERS = ['click', 'hover'];
    /**
     * @description
     *
     * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
     * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
     *
     * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
     * [**po-tooltip**](https://po-ui.io/documentation/po-tooltip?view=doc).
     *
     * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://po-ui.io/documentation/po-modal?view=doc).
     *
     * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
     * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
     * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
     *
     * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
     * Os eventos permitidos são: `click` e `hover`.
     *
     */
    var PoPopoverBaseComponent = /** @class */ (function () {
        function PoPopoverBaseComponent() {
            // Controla se o popover fica oculto ou visível, por padrão é oculto.
            this.isHidden = true;
            this._hideArrow = false;
            this._position = PO_POPOVER_DEFAULT_POSITION;
            this._trigger = PO_POPOVER_DEFAULT_TRIGGER;
        }
        Object.defineProperty(PoPopoverBaseComponent.prototype, "hideArrow", {
            get: function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a seta do componente *popover*.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopoverBaseComponent.prototype, "position", {
            get: function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o po-popover no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
             * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
             * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o po-popover acima do componente alvo.
             * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
             * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
             *
             *
             * @default right
             */
            set: function (value) {
                this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPopoverBaseComponent.prototype, "trigger", {
            get: function () {
                return this._trigger;
            },
            /**
             * @description
             *
             * Define o evento que abrirá o po-popover.
             *
             * Valores válidos:
             *  - `click`: Abre ao clicar no componente alvo.
             *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
             *
             * @default click
             * @optional
             */
            set: function (value) {
                this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-hide-arrow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoPopoverBaseComponent.prototype, "hideArrow", null);
        __decorate([
            core.Input('p-position'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPopoverBaseComponent.prototype, "position", null);
        __decorate([
            core.Input('p-target'),
            __metadata("design:type", core.ElementRef)
        ], PoPopoverBaseComponent.prototype, "target", void 0);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoPopoverBaseComponent.prototype, "title", void 0);
        __decorate([
            core.Input('p-trigger'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPopoverBaseComponent.prototype, "trigger", null);
        PoPopoverBaseComponent = __decorate([
            core.Directive()
        ], PoPopoverBaseComponent);
        return PoPopoverBaseComponent;
    }());

    /**
     *
     * @docsExtends PoPopoverBaseComponent
     *
     * @example
     *
     * <example name="po-popover-basic" title="PO Popover Basic">
     *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
     *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-popover-labs" title="PO Popover Labs">
     *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
     *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
     *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
     *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
     * </example>
     */
    var PoPopoverComponent = /** @class */ (function (_super) {
        __extends(PoPopoverComponent, _super);
        function PoPopoverComponent(renderer, poControlPosition) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.poControlPosition = poControlPosition;
            _this.arrowDirection = 'left';
            return _this;
        }
        PoPopoverComponent.prototype.ngAfterViewInit = function () {
            this.initEventListenerFunction();
            this.setElementsControlPosition();
            this.setRendererListenInit();
        };
        PoPopoverComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPopoverComponent.prototype.close = function () {
            this.isHidden = true;
        };
        PoPopoverComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.setPopoverPosition();
            }, 200);
        };
        PoPopoverComponent.prototype.open = function () {
            var _this = this;
            this.addScrollEventListener();
            this.isHidden = false;
            this.setOpacity(0);
            setTimeout(function () {
                _this.setElementsControlPosition();
                _this.setPopoverPosition();
                _this.setOpacity(1);
            });
        };
        PoPopoverComponent.prototype.setOpacity = function (value) {
            this.popoverElement.nativeElement.style.opacity = value;
        };
        PoPopoverComponent.prototype.setPopoverPosition = function () {
            this.poControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.poControlPosition.getArrowDirection();
        };
        PoPopoverComponent.prototype.setRendererListenInit = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                if (!_this.isHidden) {
                    _this.debounceResize();
                }
            });
            if (this.trigger === 'hover') {
                this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', function (event) {
                    _this.open();
                });
                this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', function (event) {
                    _this.close();
                });
            }
            else {
                this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                    _this.togglePopup(event);
                });
            }
        };
        PoPopoverComponent.prototype.togglePopup = function (event) {
            if (!this.isHidden &&
                !this.popoverElement.nativeElement.contains(event.target) &&
                !this.target.nativeElement.contains(event.target)) {
                this.close();
            }
            else if (this.target.nativeElement.contains(event.target)) {
                this.popoverElement.nativeElement.hidden ? this.open() : this.close();
            }
        };
        PoPopoverComponent.prototype.addScrollEventListener = function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        PoPopoverComponent.prototype.initEventListenerFunction = function () {
            var _this = this;
            this.eventListenerFunction = function () {
                _this.setPopoverPosition();
            };
        };
        PoPopoverComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.mouseEnterListener) {
                this.mouseEnterListener();
            }
            if (this.mouseLeaveListener) {
                this.mouseLeaveListener();
            }
            this.resizeListener();
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        PoPopoverComponent.prototype.setElementsControlPosition = function () {
            var popoverOffset = 8;
            this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
        };
        PoPopoverComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: PoControlPositionService }
        ]; };
        __decorate([
            core.ViewChild('popoverElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoPopoverComponent.prototype, "popoverElement", void 0);
        PoPopoverComponent = __decorate([
            core.Component({
                selector: 'po-popover',
                template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                providers: [PoControlPositionService]
            }),
            __metadata("design:paramtypes", [core.Renderer2, PoControlPositionService])
        ], PoPopoverComponent);
        return PoPopoverComponent;
    }(PoPopoverBaseComponent));

    /**
     * @description
     * Módulo do componente po-popover.
     */
    var PoPopoverModule = /** @class */ (function () {
        function PoPopoverModule() {
        }
        PoPopoverModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoPopoverComponent],
                exports: [PoPopoverComponent]
            })
        ], PoPopoverModule);
        return PoPopoverModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
     */
    var PoTimePipe = /** @class */ (function () {
        function PoTimePipe() {
        }
        PoTimePipe.prototype.transform = function (time, format) {
            var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
            if (isTypeof(time, 'string') && hourRegex.test(time)) {
                var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
                var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
                var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
                return this.formatValue(time, format, formatMiliseconds, miliseconds);
            }
            return null;
        };
        PoTimePipe.prototype.addDotMiliseconds = function (miliseconds, amountOfF) {
            if (miliseconds && amountOfF) {
                miliseconds = '.' + miliseconds;
            }
            return miliseconds;
        };
        PoTimePipe.prototype.formatValue = function (time, format, formatMiliseconds, miliseconds) {
            if (time && format) {
                var hour = time.substring(0, 2);
                var minutes = time.substring(3, 5);
                var seconds = time.substring(6, 8);
                format = format.replace('HH', hour);
                format = format.replace('mm', minutes);
                format = format.replace('ss', seconds);
                format = format.replace("." + formatMiliseconds, miliseconds);
                return format;
            }
            else {
                return time;
            }
        };
        PoTimePipe.prototype.getFormatMiliseconds = function (amountOfF) {
            var formatMiliseconds = '';
            for (var i = 0; i < amountOfF; i++) {
                formatMiliseconds += 'f';
            }
            return formatMiliseconds;
        };
        PoTimePipe = __decorate([
            core.Pipe({
                name: 'po_time'
            })
        ], PoTimePipe);
        return PoTimePipe;
    }());

    /**
     * @description
     *
     * Módulo do pipe `po-time`.
     */
    var PoTimeModule = /** @class */ (function () {
        function PoTimeModule() {
        }
        PoTimeModule = __decorate([
            core.NgModule({
                declarations: [PoTimePipe],
                imports: [],
                exports: [PoTimePipe],
                providers: [],
                bootstrap: []
            })
        ], PoTimeModule);
        return PoTimeModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir ícones nas colunas.
     */
    var PoTableColumnIconComponent = /** @class */ (function () {
        function PoTableColumnIconComponent() {
            this._icons = [];
        }
        Object.defineProperty(PoTableColumnIconComponent.prototype, "icons", {
            get: function () {
                return this._icons;
            },
            /** Lista de colunas com ícones. */
            set: function (icons) {
                this._icons = this.convertToColumnIcon(icons);
            },
            enumerable: true,
            configurable: true
        });
        PoTableColumnIconComponent.prototype.click = function (columnIcon, event) {
            var isAbleAction = !this.isDisabled(columnIcon);
            if (isAbleAction) {
                if (columnIcon.action) {
                    columnIcon.action(this.row, columnIcon);
                }
                else if (this.column.action) {
                    this.column.action(this.row, columnIcon);
                }
                event.stopPropagation();
            }
        };
        PoTableColumnIconComponent.prototype.getColor = function (column) {
            var color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
            if (color) {
                return "po-text-" + color;
            }
        };
        PoTableColumnIconComponent.prototype.getIcon = function (column) {
            return column.icon || column.value;
        };
        PoTableColumnIconComponent.prototype.isClickable = function (columnIcon) {
            return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
        };
        PoTableColumnIconComponent.prototype.isDisabled = function (column) {
            return column.disabled ? column.disabled(this.row) : false;
        };
        PoTableColumnIconComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        PoTableColumnIconComponent.prototype.convertToColumnIcon = function (rowIcons) {
            if (Array.isArray(rowIcons)) {
                return rowIcons.map(function (rowIcon) { return (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon); });
            }
            if (typeof rowIcons === 'string') {
                return [{ value: rowIcons }];
            }
            return [];
        };
        __decorate([
            core.Input('p-column'),
            __metadata("design:type", Object)
        ], PoTableColumnIconComponent.prototype, "column", void 0);
        __decorate([
            core.Input('p-icons'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTableColumnIconComponent.prototype, "icons", null);
        __decorate([
            core.Input('p-row'),
            __metadata("design:type", Object)
        ], PoTableColumnIconComponent.prototype, "row", void 0);
        PoTableColumnIconComponent = __decorate([
            core.Component({
                selector: 'po-table-column-icon',
                template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoTableColumnIconComponent);
        return PoTableColumnIconComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação da representação da legenda, em formato de texto .
     */
    var PoTableColumnLabelComponent = /** @class */ (function () {
        function PoTableColumnLabelComponent(poColorPaletteService) {
            this.poColorPaletteService = poColorPaletteService;
        }
        Object.defineProperty(PoTableColumnLabelComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /** Objeto com os dados do label */
            set: function (value) {
                if (value) {
                    value.color = this.poColorPaletteService.getColor(value);
                }
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        PoTableColumnLabelComponent.ctorParameters = function () { return [
            { type: PoColorPaletteService }
        ]; };
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTableColumnLabelComponent.prototype, "value", null);
        PoTableColumnLabelComponent = __decorate([
            core.Component({
                selector: 'po-table-column-label',
                template: "<span [class]=\"'po-table-column-label po-' + value?.color\">\n  {{ value?.label }}\n</span>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [PoColorPaletteService])
        ], PoTableColumnLabelComponent);
        return PoTableColumnLabelComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir link nas colunas.
     */
    var PoTableColumnLinkComponent = /** @class */ (function () {
        function PoTableColumnLinkComponent() {
        }
        Object.defineProperty(PoTableColumnLinkComponent.prototype, "type", {
            get: function () {
                if (this.disabled) {
                    return 'disabled';
                }
                if (this.action) {
                    return 'action';
                }
                if (isExternalLink(this.link)) {
                    return 'externalLink';
                }
                return 'internalLink';
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Function)
        ], PoTableColumnLinkComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoTableColumnLinkComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoTableColumnLinkComponent.prototype, "link", void 0);
        __decorate([
            core.Input('p-row'),
            __metadata("design:type", Object)
        ], PoTableColumnLinkComponent.prototype, "row", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", String)
        ], PoTableColumnLinkComponent.prototype, "value", void 0);
        PoTableColumnLinkComponent = __decorate([
            core.Component({
                selector: 'po-table-column-link',
                template: "<ng-container [ngSwitch]=\"type\">\n  <p *ngSwitchCase=\"'disabled'\" class=\"po-table-link-disabled\">{{ value }}</p>\n  <a *ngSwitchCase=\"'action'\" class=\"po-table-link\" (click)=\"action(value, row)\">{{ value }}</a>\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-table-link\" [href]=\"link\" target=\"_blank\">{{ value }}</a>\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-table-link\" [routerLink]=\"link\">{{ value }}</a>\n</ng-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoTableColumnLinkComponent);
        return PoTableColumnLinkComponent;
    }());

    var PoTableColumnManagerMaxColumnsDefault = 99999;
    var poTableColumnManagerLiteralsDefault = {
        en: {
            columnsManager: 'Columns manager',
            restoreDefault: 'Restore default'
        },
        es: {
            columnsManager: 'Gerente de columna',
            restoreDefault: 'Restaurar por defecto'
        },
        pt: {
            columnsManager: 'Gerenciador de colunas',
            restoreDefault: 'Restaurar padrão'
        },
        ru: {
            columnsManager: 'менеджер колонок',
            restoreDefault: 'сброс настроек'
        }
    };
    var PoTableColumnManagerComponent = /** @class */ (function () {
        function PoTableColumnManagerComponent(renderer) {
            this.renderer = renderer;
            this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
            this.columnsOptions = [];
            this.literals = __assign(__assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[browserLanguage()]);
            this.visibleColumns = [];
            this.defaultColumns = [];
            this.columns = [];
            this.visibleColumnsChange = new core.EventEmitter();
        }
        Object.defineProperty(PoTableColumnManagerComponent.prototype, "maxColumns", {
            get: function () {
                return this._maxColumns;
            },
            set: function (value) {
                this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
            },
            enumerable: true,
            configurable: true
        });
        PoTableColumnManagerComponent.prototype.ngOnInit = function () {
            this.updateColumnsOptions(this.columns);
        };
        PoTableColumnManagerComponent.prototype.ngOnChanges = function (changes) {
            var columns = changes.columns, maxColumns = changes.maxColumns, target = changes.target;
            if (target && target.firstChange) {
                this.initializeListeners();
            }
            if (columns) {
                this.onChangeColumns(columns);
            }
            if (maxColumns) {
                this.updateColumnsOptions(this.columns);
            }
        };
        PoTableColumnManagerComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoTableColumnManagerComponent.prototype.onChangeVisibleColumns = function (checkedColumns) {
            this.disableColumnsOptions(this.columnsOptions);
            var visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
            this.visibleColumnsChange.emit(visibleTableColumns);
        };
        PoTableColumnManagerComponent.prototype.restore = function () {
            this.updateColumnsOptions(this.defaultColumns);
        };
        // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
        PoTableColumnManagerComponent.prototype.disableColumnsOptions = function (columns) {
            var _this = this;
            if (columns === void 0) { columns = []; }
            // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
            setTimeout(function () {
                _this.columnsOptions = columns.map(function (column) { return (__assign(__assign({}, column), { disabled: _this.isDisableColumn(column.value) })); });
            });
        };
        PoTableColumnManagerComponent.prototype.getColumnTitleLabel = function (column) {
            return column.label || capitalizeFirstLetter(column.property);
        };
        /** Retorna um Array de column.property das colunas que são visiveis. */
        PoTableColumnManagerComponent.prototype.getVisibleColumns = function (columns) {
            var _this = this;
            var visibleColumns = [];
            columns.forEach(function (column) {
                if (column.visible !== false && visibleColumns.length < _this.maxColumns && column.type !== 'detail') {
                    visibleColumns.push(column.property);
                }
            });
            return visibleColumns;
        };
        /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
        PoTableColumnManagerComponent.prototype.getVisibleTableColumns = function (visibleColumns) {
            return this.columns.map(function (column) { return (__assign(__assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })); });
        };
        PoTableColumnManagerComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                if (_this.popover) {
                    _this.popover.close();
                }
            });
        };
        PoTableColumnManagerComponent.prototype.isDisableColumn = function (property) {
            return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
        };
        PoTableColumnManagerComponent.prototype.mapTableColumnsToCheckboxOptions = function (columns) {
            var _this = this;
            if (columns === void 0) { columns = []; }
            var columnsOptions = [];
            columns.forEach(function (column) {
                if (column.type !== 'detail') {
                    columnsOptions.push({
                        value: column.property,
                        label: _this.getColumnTitleLabel(column),
                        disabled: _this.isDisableColumn(column.property)
                    });
                }
            });
            return columnsOptions;
        };
        PoTableColumnManagerComponent.prototype.onChangeColumns = function (columns) {
            var firstChange = columns.firstChange, _a = columns.currentValue, currentValue = _a === void 0 ? [] : _a, _b = columns.previousValue, previousValue = _b === void 0 ? [] : _b;
            // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
            if (firstChange || this.defaultColumns.length !== currentValue.length) {
                this.defaultColumns = currentValue;
            }
            // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
            if (previousValue.length !== currentValue.length) {
                this.updateColumnsOptions(currentValue);
            }
        };
        PoTableColumnManagerComponent.prototype.removeListeners = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        PoTableColumnManagerComponent.prototype.updateColumnsOptions = function (columns) {
            this.visibleColumns = this.getVisibleColumns(columns);
            this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
            this.onChangeVisibleColumns(this.visibleColumns);
        };
        PoTableColumnManagerComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Array)
        ], PoTableColumnManagerComponent.prototype, "columns", void 0);
        __decorate([
            core.Input('p-max-columns'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoTableColumnManagerComponent.prototype, "maxColumns", null);
        __decorate([
            core.Input('p-target'),
            __metadata("design:type", core.ElementRef)
        ], PoTableColumnManagerComponent.prototype, "target", void 0);
        __decorate([
            core.Output('p-visible-columns-change'),
            __metadata("design:type", Object)
        ], PoTableColumnManagerComponent.prototype, "visibleColumnsChange", void 0);
        __decorate([
            core.ViewChild(PoPopoverComponent),
            __metadata("design:type", PoPopoverComponent)
        ], PoTableColumnManagerComponent.prototype, "popover", void 0);
        PoTableColumnManagerComponent = __decorate([
            core.Component({
                selector: 'po-table-column-manager',
                template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\"\n    >\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n"
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], PoTableColumnManagerComponent);
        return PoTableColumnManagerComponent;
    }());

    /**
     * @usedBy PoTableComponent
     *
     * @description
     * Tipos de ordenação das colunas da tabela.
     */

    (function (PoTableColumnSortType) {
        /** Ordenação ascendente */
        PoTableColumnSortType["Ascending"] = "ascending";
        /** Ordenação descendente */
        PoTableColumnSortType["Descending"] = "descending";
    })(exports.PoTableColumnSortType || (exports.PoTableColumnSortType = {}));

    var poTableContainer = ['border', 'shadow'];
    var poTableContainerDefault = 'border';
    var poTableLiteralsDefault = {
        en: {
            noColumns: 'Columns are not defined',
            noData: 'No data found',
            noVisibleColumn: 'No visible column',
            loadingData: 'Loading',
            loadMoreData: 'Load more data',
            seeCompleteSubtitle: 'See complete subtitle',
            completeSubtitle: 'Complete subtitle',
            columnsManager: 'Columns manager'
        },
        es: {
            noColumns: 'Columnas no definidas',
            noData: 'Datos no encontrados',
            noVisibleColumn: 'Sin columnas visibles',
            loadingData: 'Cargando datos',
            loadMoreData: 'Cargar más resultados',
            seeCompleteSubtitle: 'Ver subtitulo completo',
            completeSubtitle: 'Subtitulo completo',
            columnsManager: 'Gerente de columna'
        },
        pt: {
            noColumns: 'Nenhuma definição de colunas',
            noData: 'Nenhum dado encontrado',
            noVisibleColumn: 'Nenhuma coluna visível',
            loadingData: 'Carregando',
            loadMoreData: 'Carregar mais resultados',
            seeCompleteSubtitle: 'Ver legenda completa',
            completeSubtitle: 'Legenda completa',
            columnsManager: 'Gerenciador de colunas'
        },
        ru: {
            noColumns: 'Нет определения столбца',
            noData: 'Данные не найдены',
            noVisibleColumn: 'нет видимых столбцов',
            loadingData: 'погрузка',
            loadMoreData: 'загрузка',
            seeCompleteSubtitle: 'Посмотреть полный субтитр',
            completeSubtitle: 'Полный заголовок',
            columnsManager: 'менеджер колонок'
        }
    };
    /**
     * @description
     *
     * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
     * formato personalizado.
     *
     * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
     * carregamento por demanda através do botão **Carregar mais resultados**.
     *
     * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
     *
     * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
     * no canto superior direito do cabeçalho da tabela.
     *
     * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
     * completa visualização dos dados.
     */
    var PoTableBaseComponent = /** @class */ (function () {
        function PoTableBaseComponent(poDate) {
            this.poDate = poDate;
            this._actions = [];
            this._columns = [];
            this._hideDetail = false;
            this._hideTextOverflow = false;
            this._loading = false;
            this.hasMainColumns = false;
            this.mainColumns = [];
            this.selectAll = false;
            this.sortedColumn = { property: null, ascending: true };
            this.subtitleColumns = [];
            /** Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas. */
            this.allSelected = new core.EventEmitter();
            /** Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas. */
            this.allUnselected = new core.EventEmitter();
            /**
             * Evento executado ao colapsar uma linha do `po-table`.
             *
             * > Como parâmetro o componente envia o item colapsado.
             */
            this.collapsed = new core.EventEmitter();
            /**
             * Evento executado ao expandir uma linha do `po-table`.
             *
             * > Como parâmetro o componente envia o item expandido.
             */
            this.expanded = new core.EventEmitter();
            /** Evento executado ao selecionar uma linha do `po-table`. */
            this.selected = new core.EventEmitter();
            /**
             * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
             * não é visível.
             *
             * Recebe um objeto `{ column, type }` onde:
             *
             * - column (`PoTableColumn`): objeto da coluna que está ordenada.
             * - type (`PoTableColumnSortType`): tipo da ordenação.
             */
            this.showMore = new core.EventEmitter();
            /**
             * Evento executado ao ordenar colunas da tabela.
             *
             * Recebe um objeto `{ column, type }` onde:
             *
             * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
             * - type (`PoTableColumnSortType`): tipo da ordenação.
             */
            this.sortBy = new core.EventEmitter();
            /** Evento executado ao desmarcar a seleção de uma linha do `po-table`. */
            this.unselected = new core.EventEmitter();
        }
        Object.defineProperty(PoTableBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens da tabela.
             * > Se falso, será inicializado como um *array* vazio.
             */
            set: function (items) {
                this._items = Array.isArray(items) ? items : [];
                // when haven't items, selectAll should be unchecked.
                if (!this.hasItems) {
                    this.selectAll = false;
                }
                else if (!this.hasColumns) {
                    this.columns = this.getDefaultColumns(items[0]);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
             * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
             * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
             *
             */
            set: function (columns) {
                this._columns = columns || [];
                if (this._columns.length) {
                    this.setColumnLink();
                    this.calculateWidthHeaders();
                }
                else if (this.hasItems) {
                    this._columns = this.getDefaultColumns(this.items[0]);
                }
                this.onChangeColumns();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "container", {
            get: function () {
                return this._container;
            },
            /**
             * @optional
             *
             * @description
             *
             * Adiciona um contorno arredondado ao `po-table`, as opções são:
             * - `border`: com bordas/linhas.
             * - `shadow`: com sombras.
             *
             * @default `border`
             */
            set: function (value) {
                this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hideTextOverflow", {
            get: function () {
                return this._hideTextOverflow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
             * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
             * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
             */
            set: function (hideTextOverflow) {
                this._hideTextOverflow = convertToBoolean(hideTextOverflow);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da tabela em *pixels* e fixa o cabeçalho.
             */
            set: function (height) {
                this._height = height;
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hideDetail", {
            get: function () {
                return this._hideDetail;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita a visualização da lista de detalhes de cada linha da coluna.
             *
             * @default `false`
             */
            set: function (hideDetail) {
                this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poTableLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-table`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoTableLiterals = {
             *    loadMoreData: 'Buscar mais dados',
             *    loadingData: 'Processando',
             *    noColumns: 'Sem colunas',
             *    noData: 'Sem dados',
             *    seeCompleteSubtitle: 'Mostrar legenda completa',
             *    completeSubtitle: 'Todas legendas'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoTableLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-table
             *   [p-literals]="customLiterals">
             * </po-table>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poTableLiteralsDefault[poLocaleDefault]), poTableLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poTableLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "loading", {
            get: function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
             *
             * @default `false`
             */
            set: function (loading) {
                this._loading = convertToBoolean(loading);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "checkbox", {
            get: function () {
                return this.selectable;
            },
            /**
             * @optional
             *
             * @deprecated 3.x.x
             *
             * @description
             *
             * ***Deprecated 3.x.x***
             *
             * > Esta propriedade está depreciada, utilize a propriedade `p-selectable`.
             *
             * Habilita na primeira coluna a opção de selecionar linhas,
             * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
             * > Exemplo: `item.$selected` ou `item['$selected']`.
             * > Os itens filhos possuem comportamento independente do item pai.
             *
             * @default `false`
             */
            set: function (checkbox) {
                this.selectable = checkbox;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações.
             *
             * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
             * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
             *
             * **A coluna de ações não será exibida quando:**
             *  - a lista conter valores inválidos ou indefinidos.
             *  - tenha uma única ação e a mesma não for visível.
             */
            set: function (actions) {
                this._actions = actions;
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
             * selecionar apenas uma única linha.
             *
             * **Importante:**
             *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
             *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
             * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
             *
             * @default `false`
             */
            set: function (value) {
                this._selectable = value === '' ? true : convertToBoolean(value);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "setSort", {
            set: function (sort) {
                this.sort = sort === '' ? false : convertToBoolean(sort);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "setShowMoreDisabled", {
            set: function (showMoreDisabled) {
                this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "setStriped", {
            set: function (striped) {
                this.striped = striped === '' ? false : convertToBoolean(striped);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "setHideSelectAll", {
            set: function (hideSelectAll) {
                this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "setSingleSelect", {
            set: function (value) {
                this.singleSelect = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hasColumns", {
            get: function () {
                return this.columns && this.columns.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "hasItems", {
            get: function () {
                return !!(this.items && this.items.length);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "nameColumnDetail", {
            get: function () {
                return this.columnMasterDetail ? this.columnMasterDetail.property : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "validColumns", {
            get: function () {
                var typesValid = [
                    'string',
                    'number',
                    'boolean',
                    'date',
                    'time',
                    'dateTime',
                    'currency',
                    'subtitle',
                    'link',
                    'label',
                    'icon'
                ];
                return this.columns.filter(function (col) { return !col.type || typesValid.includes(col.type); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableBaseComponent.prototype, "sortType", {
            get: function () {
                return this.sortedColumn.ascending ? exports.PoTableColumnSortType.Ascending : exports.PoTableColumnSortType.Descending;
            },
            enumerable: true,
            configurable: true
        });
        PoTableBaseComponent.prototype.ngOnChanges = function (changes) {
            if (this.singleSelect || this.hideSelectAll) {
                this.selectAll = false;
                this.hideSelectAll = true;
            }
            if (changes.height) {
                this.calculateHeightTableContainer(this.height);
            }
        };
        /**
         * Método que colapsa uma linha com detalhe quando executada.
         *
         * @param { number } rowIndex Índice da linha que será colapsada.
         * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
         */
        PoTableBaseComponent.prototype.collapse = function (rowIndex) {
            this.setShowDetail(rowIndex, false);
        };
        /**
         * Método que expande uma linha com detalhe quando executada.
         *
         * @param { number } rowIndex Índice da linha que será expandida.
         * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
         */
        PoTableBaseComponent.prototype.expand = function (rowIndex) {
            this.setShowDetail(rowIndex, true);
        };
        /**
         * Retorna as linhas do `po-table` que estão selecionadas.
         */
        PoTableBaseComponent.prototype.getSelectedRows = function () {
            return this.items.filter(function (item) { return item.$selected; });
        };
        /**
         * Retorna as linhas do `po-table` que não estão selecionadas.
         */
        PoTableBaseComponent.prototype.getUnselectedRows = function () {
            return this.items.filter(function (item) { return !item.$selected; });
        };
        PoTableBaseComponent.prototype.selectAllRows = function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach(function (item) {
                    item.$selected = _this.selectAll;
                });
                this.emitSelectAllEvents(this.selectAll, this.items);
            }
        };
        PoTableBaseComponent.prototype.selectRow = function (row) {
            row.$selected = !row.$selected;
            this.emitSelectEvents(row);
            this.configAfterSelectRow(this.items, row);
        };
        PoTableBaseComponent.prototype.selectDetailRow = function (row) {
            this.emitSelectEvents(row);
        };
        PoTableBaseComponent.prototype.getClassColor = function (row, column) {
            return column.color ? "po-text-" + this.getColumnColor(row, column) : '';
        };
        PoTableBaseComponent.prototype.toggleDetail = function (row) {
            this.setShowDetail(row, !row.$showDetail);
            this.emitExpandEvents(row);
        };
        PoTableBaseComponent.prototype.toggleRowAction = function (row) {
            var toggleShowAction = row.$showAction;
            this.items.forEach(function (item) {
                if (item.$showAction) {
                    item.$showAction = false;
                }
            });
            row.$showAction = !toggleShowAction;
        };
        PoTableBaseComponent.prototype.sortColumn = function (column) {
            if (!this.sort || column.type === 'detail') {
                return;
            }
            this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
            this.sortArray(column, this.sortedColumn.ascending);
            this.sortBy.emit({ column: column, type: this.sortType });
            this.sortedColumn.property = column;
        };
        PoTableBaseComponent.prototype.onShowMore = function () {
            var sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
            this.showMore.emit(sort);
        };
        PoTableBaseComponent.prototype.getDefaultColumns = function (item) {
            var keys = Object.keys(item);
            return keys
                .filter(function (key) { return typeof item[key] !== 'object'; })
                .map(function (key) {
                return { label: capitalizeFirstLetter(key), property: key };
            });
        };
        PoTableBaseComponent.prototype.configAfterSelectRow = function (rows, row) {
            if (this.singleSelect) {
                this.unselectOtherRows(rows, row);
            }
            else if (!this.hideSelectAll) {
                this.selectAll = this.isEverySelected(rows);
            }
        };
        PoTableBaseComponent.prototype.emitExpandEvents = function (row) {
            row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
        };
        PoTableBaseComponent.prototype.emitSelectAllEvents = function (selectAll, rows) {
            selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
        };
        PoTableBaseComponent.prototype.emitSelectEvents = function (row) {
            row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
        };
        PoTableBaseComponent.prototype.getColumnColor = function (row, column) {
            var columnColor = column.color;
            return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
        };
        // Retorna a coluna da lista de colunas que é do tipo detail
        PoTableBaseComponent.prototype.getColumnMasterDetail = function () {
            return this.columns.find(function (col) { return col.type === 'detail'; });
        };
        // Colunas que são inseridas no <head> da tabela
        PoTableBaseComponent.prototype.getMainColumns = function () {
            return this.validColumns.filter(function (col) { return col.visible !== false; });
        };
        // Retorna as colunas com status
        PoTableBaseComponent.prototype.getSubtitleColumns = function () {
            return this.columns.filter(function (col) { return col.type === 'subtitle'; });
        };
        PoTableBaseComponent.prototype.isEverySelected = function (items) {
            var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
            var everyChecked = function (item) { return item.$selected; };
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        PoTableBaseComponent.prototype.onChangeColumns = function () {
            this.setMainColumns();
            this.setColumnMasterDetail();
            this.setSubtitleColumns();
        };
        PoTableBaseComponent.prototype.setColumnLink = function () {
            this.columns.forEach(function (column) {
                if (column['type'] === 'link' && !column['link']) {
                    column['link'] = 'link';
                }
            });
        };
        PoTableBaseComponent.prototype.setColumnMasterDetail = function () {
            this.columnMasterDetail = this.getColumnMasterDetail();
        };
        PoTableBaseComponent.prototype.setMainColumns = function () {
            this.mainColumns = this.getMainColumns();
            this.hasMainColumns = !!this.mainColumns.length;
            this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
        };
        PoTableBaseComponent.prototype.setShowDetail = function (rowIdentifier, isShowDetail) {
            var isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
            var row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
            row.$showDetail = isShowDetail;
        };
        PoTableBaseComponent.prototype.setSubtitleColumns = function () {
            this.subtitleColumns = this.getSubtitleColumns();
        };
        PoTableBaseComponent.prototype.sortArray = function (column, ascending) {
            var _this = this;
            this.items.sort(function (leftSide, rightSide) {
                if (column.type === 'date' || column.type === 'dateTime') {
                    return _this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
                }
                else {
                    return sortValues(leftSide[column.property], rightSide[column.property], ascending);
                }
            });
        };
        PoTableBaseComponent.prototype.unselectOtherRows = function (rows, row) {
            rows.forEach(function (item) {
                if (item !== row) {
                    item.$selected = false;
                }
            });
        };
        PoTableBaseComponent.prototype.verifyWidthColumnsPixels = function () {
            return this.hasMainColumns ? this.mainColumns.every(function (column) { return column.width && column.width.includes('px'); }) : false;
        };
        PoTableBaseComponent.ctorParameters = function () { return [
            { type: PoDateService }
        ]; };
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoTableBaseComponent.prototype, "items", null);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoTableBaseComponent.prototype, "columns", null);
        __decorate([
            core.Input('p-container'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "container", null);
        __decorate([
            core.Input('p-hide-text-overflow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTableBaseComponent.prototype, "hideTextOverflow", null);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoTableBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-hide-detail'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTableBaseComponent.prototype, "hideDetail", null);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTableBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-loading'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTableBaseComponent.prototype, "loading", null);
        __decorate([
            core.Input('p-checkbox'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTableBaseComponent.prototype, "checkbox", null);
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoTableBaseComponent.prototype, "actions", null);
        __decorate([
            core.Input('p-selectable'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTableBaseComponent.prototype, "selectable", null);
        __decorate([
            core.Input('p-sort'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "setSort", null);
        __decorate([
            core.Input('p-show-more-disabled'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "setShowMoreDisabled", null);
        __decorate([
            core.Input('p-striped'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "setStriped", null);
        __decorate([
            core.Input('p-hide-select-all'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "setHideSelectAll", null);
        __decorate([
            core.Input('p-single-select'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTableBaseComponent.prototype, "setSingleSelect", null);
        __decorate([
            core.Input('p-max-columns'),
            __metadata("design:type", Number)
        ], PoTableBaseComponent.prototype, "maxColumns", void 0);
        __decorate([
            core.Output('p-all-selected'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "allSelected", void 0);
        __decorate([
            core.Output('p-all-unselected'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "allUnselected", void 0);
        __decorate([
            core.Output('p-collapsed'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "collapsed", void 0);
        __decorate([
            core.Output('p-expanded'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "expanded", void 0);
        __decorate([
            core.Output('p-selected'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "selected", void 0);
        __decorate([
            core.Output('p-show-more'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "showMore", void 0);
        __decorate([
            core.Output('p-sort-by'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "sortBy", void 0);
        __decorate([
            core.Output('p-unselected'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableBaseComponent.prototype, "unselected", void 0);
        PoTableBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoDateService])
        ], PoTableBaseComponent);
        return PoTableBaseComponent;
    }());

    /**
     * @usedBy PoTableComponent
     *
     * @description
     *
     * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
     * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
     *
     * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
     *
     * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
     * o componente não exibirá conteúdo.
     *  - Linha: `row` determina o item da linha corrente.
     *  - Índice: `rowIndex` determina o índice da linha corrente.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </ng-template>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-table
     *   [p-columns]="columns"
     *   [p-items]="items">
     *     <div *p-table-row-template="let rowItem, let i=rowIndex">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </div>
     * ...
     *
     * ```
     *
     * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
     * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
     * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * @Component({
     *    selector: 'app-root',
     *    templateUrl: `
     *      ...
     *      <po-table
     *        [p-columns]="columns"
     *        [p-items]="items">
     *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
     *            <detail-row [row]="rowItem"> </detail-row>
     *          </div>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public dataTable = [{
     *      code: 1200,
     *      product: 'Rice',
     *      costumer: 'Supermarket 1',
     *      quantity: 3,
     *      status: 'delivered',
     *      license_plate: 'MDJD9191',
     *      batch_product: 18041822,
     *      driver: 'José Oliveira'
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      costumer: 'Supermarket 2',
     *      quantity: 1,
     *      status: 'transport',
     *      license_plate: 'XXA5454',
     *      batch_product: 18041821,
     *      driver: 'Francisco Pereira'
     *    }];
     *
     *    isUndelivered(row, index: number) {
     *      return row.status !== 'delivered';
     *    }
     * }
     * ```
     * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
     * não correspondam à *delivered*.
     */
    var PoTableRowTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoTableRowTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoTableRowTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        __decorate([
            core.Input('p-table-row-template-show'),
            __metadata("design:type", Function)
        ], PoTableRowTemplateDirective.prototype, "poTableRowTemplateShow", void 0);
        PoTableRowTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-table-row-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoTableRowTemplateDirective);
        return PoTableRowTemplateDirective;
    }());

    /**
     * @docsExtends PoTableBaseComponent
     *
     * @example
     *
     * <example name="po-table-basic" title="PO Table Basic">
     *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
     *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
     * </example>
     *
     * <example name="po-table-labs" title="PO Table Labs">
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
     *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-transport" title="PO Table - Transport">
     *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
     *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
     *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-airfare" title="PO Table - Airfare">
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
     *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
     * </example>
     *
     * <example name="po-table-components" title="PO Table - Po Field Components">
     *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
     *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
     * </example>
     */
    var PoTableComponent = /** @class */ (function (_super) {
        __extends(PoTableComponent, _super);
        function PoTableComponent(poDate, differs, viewRef, renderer, changeDetector, decimalPipe, router) {
            var _this = _super.call(this, poDate) || this;
            _this.changeDetector = changeDetector;
            _this.decimalPipe = decimalPipe;
            _this.router = router;
            _this.tableOpacity = 0;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.parentRef = viewRef['_hostView'][8];
            _this.differ = differs.find([]).create(null);
            // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
            // alteração de largura, pois o ngDoCheck não é executado.
            _this.clickListener = renderer.listen('document', 'click', function () { });
            _this.resizeListener = renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
            return _this;
        }
        Object.defineProperty(PoTableComponent.prototype, "columnManagerTarget", {
            get: function () {
                return this._columnManagerTarget;
            },
            set: function (value) {
                this._columnManagerTarget = value;
                this.changeDetector.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "columnCount", {
            get: function () {
                var columnCount = this.mainColumns.length +
                    (this.actions.length > 0 ? 1 : 0) +
                    (this.selectable ? 1 : 0) +
                    (!this.hideDetail && this.columnMasterDetail !== undefined ? 1 : 0);
                return columnCount || 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "columnCountForMasterDetail", {
            get: function () {
                // caso tiver ações será utilizado a sua coluna para exibir o columnManager
                var columnManager = this.actions.length ? 0 : 1;
                return this.mainColumns.length + 1 + (this.actions.length > 0 ? 1 : 0) + (this.selectable ? 1 : 0) + columnManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "detailHideSelect", {
            get: function () {
                var masterDetail = this.columnMasterDetail;
                return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "displayColumnManagerCell", {
            get: function () {
                return !this.visibleActions.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "firstAction", {
            get: function () {
                return this.visibleActions && this.visibleActions[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasFooter", {
            get: function () {
                return this.hasItems && this.hasVisibleSubtitleColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasMasterDetailColumn", {
            get: function () {
                return (this.hasMainColumns && this.hasItems && !this.hideDetail && !!(this.columnMasterDetail || this.hasRowTemplate));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasRowTemplate", {
            get: function () {
                return !!this.tableRowTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasSelectableColumn", {
            get: function () {
                return this.selectable && this.hasItems && this.hasMainColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasValidColumns", {
            get: function () {
                return !!this.validColumns.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "hasVisibleSubtitleColumns", {
            get: function () {
                return this.subtitleColumns.some(function (column) { return column.visible !== false; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "isSingleAction", {
            get: function () {
                return this.visibleActions.length === 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableComponent.prototype, "visibleActions", {
            get: function () {
                return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
            },
            enumerable: true,
            configurable: true
        });
        PoTableComponent.prototype.ngAfterViewInit = function () {
            this.initialized = true;
        };
        PoTableComponent.prototype.ngDoCheck = function () {
            var _a;
            this.checkChangesItems();
            this.verifyCalculateHeightTableContainer();
            // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (((_a = this.tableWrapperElement) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) && !this.visibleElement && this.initialized) {
                this.debounceResize();
                this.visibleElement = true;
            }
        };
        PoTableComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoTableComponent.prototype.checkDisabled = function (row, column) {
            return column.disabled ? column.disabled(row) : false;
        };
        PoTableComponent.prototype.containsMasterDetail = function (row) {
            return row[this.nameColumnDetail] && row[this.nameColumnDetail].length;
        };
        PoTableComponent.prototype.executeTableAction = function (row, tableAction) {
            if (!row.disabled && !this.validateTableAction(row, tableAction)) {
                tableAction.action.call(this.parentRef, row);
                this.toggleRowAction(row);
            }
        };
        PoTableComponent.prototype.formatNumber = function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        PoTableComponent.prototype.getBooleanLabel = function (rowValue, columnBoolean) {
            if (rowValue || rowValue === false || rowValue === 0) {
                rowValue = convertToBoolean(rowValue);
                if (columnBoolean.boolean) {
                    return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
                }
                else {
                    return rowValue ? 'Sim' : 'Não';
                }
            }
            return rowValue;
        };
        PoTableComponent.prototype.getColumnIcons = function (row, column) {
            var rowIcons = row[column.property];
            if (column.icons) {
                if (Array.isArray(rowIcons)) {
                    return this.mergeCustomIcons(rowIcons, column.icons);
                }
                else {
                    return this.findCustomIcon(rowIcons, column);
                }
            }
            return rowIcons;
        };
        PoTableComponent.prototype.getColumnLabel = function (row, columnLabel) {
            return columnLabel.labels.find(function (labelItem) { return row[columnLabel.property] === labelItem.value; });
        };
        PoTableComponent.prototype.getSubtitleColumn = function (row, subtitleColumn) {
            return subtitleColumn.subtitles.find(function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; });
        };
        PoTableComponent.prototype.isShowMasterDetail = function (row) {
            return (!this.hideDetail &&
                this.nameColumnDetail &&
                row.$showDetail &&
                this.containsMasterDetail(row) &&
                !this.hasRowTemplate);
        };
        PoTableComponent.prototype.isShowRowTemplate = function (row, index) {
            if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
                return this.tableRowTemplate.poTableRowTemplateShow(row, index);
            }
            return true;
        };
        PoTableComponent.prototype.onClickLink = function (event, row, column) {
            if (!this.checkDisabled(row, column)) {
                event.stopPropagation();
            }
        };
        PoTableComponent.prototype.onVisibleColumnsChange = function (columns) {
            this.columns = columns;
            this.changeDetector.detectChanges();
        };
        PoTableComponent.prototype.tooltipMouseEnter = function (event, column, row) {
            this.tooltipText = undefined;
            if (this.hideTextOverflow && event.target.offsetWidth < event.target.scrollWidth && event.target.innerText.trim()) {
                return (this.tooltipText = event.target.innerText);
            }
            if (column) {
                this.checkingIfColumnHasTooltip(column, row);
            }
        };
        PoTableComponent.prototype.tooltipMouseLeave = function () {
            this.tooltipText = undefined;
        };
        PoTableComponent.prototype.togglePopup = function (row, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.poPopupComponent.toggle(row);
        };
        PoTableComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoTableComponent.prototype.validateTableAction = function (row, tableAction) {
            if (typeof tableAction.disabled === 'function') {
                return tableAction.disabled.call(this.parentRef, row);
            }
            else {
                return tableAction.disabled;
            }
        };
        PoTableComponent.prototype.calculateHeightTableContainer = function (height) {
            var value = parseFloat(height);
            this.heightTableContainer = value ? value - this.getHeightTableFooter() : undefined;
            this.setTableOpacity(1);
            this.changeDetector.detectChanges();
        };
        PoTableComponent.prototype.calculateWidthHeaders = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.height) {
                    _this.headersTable.forEach(function (header) {
                        var divHeader = header.nativeElement.querySelector('.po-table-header-fixed-inner');
                        if (divHeader) {
                            divHeader.style.width = header.nativeElement.offsetWidth + "px";
                        }
                    });
                }
            });
        };
        PoTableComponent.prototype.checkChangesItems = function () {
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && !this.hasColumns && this.hasItems) {
                this.columns = this.getDefaultColumns(this.items[0]);
            }
        };
        PoTableComponent.prototype.checkingIfColumnHasTooltip = function (column, row) {
            if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
                return (this.tooltipText = column.tooltip);
            }
            if (column.type === 'label') {
                var columnLabel = this.getColumnLabel(row, column);
                return (this.tooltipText = columnLabel.tooltip);
            }
        };
        PoTableComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.calculateWidthHeaders();
                // show the table
                _this.setTableOpacity(1);
            });
        };
        PoTableComponent.prototype.findCustomIcon = function (rowIcons, column) {
            var customIcon = column.icons.find(function (icon) { return rowIcons === icon.value; });
            return customIcon ? [customIcon] : undefined;
        };
        PoTableComponent.prototype.getHeightTableFooter = function () {
            return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
        };
        PoTableComponent.prototype.mergeCustomIcons = function (rowIcons, customIcons) {
            var mergedIcons = [];
            rowIcons.forEach(function (columnValue) {
                var foundCustomIcon = customIcons.find(function (customIcon) { return columnValue === customIcon.icon || columnValue === customIcon.value; });
                foundCustomIcon ? mergedIcons.push(foundCustomIcon) : mergedIcons.push(columnValue);
            });
            return mergedIcons;
        };
        PoTableComponent.prototype.removeListeners = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
            if (this.clickListener) {
                this.clickListener();
            }
        };
        PoTableComponent.prototype.setTableOpacity = function (value) {
            this.tableOpacity = value;
        };
        PoTableComponent.prototype.verifyChangeHeightInFooter = function () {
            return this.footerHeight !== this.getHeightTableFooter();
        };
        PoTableComponent.prototype.verifyCalculateHeightTableContainer = function () {
            if (this.height && this.verifyChangeHeightInFooter()) {
                this.footerHeight = this.getHeightTableFooter();
                this.calculateHeightTableContainer(this.height);
            }
        };
        PoTableComponent.ctorParameters = function () { return [
            { type: PoDateService },
            { type: core.IterableDiffers },
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: common.DecimalPipe },
            { type: router.Router }
        ]; };
        __decorate([
            core.ContentChild(PoTableRowTemplateDirective, { static: true }),
            __metadata("design:type", PoTableRowTemplateDirective)
        ], PoTableComponent.prototype, "tableRowTemplate", void 0);
        __decorate([
            core.ViewChild('columnManagerTarget'),
            __metadata("design:type", core.ElementRef),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoTableComponent.prototype, "columnManagerTarget", null);
        __decorate([
            core.ViewChild('noColumnsHeader', { read: core.ElementRef }),
            __metadata("design:type", Object)
        ], PoTableComponent.prototype, "noColumnsHeader", void 0);
        __decorate([
            core.ViewChild('popup'),
            __metadata("design:type", PoPopupComponent)
        ], PoTableComponent.prototype, "poPopupComponent", void 0);
        __decorate([
            core.ViewChild('tableFooter', { read: core.ElementRef, static: false }),
            __metadata("design:type", Object)
        ], PoTableComponent.prototype, "tableFooterElement", void 0);
        __decorate([
            core.ViewChild('tableWrapper', { read: core.ElementRef, static: false }),
            __metadata("design:type", Object)
        ], PoTableComponent.prototype, "tableWrapperElement", void 0);
        __decorate([
            core.ViewChildren('actionsIconElement', { read: core.ElementRef }),
            __metadata("design:type", core.QueryList)
        ], PoTableComponent.prototype, "actionsIconElement", void 0);
        __decorate([
            core.ViewChildren('actionsElement', { read: core.ElementRef }),
            __metadata("design:type", core.QueryList)
        ], PoTableComponent.prototype, "actionsElement", void 0);
        __decorate([
            core.ViewChildren('headersTable'),
            __metadata("design:type", core.QueryList)
        ], PoTableComponent.prototype, "headersTable", void 0);
        PoTableComponent = __decorate([
            core.Component({
                selector: 'po-table',
                template: "<po-container *ngIf=\"container; else tableContainerTemplate\" p-no-padding [p-no-shadow]=\"container === 'border'\">\n  <ng-container *ngTemplateOutlet=\"tableContainerTemplate\"></ng-container>\n</po-container>\n\n<ng-template #tableContainerTemplate>\n  <div [class.po-table-container-relative]=\"loading\">\n    <div *ngIf=\"loading\" class=\"po-table-overlay\">\n      <po-loading class=\"po-table-overlay-content\" [p-text]=\"literals.loadingData\"></po-loading>\n    </div>\n\n    <div class=\"po-table-main-container\">\n      <div\n        #tableWrapper\n        class=\"po-table-wrapper\"\n        [class.po-table-header-fixed-columns-pixels]=\"allColumnsWidthPixels\"\n        [style.opacity]=\"tableOpacity\"\n      >\n        <div *ngIf=\"height\" class=\"po-table-container\" [style.height.px]=\"heightTableContainer\">\n          <div class=\"po-table-header-fixed po-table-header\"></div>\n          <div class=\"po-table-container-fixed-inner\">\n            <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n          </div>\n        </div>\n\n        <div *ngIf=\"!height\">\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\n    <ng-container *ngFor=\"let column of subtitleColumns; trackBy: trackBy\">\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"> </po-table-subtitle-footer>\n    </ng-container>\n  </div>\n</ng-template>\n\n<div class=\"po-row po-table-footer-show-more\" [class.po-invisible]=\"showMore.observers.length === 0\" #tableFooter>\n  <po-button\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    (p-click)=\"onShowMore()\"\n  >\n  </po-button>\n</div>\n\n<ng-template #tableTemplate>\n  <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\n    <thead>\n      <tr [class.po-table-header]=\"!height\">\n        <th *ngIf=\"hasSelectableColumn\" class=\"po-table-column-selectable\">\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <input\n              *ngIf=\"!hideSelectAll\"\n              type=\"checkbox\"\n              class=\"po-table-checkbox\"\n              [class.po-table-checkbox-checked]=\"selectAll\"\n              [class.po-table-checkbox-indeterminate]=\"selectAll === null\"\n            />\n            <label *ngIf=\"!hideSelectAll\" class=\"po-table-checkbox-label po-clickable\" (click)=\"selectAllRows()\">\n            </label>\n          </div>\n        </th>\n\n        <th *ngIf=\"hasMasterDetailColumn\" class=\"po-table-header-column po-table-header-master-detail\"></th>\n\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n        </th>\n\n        <th\n          *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n          #headersTable\n          class=\"po-table-header-ellipsis\"\n          [style.width]=\"column.width\"\n          [style.max-width]=\"column.width\"\n          [style.min-width]=\"column.width\"\n          [class.po-clickable]=\"sort\"\n          [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n          (click)=\"sortColumn(column)\"\n        >\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n          </div>\n        </th>\n\n        <th\n          #columnManager\n          *ngIf=\"hasValidColumns\"\n          [class.po-table-header-column-manager]=\"!isSingleAction\"\n          [class.po-table-header-column-manager-border]=\"!height && container\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n        >\n          <div\n            [class.po-table-header-column-manager-border]=\"height && container\"\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\n            [style.width.px]=\"height && visibleActions.length ? columnManager.offsetWidth : undefined\"\n          >\n            <button\n              #columnManagerTarget\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\n              p-tooltip-position=\"left\"\n              [p-tooltip]=\"literals.columnsManager\"\n            ></button>\n          </div>\n        </th>\n      </tr>\n    </thead>\n\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\n      <tr class=\"po-table-row\">\n        <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\n          <span> {{ literals.noData }} </span>\n        </td>\n      </tr>\n    </tbody>\n\n    <ng-container *ngIf=\"hasMainColumns\">\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of items; let rowIndex = index; trackBy: trackBy\">\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\">\n          <td *ngIf=\"selectable\" class=\"po-table-column po-table-column-selectable\">\n            <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\n            </ng-container>\n          </td>\n          <td\n            *ngIf=\"(columnMasterDetail && !hideDetail) || hasRowTemplate\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <span\n              *ngIf=\"\n                (containsMasterDetail(row) && !hasRowTemplate) || (isShowRowTemplate(row, rowIndex) && hasRowTemplate)\n              \"\n              class=\"po-icon po-clickable\"\n              [class.po-icon-arrow-up]=\"row.$showDetail\"\n              [class.po-icon-arrow-down]=\"!row.$showDetail\"\n            >\n            </span>\n          </td>\n\n          <td\n            *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\n            [style.width]=\"column.width\"\n            [style.max-width]=\"column.width\"\n            [style.min-width]=\"column.width\"\n            [class.po-table-column]=\"column.type !== 'icon'\"\n            [class.po-table-column-right]=\"column.type == 'currency' || column.type == 'number'\"\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\n            [ngClass]=\"getClassColor(row, column)\"\n            (click)=\"selectable ? selectRow(row) : 'javascript:;'\"\n          >\n            <div\n              class=\"po-table-column-cell\"\n              [class.po-table-body-ellipsis]=\"hideTextOverflow\"\n              [ngSwitch]=\"column.type\"\n              [p-tooltip]=\"tooltipText\"\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n              (mouseleave)=\"tooltipMouseLeave()\"\n            >\n              <span *ngSwitchCase=\"'boolean'\">\n                {{ getBooleanLabel(row[column.property], column) }}\n              </span>\n\n              <span *ngSwitchCase=\"'currency'\">\n                {{ row[column.property] | currency: column.format:'symbol':'1.2-2' }}\n              </span>\n\n              <span *ngSwitchCase=\"'date'\">\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}\n              </span>\n\n              <span *ngSwitchCase=\"'time'\">\n                {{ row[column.property] | po_time: column.format || 'HH:mm:ss.ffffff' }}\n              </span>\n\n              <span *ngSwitchCase=\"'dateTime'\">\n                {{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\n              </span>\n\n              <span *ngSwitchCase=\"'number'\">\n                {{ formatNumber(row[column.property], column.format) }}\n              </span>\n\n              <po-table-column-link\n                *ngSwitchCase=\"'link'\"\n                [p-action]=\"column.action\"\n                [p-disabled]=\"checkDisabled(row, column)\"\n                [p-link]=\"row[column.link]\"\n                [p-row]=\"row\"\n                [p-value]=\"row[column.property]\"\n                (click)=\"onClickLink($event, row, column)\"\n              >\n              </po-table-column-link>\n\n              <po-table-column-icon\n                *ngSwitchCase=\"'icon'\"\n                [p-column]=\"column\"\n                [p-icons]=\"getColumnIcons(row, column)\"\n                [p-row]=\"row\"\n              >\n              </po-table-column-icon>\n\n              <span *ngSwitchCase=\"'subtitle'\">\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n              </span>\n              <span *ngSwitchCase=\"'label'\">\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"></po-table-column-label>\n              </span>\n              <span *ngSwitchDefault>{{ row[column.property] }}</span>\n            </div>\n          </td>\n          <td *ngIf=\"isSingleAction\" class=\"po-table-column po-table-column-single-action\">\n            <div\n              *ngIf=\"firstAction.visible !== false\"\n              class=\"po-table-single-action po-clickable\"\n              [class.po-table-action-disabled]=\"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\n              (click)=\"executeTableAction(row, firstAction)\"\n            >\n              <span *ngIf=\"firstAction.icon\" class=\"po-icon {{ firstAction.icon }}\"></span>\n              {{ firstAction.label }}\n            </div>\n          </td>\n          <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\n            <span #popupTarget class=\"po-icon po-icon-more po-clickable\" (click)=\"togglePopup(row, popupTarget)\">\n            </span>\n          </td>\n          <!-- Column Manager -->\n          <td *ngIf=\"displayColumnManagerCell\" class=\"po-table-column\"></td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\n            <ng-template\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\n            <po-table-detail\n              [p-selectable]=\"selectable && !detailHideSelect\"\n              [p-detail]=\"columnMasterDetail.detail\"\n              [p-items]=\"row[nameColumnDetail]\"\n              (p-select-row)=\"selectDetailRow($event)\"\n            >\n            </po-table-detail>\n          </td>\n        </tr>\n      </tbody>\n    </ng-container>\n  </table>\n</ng-template>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n\n<ng-template #inputRadio let-row>\n  <input type=\"radio\" class=\"po-table-radio\" [class.po-table-radio-checked]=\"row.$selected\" />\n  <label class=\"po-table-radio-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\n</ng-template>\n\n<ng-template #inputCheckbox let-row>\n  <input type=\"checkbox\" class=\"po-table-checkbox\" [class.po-table-checkbox-checked]=\"row.$selected\" />\n  <label class=\"po-table-checkbox-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\n</ng-template>\n\n<ng-template #contentHeaderTemplate let-column>\n  <span\n    *ngIf=\"sort\"\n    [class.po-table-header-icon-unselected]=\"sortedColumn?.property !== column\"\n    [class.po-table-header-icon-descending]=\"sortedColumn?.property === column && sortedColumn.ascending\"\n    [class.po-table-header-icon-ascending]=\"sortedColumn?.property === column && !sortedColumn.ascending\"\n  >\n  </span>\n  <span\n    class=\"po-table-header-ellipsis po-table-header-block\"\n    [p-tooltip]=\"tooltipText\"\n    (mouseenter)=\"tooltipMouseEnter($event)\"\n    (mouseleave)=\"tooltipMouseLeave()\"\n  >\n    {{ column.label || (column.property | titlecase) }}\n  </span>\n</ng-template>\n\n<ng-template #noColumnsWithHeight>\n  <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"noColumnsHeader?.nativeElement.offsetWidth\">\n    {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n  </div>\n</ng-template>\n\n<ng-template #noColumnsWithoutHeight>\n  {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n</ng-template>\n\n<po-table-column-manager\n  [p-columns]=\"columns\"\n  [p-max-columns]=\"maxColumns\"\n  [p-target]=\"columnManagerTarget\"\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\"\n>\n</po-table-column-manager>\n",
                providers: [PoDateService]
            }),
            __metadata("design:paramtypes", [PoDateService,
                core.IterableDiffers,
                core.ViewContainerRef,
                core.Renderer2,
                core.ChangeDetectorRef,
                common.DecimalPipe,
                router.Router])
        ], PoTableComponent);
        return PoTableComponent;
    }(PoTableBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por apresentar o detalhe de cada linha da tabela.
     */
    var PoTableDetailComponent = /** @class */ (function () {
        function PoTableDetailComponent(decimalPipe) {
            this.decimalPipe = decimalPipe;
            /**
             * Define se a tabela possui a opção de `selectable` habilitada.
             */
            this.isSelectable = false;
            /**
             * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
             */
            this.selectRow = new core.EventEmitter();
        }
        Object.defineProperty(PoTableDetailComponent.prototype, "detail", {
            get: function () {
                return this._detail;
            },
            /**
             * Configuração da linha de detalhes.
             */
            set: function (value) {
                this._detail = this.returnPoTableDetailObject(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "detailColumns", {
            get: function () {
                var _a;
                return ((_a = this.detail) === null || _a === void 0 ? void 0 : _a.columns) || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderInline", {
            get: function () {
                return (this.detail && !this.detail['typeHeader']) || this.detail['typeHeader'] === 'inline';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderTop", {
            get: function () {
                return this.detail && this.detail['typeHeader'] === 'top';
            },
            enumerable: true,
            configurable: true
        });
        PoTableDetailComponent.prototype.formatNumberDetail = function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        PoTableDetailComponent.prototype.getColumnTitleLabel = function (detail) {
            return detail.label || capitalizeFirstLetter(detail.property);
        };
        PoTableDetailComponent.prototype.onSelectRow = function (item) {
            item.$selected = !item.$selected;
            this.selectRow.emit(item);
        };
        PoTableDetailComponent.prototype.returnPoTableDetailObject = function (value) {
            if (value && isTypeof(value, 'object')) {
                if (value.columns) {
                    value.columns.forEach(function (column) { return (column.property = column.property || column.column); });
                }
                if (Array.isArray(value)) {
                    return { columns: value };
                }
                if (value.columns) {
                    return value;
                }
            }
        };
        PoTableDetailComponent.ctorParameters = function () { return [
            { type: common.DecimalPipe }
        ]; };
        __decorate([
            core.Input('p-detail'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTableDetailComponent.prototype, "detail", null);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array)
        ], PoTableDetailComponent.prototype, "items", void 0);
        __decorate([
            core.Input('p-selectable'),
            __metadata("design:type", Boolean)
        ], PoTableDetailComponent.prototype, "isSelectable", void 0);
        __decorate([
            core.Output('p-select-row'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableDetailComponent.prototype, "selectRow", void 0);
        PoTableDetailComponent = __decorate([
            core.Component({
                selector: 'po-table-detail',
                template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-selectable\" *ngIf=\"isSelectable\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr\n      class=\"po-table-detail-row\"\n      [class.po-table-row-active]=\"item.$selected && isSelectable\"\n      *ngFor=\"let item of items\"\n    >\n      <ng-container *ngIf=\"isSelectable; else masterDetailSpace\">\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-selectable\">\n          <input class=\"po-table-checkbox\" type=\"checkbox\" [class.po-table-checkbox-checked]=\"item.$selected\" />\n          <label class=\"po-table-checkbox-label po-clickable\" (click)=\"onSelectRow(item)\"> </label>\n        </td>\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td\n        class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"isSelectable ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\"\n      >\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">\n            {{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}\n          </span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
            }),
            __metadata("design:paramtypes", [common.DecimalPipe])
        ], PoTableDetailComponent);
        return PoTableDetailComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir um ícone na tabela.
     */
    var PoTableIconComponent = /** @class */ (function () {
        function PoTableIconComponent() {
            /** Output click. */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoTableIconComponent.prototype, "allowTooltip", {
            get: function () {
                return !this.disabled && this.iconTooltip;
            },
            enumerable: true,
            configurable: true
        });
        PoTableIconComponent.prototype.onClick = function (event) {
            if (this.clickable) {
                this.click.emit(event);
            }
        };
        PoTableIconComponent.prototype.tooltipMouseEnter = function () {
            if (this.allowTooltip) {
                this.tooltip = this.iconTooltip;
            }
        };
        PoTableIconComponent.prototype.tooltipMouseLeave = function () {
            this.tooltip = undefined;
        };
        __decorate([
            core.Input('p-clickable'),
            __metadata("design:type", Boolean)
        ], PoTableIconComponent.prototype, "clickable", void 0);
        __decorate([
            core.Input('p-color'),
            __metadata("design:type", String)
        ], PoTableIconComponent.prototype, "color", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoTableIconComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoTableIconComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-icon-tooltip'),
            __metadata("design:type", String)
        ], PoTableIconComponent.prototype, "iconTooltip", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoTableIconComponent.prototype, "click", void 0);
        PoTableIconComponent = __decorate([
            core.Component({
                selector: 'po-table-icon',
                template: "<span\n  class=\"po-icon {{ icon }} {{ disabled ? '' : color }}\"\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"onClick($event)\"\n  (mouseenter)=\"tooltipMouseEnter()\"\n  (mouseleave)=\"tooltipMouseLeave()\"\n>\n</span>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoTableIconComponent);
        return PoTableIconComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação de um botão e modal para visualização de todas as legendas.
     */
    var PoTableShowSubtitleComponent = /** @class */ (function () {
        function PoTableShowSubtitleComponent() {
        }
        __decorate([
            core.Input('p-subtitles'),
            __metadata("design:type", Array)
        ], PoTableShowSubtitleComponent.prototype, "subtitles", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoTableShowSubtitleComponent.prototype, "literals", void 0);
        PoTableShowSubtitleComponent = __decorate([
            core.Component({
                selector: 'po-table-show-subtitle',
                template: "<div class=\"po-table-footer-show-subtitle\" (click)=\"modal.open()\">\n  <div class=\"po-table-footer-show-subtitle-container\">\n    <span class=\"po-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\n  </div>\n</div>\n\n<po-modal #modal p-size=\"sm\" [p-title]=\"literals.completeSubtitle\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer-modal po-row\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n</po-modal>\n"
            })
        ], PoTableShowSubtitleComponent);
        return PoTableShowSubtitleComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação da representação da legenda, em formato de círculo.
     */
    var PoTableSubtitleCircleComponent = /** @class */ (function () {
        function PoTableSubtitleCircleComponent(poColorPaletteService) {
            this.poColorPaletteService = poColorPaletteService;
            /** Esconde a tooltip. */
            this.hideTitle = false;
        }
        Object.defineProperty(PoTableSubtitleCircleComponent.prototype, "subtitle", {
            get: function () {
                return this._subtitle;
            },
            /** Objeto com os dados da legenda. */
            set: function (subtitle) {
                if (subtitle) {
                    subtitle.color = this.poColorPaletteService.getColor(subtitle);
                }
                this._subtitle = subtitle;
            },
            enumerable: true,
            configurable: true
        });
        PoTableSubtitleCircleComponent.ctorParameters = function () { return [
            { type: PoColorPaletteService }
        ]; };
        __decorate([
            core.Input('p-subtitle'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTableSubtitleCircleComponent.prototype, "subtitle", null);
        __decorate([
            core.Input('p-hide-title'),
            __metadata("design:type", Boolean)
        ], PoTableSubtitleCircleComponent.prototype, "hideTitle", void 0);
        PoTableSubtitleCircleComponent = __decorate([
            core.Component({
                selector: 'po-table-subtitle-circle',
                template: "<span [title]=\"hideTitle ? '' : subtitle?.label\" class=\"po-table-subtitle-circle po-{{ subtitle?.color }}\">\n  {{ subtitle?.content }}\n</span>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [PoColorPaletteService])
        ], PoTableSubtitleCircleComponent);
        return PoTableSubtitleCircleComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a criação de um conjunto de legendas.
     */
    var PoTableSubtitleFooterComponent = /** @class */ (function () {
        function PoTableSubtitleFooterComponent(element, renderer) {
            this.element = element;
            this.renderer = renderer;
        }
        PoTableSubtitleFooterComponent.prototype.ngAfterViewInit = function () {
            this.initializeResizeListener();
            this.debounceResize();
        };
        PoTableSubtitleFooterComponent.prototype.ngDoCheck = function () {
            if (!this.isVisible && this.getContainerSize() > 0) {
                this.toggleShowCompleteSubtitle();
                this.isVisible = true;
            }
        };
        PoTableSubtitleFooterComponent.prototype.ngOnDestroy = function () {
            this.removeResizeListener();
        };
        PoTableSubtitleFooterComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.toggleShowCompleteSubtitle();
            });
        };
        PoTableSubtitleFooterComponent.prototype.getContainerSize = function () {
            return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
        };
        PoTableSubtitleFooterComponent.prototype.getItemsSize = function () {
            var items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
            return Array.from(items)
                .map(function (item) { return item['offsetWidth']; })
                .reduce(function (a, b) { return a + b; }, 16);
        };
        PoTableSubtitleFooterComponent.prototype.initializeResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        };
        PoTableSubtitleFooterComponent.prototype.removeResizeListener = function () {
            this.resizeListener();
        };
        PoTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = function () {
            var containerSize = this.getContainerSize();
            var itemsSize = this.getItemsSize();
            this.showSubtitle = itemsSize > containerSize;
        };
        PoTableSubtitleFooterComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoTableSubtitleFooterComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-subtitles'),
            __metadata("design:type", Array)
        ], PoTableSubtitleFooterComponent.prototype, "subtitles", void 0);
        PoTableSubtitleFooterComponent = __decorate([
            core.Component({
                selector: 'po-table-subtitle-footer',
                template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\" [p-literals]=\"literals\" [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], PoTableSubtitleFooterComponent);
        return PoTableSubtitleFooterComponent;
    }());

    /**
     * @description
     * Módulo do componente po-table
     */
    var PoTableModule = /** @class */ (function () {
        function PoTableModule() {
        }
        PoTableModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    router.RouterModule,
                    PoButtonModule,
                    PoCheckboxGroupModule,
                    PoContainerModule,
                    PoLoadingModule,
                    PoModalModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoTimeModule,
                    PoTooltipModule
                ],
                declarations: [
                    PoTableComponent,
                    PoTableColumnIconComponent,
                    PoTableColumnLabelComponent,
                    PoTableColumnLinkComponent,
                    PoTableColumnManagerComponent,
                    PoTableDetailComponent,
                    PoTableIconComponent,
                    PoTableRowTemplateDirective,
                    PoTableShowSubtitleComponent,
                    PoTableSubtitleCircleComponent,
                    PoTableSubtitleFooterComponent
                ],
                exports: [PoTableComponent, PoTableRowTemplateDirective],
                providers: [common.DecimalPipe]
            })
        ], PoTableModule);
        return PoTableModule;
    }());

    var PoCalendarLangService$1 = /** @class */ (function () {
        function PoCalendarLangService() {
            this.months = [
                {
                    pt: 'Janeiro',
                    en: 'January',
                    es: 'Enero'
                },
                {
                    pt: 'Fevereiro',
                    en: 'February',
                    es: 'Febrero'
                },
                {
                    pt: 'Março',
                    en: 'March',
                    es: 'Marzo'
                },
                {
                    pt: 'Abril',
                    en: 'April',
                    es: 'Abril'
                },
                {
                    pt: 'Maio',
                    en: 'May',
                    es: 'Mayo'
                },
                {
                    pt: 'Junho',
                    en: 'June',
                    es: 'Junio'
                },
                {
                    pt: 'Julho',
                    en: 'July',
                    es: 'Julio'
                },
                {
                    pt: 'Agosto',
                    en: 'August',
                    es: 'Agosto'
                },
                {
                    pt: 'Setembro',
                    en: 'September',
                    es: 'Setiembre'
                },
                {
                    pt: 'Outubro',
                    en: 'October',
                    es: 'Octubre'
                },
                {
                    pt: 'Novembro',
                    en: 'November',
                    es: 'Noviembre'
                },
                {
                    pt: 'Dezembro',
                    en: 'December',
                    es: 'Diciembre'
                }
            ];
            this.shortWeekDays = [
                {
                    pt: 'Dom',
                    en: 'Sun',
                    es: 'Dom'
                },
                {
                    pt: 'Seg',
                    en: 'Mon',
                    es: 'Lun'
                },
                {
                    pt: 'Ter',
                    en: 'Tue',
                    es: 'Mar'
                },
                {
                    pt: 'Qua',
                    en: 'Wed',
                    es: 'Mié'
                },
                {
                    pt: 'Qui',
                    en: 'Thu',
                    es: 'Jue'
                },
                {
                    pt: 'Sex',
                    en: 'Fri',
                    es: 'Vie'
                },
                {
                    pt: 'Sáb',
                    en: 'Sat',
                    es: 'Sáb'
                }
            ];
            this.wordMonth = {
                pt: 'Mês',
                en: 'Month',
                es: 'Mes'
            };
            this.wordYear = {
                pt: 'Ano',
                en: 'Year',
                es: 'Año'
            };
            this.lang = 'pt';
        }
        PoCalendarLangService.prototype.setLanguage = function (lang) {
            if (lang && lang.length >= 2) {
                lang = lang.toLowerCase().slice(0, 2);
                this.lang = lang === 'pt' || lang === 'en' || lang === 'es' ? lang : 'pt';
            }
        };
        PoCalendarLangService.prototype.getWordMonth = function () {
            return this.wordMonth[this.lang];
        };
        PoCalendarLangService.prototype.getWordYear = function () {
            return this.wordYear[this.lang];
        };
        PoCalendarLangService.prototype.getMonth = function (month) {
            return this.months[month][this.lang];
        };
        PoCalendarLangService.prototype.getArrayMonths = function () {
            var arrMonths = Array();
            for (var i = 0; i < this.months.length; i++) {
                arrMonths.push(this.months[i][this.lang]);
            }
            return arrMonths;
        };
        PoCalendarLangService.prototype.getWeedDays = function (day) {
            return this.shortWeekDays[day][this.lang];
        };
        PoCalendarLangService.prototype.getArrayWeekDays = function () {
            var arrWeekDays = Array();
            for (var i = 0; i < this.shortWeekDays.length; i++) {
                arrWeekDays.push(this.shortWeekDays[i][this.lang]);
            }
            return arrWeekDays;
        };
        PoCalendarLangService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], PoCalendarLangService);
        return PoCalendarLangService;
    }());

    var PoCalendarService$1 = /** @class */ (function () {
        function PoCalendarService() {
            this.firstWeekDay = 0; // 0 = sunday
        }
        PoCalendarService.prototype.weekStartDate = function (date) {
            var startDate = new Date(date.getTime());
            while (startDate.getDay() !== this.firstWeekDay) {
                startDate.setDate(startDate.getDate() - 1);
            }
            return startDate;
        };
        PoCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
            if (dayFormatter === void 0) { dayFormatter = null; }
            if (weekFormatter === void 0) { weekFormatter = null; }
            if (typeof month !== 'number' || month < 0 || month > 11) {
                throw Error('month must be a number (Jan is 0)');
            }
            var weeks = [];
            var week = [];
            var i = 0;
            var date = new Date(year, month, 1);
            setYearFrom0To100(date, year);
            date = this.weekStartDate(date);
            do {
                for (i = 0; i < 7; i++) {
                    week.push(dayFormatter ? dayFormatter(date) : date);
                    date = new Date(date.getTime());
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(weekFormatter ? weekFormatter(week) : week);
                week = [];
            } while (date.getMonth() <= month && date.getFullYear() === year);
            return weeks;
        };
        PoCalendarService.prototype.monthDays = function (year, month) {
            var getDayOrZero = function (date) {
                return date.getMonth() === month ? date : 0;
            };
            return this.monthDates(year, month, getDayOrZero);
        };
        PoCalendarService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], PoCalendarService);
        return PoCalendarService;
    }());

    var poCalendarLocaleDefault$1 = 'pt';
    var poCalendarLocales$1 = ['pt', 'en', 'es'];
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de calendário de uso interno
     */
    var PoCalendarComponent$1 = /** @class */ (function () {
        function PoCalendarComponent(poCalendarService, poCalendarLangService) {
            this.poCalendarService = poCalendarService;
            this.poCalendarLangService = poCalendarLangService;
            this.dayVisible = false;
            this.displayMonths = Array();
            this.displayWeedDays = Array();
            this.monthVisible = false;
            this.overlayInvisible = true;
            this.visible = false;
            this.yearVisible = false;
            this.isMobile = isMobile;
            this.today = new Date();
            this.selectedDateChange = new core.EventEmitter();
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(PoCalendarComponent.prototype, "dateEnd", {
            get: function () {
                return this._dateEnd;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data máxima possível de ser selecionada no calendário.
             */
            set: function (val) {
                if (val && val instanceof Date) {
                    var year = val.getFullYear();
                    var month = val.getMonth();
                    var day = val.getDate();
                    var date = new Date(year, month, day, 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._dateEnd = date;
                }
                else {
                    this._dateEnd = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCalendarComponent.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            /**
             * @optional
             *
             * @description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             */
            set: function (locale) {
                this._locale = poCalendarLocales$1.includes(locale) ? locale : poCalendarLocaleDefault$1;
                this.initializeLanguage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCalendarComponent.prototype, "selectedDate", {
            get: function () {
                return this._selectedDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data selecionada no calendário.
             */
            set: function (selectedDate) {
                this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoCalendarComponent.prototype, "dateStart", {
            get: function () {
                return this._dateStart;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data mínima possível de ser selecionada no calendário.
             */
            set: function (val) {
                if (val && val instanceof Date) {
                    var year = val.getFullYear();
                    var month = val.getMonth();
                    var day = val.getDate();
                    var date = new Date(year, month, day, 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._dateStart = date;
                }
                else {
                    this._dateStart = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        PoCalendarComponent.prototype.close = function () {
            this.overlayInvisible = true;
            this.visible = false;
        };
        // Obtém um array de todos os anos desta década
        PoCalendarComponent.prototype.getArrayDecade = function (year) {
            this.displayDecade = Array();
            if (year % 10 !== 0) {
                while (year % 10 !== 0) {
                    year--;
                }
            }
            this.updateDecade(year);
        };
        PoCalendarComponent.prototype.getBackgroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
        };
        PoCalendarComponent.prototype.getDayBackgroundColor = function (date) {
            if (this.equalsDate(date, this.selectedDate)) {
                return 'po-calendar-box-background-selected';
            }
            else if (this.equalsDate(date, this.today)) {
                return 'po-calendar-box-background-today';
            }
            else if (date) {
                if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                    return 'po-calendar-box-background';
                }
                else {
                    return 'po-calendar-box-background-disabled';
                }
            }
            else {
                return '';
            }
        };
        PoCalendarComponent.prototype.getDayForegroundColor = function (date) {
            if (this.equalsDate(date, this.selectedDate)) {
                return 'po-calendar-box-foreground-selected';
            }
            else if (this.equalsDate(date, this.today)) {
                return 'po-calendar-box-foreground-today';
            }
            else {
                if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                    return 'po-calendar-box-foreground';
                }
                else {
                    return 'po-calendar-box-foreground-disabled';
                }
            }
        };
        PoCalendarComponent.prototype.getForegroundColor = function (displayValue, propertyValue) {
            return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
        };
        PoCalendarComponent.prototype.getWordMonth = function () {
            return this.poCalendarLangService.getWordMonth();
        };
        PoCalendarComponent.prototype.getWordYear = function () {
            return this.poCalendarLangService.getWordYear();
        };
        PoCalendarComponent.prototype.init = function () {
            this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
            this.initializeLanguage();
            this.selectDay();
            if (this.isMobile()) {
                this.overlayInvisible = false;
            }
            this.visible = true;
        };
        PoCalendarComponent.prototype.initializeLanguage = function () {
            this.poCalendarLangService.setLanguage(this.locale);
            this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
            this.displayMonths = this.poCalendarLangService.getArrayMonths();
        };
        PoCalendarComponent.prototype.onNextMonth = function () {
            if (this.displayMonthNumber < 11) {
                this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
            }
            else {
                this.updateDisplay(this.displayYear + 1, 0);
            }
        };
        PoCalendarComponent.prototype.onPrevMonth = function () {
            if (this.displayMonthNumber > 0) {
                this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
            }
            else {
                this.updateDisplay(this.displayYear - 1, 11);
            }
        };
        // Ao selecionar uma data
        PoCalendarComponent.prototype.onSelectDate = function (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                this.selectedDate = date;
                this.selectedDateChange.emit(date);
                this.submit.emit(date);
            }
        };
        // Ao selecionar um mês
        PoCalendarComponent.prototype.onSelectMonth = function (year, month) {
            this.selectDay();
            this.updateDisplay(year, month);
        };
        // Ao selecionar um ano
        PoCalendarComponent.prototype.onSelectYear = function (year, month) {
            // Se veio da tela de seleção de mês
            this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
            this.currentYear = year;
            this.updateDisplay(year, month);
        };
        PoCalendarComponent.prototype.selectDay = function () {
            this.dayVisible = true;
            this.monthVisible = false;
            this.yearVisible = false;
            this.lastDisplay = 'day';
        };
        PoCalendarComponent.prototype.selectMonth = function () {
            this.dayVisible = false;
            this.monthVisible = true;
            this.yearVisible = false;
            this.lastDisplay = 'month';
        };
        PoCalendarComponent.prototype.selectYear = function () {
            this.dayVisible = false;
            this.monthVisible = false;
            this.yearVisible = true;
        };
        PoCalendarComponent.prototype.setMobileVisualization = function () {
            return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
        };
        PoCalendarComponent.prototype.updateYear = function (value) {
            this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
        };
        PoCalendarComponent.prototype.addAllYearsInDecade = function (year) {
            var i;
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        };
        PoCalendarComponent.prototype.equalsDate = function (date1, date2) {
            try {
                return (date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate());
            }
            catch (error) {
                return false;
            }
        };
        PoCalendarComponent.prototype.updateDate = function (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        };
        PoCalendarComponent.prototype.updateDecade = function (year) {
            this.addAllYearsInDecade(year);
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        };
        PoCalendarComponent.prototype.updateDisplay = function (year, month) {
            var calendarArray = this.poCalendarService.monthDays(year, month);
            this.displayDays = [].concat.apply([], calendarArray);
            this.displayMonthNumber = month;
            this.displayMonth = this.displayMonths[month];
            this.displayYear = year;
            this.getArrayDecade(year);
        };
        PoCalendarComponent.ctorParameters = function () { return [
            { type: PoCalendarService$1 },
            { type: PoCalendarLangService$1 }
        ]; };
        __decorate([
            core.ViewChild('days', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoCalendarComponent.prototype, "elDays", void 0);
        __decorate([
            core.ViewChild('months', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoCalendarComponent.prototype, "elMonths", void 0);
        __decorate([
            core.ViewChild('years', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoCalendarComponent.prototype, "elYears", void 0);
        __decorate([
            core.Input('p-date-end'),
            __metadata("design:type", Date),
            __metadata("design:paramtypes", [Date])
        ], PoCalendarComponent.prototype, "dateEnd", null);
        __decorate([
            core.Input('p-locale'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoCalendarComponent.prototype, "locale", null);
        __decorate([
            core.Input('p-selected-date'),
            __metadata("design:type", Date),
            __metadata("design:paramtypes", [Date])
        ], PoCalendarComponent.prototype, "selectedDate", null);
        __decorate([
            core.Input('p-date-start'),
            __metadata("design:type", Date),
            __metadata("design:paramtypes", [Date])
        ], PoCalendarComponent.prototype, "dateStart", null);
        __decorate([
            core.Output('p-selected-dateChange'),
            __metadata("design:type", Object)
        ], PoCalendarComponent.prototype, "selectedDateChange", void 0);
        __decorate([
            core.Output('p-submit'),
            __metadata("design:type", Object)
        ], PoCalendarComponent.prototype, "submit", void 0);
        PoCalendarComponent = __decorate([
            core.Component({
                selector: 'po-calendar',
                template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n          {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day po-calendar-box-background\"\n          (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n        >\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">{{ displayStartDecade }} - {{ displayFinalDecade }}</div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [PoCalendarService$1, PoCalendarLangService$1]
            }),
            __metadata("design:paramtypes", [PoCalendarService$1, PoCalendarLangService$1])
        ], PoCalendarComponent);
        return PoCalendarComponent;
    }());

    /**
     * @docsPrivate
     *
     * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
     *
     * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
     * deve implementar a interface PoClean.
     */
    var PoCleanBaseComponent = /** @class */ (function () {
        function PoCleanBaseComponent() {
            /** Valor que será atribuído ao campo quando for clicado no po-clean. */
            this.defaultValue = '';
            /**
             * Evento disparado quando executada ação do po-clean.
             * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
             * e provavelmente será preciso emitir o evento para atualizar o model.
             */
            this.changeEvent = new core.EventEmitter();
        }
        PoCleanBaseComponent.prototype.clear = function () {
            this.setInputValue(this.defaultValue);
            this.changeEvent.emit(this.defaultValue);
        };
        PoCleanBaseComponent.prototype.showIcon = function () {
            return (this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly());
        };
        // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
        // ou seja, se o po-clean deve ser usado.
        PoCleanBaseComponent.prototype.hasCleanAttr = function () {
            return this.parentComponent.clean;
        };
        // Este método verifica se o componente pai está desabilitado.
        PoCleanBaseComponent.prototype.isDisabled = function () {
            return this.parentComponent.disabled;
        };
        // Este método verifica se o componente pai está somente leitura.
        PoCleanBaseComponent.prototype.isReadonly = function () {
            return this.parentComponent.readonly;
        };
        __decorate([
            core.Input('p-element-ref'),
            __metadata("design:type", core.ElementRef)
        ], PoCleanBaseComponent.prototype, "inputRef", void 0);
        __decorate([
            core.Input('p-default-value'),
            __metadata("design:type", String)
        ], PoCleanBaseComponent.prototype, "defaultValue", void 0);
        __decorate([
            core.Output('p-change-event'),
            __metadata("design:type", core.EventEmitter)
        ], PoCleanBaseComponent.prototype, "changeEvent", void 0);
        PoCleanBaseComponent = __decorate([
            core.Directive()
        ], PoCleanBaseComponent);
        return PoCleanBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoCleanBaseComponent
     *
     * @examplePrivate
     *
     * <example-private name="po-clean-labs" title="PO Clean Labs">
     *   <file name="sample-po-clean-labs.component.html"> </file>
     *   <file name="sample-po-clean-labs.component.ts"> </file>
     * </example-private>
     */
    var PoCleanComponent = /** @class */ (function (_super) {
        __extends(PoCleanComponent, _super);
        function PoCleanComponent(viewRef) {
            var _this = _super.call(this) || this;
            _this.viewRef = viewRef;
            _this.parentComponent = _this.viewRef['_hostView'][8];
            return _this;
        }
        PoCleanComponent.prototype.setInputValue = function (value) {
            if (this.inputRef && this.inputRef.nativeElement) {
                this.inputRef.nativeElement.value = value;
            }
        };
        PoCleanComponent.prototype.getInputValue = function () {
            if (this.inputRef && this.inputRef.nativeElement) {
                return this.inputRef.nativeElement.value;
            }
        };
        PoCleanComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        PoCleanComponent = __decorate([
            core.Component({
                selector: 'po-clean',
                template: "<span *ngIf=\"showIcon()\" class=\"po-icon po-field-icon po-icon-close\" (click)=\"clear()\"> </span>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef])
        ], PoCleanComponent);
        return PoCleanComponent;
    }(PoCleanBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Enum que contém os valores numéricos dos *keyCodes*.
     */
    var PoKeyCodeEnum;
    (function (PoKeyCodeEnum) {
        /** Seta para baixo */
        PoKeyCodeEnum[PoKeyCodeEnum["arrowDown"] = 40] = "arrowDown";
        /** Seta para cima */
        PoKeyCodeEnum[PoKeyCodeEnum["arrowUp"] = 38] = "arrowUp";
        /** Backspace */
        PoKeyCodeEnum[PoKeyCodeEnum["backspace"] = 8] = "backspace";
        /** Delete */
        PoKeyCodeEnum[PoKeyCodeEnum["delete"] = 46] = "delete";
        /** Enter */
        PoKeyCodeEnum[PoKeyCodeEnum["enter"] = 13] = "enter";
        /** Esc */
        PoKeyCodeEnum[PoKeyCodeEnum["esc"] = 27] = "esc";
        /** Tecla K */
        PoKeyCodeEnum[PoKeyCodeEnum["keyK"] = 75] = "keyK";
        /** Tecla L */
        PoKeyCodeEnum[PoKeyCodeEnum["keyL"] = 76] = "keyL";
        /** Espaço */
        PoKeyCodeEnum[PoKeyCodeEnum["space"] = 32] = "space";
        /** Tab */
        PoKeyCodeEnum[PoKeyCodeEnum["tab"] = 9] = "tab";
    })(PoKeyCodeEnum || (PoKeyCodeEnum = {}));

    /**
     * @description
     *
     * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
     * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
     *
     * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
     * ocorrer mudanças do valor.
     *
     * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
     */
    var PoCheckboxBaseComponent = /** @class */ (function () {
        function PoCheckboxBaseComponent() {
            this.id = uuid();
            this._disabled = false;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Evento disparado quando o valor do *checkbox* for alterado. */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoCheckboxBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o estado do *checkbox* como desabilitado.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        PoCheckboxBaseComponent.prototype.changeValue = function () {
            if (this.propagateChange) {
                this.propagateChange(this.checkboxValue);
            }
            this.change.emit(this.checkboxValue);
        };
        PoCheckboxBaseComponent.prototype.checkOption = function (value) {
            if (!this.disabled) {
                this.changeModelValue(!value);
                this.changeValue();
            }
        };
        PoCheckboxBaseComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoCheckboxBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoCheckboxBaseComponent.prototype.writeValue = function (value) {
            if (value !== this.checkboxValue) {
                this.changeModelValue(value);
            }
        };
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoCheckboxBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoCheckboxBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoCheckboxBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoCheckboxBaseComponent.prototype, "change", void 0);
        PoCheckboxBaseComponent = __decorate([
            core.Directive()
        ], PoCheckboxBaseComponent);
        return PoCheckboxBaseComponent;
    }());

    /**
     * @docsExtends PoCheckboxBaseComponent
     *
     * @example
     *
     * <example name="po-checkbox-basic" title="PO Checkbox Basic">
     *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
     *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-labs" title="PO Checkbox Labs">
     *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
     *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
     *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
     *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
     * </example>
     */
    var PoCheckboxComponent = /** @class */ (function (_super) {
        __extends(PoCheckboxComponent, _super);
        function PoCheckboxComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        PoCheckboxComponent_1 = PoCheckboxComponent;
        /**
         * Função que atribui foco ao *checkbox*.
         *
         * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
         *
         * ```
         * ...
         * import { ViewChild } from '@angular/core';
         * import { PoCheckboxComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
         *
         * focusCheckbox() {
         *   this.checkbox.focus();
         * }
         * ```
         */
        PoCheckboxComponent.prototype.focus = function () {
            if (this.checkboxLabel && !this.disabled) {
                this.checkboxLabel.nativeElement.focus();
            }
        };
        PoCheckboxComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoCheckboxComponent.prototype.onKeyDown = function (event, value) {
            if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
                this.checkOption(value);
                event.preventDefault();
            }
        };
        PoCheckboxComponent.prototype.changeModelValue = function (value) {
            this.checkboxValue = typeof value === 'boolean' || value === null ? value : false;
            this.changeDetector.detectChanges();
        };
        var PoCheckboxComponent_1;
        PoCheckboxComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('checkboxLabel', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoCheckboxComponent.prototype, "checkboxLabel", void 0);
        PoCheckboxComponent = PoCheckboxComponent_1 = __decorate([
            core.Component({
                selector: 'po-checkbox',
                template: "<div class=\"po-checkbox\">\n  <input\n    class=\"po-input po-checkbox-input\"\n    type=\"checkbox\"\n    [class.po-checkbox-input-checked]=\"checkboxValue\"\n    [class.po-checkbox-input-indeterminate]=\"checkboxValue === null\"\n    [checked]=\"checkboxValue\"\n    [disabled]=\"disabled\"\n    [id]=\"id\"\n    [value]=\"checkboxValue\"\n  />\n\n  <label\n    #checkboxLabel\n    class=\"po-checkbox-label\"\n    [class.po-clickable]=\"!disabled\"\n    [for]=\"id\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    (click)=\"checkOption(checkboxValue)\"\n    (keydown)=\"onKeyDown($event, checkboxValue)\"\n  >\n    {{ label }}\n  </label>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoCheckboxComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoCheckboxComponent);
        return PoCheckboxComponent;
    }(PoCheckboxBaseComponent));

    /**
     * @usedBy PoComboComponent
     *
     * @description
     *
     * Define o tipo de busca usado no po-combo.
     */

    (function (PoComboFilterMode) {
        /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
        PoComboFilterMode[PoComboFilterMode["startsWith"] = 0] = "startsWith";
        /** Verifica se o texto *contém* o valor pesquisado. */
        PoComboFilterMode[PoComboFilterMode["contains"] = 1] = "contains";
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        PoComboFilterMode[PoComboFilterMode["endsWith"] = 2] = "endsWith";
    })(exports.PoComboFilterMode || (exports.PoComboFilterMode = {}));

    var PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
    var PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
    var PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
    var poComboLiteralsDefault = {
        en: {
            noData: 'No data found'
        },
        es: {
            noData: 'Datos no encontrados'
        },
        pt: {
            noData: 'Nenhum dado encontrado'
        },
        ru: {
            noData: 'Данные не найдены'
        }
    };
    /**
     * @description
     *
     * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
     *
     * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
     *
     * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
     * as setas e pressione *Enter* na opção que desejar.
     *
     * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
     *
     * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
     *
     * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
     * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
     */
    var PoComboBaseComponent = /** @class */ (function () {
        function PoComboBaseComponent() {
            this._changeOnEnter = false;
            this._debounceTime = 400;
            this._disabled = false;
            this._disabledInitFilter = false;
            this._fieldLabel = 'label';
            this._fieldValue = 'value';
            this._filterMinlength = 0;
            this._filterMode = exports.PoComboFilterMode.startsWith;
            this._options = [];
            this._required = false;
            this._sort = false;
            this.cacheStaticOptions = [];
            this.comboOptionsList = [];
            this.cacheOptions = [];
            this.firstInWriteValue = true;
            this.isFirstFilter = true;
            this.isFiltering = false;
            this.previousSearchValue = '';
            this.visibleOptions = [];
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Mensagem apresentada enquanto o campo estiver vazio. */
            this.placeholder = '';
            /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(PoComboBaseComponent.prototype, "debounceTime", {
            get: function () {
                return this._debounceTime;
            },
            /**
             * @optional
             *
             * @description
             * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
             * Será utilizada apenas quando houver serviço (`p-filter-service`).
             *
             * @default `400`
             */
            set: function (value) {
                var parsedValue = parseInt(value, 10);
                this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "disabledInitFilter", {
            get: function () {
                return this._disabledInitFilter;
            },
            /**
             * @optional
             *
             * @description
             * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
             *
             * @default `false`
             *
             */
            set: function (value) {
                this._disabledInitFilter = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "fieldValue", {
            get: function () {
                return this._fieldValue;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * PoComboOption.
             *
             * @default `value`
             */
            set: function (value) {
                this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldValue = this._fieldValue;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "fieldLabel", {
            get: function () {
                return this._fieldLabel;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * PoComboOption.
             *
             * @default `label`
             */
            set: function (value) {
                this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldLabel = this._fieldLabel;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterMinlength", {
            get: function () {
                return this._filterMinlength;
            },
            /**
             * @optional
             *
             * @description
             * Valor mínimo de caracteres para realizar o filtro no serviço.
             *
             * @default `0`
             */
            set: function (value) {
                var parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
                this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.selectedValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "changeOnEnter", {
            get: function () {
                return this._changeOnEnter;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
             *
             * @default `false`
             */
            set: function (changeOnEnter) {
                this._changeOnEnter = convertToBoolean(changeOnEnter);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel(this.selectedValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "sort", {
            get: function () {
                return this._sort;
            },
            /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
            set: function (sort) {
                this._sort = convertToBoolean(sort);
                this.comboListDefinitions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Nesta propriedade define a lista de opções do `po-combo`.
             *
             * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
             * - Utilize `PoComboOption` para lista de opções simples.
             * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
             *
             * **Importante:**
             * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
             * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
             * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
             */
            set: function (options) {
                this._options = Array.isArray(options) ? options : [];
                this.comboListDefinitions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterMode", {
            get: function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
             *
             * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
             *
             * @default `startsWith`
             */
            set: function (filterMode) {
                this._filterMode = filterMode in exports.PoComboFilterMode ? filterMode : exports.PoComboFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = exports.PoComboFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = exports.PoComboFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = exports.PoComboFilterMode.endsWith;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "filterParams", {
            get: function () {
                return this._filterParams;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
             *
             * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
             */
            set: function (filterParams) {
                this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poComboLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-combo`.
             *
             * Para utilizar basta passar a literal que deseja customizar:
             *
             * ```
             *  const customLiterals: PoComboLiterals = {
             *    noData: 'Nenhum valor'
             *  };
             * ```
             *
             * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-combo
             *   [p-literals]="customLiterals">
             * </po-combo>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poComboLiteralsDefault[poLocaleDefault]), poComboLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poComboLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoComboBaseComponent.prototype, "isOptionGroupList", {
            get: function () {
                return this._options.length && this._options[0].hasOwnProperty('options');
            },
            enumerable: true,
            configurable: true
        });
        PoComboBaseComponent.prototype.ngOnInit = function () {
            this.updateComboList();
        };
        PoComboBaseComponent.prototype.onInitService = function () {
            if (this.filterService) {
                this.setService(this.filterService);
                this.initInputObservable();
            }
        };
        PoComboBaseComponent.prototype.setService = function (service) {
            if (service) {
                if (isTypeof(service, 'object')) {
                    this.service = service;
                }
                else {
                    this.service = this.defaultService;
                    this.service.configProperties(service, this.fieldLabel, this.fieldValue);
                }
            }
        };
        PoComboBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
            switch (filterMode) {
                case exports.PoComboFilterMode.startsWith:
                    return this.startsWith(search, option);
                case exports.PoComboFilterMode.contains:
                    return this.contains(search, option);
                case exports.PoComboFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        PoComboBaseComponent.prototype.startsWith = function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        PoComboBaseComponent.prototype.contains = function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        PoComboBaseComponent.prototype.endsWith = function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        PoComboBaseComponent.prototype.getOptionFromValue = function (value, options) {
            var _this = this;
            return options ? options.find(function (option) { return _this.isEqual(option.value, value); }) : null;
        };
        PoComboBaseComponent.prototype.getOptionFromLabel = function (label, options) {
            if (options) {
                return options.find(function (option) {
                    return option.label.toString().toLowerCase() === label.toString().toLowerCase();
                });
            }
            else {
                return null;
            }
        };
        PoComboBaseComponent.prototype.updateSelectedValue = function (option, isUpdateModel, isWriteValue) {
            if (isUpdateModel === void 0) { isUpdateModel = true; }
            if (isWriteValue === void 0) { isWriteValue = false; }
            var optionLabel = (option && option.label) || '';
            this.updateInternalVariables(option);
            // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
            if (this.changeOnEnter && isUpdateModel) {
                this.setInputValue(optionLabel);
            }
            else if (!this.changeOnEnter) {
                this.setInputValue(optionLabel);
            }
            if (isUpdateModel) {
                var optionValue = (option && option.value) || undefined;
                this.updateModel(optionValue, isWriteValue);
            }
        };
        PoComboBaseComponent.prototype.callModelChange = function (value) {
            // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
            return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
        };
        PoComboBaseComponent.prototype.isEqual = function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        PoComboBaseComponent.prototype.searchForLabel = function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                var newOptions_1 = [];
                var addedOptionsGroupTitle_1 = false;
                var optionsGroupTitle_1;
                options.forEach(function (option) {
                    if ('options' in option) {
                        addedOptionsGroupTitle_1 = false;
                        return (optionsGroupTitle_1 = option);
                    }
                    if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                        if (_this.isOptionGroupList && !addedOptionsGroupTitle_1) {
                            newOptions_1.push(optionsGroupTitle_1);
                            addedOptionsGroupTitle_1 = true;
                        }
                        newOptions_1.push(option);
                    }
                });
                this.selectedView = newOptions_1[this.isOptionGroupList ? 1 : 0];
                this.updateComboList(newOptions_1);
            }
            else {
                this.updateComboList();
            }
        };
        PoComboBaseComponent.prototype.updateComboList = function (options) {
            var copyOptions = options || __spread(this.comboOptionsList);
            var newOptions = !options && this.selectedValue ? [__assign({}, this.selectedOption)] : copyOptions;
            if (newOptions.length) {
                this.visibleOptions = newOptions;
                if (!this.selectedView && this.visibleOptions.length) {
                    this.selectedView = copyOptions.find(function (option) { return option.value !== undefined; });
                }
            }
        };
        PoComboBaseComponent.prototype.getNextOption = function (value, options, reverse) {
            var e_1, _a;
            if (reverse === void 0) { reverse = false; }
            var optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
            var optionFound = null;
            var found = false;
            try {
                for (var optionsList_1 = __values(optionsList), optionsList_1_1 = optionsList_1.next(); !optionsList_1_1.done; optionsList_1_1 = optionsList_1.next()) {
                    var option = optionsList_1_1.value;
                    if (option.value && !optionFound) {
                        optionFound = option;
                    }
                    if (option.value && found) {
                        return option;
                    }
                    if (this.isEqual(option.value, value)) {
                        found = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (optionsList_1_1 && !optionsList_1_1.done && (_a = optionsList_1.return)) _a.call(optionsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return optionFound;
        };
        PoComboBaseComponent.prototype.getIndexSelectedView = function () {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                    return i;
                }
            }
            return null;
        };
        PoComboBaseComponent.prototype.compareObjects = function (obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        };
        PoComboBaseComponent.prototype.verifyValidOption = function () {
            var inputValue = this.getInputValue();
            var optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
            if (optionFound && optionFound.value !== this.selectedValue) {
                this.updateSelectedValue(optionFound);
                this.previousSearchValue = optionFound.label;
                return;
            }
            else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
                this.updateSelectedValueWithOldOption();
                this.previousSearchValue = this.selectedOption.label;
                return;
            }
            else if (inputValue && !optionFound) {
                var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
                this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
                this.previousSearchValue = '';
                return;
            }
        };
        // Recebe as alterações do model
        PoComboBaseComponent.prototype.writeValue = function (value) {
            if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
                var option = this.getOptionFromValue(value, this.comboOptionsList);
                this.updateSelectedValue(option);
                this.updateComboList();
                return;
            }
            // Se houver serviço busca pelo model.
            if (value && this.service) {
                return this.getObjectByValue(value);
            }
            else {
                this.updateSelectedValue(null, true, true);
                this.updateComboList();
            }
        };
        PoComboBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoComboBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoComboBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoComboBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoComboBaseComponent.prototype.configAfterSetFilterService = function (service) {
            if (service) {
                this.comboOptionsList = [];
                this.unsubscribeKeyupObservable();
                this.onInitService();
            }
            else {
                this.service = undefined;
                this.comboOptionsList = this.cacheStaticOptions;
            }
            this.visibleOptions = [];
            this.isFirstFilter = true;
        };
        PoComboBaseComponent.prototype.unsubscribeKeyupObservable = function () {
            if (this.keyupSubscribe) {
                this.keyupSubscribe.unsubscribe();
            }
        };
        PoComboBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoComboBaseComponent.prototype.comboListDefinitions = function () {
            this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
            this.cacheStaticOptions = this.comboOptionsList;
            this.updateComboList();
        };
        PoComboBaseComponent.prototype.compareOptions = function (optionA, optionB) {
            var labelA = optionA.label.toString().toLowerCase();
            var labelB = optionB.label.toString().toLowerCase();
            return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
        };
        PoComboBaseComponent.prototype.hasDuplicatedOption = function (options, currentOption, accumulatedGroupOptions) {
            return (options.some(function (option) { return option.label === currentOption; }) ||
                (accumulatedGroupOptions && accumulatedGroupOptions.some(function (option) { return option.label === currentOption; })));
        };
        PoComboBaseComponent.prototype.listingComboOptions = function (comboOptions) {
            var comboOptionsList = comboOptions.concat();
            var verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
            this.sortOptions(verifiedComboOptionsList);
            if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
                return this.verifyComboOptionsGroup(verifiedComboOptionsList);
            }
            return verifiedComboOptionsList;
        };
        PoComboBaseComponent.prototype.sortOptions = function (comboOptionsList) {
            if (comboOptionsList.length > 0 && this.sort) {
                return comboOptionsList.sort(this.compareOptions);
            }
        };
        PoComboBaseComponent.prototype.validateValue = function (currentOption, verifyingOptionsGroup) {
            var label = currentOption.label, options = currentOption.options, value = currentOption.value;
            if (this.isOptionGroupList) {
                return ((validValue(label) && options && options.length > 0) || (verifyingOptionsGroup === true && validValue(value)));
            }
            return validValue(value) && !options;
        };
        PoComboBaseComponent.prototype.verifyComboOptions = function (comboOptions, verifyingOptionsGroup, accumulatedGroupOptions) {
            var _this = this;
            return comboOptions.reduce(function (accumulatedOptions, currentOption) {
                if (!_this.verifyIfHasLabel(currentOption) ||
                    _this.hasDuplicatedOption(accumulatedOptions, currentOption.label, accumulatedGroupOptions) ||
                    !_this.validateValue(currentOption, verifyingOptionsGroup)) {
                    return accumulatedOptions;
                }
                accumulatedOptions.push(currentOption);
                return accumulatedOptions;
            }, []);
        };
        PoComboBaseComponent.prototype.verifyComboOptionsGroup = function (comboOptionsList) {
            var _this = this;
            return comboOptionsList.reduce(function (accumulatedGroupOptions, currentOption) {
                var options = currentOption.options, label = currentOption.label;
                var verifiedComboOptionsGroupList = _this.verifyComboOptions(options, true, accumulatedGroupOptions);
                if (verifiedComboOptionsGroupList.length > 0) {
                    _this.sortOptions(verifiedComboOptionsGroupList);
                    accumulatedGroupOptions.push.apply(accumulatedGroupOptions, __spread([{ label: label, options: true }], verifiedComboOptionsGroupList));
                }
                return accumulatedGroupOptions;
            }, []);
        };
        PoComboBaseComponent.prototype.verifyIfHasLabel = function (currentOption) {
            var label = currentOption.label, options = currentOption.options, value = currentOption.value;
            if ((this.isOptionGroupList && options && !label) || (!label && !value) || (!this.isOptionGroupList && options)) {
                return false;
            }
            if (!currentOption.label) {
                currentOption.label = currentOption.value.toString();
                return true;
            }
            return true;
        };
        PoComboBaseComponent.prototype.updateInternalVariables = function (option) {
            if (option) {
                this.selectedView = option;
                this.selectedOption = option;
            }
            else {
                this.selectedView = undefined;
                this.selectedOption = undefined;
            }
        };
        PoComboBaseComponent.prototype.updateModel = function (value, fromWriteValue) {
            if (fromWriteValue === void 0) { fromWriteValue = false; }
            if (value !== this.selectedValue) {
                if (!fromWriteValue) {
                    this.callModelChange(value);
                }
                this.change.emit(value);
            }
            this.selectedValue = value;
        };
        PoComboBaseComponent.prototype.updateSelectedValueWithOldOption = function () {
            var oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
            if (oldOption && oldOption.label) {
                return this.updateSelectedValue(oldOption);
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoComboBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoComboBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoComboBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoComboBaseComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoComboBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-filter-service'),
            __metadata("design:type", Object)
        ], PoComboBaseComponent.prototype, "filterService", void 0);
        __decorate([
            core.Input('p-debounce-time'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoComboBaseComponent.prototype, "debounceTime", null);
        __decorate([
            core.Input('p-disabled-init-filter'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoComboBaseComponent.prototype, "disabledInitFilter", null);
        __decorate([
            core.Input('p-field-value'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoComboBaseComponent.prototype, "fieldValue", null);
        __decorate([
            core.Input('p-field-label'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoComboBaseComponent.prototype, "fieldLabel", null);
        __decorate([
            core.Input('p-filter-minlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoComboBaseComponent.prototype, "filterMinlength", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoComboBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-change-on-enter'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoComboBaseComponent.prototype, "changeOnEnter", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoComboBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoComboBaseComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-sort'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoComboBaseComponent.prototype, "sort", null);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoComboBaseComponent.prototype, "options", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoComboBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-filter-mode'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoComboBaseComponent.prototype, "filterMode", null);
        __decorate([
            core.Input('p-filter-params'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoComboBaseComponent.prototype, "filterParams", null);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoComboBaseComponent.prototype, "literals", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoComboBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('ngModelChange'),
            __metadata("design:type", core.EventEmitter)
        ], PoComboBaseComponent.prototype, "ngModelChange", void 0);
        PoComboBaseComponent = __decorate([
            core.Directive()
        ], PoComboBaseComponent);
        return PoComboBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço padrão utilizado para filtrar os dados do componente po-combo.
     */
    var PoComboFilterService = /** @class */ (function () {
        function PoComboFilterService(http) {
            this.http = http;
            this.fieldLabel = 'label';
            this.fieldValue = 'value';
        }
        Object.defineProperty(PoComboFilterService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: true,
            configurable: true
        });
        PoComboFilterService.prototype.getFilteredData = function (param, filterParams) {
            var _this = this;
            var value = param.value;
            var filterParamsValidated = validateObjectType(filterParams);
            var params = __assign(__assign({}, filterParamsValidated), { filter: value });
            return this.http
                .get("" + this.url, { responseType: 'json', params: params })
                .pipe(operators.map(function (response) { return _this.parseToArrayComboOption(response.items); }));
        };
        PoComboFilterService.prototype.getObjectByValue = function (value, filterParams) {
            var _this = this;
            var filterParamsValidated = validateObjectType(filterParams);
            return this.http
                .get(this.url + "/" + value, { params: filterParamsValidated })
                .pipe(operators.map(function (item) { return _this.parseToComboOption(item); }));
        };
        PoComboFilterService.prototype.configProperties = function (url, fieldLabel, fieldValue) {
            this._url = url;
            this.fieldLabel = fieldLabel;
            this.fieldValue = fieldValue;
        };
        PoComboFilterService.prototype.parseToArrayComboOption = function (items) {
            var _this = this;
            if (items && items.length > 0) {
                return items.map(function (item) {
                    return _this.parseToComboOption(item);
                });
            }
            return [];
        };
        PoComboFilterService.prototype.parseToComboOption = function (item) {
            if (item && item[this.fieldValue]) {
                var label = item[this.fieldLabel];
                var value = item[this.fieldValue];
                return { label: label, value: value };
            }
        };
        PoComboFilterService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoComboFilterService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoComboFilterService);
        return PoComboFilterService;
    }());

    /**
     * @usedBy PoComboComponent
     *
     * @description
     *
     * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
     *
     * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
     *
     * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
     * dentro da *tag* `po-combo`.
     *
     * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-combo
     *   name="combo"
     *   [(ngModel)]="combo"
     *   [p-options]="options">
     *     <ng-template p-combo-option-template let-option>
     *       <option-template [option]="option"></option-template>
     *     </ng-template>
     * </po-combo>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-combo
     *   name="combo"
     *   [(ngModel)]="combo"
     *   [p-options]="options">
     *     <div *p-combo-option-template="let option">
     *       <option-template [option]="option"></option-template>
     *     </div>
     * </po-combo>
     * ...
     *
     * ```
     * Para o caso de personalização de opções com agrupamentos, deve-se seguir a mesma orientação acima. Porém, cabe ao desenvolvedor
     * a responsabilidade de estilização dos elementos da lista, tais como título e links dos grupos. Abaixo há um exemplo de aplicação:
     *
     * ```
     * ...
     * <ng-template p-combo-option-template let-option>
     *   <ng-container *ngIf="option.options; then optionsGroupTitle; else optionsGroupList"></ng-container>
     *   <ng-template #optionsGroupTitle>
     *     <p class="po-combo-item-title" [innerHtml]="option.label"></p>
     *   </ng-template>
     *   <ng-template #optionsGroupList>
     *     <div class="po-combo-item">
     *       <div class="po-row">
     *         <po-avatar class="po-md-1" p-size="sm"></po-avatar>
     *         <div class="po-md-11" [innerHtml]="option.label"></div>
     *       </div>
     *     </div>
     *   </ng-template>
     * </ng-template>
     * ...
     *
     * ```
     */
    var PoComboOptionTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoComboOptionTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoComboOptionTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        PoComboOptionTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-combo-option-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoComboOptionTemplateDirective);
        return PoComboOptionTemplateDirective;
    }());

    var poComboContainerOffset = 8;
    var poComboContainerPositionDefault = 'bottom';
    /**
     * @docsExtends PoComboBaseComponent
     *
     * @description
     * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
     * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
     * não seja encontrado, então a lista de itens voltará para o estado inicial.
     *
     * @example
     *
     * <example name="po-combo-basic" title="PO Combo Basic">
     *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
     *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-labs" title="PO Combo Labs">
     *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
     *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
     *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
     * </example>
     *
     * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
     *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
     *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-heroes" title="PO Combo - Heroes">
     *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
     *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
     *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
     *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
     * </example>
     *
     * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
     *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
     *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
     *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.service.ts"> </file>
     * </example>
     */
    var PoComboComponent = /** @class */ (function (_super) {
        __extends(PoComboComponent, _super);
        function PoComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.differs = differs;
            _this.defaultService = defaultService;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.sanitized = sanitized;
            _this._isServerSearching = false;
            _this.comboIcon = 'po-icon-arrow-down';
            _this.comboOpen = false;
            _this.isProcessingGetObjectByValue = false;
            _this.scrollTop = 0;
            _this.shouldMarkLetters = true;
            _this.onScroll = function () {
                _this.adjustContainerPosition();
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoComboComponent_1 = PoComboComponent;
        Object.defineProperty(PoComboComponent.prototype, "isServerSearching", {
            get: function () {
                return this._isServerSearching;
            },
            set: function (value) {
                if (value) {
                    this._isServerSearching = value;
                    this.changeDetector.detectChanges();
                    this.setContainerPosition();
                    this.initializeListeners();
                }
                else {
                    this._isServerSearching = value;
                    this.removeListeners();
                }
            },
            enumerable: true,
            configurable: true
        });
        PoComboComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoComboComponent.prototype.ngOnChanges = function (changes) {
            if (changes.debounceTime) {
                this.unsubscribeKeyupObservable();
                this.initInputObservable();
            }
            if (changes.filterService) {
                this.configAfterSetFilterService(this.filterService);
            }
        };
        PoComboComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoComboComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
         *
         * focusCombo() {
         *   this.combo.focus();
         * }
         * ```
         */
        PoComboComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputElement.nativeElement.focus();
            }
        };
        PoComboComponent.prototype.onKeyDown = function (event) {
            var key = event.keyCode;
            var inputValue = event.target.value;
            // busca um registro quando acionar o tab
            if (this.service && key === PoKeyCodeEnum.tab && inputValue) {
                this.controlComboVisibility(false);
                return this.getObjectByValue(inputValue);
            }
            // Teclas "up" e "down"
            if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
                event.preventDefault();
                if (this.comboOpen) {
                    if (key === PoKeyCodeEnum.arrowUp) {
                        this.selectPreviousOption();
                    }
                    else {
                        this.selectNextOption();
                    }
                }
                this.controlComboVisibility(true);
                this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
                this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
                return;
            }
            // Teclas "tab" ou "esc"
            if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
                if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.controlComboVisibility(false);
                this.verifyValidOption();
                if (!this.service) {
                    // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                    this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                    this.updateComboList();
                }
                return;
            }
            // Tecla "enter"
            if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
                var isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
                this.controlComboVisibility(false);
                this.updateSelectedValue(this.selectedView, isUpdateModel);
                this.isFiltering = false;
                this.updateComboList();
                return;
            }
            if (key === PoKeyCodeEnum.enter) {
                this.controlComboVisibility(true);
            }
        };
        PoComboComponent.prototype.onKeyUp = function (event) {
            var key = event.keyCode || event.which;
            var inputValue = event.target.value;
            var isValidKey = key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter;
            if (isValidKey) {
                if (inputValue) {
                    if (!this.service && this.previousSearchValue !== inputValue) {
                        this.shouldMarkLetters = true;
                        this.isFiltering = true;
                        this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                    }
                }
                else {
                    // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                    // necessario este tratamento para retornar a lista 'default'.
                    var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                    this.updateSelectedValue(null);
                    if (!this.service) {
                        this.updateComboList();
                    }
                    else if (useDefaultOptionsService) {
                        this.updateComboList(__spread(this.cacheOptions));
                    }
                    this.isFiltering = false;
                }
                // caso o valor pesquisado for diferente do anterior deve abrir o combo
                if (this.previousSearchValue !== inputValue) {
                    this.changeDetector.detectChanges();
                    this.controlComboVisibility(true);
                }
            }
            this.previousSearchValue = inputValue;
        };
        PoComboComponent.prototype.initInputObservable = function () {
            var _this = this;
            if (this.service) {
                var keyupObservable = rxjs.fromEvent(this.inputElement.nativeElement, 'keyup').pipe(operators.filter(function (e) { return _this.isValidCharacterToSearch(e.keyCode); }), operators.map(function (e) { return e.currentTarget.value; }), operators.distinctUntilChanged(), operators.tap(function () {
                    _this.shouldMarkLetters = false;
                }), operators.debounceTime(this.debounceTime));
                this.keyupSubscribe = keyupObservable.subscribe(function (value) {
                    if (value.length >= _this.filterMinlength || !value) {
                        _this.controlApplyFilter(value);
                    }
                });
            }
        };
        PoComboComponent.prototype.controlApplyFilter = function (value) {
            if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
                this.applyFilter(value);
            }
        };
        PoComboComponent.prototype.applyFilter = function (value) {
            var _this = this;
            this.controlComboVisibility(false);
            this.isServerSearching = true;
            var param = { property: this.fieldLabel, value: value };
            this.filterSubscription = this.service
                .getFilteredData(param, this.filterParams)
                .subscribe(function (items) { return _this.setOptionsByApplyFilter(value, items); });
        };
        PoComboComponent.prototype.setOptionsByApplyFilter = function (value, items) {
            this.shouldMarkLetters = true;
            this.isServerSearching = false;
            this.options = items;
            this.searchForLabel(value, items, this.filterMode);
            this.changeDetector.detectChanges();
            this.controlComboVisibility(true);
            if (this.isFirstFilter) {
                this.isFirstFilter = !this.isFirstFilter;
                this.cacheOptions = this.comboOptionsList;
            }
        };
        PoComboComponent.prototype.getObjectByValue = function (value) {
            var _this = this;
            if (!this.selectedValue) {
                this.isProcessingGetObjectByValue = true;
                this.getSubscription = this.service
                    .getObjectByValue(value, this.filterParams)
                    .subscribe(function (item) { return _this.updateOptionByFilteredValue(item); });
            }
        };
        PoComboComponent.prototype.updateOptionByFilteredValue = function (item) {
            var _this = this;
            if (item) {
                this.options = [item];
                this.onOptionClick(item);
            }
            else {
                this.updateSelectedValue(null);
            }
            setTimeout(function () {
                _this.isProcessingGetObjectByValue = false;
            }, this.debounceTime);
        };
        PoComboComponent.prototype.selectPreviousOption = function () {
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        PoComboComponent.prototype.selectNextOption = function () {
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                var index = this.changeOnEnter ? 1 : 0;
                var visibleOption = this.visibleOptions[index];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        PoComboComponent.prototype.toggleComboVisibility = function () {
            if (this.disabled) {
                return;
            }
            if (this.service && !this.disabledInitFilter) {
                this.applyFilterInFirstClick();
            }
            this.controlComboVisibility(!this.comboOpen);
        };
        PoComboComponent.prototype.applyFilterInFirstClick = function () {
            if (this.isFirstFilter && !this.selectedValue) {
                this.applyFilter('');
            }
        };
        PoComboComponent.prototype.controlComboVisibility = function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        PoComboComponent.prototype.onOptionClick = function (option, event) {
            var inputValue = this.getInputValue();
            var isUpdateModel = option.value !== this.selectedValue || !!(this.selectedView && inputValue !== this.selectedView.label);
            if (event) {
                event.stopPropagation();
            }
            this.updateSelectedValue(option, isUpdateModel);
            this.controlComboVisibility(false);
            this.updateComboList([__assign({}, this.selectedView)]);
            this.previousSearchValue = this.selectedView.label;
        };
        PoComboComponent.prototype.scrollTo = function (index) {
            var selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
            var scrollTop = !selectedItem.length || index <= 1 ? 0 : selectedItem[0].offsetTop - 88;
            this.setScrollTop(scrollTop);
        };
        PoComboComponent.prototype.getInputValue = function () {
            return this.inputElement.nativeElement.value;
        };
        PoComboComponent.prototype.setInputValue = function (value) {
            this.inputElement.nativeElement.value = value;
        };
        PoComboComponent.prototype.wasClickedOnToggle = function (event) {
            if (this.comboOpen &&
                !this.inputElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
                // Esconde Content do Combo quando for clicado fora
                this.controlComboVisibility(false);
                this.verifyValidOption();
                // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            else {
                if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                    this.applyFilter('');
                }
            }
        };
        PoComboComponent.prototype.getLabelFormatted = function (label) {
            var sanitizedLabel = this.sanitizeTagHTML(label);
            var format = sanitizedLabel;
            if (this.isFiltering ||
                (this.service &&
                    this.getInputValue() &&
                    !this.compareObjects(this.cacheOptions, this.visibleOptions) &&
                    this.shouldMarkLetters)) {
                var labelInput = this.sanitizeTagHTML(this.getInputValue().toString().toLowerCase());
                var labelLowerCase = sanitizedLabel.toLowerCase();
                var openTagBold = '<span class="po-font-text-large-bold">';
                var closeTagBold = '</span>';
                var startString = void 0;
                var middleString = void 0;
                var endString = void 0;
                switch (this.filterMode) {
                    case exports.PoComboFilterMode.startsWith:
                    case exports.PoComboFilterMode.contains:
                        var indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                        if (indexOfLabelInput > -1) {
                            startString = sanitizedLabel.substring(0, indexOfLabelInput);
                            middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                            endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                            format = startString + openTagBold + middleString + closeTagBold + endString;
                        }
                        break;
                    case exports.PoComboFilterMode.endsWith:
                        var lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                        if (lastIndexOfLabelInput > -1) {
                            startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                            middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                            format = startString + openTagBold + middleString + closeTagBold;
                        }
                        break;
                }
            }
            return this.safeHtml(format);
        };
        PoComboComponent.prototype.safeHtml = function (value) {
            return this.sanitized.bypassSecurityTrustHtml(value);
        };
        PoComboComponent.prototype.isValidCharacterToSearch = function (keyCode) {
            return (keyCode !== 9 && // tab
                keyCode !== 13 && // entet
                keyCode !== 16 && // shift
                keyCode !== 17 && // ctrl
                keyCode !== 18 && // alt
                keyCode !== 20 && // capslock
                keyCode !== 27 && // esc
                keyCode !== 37 && // seta
                keyCode !== 38 && // seta
                keyCode !== 39 && // seta
                keyCode !== 40 && // seta
                keyCode !== 93); // windows menu
        };
        PoComboComponent.prototype.searchOnEnter = function (value) {
            if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
                this.controlApplyFilter(value);
            }
        };
        PoComboComponent.prototype.adjustContainerPosition = function () {
            this.controlPosition.adjustPosition(poComboContainerPositionDefault);
        };
        PoComboComponent.prototype.close = function () {
            this.comboOpen = false;
            this.changeDetector.detectChanges();
            this.comboIcon = 'po-icon-arrow-down';
            this.removeListeners();
            this.isFiltering = false;
        };
        PoComboComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.removeListeners();
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
                setTimeout(function () { return _this.adjustContainerPosition(); }, 250);
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoComboComponent.prototype.open = function () {
            this.comboOpen = true;
            this.changeDetector.detectChanges();
            this.comboIcon = 'po-icon-arrow-up';
            this.initializeListeners();
            this.inputElement.nativeElement.focus();
            this.scrollTo(this.getIndexSelectedView());
            this.setContainerPosition();
        };
        PoComboComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoComboComponent.prototype.sanitizeTagHTML = function (value) {
            if (value === void 0) { value = ''; }
            return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
        };
        PoComboComponent.prototype.setContainerPosition = function () {
            this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        PoComboComponent.prototype.setScrollTop = function (scrollTop) {
            if (this.contentElement) {
                this.contentElement.nativeElement.scrollTop = scrollTop;
            }
        };
        var PoComboComponent_1;
        PoComboComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.IterableDiffers },
            { type: PoComboFilterService },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: PoControlPositionService },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.ContentChild(PoComboOptionTemplateDirective, { static: true }),
            __metadata("design:type", PoComboOptionTemplateDirective)
        ], PoComboComponent.prototype, "comboOptionTemplate", void 0);
        __decorate([
            core.ViewChild('containerElement', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoComboComponent.prototype, "containerElement", void 0);
        __decorate([
            core.ViewChild('contentElement', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoComboComponent.prototype, "contentElement", void 0);
        __decorate([
            core.ViewChild('iconArrow', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoComboComponent.prototype, "iconElement", void 0);
        __decorate([
            core.ViewChild('inputElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoComboComponent.prototype, "inputElement", void 0);
        PoComboComponent = PoComboComponent_1 = __decorate([
            core.Component({
                selector: 'po-combo',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inputElement\n      class=\"po-input po-combo-input\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\"> </ng-container>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"po-combo-container-loading\">\n    <po-loading></po-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate; else noDataTemplate\"> </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"po-combo-container-content\">\n    <li\n      *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\"\n    >\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n      <ng-template #defaultOptionTemplate>\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{ option.label }}</label>\n        <ng-template #optionLink>\n          <a class=\"po-combo-item\">\n            <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\n          </a>\n        </ng-template>\n      </ng-template>\n\n      <ng-template #optionTemplate>\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\n\n        <ng-template #optionsGroupTemplate>\n          <ng-template\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option, selected: compareObjects(selectedView, option) }\"\n          >\n          </ng-template>\n        </ng-template>\n\n        <ng-template #defaultOptionsTemplate>\n          <a class=\"po-combo-item\">\n            <ng-template\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: option }\"\n            >\n            </ng-template>\n          </a>\n        </ng-template>\n      </ng-template>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                providers: [
                    PoComboFilterService,
                    PoControlPositionService,
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoComboComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoComboComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.IterableDiffers,
                PoComboFilterService,
                core.Renderer2,
                core.ChangeDetectorRef,
                PoControlPositionService,
                platformBrowser.DomSanitizer])
        ], PoComboComponent);
        return PoComboComponent;
    }(PoComboBaseComponent));

    /**
     * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
     * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
     * que o model seja formatado ou false para o que o model seja limpo.
     */
    var PoMask = /** @class */ (function () {
        function PoMask(mask, formatModel) {
            this.mask = '';
            this.formatModel = false;
            // controle de posição
            this.initialPosition = 0;
            this.finalPosition = 0;
            this.pattern = '';
            this.mask = mask;
            this.formatModel = formatModel;
            this.pattern = this.getRegexFromMask(mask);
        }
        Object.defineProperty(PoMask.prototype, "getPattern", {
            get: function () {
                return this.pattern;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "getValueToInput", {
            get: function () {
                return this.valueToInput;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "setValueToInput", {
            set: function (value) {
                this.valueToInput = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "getValueToModel", {
            get: function () {
                return this.valueToModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMask.prototype, "setValueToModel", {
            set: function (value) {
                this.valueToModel = value;
            },
            enumerable: true,
            configurable: true
        });
        PoMask.prototype.keyup = function ($event) {
            if (this.mask) {
                var value = $event.target.value;
                // formata o valor quando for colado com control + v e reposiciona o cursor
                if ($event.keyCode === 17 || $event.keyCode === 91) {
                    $event.target.value = this.controlFormatting(value);
                    this.resetPositions($event);
                }
                $event.preventDefault();
                switch ($event.keyCode) {
                    case 37: // seta esquerda
                        if (this.initialPosition > 0) {
                            this.initialPosition--;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 39: // seta direita
                        if (this.initialPosition < value.toString().length) {
                            this.initialPosition++;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 35: // end
                        this.finalPosition = value.toString().length;
                        if ($event.shiftKey) {
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = this.finalPosition;
                            this.setPositions($event);
                        }
                        break;
                    case 36: // HOME
                        if ($event.shiftKey) {
                            this.finalPosition = this.initialPosition;
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = 0;
                            this.finalPosition = 0;
                            this.setPositions($event);
                        }
                        break;
                }
            }
        };
        PoMask.prototype.setPositionNotShiftKey = function ($event) {
            if (!$event.shiftKey) {
                this.finalPosition = this.initialPosition;
            }
        };
        PoMask.prototype.setSelectionRange = function ($event) {
            if (this.initialPosition > this.finalPosition) {
                $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
            }
            else {
                $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
            }
        };
        PoMask.prototype.keydown = function ($event) {
            if (this.mask) {
                var value = $event.target.value;
                if ($event.keyCode === 9) {
                    return;
                }
                if (!$event.ctrlKey && !$event.metaKey) {
                    $event.preventDefault();
                }
                // Não faz nada quando for digitado CTRL ou COMMAND e V
                // Já está sendo tratado no evento keyup
                if ($event.ctrlKey ||
                    ($event.metaKey && $event.keyCode !== 86) ||
                    ($event.keyCode >= 37 && $event.keyCode <= 40) ||
                    $event.keyCode === 16 ||
                    $event.keyCode === 9) {
                    return;
                }
                // Valida a tecla digitada
                if (this.isKeyValid($event.keyCode)) {
                    if (this.finalPosition === null) {
                        this.finalPosition = this.initialPosition;
                    }
                    this.revertPositions(this.initialPosition, this.finalPosition);
                    switch ($event.keyCode) {
                        case 8: // backspace
                            this.getPosition($event);
                            if (this.initialPosition < 0) {
                                this.initialPosition = 0;
                                this.setPositions($event);
                            }
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskBefore($event, -1);
                                if (this.initialPosition !== 0) {
                                    value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                    value = this.controlFormatting(value);
                                    $event.target.value = value;
                                    this.changePosition($event, -1);
                                    this.checkMaskBefore($event, -1);
                                    this.setPositions($event);
                                    this.resetPositions($event);
                                }
                            }
                            else {
                                this.clearRangeSelection(value, $event, true);
                            }
                            this.setPositions($event);
                            break;
                        case 46: // delete
                            this.getPosition($event);
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskAfter($event, 1);
                                value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                            else {
                                this.clearRangeSelection(value, $event, false);
                            }
                            this.setPositions($event);
                            break;
                        default:
                            // qualquer outra tecla válida
                            value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.changePosition($event, 1);
                            this.checkMaskBefore($event, 1);
                            this.setPositions($event);
                            this.resetPositions($event);
                            this.setPositions($event);
                    }
                }
            }
        };
        PoMask.prototype.clearRangeSelection = function (value, $event, isBackspace) {
            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
            value = this.controlFormatting(value);
            $event.target.value = value;
            if (isBackspace) {
                this.checkMaskBefore($event, -1);
            }
            this.setPositions($event);
            this.resetPositions($event);
        };
        // passa a posição do click para o controle de posição
        PoMask.prototype.click = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
        };
        PoMask.prototype.blur = function ($event) {
            // Se houver algum valor definido na máscara
            if (this.mask) {
                // pega o valor do campo, formata e passa para o model
                var value = $event.target.value;
                value = this.controlFormatting(value);
                $event.target.value = value;
            }
        };
        PoMask.prototype.revertPositions = function (initialPosition, finalPosition) {
            if (initialPosition > finalPosition) {
                // inverte o controle de posição caso o inicial esteja maior que o final
                var tempPosition = void 0;
                tempPosition = initialPosition;
                this.initialPosition = finalPosition;
                this.finalPosition = tempPosition;
            }
        };
        // reseta o controle de posição
        PoMask.prototype.resetPositions = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = this.initialPosition;
        };
        // posiciona o cursor de acordo com o controle de posição
        PoMask.prototype.setPositions = function ($event) {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        };
        // muda a posição do cursor e atualiza o controle de posição
        PoMask.prototype.changePosition = function ($event, value) {
            this.initialPosition = this.initialPosition + value;
            this.finalPosition = this.finalPosition + value;
            this.setPositions($event);
        };
        PoMask.prototype.getPosition = function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
            this.setPositions($event);
        };
        // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
        // quando houver valores opcionais (?)
        PoMask.prototype.controlFormatting = function (value) {
            // Se o valor for vazio, retorna vazio
            if (!value) {
                this.valueToInput = '';
                this.valueToModel = '';
                return '';
            }
            var valueProcessed;
            var maskTmp = this.mask;
            // Array que será usado para armazenar todas as máscaras possíveis para
            // quando houver um valor opcional (?)
            var arrMasks = [];
            var contMasks = 0;
            // Enquanto houver algum 9? na máscara
            while (this.hasOptionalNumber(maskTmp)) {
                arrMasks.push(maskTmp);
                maskTmp = this.replaceOptionalNumber(maskTmp);
            }
            arrMasks.push(maskTmp);
            // Inverte o array
            arrMasks.reverse();
            // Informa que a formatação ainda não chegou ao fim
            this.formattingEnds = false;
            while (!this.formattingEnds) {
                // Seta a formatação como terminada
                // Então o método formatValue irá setar como não terminado caso haja
                this.formattingEnds = true;
                // Se não existe mais nenhuma máscara possível, então encerra a formatação
                if (!arrMasks[contMasks]) {
                    break;
                }
                // Chama a formatação passando a máscara e o valor
                valueProcessed = this.formatValue(value, arrMasks[contMasks]);
                contMasks++;
            }
            return valueProcessed;
        };
        // Função que formata a máscara com o valor passado
        PoMask.prototype.formatValue = function (value, mask) {
            // Remove as marcas de valor opciona (?)
            mask = mask.replace(/\?/g, '');
            // Substitui todos os caracteres que não são fixos da máscara por _
            var guide = mask.replace(this.listValidKeys(), '_');
            // Contador usado para percorrer o guide
            var contGuide = 0;
            // String final formatada
            var valueProcessed = '';
            // Remove do valor todos os caracteres fixos como ()/-+
            value = this.removeFormattingValue(value);
            // Percorre todo o valor e coloca a formatação de acordo com a máscara
            for (var i = 0; i < value.length; i++) {
                var charValue = value[i];
                // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
                // tente formatar com outra possível máscara
                if (!guide[contGuide]) {
                    this.formattingEnds = false;
                    break;
                }
                // Percorre o Guide enquanto tem caracteres fixos
                while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                    valueProcessed += guide[contGuide];
                    contGuide++;
                }
                // É um caracter válido de acordo com a máscara
                if (this.isKeyValidMask(charValue, mask[contGuide])) {
                    valueProcessed += charValue;
                    contGuide++;
                }
                else {
                    // Se não é um caracter válido, deve interromper.
                    break;
                }
            }
            if (this.formatModel) {
                this.valueToInput = valueProcessed;
                this.valueToModel = valueProcessed;
            }
            else {
                this.valueToInput = valueProcessed;
                this.valueToModel = this.removeFormattingValue(valueProcessed);
            }
            return valueProcessed;
        };
        // verifica se tem algum caracter de mascara antes do cursor
        PoMask.prototype.checkMaskBefore = function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
                this.changePosition($event, position);
                this.checkMaskBefore($event, position);
            }
        };
        // verifica se tem algum caracter de mascara depois do cursor
        PoMask.prototype.checkMaskAfter = function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
                this.changePosition($event, position);
                this.checkMaskAfter($event, position);
            }
        };
        // Retorna a máscara sem um valor opcional
        PoMask.prototype.replaceOptionalNumber = function (mask) {
            var i = 9;
            while (i >= 0) {
                if (mask.indexOf(i + '?') > -1) {
                    return mask.replace(i + '?', '');
                }
                i--;
            }
            return mask;
        };
        // Verifica se contém caracteres permitidos somente na máscara \/() +-
        PoMask.prototype.isFixedCharacterGuide = function (key) {
            return this.testRegex(key, this.getFixedCharacterGuide());
        };
        // Retorna caracteres permitidos somente na máscara \/() +-
        PoMask.prototype.getFixedCharacterGuide = function () {
            return /[\\\/() +-.\:]/g;
        };
        // Caracteres permitidos de serem digitados
        PoMask.prototype.listValidKeys = function () {
            return /[a-zA-Z0-9]/g;
        };
        // Se é um dígito válido
        PoMask.prototype.isKeyValid = function (keyCode) {
            return this.isKeyCodeValid(keyCode);
        };
        // Verifica se a tecla digitada é permitida
        // Permite apenas números, letras, backspace e del
        PoMask.prototype.isKeyCodeValid = function (keyCode) {
            return ((keyCode >= 48 && keyCode <= 57) ||
                (keyCode >= 65 && keyCode <= 90) ||
                (keyCode >= 96 && keyCode <= 105) ||
                keyCode === 8 ||
                keyCode === 9 ||
                keyCode === 46);
        };
        // Se está de acordo com a máscara
        PoMask.prototype.isKeyValidMask = function (key, keyMask) {
            return this.testRegex(key, this.replaceMask(keyMask));
        };
        // Retorna se a chave foi aprovada pela expressão regular
        PoMask.prototype.testRegex = function (key, regex) {
            return regex.test(key);
        };
        // Remove a formatacão do valor
        // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
        PoMask.prototype.removeFormattingValue = function (value) {
            return value.replace(this.getFixedCharacterGuide(), '');
        };
        // Verifica se contém valor opcional na máscara 0-9?
        PoMask.prototype.hasOptionalNumber = function (mask) {
            return mask.match(/\d\?/g);
        };
        // Retorna a expressão regular correspondente ao comando passado
        PoMask.prototype.replaceMask = function (char) {
            var regex = /./;
            switch (char) {
                case '0':
                    regex = /[0]/;
                    break;
                case '1':
                    regex = /[0-1]/;
                    break;
                case '2':
                    regex = /[0-2]/;
                    break;
                case '3':
                    regex = /[0-3]/;
                    break;
                case '4':
                    regex = /[0-4]/;
                    break;
                case '5':
                    regex = /[0-5]/;
                    break;
                case '6':
                    regex = /[0-6]/;
                    break;
                case '7':
                    regex = /[0-7]/;
                    break;
                case '8':
                    regex = /[0-8]/;
                    break;
                case '9':
                    regex = /[0-9]/;
                    break;
                case ' ':
                    regex = /\s/;
                    break;
                case '@':
                    regex = /[a-zA-Z]/;
                    break;
                case 'w':
                    regex = /[a-zA-Z0-9]/;
                    break;
            }
            return regex;
        };
        PoMask.prototype.getRegexFromMask = function (mask) {
            if (mask) {
                var pattern = void 0;
                if (this.formatModel) {
                    pattern = mask.replace(/\\/g, '\\\\');
                    pattern = pattern.replace(/\+/g, '\\+');
                    pattern = pattern.replace(/\./g, '\\.');
                    pattern = pattern.replace(/-/g, '-');
                    pattern = pattern.replace(/\(/g, '\\(');
                    pattern = pattern.replace(/\)/g, '\\)');
                    pattern = pattern.replace(/\//g, '\\/');
                    pattern = pattern.replace(/\s/g, '\\s');
                    pattern = pattern.replace(/:/g, '\\:');
                    pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                else {
                    pattern = mask.replace(/\\/g, '');
                    pattern = pattern.replace(/\+/g, '');
                    pattern = pattern.replace(/\./g, '');
                    pattern = pattern.replace(/-/g, '');
                    pattern = pattern.replace(/\(/g, '');
                    pattern = pattern.replace(/\)/g, '');
                    pattern = pattern.replace(/\//g, '');
                    pattern = pattern.replace(/\s/g, '');
                    pattern = pattern.replace(/:/g, '');
                    pattern = pattern.replace(/\@/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                return pattern;
            }
            else {
                return null;
            }
        };
        return PoMask;
    }());

    /**
     * @usedBy PoDatepickerComponent
     *
     * @description
     *
     * *Enum* que define o padrão de formatação das datas.
     *
     * > Caso um formato padrão seja definido, o mesmo não será mais alterado de acordo com o formato de entrada.
     */

    (function (PoDatepickerIsoFormat) {
        /** Padrão **E8601DAw** (*yyyy-mm-dd*). */
        PoDatepickerIsoFormat["Basic"] = "basic";
        /** Padrão **E8601DZw** (*yyyy-mm-ddThh:mm:ss+|-hh:mm*). */
        PoDatepickerIsoFormat["Extended"] = "extended";
    })(exports.PoDatepickerIsoFormat || (exports.PoDatepickerIsoFormat = {}));

    var poDatepickerFormatDefault = 'dd/mm/yyyy';
    /**
     * @description
     *
     * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
     *
     * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
     * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
     *
     * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
     * use a propriedade `p-locale`.
     *
     * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
     * Date padrão do Javascript.
     *
     * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
     * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
     *
     * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
     *
     * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
     *
     * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
     *
     * **Importante:**
     *
     * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
     * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
     * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
     * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
     * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
     *
     * Exemplo:
     *
     * ```
     * <po-datepicker
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}"
     * </po-datepicker>
     * ```
     *
     * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
     */
    var PoDatepickerBaseComponent = /** @class */ (function () {
        function PoDatepickerBaseComponent() {
            this._format = poDatepickerFormatDefault;
            this._noAutocomplete = false;
            this._placeholder = '';
            this.firstStart = true;
            this.hour = 'T00:00:01-00:00';
            this.isExtendedISO = false;
            this.onChangeModel = null;
            this.onTouchedModel = null;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Desabilita o campo. */
            this.disabled = false;
            /** Torna o elemento somente leitura. */
            this.readonly = false;
            /** Faz com que o campo seja obrigatório. */
            this.required = false;
            /** Habilita ação para limpar o campo. */
            this.clean = false;
            /**
             * Mensagem apresentada quando a data for inválida ou fora do período.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
             */
            this.errorPattern = '';
            /** Evento disparado ao sair do campo. */
            this.onblur = new core.EventEmitter();
            /** Evento disparado ao alterar valor do campo. */
            this.onchange = new core.EventEmitter();
        }
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             */
            set: function (placeholder) {
                this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setDisabled", {
            set: function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setReadonly", {
            set: function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setRequired", {
            set: function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "setClean", {
            set: function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "minDate", {
            get: function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data mínima para o `po-datepicker`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._minDate = date;
                }
                else {
                    this._minDate = convertIsoToDate(value, true, false);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "maxDate", {
            get: function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data máxima para o `po-datepicker`.
             */
            set: function (value) {
                if (value instanceof Date) {
                    var year = value.getFullYear();
                    var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._maxDate = date;
                }
                else {
                    this._maxDate = convertIsoToDate(value, false, true);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "format", {
            get: function () {
                return this._format;
            },
            /**
             * @optional
             *
             * @description
             *
             * Formato de exibição da data.
             *
             * Valores válidos:
             *  - `dd/mm/yyyy`
             *  - `mm/dd/yyyy`
             *  - `yyyy/mm/dd`
             *
             * @default `dd/mm/yyyy`
             */
            set: function (value) {
                if (value) {
                    value = value.toLowerCase();
                    if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                        this._format = value;
                        this.objMask = this.buildMask();
                        this.refreshValue(this.date);
                        return;
                    }
                }
                this._format = poDatepickerFormatDefault;
                this.objMask = this.buildMask();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "isoFormat", {
            get: function () {
                return this._isoFormat;
            },
            /**
             * @optional
             *
             * @description
             *
             * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
             *
             * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
             */
            set: function (value) {
                if (Object.values(exports.PoDatepickerIsoFormat).includes(value)) {
                    this._isoFormat = value;
                    this.isExtendedISO = value === exports.PoDatepickerIsoFormat.Extended;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerBaseComponent.prototype, "locale", {
            get: function () {
                return this._locale || getShortBrowserLanguage();
            },
            set: function (value) {
                if (value) {
                    this._locale = value.length >= 2 ? value : 'pt';
                }
                else {
                    this._locale = getShortBrowserLanguage();
                }
            },
            enumerable: true,
            configurable: true
        });
        PoDatepickerBaseComponent.prototype.ngOnInit = function () {
            // Classe de máscara
            this.objMask = this.buildMask();
        };
        // Converte um objeto string em Date
        PoDatepickerBaseComponent.prototype.getDateFromString = function (dateString) {
            var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
            var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
            var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
            var date = new Date(year, month, day);
            setYearFrom0To100(date, year);
            return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day ? date : null;
        };
        // Formata a data.
        PoDatepickerBaseComponent.prototype.formatToDate = function (value) {
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        // Método responsável por controlar o modelo.
        PoDatepickerBaseComponent.prototype.controlModel = function (date) {
            this.date = date;
            if (date && this.isExtendedISO) {
                this.callOnChange(convertDateToISOExtended(this.date, this.hour));
            }
            else if (date && !this.isExtendedISO) {
                this.callOnChange(convertDateToISODate(this.date));
            }
            else {
                date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
            }
        };
        // Executa a função onChange
        PoDatepickerBaseComponent.prototype.callOnChange = function (value, retry) {
            var _this = this;
            if (retry === void 0) { retry = true; }
            if (this.onChangeModel) {
                this.onChangeModel(value);
            }
            else if (retry) {
                setTimeout(function () { return _this.callOnChange(value, false); });
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouchedModel = func;
        };
        PoDatepickerBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoDatepickerBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Retorna um objeto do tipo PoMask com a mascara configurada.
        PoDatepickerBaseComponent.prototype.buildMask = function () {
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new PoMask(mask, true);
        };
        PoDatepickerBaseComponent.prototype.validate = function (c) {
            // Verifica se já possui algum error pattern padrão.
            this.errorPattern =
                this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
            if (dateFailed(c.value)) {
                this.errorPattern = this.errorPattern || 'Data inválida';
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (this.date && !validateDateRange(this.date, this._minDate, this._maxDate)) {
                this.errorPattern = this.errorPattern || 'Data fora do período';
                return {
                    date: {
                        valid: false
                    }
                };
            }
            return null;
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoDatepickerBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoDatepickerBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-no-autocomplete'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerBaseComponent.prototype, "noAutocomplete", null);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "placeholder", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoDatepickerBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "setDisabled", null);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "setReadonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "setRequired", null);
        __decorate([
            core.Input('p-clean'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "setClean", null);
        __decorate([
            core.Input('p-error-pattern'),
            __metadata("design:type", String)
        ], PoDatepickerBaseComponent.prototype, "errorPattern", void 0);
        __decorate([
            core.Input('p-min-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDatepickerBaseComponent.prototype, "minDate", null);
        __decorate([
            core.Input('p-max-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDatepickerBaseComponent.prototype, "maxDate", null);
        __decorate([
            core.Input('p-format'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "format", null);
        __decorate([
            core.Input('p-iso-format'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "isoFormat", null);
        __decorate([
            core.Input('p-locale'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoDatepickerBaseComponent.prototype, "locale", null);
        __decorate([
            core.Output('p-blur'),
            __metadata("design:type", core.EventEmitter)
        ], PoDatepickerBaseComponent.prototype, "onblur", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoDatepickerBaseComponent.prototype, "onchange", void 0);
        PoDatepickerBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [])
        ], PoDatepickerBaseComponent);
        return PoDatepickerBaseComponent;
    }());

    var poCalendarContentOffset = 8;
    var poCalendarPositionDefault = 'bottom-left';
    /**
     * @docsExtends PoDatepickerBaseComponent
     *
     * @example
     *
     * <example name="po-datepicker-basic" title="PO Datepicker Basic">
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
     *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-labs" title="PO Datepicker Labs">
     *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
     *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-airfare" title="PO Datepicker - Airfare">
     *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
     *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-airfare-reactive-form" title="PO Datepicker - Airfare Reactive Form">
     *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
     *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoDatepickerComponent = /** @class */ (function (_super) {
        __extends(PoDatepickerComponent, _super);
        function PoDatepickerComponent(controlPosition, renderer, el) {
            var _this = _super.call(this) || this;
            _this.controlPosition = controlPosition;
            _this.renderer = renderer;
            _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
            _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
            _this.onScroll = function () {
                _this.controlPosition.adjustPosition(poCalendarPositionDefault);
            };
            _this.el = el;
            return _this;
        }
        PoDatepickerComponent_1 = PoDatepickerComponent;
        Object.defineProperty(PoDatepickerComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: true,
            configurable: true
        });
        PoDatepickerComponent.prototype.ngAfterViewInit = function () {
            this.setDialogPickerStyleDisplay('none');
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDatepickerComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoDatepickerComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
         *
         * focusDatepicker() {
         *   this.datepicker.focus();
         * }
         * ```
         */
        PoDatepickerComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoDatepickerComponent.prototype.togglePicker = function () {
            if (this.disabled || this.readonly) {
                return;
            }
            if (!this.calendar.visible) {
                this.calendar.init();
                this.setCalendarPosition();
                this.initializeListeners();
            }
            else {
                this.inputEl.nativeElement.disabled = false;
                this.closeCalendar();
            }
        };
        PoDatepickerComponent.prototype.dateSelected = function () {
            if (!this.verifyMobile()) {
                this.inputEl.nativeElement.focus();
            }
            this.inputEl.nativeElement.value = this.formatToDate(this.date);
            this.controlModel(this.date);
            this.controlChangeEmitter();
            this.closeCalendar();
        };
        // Esconde Picker quando for clicado fora
        PoDatepickerComponent.prototype.wasClickedOnPicker = function (event) {
            if (!this.dialogPicker || !this.iconDatepicker) {
                return;
            }
            if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
                !this.iconDatepicker.nativeElement.contains(event.target) &&
                !this.hasAttrCalendar(event.target)) {
                this.closeCalendar();
            }
        };
        PoDatepickerComponent.prototype.onKeyup = function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keyup($event);
            // Controla a atualização do model, verificando se a data é valida
            if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        };
        PoDatepickerComponent.prototype.onKeydown = function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keydown($event);
        };
        PoDatepickerComponent.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        PoDatepickerComponent.prototype.getErrorPattern = function () {
            return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
        };
        PoDatepickerComponent.prototype.clear = function () {
            this.valueBeforeChange = this.formatToDate(this.date);
            this.date = undefined;
            this.controlModel(this.date);
            this.controlChangeEmitter();
        };
        PoDatepickerComponent.prototype.eventOnBlur = function ($event) {
            var date = this.inputEl.nativeElement.value;
            var newDate = date ? this.getDateFromString(date) : undefined;
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(newDate);
                    this.date = newDate;
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
                this.callOnChange(this.date);
            }
            this.controlChangeEmitter();
        };
        PoDatepickerComponent.prototype.eventOnClick = function ($event) {
            var _this = this;
            if (this.verifyMobile()) {
                $event.target.blur();
                // abre o calendar quando clicar no input somente no mobile
                setTimeout(function () { return _this.togglePicker(); }, 0);
            }
            else {
                // Atualiza a posição do cursor ao clicar
                this.objMask.click($event);
            }
        };
        PoDatepickerComponent.prototype.formatToDate = function (value) {
            if (!value) {
                return undefined;
            }
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        PoDatepickerComponent.prototype.refreshValue = function (value) {
            if (value) {
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
        };
        // Função implementada do ControlValueAccessor
        PoDatepickerComponent.prototype.writeValue = function (value) {
            if (this.inputEl && value) {
                if (value instanceof Date) {
                    var dateString = value.toString();
                    this.hour =
                        'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                    this.date = value;
                    this.inputEl.nativeElement.value = this.formatToDate(value);
                }
                else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                    if (this.isValidExtendedIso(value)) {
                        this.hour = value.substring(10, 25);
                    }
                    if (this.isoFormat === undefined) {
                        this.isExtendedISO = this.isValidExtendedIso(value);
                    }
                    var day = parseInt(value.substring(8, 10), 10);
                    var month = parseInt(value.substring(5, 7), 10) - 1;
                    var year = parseInt(value.substring(0, 4), 10);
                    var dateTemp = new Date(year, month, day);
                    setYearFrom0To100(dateTemp, year);
                    this.date = dateTemp;
                    this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
                }
                else {
                    this.inputEl.nativeElement.value = '';
                    this.date = undefined;
                }
                this.controlModel(this.date);
            }
            else if (this.inputEl) {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.valueBeforeChange = this.formatToDate(this.date);
        };
        PoDatepickerComponent.prototype.isValidDateIso = function (value) {
            return this.dateRegex.test(value);
        };
        PoDatepickerComponent.prototype.isValidExtendedIso = function (value) {
            return this.isoRegex.test(value);
        };
        PoDatepickerComponent.prototype.hasOverlayClass = function (element) {
            return element.classList.contains('po-calendar-overlay');
        };
        /* istanbul ignore next */
        PoDatepickerComponent.prototype.verifyMobile = function () {
            return isMobile();
        };
        PoDatepickerComponent.prototype.closeCalendar = function () {
            this.calendar.close();
            this.removeListeners();
            this.setDialogPickerStyleDisplay('none');
        };
        PoDatepickerComponent.prototype.controlChangeEmitter = function () {
            var _this = this;
            var dateModelFormatted = this.formatToDate(this.date);
            if (dateModelFormatted !== this.valueBeforeChange) {
                this.valueBeforeChange = dateModelFormatted;
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.onchange.emit(dateModelFormatted);
                }, 200);
            }
        };
        PoDatepickerComponent.prototype.hasAttrCalendar = function (element) {
            var attrCalendar = 'attr-calendar';
            return ((element && element.hasAttribute(attrCalendar)) ||
                (element.parentElement && element.parentElement.hasAttribute(attrCalendar)));
        };
        PoDatepickerComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnPicker(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                _this.closeCalendar();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerComponent.prototype.removeListeners = function () {
            if (this.clickListener) {
                this.clickListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoDatepickerComponent.prototype.setDialogPickerStyleDisplay = function (value) {
            this.dialogPicker.nativeElement.style.display = value;
        };
        PoDatepickerComponent.prototype.setCalendarPosition = function () {
            this.setDialogPickerStyleDisplay('block');
            this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
            this.controlPosition.adjustPosition(poCalendarPositionDefault);
        };
        var PoDatepickerComponent_1;
        PoDatepickerComponent.ctorParameters = function () { return [
            { type: PoControlPositionService },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('calendar', { static: true }),
            __metadata("design:type", PoCalendarComponent$1)
        ], PoDatepickerComponent.prototype, "calendar", void 0);
        __decorate([
            core.ViewChild('dialogPicker', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerComponent.prototype, "dialogPicker", void 0);
        __decorate([
            core.ViewChild('iconDatepicker', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerComponent.prototype, "iconDatepicker", void 0);
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerComponent.prototype, "inputEl", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDatepickerComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoDatepickerComponent.prototype, "help", void 0);
        __decorate([
            core.HostListener('keyup', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoDatepickerComponent.prototype, "onKeyup", null);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoDatepickerComponent.prototype, "onKeydown", null);
        PoDatepickerComponent = PoDatepickerComponent_1 = __decorate([
            core.Component({
                selector: 'po-datepicker',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <input\n      #inp\n      class=\"po-input po-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear()\"></po-clean>\n\n      <span\n        #iconDatepicker\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <po-calendar\n      #calendar\n      [p-date-end]=\"maxDate\"\n      [p-date-start]=\"minDate\"\n      [p-locale]=\"locale\"\n      [(p-selected-date)]=\"date\"\n      (p-submit)=\"dateSelected()\"\n    >\n    </po-calendar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"></po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoDatepickerComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoDatepickerComponent_1; }),
                        multi: true
                    },
                    PoControlPositionService
                ]
            }),
            __metadata("design:paramtypes", [PoControlPositionService, core.Renderer2, core.ElementRef])
        ], PoDatepickerComponent);
        return PoDatepickerComponent;
    }(PoDatepickerBaseComponent));

    var poDatepickerRangeLiteralsDefault = {
        en: {
            invalidFormat: 'Date in invalid format',
            startDateGreaterThanEndDate: 'Start date greater than end date'
        },
        es: {
            invalidFormat: 'Fecha en formato no válido',
            startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final'
        },
        pt: {
            invalidFormat: 'Data no formato inválido',
            startDateGreaterThanEndDate: 'Data inicial maior que data final'
        },
        ru: {
            invalidFormat: 'Дата в неверном формате',
            startDateGreaterThanEndDate: 'Дата начала больше даты окончания'
        }
    };
    /**
     * @description
     *
     * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
     * a data inicial ou a data final.
     *
     * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
     * `PoDatepickerRange`, contendo as seguintes propriedades:
     * ```
     * { "start": '2017-11-28', "end": '2017-11-30' }
     * ```
     *
     * <a id="accepted-formats"></a>
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * new Date(2017, 10, 28);
     * ```
     *
     * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
     * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
     *
     * Importante:
     *
     * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
     * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
     * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
     * `[(ngModel)]`, no entanto sem a validação do formulário;
     * - Para a validação do formulário, utilize o `[(ngModel)]`.
     */
    var PoDatepickerRangeBaseComponent = /** @class */ (function () {
        function PoDatepickerRangeBaseComponent(poDateService) {
            this.poDateService = poDateService;
            this.errorMessage = '';
            this._clean = false;
            this._noAutocomplete = false;
            this._readonly = false;
            this._required = false;
            this.dateRange = { start: '', end: '' };
            this.format = 'dd/mm/yyyy';
            this.isDateRangeInputFormatValid = true;
            this.isStartDateRangeInputValid = true;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @optional
             *
             * @description
             *
             * Evento disparado ao alterar valor do campo.
             */
            this.onChange = new core.EventEmitter();
        }
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
            get: function () {
                return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "clean", {
            get: function () {
                return this._clean;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita ação para limpar o campo.
             *
             * @default `false`
             */
            set: function (clean) {
                this._clean = convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "endDate", {
            get: function () {
                return this._endDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data final.
             */
            set: function (date) {
                this._endDate = this.convertPatternDateFormat(date);
                this.dateRange.end = this.endDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poDatepickerRangeLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-datepicker-range`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format',
             *    startDateGreaterThanEndDate: 'End date less than start date'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-datepicker-range
             *   [p-literals]="customLiterals">
             * </po-datepicker-range>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault]), poDatepickerRangeLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poDatepickerRangeLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (value) {
                this._readonly = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "startDate", {
            get: function () {
                return this._startDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data inicial.
             */
            set: function (date) {
                this._startDate = this.convertPatternDateFormat(date);
                this.dateRange.start = this.startDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerRangeBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoDatepickerRangeBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouchedModel = func;
        };
        PoDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoDatepickerRangeBaseComponent.prototype.validate = function (control) {
            var value = control.value || {};
            var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
            var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
            if (this.requiredDateRangeFailed(startDate, endDate)) {
                this.errorMessage = '';
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
                this.errorMessage = this.literals.invalidFormat;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            if (this.dateRangeFailed(startDate, endDate)) {
                this.errorMessage = this.literals.startDateGreaterThanEndDate;
                return {
                    date: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoDatepickerRangeBaseComponent.prototype.writeValue = function (dateRange) {
            this.resetDateRangeInputValidation();
            if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
                this.dateRange = { start: '', end: '' };
            }
            if (!dateRange) {
                this.validateModel(this.dateRange);
            }
            if (this.dateRangeObjectFailed(dateRange)) {
                this.updateModel(dateRange);
            }
            if (this.isDateRangeObject(dateRange)) {
                this.dateRange = {
                    start: this.convertPatternDateFormat(dateRange.start),
                    end: this.convertPatternDateFormat(dateRange.end)
                };
                this.updateModel(this.dateRange);
            }
            this.updateScreenByModel(this.dateRange);
        };
        PoDatepickerRangeBaseComponent.prototype.dateFormatFailed = function (value) {
            return value && !this.poDateService.isValidIso(value);
        };
        // Executa a função onChange
        PoDatepickerRangeBaseComponent.prototype.updateModel = function (value) {
            var model = typeof value === 'object' ? __assign({}, value) : value;
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(model);
            }
        };
        PoDatepickerRangeBaseComponent.prototype.validateModel = function (value) {
            var model = __assign({}, value);
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = function (value) {
            if (value instanceof Date) {
                return this.poDateService.convertDateToISO(value);
            }
            return value;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeFailed = function (startDate, endDate) {
            return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = function (startDate, endDate) {
            return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
        };
        PoDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = function (value) {
            return value && !this.isDateRangeObject(value);
        };
        PoDatepickerRangeBaseComponent.prototype.isDateRangeObject = function (value) {
            return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
        };
        PoDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = function (startDate, endDate) {
            return (this.isDateRangeInputValid &&
                requiredFailed(this.required, this.disabled, startDate) &&
                requiredFailed(this.required, this.disabled, endDate));
        };
        PoDatepickerRangeBaseComponent.ctorParameters = function () { return [
            { type: PoDateService }
        ]; };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoDatepickerRangeBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-clean'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerRangeBaseComponent.prototype, "clean", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerRangeBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-end-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDatepickerRangeBaseComponent.prototype, "endDate", null);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoDatepickerRangeBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoDatepickerRangeBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDatepickerRangeBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-no-autocomplete'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoDatepickerRangeBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerRangeBaseComponent.prototype, "readonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDatepickerRangeBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-start-date'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDatepickerRangeBaseComponent.prototype, "startDate", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoDatepickerRangeBaseComponent.prototype, "onChange", void 0);
        PoDatepickerRangeBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoDateService])
        ], PoDatepickerRangeBaseComponent);
        return PoDatepickerRangeBaseComponent;
    }());

    var arrowLeftKey = 37;
    var arrowRightKey = 39;
    var backspaceKey = 8;
    var poDatepickerRangeDateLengthDefault = 10;
    /* istanbul ignore next */
    var providers$1 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoDatepickerRangeComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoDatepickerRangeComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoDatepickerRangeBaseComponent
     *
     * @example
     *
     * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
     *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
     *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
     *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
     *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
     *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
     *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
     * </example>
     *
     * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
     *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
     *  </file>
     *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
     *  </file>
     * </example>
     */
    var PoDatepickerRangeComponent = /** @class */ (function (_super) {
        __extends(PoDatepickerRangeComponent, _super);
        function PoDatepickerRangeComponent(changeDetector, poDateService, poDatepickerRangeElement) {
            var _this = _super.call(this, poDateService) || this;
            _this.changeDetector = changeDetector;
            _this.poDatepickerRangeElement = poDatepickerRangeElement;
            return _this;
        }
        PoDatepickerRangeComponent_1 = PoDatepickerRangeComponent;
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "enableCleaner", {
            get: function () {
                return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputName", {
            get: function () {
                return 'end-date';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputValue", {
            get: function () {
                return this.endDateInput.nativeElement.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "getErrorMessage", {
            get: function () {
                return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
            get: function () {
                return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
                    this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
            get: function () {
                return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputName", {
            get: function () {
                return 'start-date';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputValue", {
            get: function () {
                return this.startDateInput.nativeElement.value;
            },
            enumerable: true,
            configurable: true
        });
        PoDatepickerRangeComponent.getKeyCode = function (event) {
            return event.keyCode || event.which;
        };
        PoDatepickerRangeComponent.getTargetElement = function (event) {
            return event.target || event.srcElement;
        };
        PoDatepickerRangeComponent.isValidKey = function (keyCode) {
            var isNumericKey = keyCode >= 48 && keyCode <= 57;
            var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
            return isNumericKey || isNumericNumpadKey;
        };
        PoDatepickerRangeComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDatepickerRangeComponent.prototype.ngOnInit = function () {
            // Classe de máscara
            this.poMaskObject = this.buildMask();
        };
        PoDatepickerRangeComponent.prototype.clear = function () {
            this.resetDateRangeInputValidation();
            this.dateRange = { start: '', end: '' };
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
         *
         * focusDatepickerRange() {
         *   this.datepickerRange.focus();
         * }
         * ```
         */
        PoDatepickerRangeComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.startDateInput.nativeElement.focus();
            }
        };
        PoDatepickerRangeComponent.prototype.onBlur = function () {
            this.removeFocusFromDatePickerRangeField();
        };
        PoDatepickerRangeComponent.prototype.onFocus = function () {
            this.applyFocusOnDatePickerRangeField();
        };
        PoDatepickerRangeComponent.prototype.onKeydown = function (event) {
            if (this.readonly) {
                return;
            }
            if (this.isSetFocusOnBackspace(event)) {
                event.preventDefault();
                this.setFocusOnBackspace();
            }
            else {
                this.poMaskObject.keydown(event);
            }
        };
        PoDatepickerRangeComponent.prototype.onKeyup = function (event) {
            if (this.readonly) {
                return;
            }
            var isStartDateTargetEvent = event.target.name === this.startDateInputName;
            this.setFocus(event);
            this.poMaskObject.keyup(event);
            this.updateModelByScreen(isStartDateTargetEvent);
        };
        PoDatepickerRangeComponent.prototype.resetDateRangeInputValidation = function () {
            this.isStartDateRangeInputValid = true;
            this.isDateRangeInputFormatValid = true;
        };
        PoDatepickerRangeComponent.prototype.updateScreenByModel = function (model) {
            var _this = this;
            var dateRange = { start: model.start, end: model.end };
            var isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
            var isDateValid = function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; };
            var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
            var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
            this.endDateInput.nativeElement.value = endDateFormated;
            this.startDateInput.nativeElement.value = startDateFormated;
            this.changeDetector.detectChanges();
        };
        PoDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = function () {
            this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
        };
        // Retorna um objeto do tipo PoMask com a mascara configurada.
        PoDatepickerRangeComponent.prototype.buildMask = function () {
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new PoMask(mask, true);
        };
        PoDatepickerRangeComponent.prototype.formatDate = function (format, day, month, year) {
            if (day === void 0) { day = ''; }
            if (month === void 0) { month = ''; }
            if (year === void 0) { year = ''; }
            var dateFormatted = format;
            day = day && day.includes('T') ? day.slice(0, 2) : day;
            dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', String(year));
            return dateFormatted;
        };
        PoDatepickerRangeComponent.prototype.formatScreenToModel = function (value) {
            if (value === void 0) { value = ''; }
            var _a = __read(value.split('/'), 3), day = _a[0], month = _a[1], year = _a[2];
            return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
        };
        PoDatepickerRangeComponent.prototype.formatModelToScreen = function (value) {
            if (value === void 0) { value = ''; }
            var _a = __read(value.split('-'), 3), year = _a[0], month = _a[1], day = _a[2];
            return value ? this.formatDate(this.format, day, month, year) : '';
        };
        PoDatepickerRangeComponent.prototype.getDateRangeFormatValidation = function (startDate, endDate, isStartDateTargetEvent) {
            this.setDateRangeInputValidation(startDate, endDate);
            return {
                isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
                dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
            };
        };
        PoDatepickerRangeComponent.prototype.getValidatedModel = function (startDate, endDate, isStartDateTargetEvent) {
            var dateRangeModel = { start: '', end: '' };
            dateRangeModel.end =
                (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
            dateRangeModel.start =
                (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                    ? startDate
                    : '';
            return dateRangeModel;
        };
        PoDatepickerRangeComponent.prototype.hasInvalidClass = function () {
            return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
                this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
        };
        PoDatepickerRangeComponent.prototype.isEqualBeforeValue = function (startDate, endDate) {
            return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
        };
        PoDatepickerRangeComponent.prototype.isSetFocusOnBackspace = function (event) {
            return (event.target.name === this.endDateInputName &&
                this.endDateInput.nativeElement.selectionStart === 0 &&
                this.endDateInput.nativeElement.selectionEnd === 0 &&
                event.keyCode === backspaceKey);
        };
        PoDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = function () {
            this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
        };
        PoDatepickerRangeComponent.prototype.setDateRangeInputValidation = function (startDate, endDate) {
            this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
            this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
        };
        PoDatepickerRangeComponent.prototype.setFocus = function (event) {
            var inputElement = PoDatepickerRangeComponent_1.getTargetElement(event);
            var keyCode = PoDatepickerRangeComponent_1.getKeyCode(event);
            var inputName = inputElement['name'];
            this.setFocusOnArrowLeft(keyCode, inputName);
            this.setFocusOnArrowRight(keyCode, inputName, inputElement);
            this.setFocusOnStartDateCompleted(keyCode, inputName);
        };
        PoDatepickerRangeComponent.prototype.setFocusAndPosition = function (position, inputElement, selectionRange) {
            var _this = this;
            this.focusOnElement(inputElement);
            setTimeout(function () {
                inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
                _this.poMaskObject.initialPosition = position;
                _this.poMaskObject.finalPosition = position;
            });
        };
        PoDatepickerRangeComponent.prototype.focusOnElement = function (inputElement) {
            inputElement.nativeElement.focus();
        };
        PoDatepickerRangeComponent.prototype.setFocusOnArrowLeft = function (keyCode, inputName) {
            var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
            if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
                var inputLength = this.startDateInput.nativeElement.value.length;
                this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
            }
        };
        PoDatepickerRangeComponent.prototype.setFocusOnArrowRight = function (keyCode, inputName, inputElement) {
            var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
            if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        PoDatepickerRangeComponent.prototype.setFocusOnBackspace = function () {
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        };
        PoDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = function (keyCode, inputName) {
            var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
            var isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
            var isValidKey = PoDatepickerRangeComponent_1.isValidKey(keyCode);
            if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        PoDatepickerRangeComponent.prototype.updateModelByScreen = function (isStartDateTargetEvent) {
            var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
            var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
            if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
                this.updateModel(this.dateRange);
                return;
            }
            if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
                this.resetDateRangeInputValidation();
                this.validateModel(this.dateRange);
                return;
            }
            var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
            if (dateFormatValidation.isValid) {
                this.dateRange = { start: startDateFormatted, end: endDateFormatted };
                this.updateModel(this.dateRange);
                this.onChange.emit(__assign({}, this.dateRange));
            }
            if (!dateFormatValidation.isValid) {
                this.dateRange = __assign({}, dateFormatValidation.dateRangeModel);
                this.updateModel(dateFormatValidation.dateRangeModel);
            }
        };
        var PoDatepickerRangeComponent_1;
        PoDatepickerRangeComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: PoDateService },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('dateRangeField', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerRangeComponent.prototype, "dateRangeField", void 0);
        __decorate([
            core.ViewChild('endDateInput', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerRangeComponent.prototype, "endDateInput", void 0);
        __decorate([
            core.ViewChild('startDateInput', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDatepickerRangeComponent.prototype, "startDateInput", void 0);
        PoDatepickerRangeComponent = PoDatepickerRangeComponent_1 = __decorate([
            core.Component({
                selector: 'po-datepicker-range',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div #dateRangeField class=\"po-datepicker-range-field po-input\" [class.po-datepicker-range-field-disabled]=\"disabled\">\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <span class=\"po-icon po-field-icon po-icon-calendar\" [class.po-field-icon-disabled]=\"disabled || readonly\">\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$1
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef,
                PoDateService,
                core.ElementRef])
        ], PoDatepickerRangeComponent);
        return PoDatepickerRangeComponent;
    }(PoDatepickerRangeBaseComponent));

    /**
     * @description
     *
     * Este é um componente baseado em input, com várias propriedades do input nativo e outras
     * propriedades extras como: máscara, pattern, mensagem de erro e etc.
     * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
     * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
     * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
     *
     * Importante:
     *
     * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
     */
    var PoInputBaseComponent = /** @class */ (function () {
        function PoInputBaseComponent() {
            this._noAutocomplete = false;
            this._placeholder = '';
            this.passedWriteValue = false;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @description
             *
             * Se verdadeiro, desabilita o campo.
             *
             * @default `false`
             */
            this.disabled = false;
            /** Indica que o campo será somente leitura. */
            this.readonly = false;
            /**
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
             *
             * @default `false`
             */
            this.required = false;
            /** Se verdadeiro, o campo receberá um botão para ser limpo. */
            this.clean = false;
            /**
             * @description
             *
             * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
            /**
             * @description
             *
             * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
             * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
             * através da propriedade p-pattern.
             * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
             * mesmo quando desabilitado.
             */
            this.mask = '';
            /**
             * @description
             *
             * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
             *
             * @default `false`
             */
            this.maskFormatModel = false;
            /** Evento disparado ao sair do campo. */
            this.blur = new core.EventEmitter();
            /** Evento disparado ao entrar do campo. */
            this.enter = new core.EventEmitter();
            /** Evento disparado ao alterar valor e deixar o campo. */
            this.change = new core.EventEmitter();
            /** Evento disparado ao alterar valor do model. */
            this.changeModel = new core.EventEmitter();
            this.onChangePropagate = null;
            this.onTouched = null;
        }
        Object.defineProperty(PoInputBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setDisabled", {
            set: function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setReadonly", {
            set: function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setRequired", {
            set: function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setClean", {
            set: function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setPattern", {
            set: function (pattern) {
                this.pattern = pattern;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "maxlength", {
            get: function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: function (value) {
                if (!isNaN(parseInt(value, 10))) {
                    this._maxlength = parseInt(value, 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._maxlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "minlength", {
            get: function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: function (value) {
                if (!isNaN(parseInt(value, 10))) {
                    this._minlength = parseInt(value, 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._minlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setMask", {
            set: function (mask) {
                this.mask = mask;
                // Atualiza Máscara do Campo
                this.objMask = new PoMask(this.mask, this.maskFormatModel);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInputBaseComponent.prototype, "setMaskFormatModel", {
            set: function (maskFormatModel) {
                this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
                if (this.objMask instanceof PoMask) {
                    this.objMask.formatModel = this.maskFormatModel;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        PoInputBaseComponent.prototype.callOnChange = function (value) {
            this.updateModel(value);
            this.controlChangeModelEmitter(value);
        };
        PoInputBaseComponent.prototype.callUpdateModelWithTimeout = function (value) {
            var _this = this;
            setTimeout(function () { return _this.updateModel(value); });
        };
        PoInputBaseComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoInputBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoInputBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoInputBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoInputBaseComponent.prototype.updateModel = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
        };
        PoInputBaseComponent.prototype.validate = function (c) {
            if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
                return {
                    maxlength: {
                        valid: false
                    }
                };
            }
            if (minlengpoailed(this.minlength, this.getScreenValue())) {
                return {
                    minlength: {
                        valid: false
                    }
                };
            }
            if (patternFailed(this.pattern, c.value)) {
                this.validatePatternOnWriteValue(c.value);
                return {
                    pattern: {
                        valid: false
                    }
                };
            }
            return this.extraValidation(c);
        };
        // Função implementada do ControlValueAccessor
        PoInputBaseComponent.prototype.writeValue = function (value) {
            this.writeValueModel(value);
        };
        PoInputBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
        PoInputBaseComponent.prototype.validatePatternOnWriteValue = function (value) {
            var _this = this;
            if (value && this.passedWriteValue) {
                setTimeout(function () {
                    _this.updateModel(value);
                });
                this.passedWriteValue = false;
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoInputBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoInputBaseComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoInputBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoInputBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoInputBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-no-autocomplete'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoInputBaseComponent.prototype, "noAutocomplete", null);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "placeholder", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setDisabled", null);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setReadonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setRequired", null);
        __decorate([
            core.Input('p-clean'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setClean", null);
        __decorate([
            core.Input('p-pattern'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setPattern", null);
        __decorate([
            core.Input('p-error-pattern'),
            __metadata("design:type", String)
        ], PoInputBaseComponent.prototype, "errorPattern", void 0);
        __decorate([
            core.Input('p-maxlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoInputBaseComponent.prototype, "maxlength", null);
        __decorate([
            core.Input('p-minlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoInputBaseComponent.prototype, "minlength", null);
        __decorate([
            core.Input('p-mask'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setMask", null);
        __decorate([
            core.Input('p-mask-format-model'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInputBaseComponent.prototype, "setMaskFormatModel", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoInputBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Output('p-blur'),
            __metadata("design:type", core.EventEmitter)
        ], PoInputBaseComponent.prototype, "blur", void 0);
        __decorate([
            core.Output('p-enter'),
            __metadata("design:type", core.EventEmitter)
        ], PoInputBaseComponent.prototype, "enter", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoInputBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('p-change-model'),
            __metadata("design:type", core.EventEmitter)
        ], PoInputBaseComponent.prototype, "changeModel", void 0);
        PoInputBaseComponent = __decorate([
            core.Directive()
        ], PoInputBaseComponent);
        return PoInputBaseComponent;
    }());

    var poDecimalDefaultDecimalsLength = 2;
    var poDecimalDefaultThousandMaxlength = 13;
    var poDecimalMaxDecimalsLength = 15;
    var poDecimalTotalLengthLimit = 16;
    /**
     *
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * <br>
     * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:
     *  + Aceita apenas números;
     *  + Utiliza ',' como separador de decimal;
     *  + Utiliza '.' para separação de milhar;
     *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
     *
     * > **Importante:**
     * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,
     * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.
     * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.
     *
     * @example
     *
     * <example name="po-decimal-basic" title="PO Decimal Basic">
     *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
     *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-labs" title="PO Decimal Labs">
     *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
     *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-hourly-wage" title="PO Decimal - Hourly Wage">
     *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
     *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
     * </example>
     *
     * <example name="po-decimal-hourly-wage-reactive-form" title="PO Decimal - Hourly Wage Reactive Form">
     *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
     *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoDecimalComponent = /** @class */ (function (_super) {
        __extends(PoDecimalComponent, _super);
        function PoDecimalComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._decimalsLength = poDecimalDefaultDecimalsLength;
            _this._thousandMaxlength = poDecimalDefaultThousandMaxlength;
            _this.decimalSeparator = ',';
            _this.fireChange = false;
            _this.isKeyboardAndroid = false;
            _this.minusSign = '-';
            _this.oldDotsLength = null;
            _this.thousandSeparator = '.';
            _this.regex = {
                thousand: new RegExp('\\' + '.', 'g'),
                decimal: new RegExp('\\' + ',', 'g')
            };
            _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
            return _this;
        }
        PoDecimalComponent_1 = PoDecimalComponent;
        Object.defineProperty(PoDecimalComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "decimalsLength", {
            get: function () {
                return this._decimalsLength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade máxima de casas decimais.
             *
             * > **Importante:**
             * - O valor máximo permitido é 15;
             * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
             * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;
             * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).
             *
             * @default `2`
             */
            set: function (value) {
                var decimalsLength = convertToInt(value);
                decimalsLength = this.isValueBetweenAllowed(decimalsLength, poDecimalMaxDecimalsLength)
                    ? decimalsLength
                    : poDecimalDefaultDecimalsLength;
                if (this.isGreaterThanTotalLengthLimit(decimalsLength, this.thousandMaxlength)) {
                    this.thousandMaxlength = poDecimalTotalLengthLimit - decimalsLength;
                }
                this._decimalsLength = decimalsLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDecimalComponent.prototype, "thousandMaxlength", {
            get: function () {
                return this._thousandMaxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade máxima de dígitos antes do separador decimal.
             *
             * > **Importante:**
             * - O valor máximo permitido é 13;
             * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
             * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.
             *
             * @default `13`
             */
            set: function (value) {
                var thousandMaxlength = convertToInt(value);
                if (this.decimalsLength > poDecimalDefaultDecimalsLength && !thousandMaxlength) {
                    thousandMaxlength = poDecimalTotalLengthLimit - this.decimalsLength;
                }
                thousandMaxlength = this.isValueBetweenAllowed(thousandMaxlength, poDecimalDefaultThousandMaxlength)
                    ? thousandMaxlength
                    : poDecimalDefaultThousandMaxlength;
                if (this.isGreaterThanTotalLengthLimit(this.decimalsLength, thousandMaxlength)) {
                    this.decimalsLength = poDecimalTotalLengthLimit - thousandMaxlength;
                }
                this._thousandMaxlength = thousandMaxlength;
            },
            enumerable: true,
            configurable: true
        });
        PoDecimalComponent.prototype.ngAfterViewInit = function () {
            this.verifyAutoFocus();
            this.setPaddingInput();
        };
        PoDecimalComponent.prototype.clear = function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        PoDecimalComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoDecimalComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoDecimalComponent.prototype.getScreenValue = function () {
            return this.inputEl ? this.inputEl.nativeElement.value : '';
        };
        PoDecimalComponent.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.getScreenValue() !== '');
        };
        PoDecimalComponent.prototype.hasLetters = function (value) {
            if (value === void 0) { value = ''; }
            return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        };
        PoDecimalComponent.prototype.isValidNumber = function (event) {
            // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
            var keyValue = String.fromCharCode(event.which);
            var validKey = event.which !== 8 && event.which !== 0;
            return !this.hasLetters(keyValue) && validKey;
        };
        // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
        PoDecimalComponent.prototype.onBlur = function (event) {
            var value = event.target.value;
            if (value) {
                if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                    this.setViewValue('');
                    this.callOnChange(undefined);
                    return;
                }
                var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
                this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
            }
            this.blur.emit();
            this.controlChangeEmitter();
        };
        PoDecimalComponent.prototype.onFocus = function (event) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.getScreenValue();
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoDecimalComponent.prototype.onInput = function (event) {
            var selectionStart = event.target.selectionStart;
            var selectionEnd = event.target.selectionEnd;
            var modelValue;
            var viewValue;
            // - Browsers nativos do Android ex: Samsung Browser.
            if (this.isKeyboardAndroid) {
                this.onInputKeyboardAndroid(event);
            }
            modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
            modelValue = this.addZeroBefore(modelValue);
            viewValue = this.formatMask(modelValue);
            // validação para não quebrar IE com placeholder definido e Input vazio
            if (viewValue) {
                this.setViewValue(viewValue);
                this.setCursorInput(event, selectionStart, selectionEnd);
            }
            this.callOnChange(this.formatToModelValue(modelValue));
        };
        PoDecimalComponent.prototype.onInputKeyboardAndroid = function (event) {
            var inputValue = event.target.value;
            var selectionStart = event.target.selectionStart;
            var hasLetters = this.hasLetters(inputValue);
            if (hasLetters) {
                this.setViewValue(inputValue.replace(hasLetters[0], ''));
                return event.preventDefault();
            }
            else {
                var position = selectionStart - 1;
                var key = inputValue.charAt(position);
                this.setPositionValue(event);
                if (this.isValidKey(event, key)) {
                    this.setViewValue(inputValue);
                }
            }
        };
        PoDecimalComponent.prototype.onKeyPress = function (event) {
            this.isValidKey(event);
        };
        PoDecimalComponent.prototype.setPaddingInput = function () {
            var _this = this;
            setTimeout(function () {
                var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            });
        };
        PoDecimalComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    var formatedViewValue = this.formatToViewValue(value);
                    this.setViewValue(formatedViewValue);
                }
                else {
                    this.setViewValue('');
                }
            }
            if (value) {
                this.change.emit(value);
            }
        };
        // reponsável por adicionar 0 antes da virgula (decimalSeparator).
        PoDecimalComponent.prototype.addZeroBefore = function (value) {
            var isDecimalSeparator = value === this.decimalSeparator;
            return isDecimalSeparator ? "0" + value : value;
        };
        PoDecimalComponent.prototype.containsComma = function (value) {
            return value.includes(this.decimalSeparator);
        };
        PoDecimalComponent.prototype.containsMoreThanOneComma = function (value) {
            if (value === void 0) { value = ''; }
            var foundComma = value.match(/,/g);
            return !!(foundComma && foundComma.length > 1);
        };
        PoDecimalComponent.prototype.controlChangeEmitter = function () {
            var _this = this;
            var elementValue = this.getScreenValue();
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do p-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                this.fireChange = true;
                setTimeout(function () {
                    _this.change.emit(elementValue);
                }, 200);
            }
        };
        PoDecimalComponent.prototype.formatMask = function (value) {
            // necessário para não adicionar . nas casa decimais.
            // por exemplo: 12.345,123.45 (errado)
            // 12.345,12345 (correto)
            if (value.match(this.regex.decimal)) {
                var regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
                return value.toString().replace(regex, '$1.');
            }
            return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
        };
        PoDecimalComponent.prototype.formatToModelValue = function (value) {
            var formattedValue = this.replaceCommaToDot(value);
            var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
            return parsedValue === 0 || parsedValue ? parsedValue : undefined;
        };
        PoDecimalComponent.prototype.formatToViewValue = function (value) {
            var formatedNumber;
            var numberValue;
            var valueBeforeDot;
            var valueAfterDot;
            // - Necessário para tratar valores que contenham decimalSeparator
            value = this.replaceCommaToDot(value);
            numberValue = Number(value).toFixed(this.decimalsLength);
            valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
            valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
            formatedNumber = this.formatMask(valueBeforeDot);
            if (this.decimalsLength === 0) {
                return formatedNumber;
            }
            else {
                return formatedNumber + this.decimalSeparator + valueAfterDot;
            }
        };
        PoDecimalComponent.prototype.formatValueWithoutThousandSeparator = function (value) {
            if (value === void 0) { value = ''; }
            return value.toString().replace(this.regex.thousand, '');
        };
        PoDecimalComponent.prototype.getValueAfterSeparator = function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[1] || '';
        };
        PoDecimalComponent.prototype.getValueBeforeSeparator = function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[0] || '';
        };
        PoDecimalComponent.prototype.hasLessDot = function (value) {
            if (value) {
                var dots = value.match(this.regex.thousand);
                var dotsLength = dots && dots.length;
                if (dotsLength < this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        PoDecimalComponent.prototype.hasMoreDot = function (value) {
            if (value) {
                var dots = value.match(this.regex.thousand);
                var dotsLength = dots && dots.length;
                if (dotsLength > this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        PoDecimalComponent.prototype.hasMinusSignInvalidPosition = function (event) {
            var keyIsMinusSign = event.key === this.minusSign;
            var selectionStart = event.target.selectionStart;
            return keyIsMinusSign && selectionStart !== 0;
        };
        PoDecimalComponent.prototype.isInvalidKey = function (event, charCode) {
            var isInvalidNumber = !this.isValidNumber(event);
            return (this.verifyInsertComma(event) ||
                this.verifyThousandLength(event) ||
                this.verifyValueAfterComma(event) ||
                this.verifyInsertMinusSign(event) ||
                this.hasMinusSignInvalidPosition(event) ||
                isInvalidNumber ||
                this.validateCursorPositionBeforeSeparator(event) ||
                this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode));
        };
        PoDecimalComponent.prototype.isGreaterThanTotalLengthLimit = function (decimalsMaxLength, thousandMaxlength) {
            return decimalsMaxLength + thousandMaxlength > poDecimalTotalLengthLimit;
        };
        PoDecimalComponent.prototype.isKeyDecimalSeparator = function (event) {
            return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
        };
        PoDecimalComponent.prototype.isPositionAfterDecimalSeparator = function (positionCursor, value) {
            var indexComma = value && value.indexOf(this.decimalSeparator);
            if (indexComma && this.decimalsLength > 0) {
                return positionCursor > indexComma;
            }
        };
        PoDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = function (target) {
            return target.selectionStart !== target.selectionEnd;
        };
        PoDecimalComponent.prototype.isValidKey = function (event, key) {
            var charCode = event.which || event.keyCode;
            var validKey = event.which === 8 || event.which === 0;
            if (validKey && !this.isKeyboardAndroid) {
                return;
            }
            if (key) {
                event.key = key;
            }
            if (this.isInvalidKey(event, charCode)) {
                event.preventDefault();
                return false;
            }
            return true;
        };
        PoDecimalComponent.prototype.isValueBetweenAllowed = function (value, maxAllowed) {
            return value >= 0 && value <= maxAllowed;
        };
        // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
        PoDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = function (charCode) {
            return charCode === 44 && this.decimalsLength === 0;
        };
        PoDecimalComponent.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoDecimalComponent.prototype.setInitialSelectionRange = function (target, selectionStart, selectionEnd) {
            if (selectionStart === 1 && selectionEnd === 1) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
        };
        PoDecimalComponent.prototype.replaceAt = function (value, index, replace) {
            return value.substring(0, index) + replace + value.substring(index + 1);
        };
        PoDecimalComponent.prototype.replaceCommaToDot = function (value) {
            if (value === void 0) { value = ''; }
            return value.toString().replace(this.regex.decimal, '.');
        };
        PoDecimalComponent.prototype.setCursorInput = function (event, selectionStart, selectionEnd) {
            var target = event.target;
            var viewValue = target.value;
            // Caso houver mais . do que anteriormente soma o valor com 1.
            if (this.hasMoreDot(viewValue) || viewValue === '0' + this.decimalSeparator) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            // Caso houver menos . do que anteriormente subtrai o valor por 1.
            if (this.hasLessDot(viewValue)) {
                this.setInitialSelectionRange(target, selectionStart, selectionEnd);
            }
            return target.setSelectionRange(selectionStart, selectionEnd);
        };
        PoDecimalComponent.prototype.setPositionValue = function (event) {
            var value = event.target.value;
            var position = event.target.selectionStart - 1;
            if (position > 0 && event.key === this.minusSign) {
                event.target.value = value.substring(0, position) + value.substr(position + 1);
            }
        };
        PoDecimalComponent.prototype.setViewValue = function (value) {
            this.inputEl.nativeElement.value = value;
        };
        PoDecimalComponent.prototype.validateCursorPositionBeforeSeparator = function (event) {
            var target = event.target;
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return (target.selectionStart <= valueBeforeSeparator.length &&
                valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event));
        };
        PoDecimalComponent.prototype.verifyThousandLength = function (event) {
            var target = event.target;
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return (valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event) &&
                this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value));
        };
        PoDecimalComponent.prototype.verifyInsertComma = function (e) {
            var hasComma = this.containsComma(e.target.value);
            return hasComma && e.key === this.decimalSeparator;
        };
        PoDecimalComponent.prototype.verifyInsertMinusSign = function (event) {
            var value = event.target.value;
            var indexMinusSign = value.lastIndexOf(this.minusSign) !== -1;
            var positionMinusSign = value.lastIndexOf('-');
            var occurancesMinusSign = value.match(new RegExp('-', 'g'));
            if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
                event.target.value = this.replaceAt(value, positionMinusSign, '');
            }
            return indexMinusSign && event.key === this.minusSign;
        };
        PoDecimalComponent.prototype.verifyValueAfterComma = function (event) {
            var value = event.target.value;
            var selectionStart = event.target.selectionStart;
            var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
            return (this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength);
        };
        var PoDecimalComponent_1;
        PoDecimalComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoDecimalComponent.prototype, "inputEl", void 0);
        __decorate([
            core.Input('p-decimals-length'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoDecimalComponent.prototype, "decimalsLength", null);
        __decorate([
            core.Input('p-thousand-maxlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoDecimalComponent.prototype, "thousandMaxlength", null);
        PoDecimalComponent = PoDecimalComponent_1 = __decorate([
            core.Component({
                selector: 'po-decimal',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      type=\"text\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (input)=\"onInput($event)\"\n      (keypress)=\"onKeyPress($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom> </po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoDecimalComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoDecimalComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoDecimalComponent);
        return PoDecimalComponent;
    }(PoInputBaseComponent));

    /* tslint:disable:directive-class-suffix */
    var PoInputGeneric = /** @class */ (function (_super) {
        __extends(PoInputGeneric, _super);
        function PoInputGeneric(el) {
            var _this = _super.call(this) || this;
            _this.type = 'text';
            _this.el = el;
            return _this;
        }
        Object.defineProperty(PoInputGeneric.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: true,
            configurable: true
        });
        PoInputGeneric.prototype.ngAfterViewInit = function () {
            this.afterViewInit();
        };
        PoInputGeneric.prototype.afterViewInit = function () {
            this.verifyAutoFocus();
            if (this.type !== 'password') {
                this.setPaddingInput();
            }
        };
        PoInputGeneric.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoInputGeneric.prototype.setPaddingInput = function () {
            var _this = this;
            setTimeout(function () {
                var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            });
        };
        PoInputGeneric.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoInputGeneric.prototype.onKeydown = function (e) {
            if (this.mask && !this.readonly && e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keydown(e);
            }
        };
        PoInputGeneric.prototype.onKeyup = function (e) {
            if (this.mask && !this.readonly) {
                if (e.target.keyCode !== 229) {
                    this.eventOnBlur(e);
                    this.objMask.keyup(e);
                }
                this.callOnChange(this.objMask.valueToModel);
            }
        };
        PoInputGeneric.prototype.eventOnInput = function (e) {
            var value = '';
            if (!this.mask) {
                value = this.validMaxLength(this.maxlength, e.target.value);
                this.inputEl.nativeElement.value = value;
            }
            else {
                this.objMask.blur(e);
                this.inputEl.nativeElement.value = this.objMask.valueToInput;
                value = this.objMask.valueToModel;
            }
            this.callOnChange(value);
        };
        PoInputGeneric.prototype.validMaxLength = function (maxlength, value) {
            return (maxlength || maxlength === 0) && value.length > maxlength
                ? value.toString().substring(0, maxlength)
                : value;
        };
        PoInputGeneric.prototype.eventOnFocus = function (e) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoInputGeneric.prototype.eventOnBlur = function (e) {
            if (this.mask) {
                this.objMask.blur(e);
            }
            if (e.type === 'blur') {
                this.blur.emit();
                this.controlChangeEmitter();
            }
        };
        PoInputGeneric.prototype.controlChangeEmitter = function () {
            var _this = this;
            var elementValue = this.inputEl.nativeElement.value;
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do p-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.change.emit(elementValue);
                }, 200);
            }
        };
        PoInputGeneric.prototype.eventOnClick = function (e) {
            // Atualiza a posição do cursor ao clicar
            if (this.mask) {
                this.objMask.click(e);
            }
        };
        PoInputGeneric.prototype.hasInvalidClass = function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        PoInputGeneric.prototype.getErrorPattern = function () {
            return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
        };
        PoInputGeneric.prototype.validateClassesForPattern = function () {
            var value = this.getScreenValue();
            var element = this.el.nativeElement;
            if (value && !this.verifyPattern(this.pattern, value)) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        };
        PoInputGeneric.prototype.verifyPattern = function (pattern, value) {
            return new RegExp(pattern).test(value);
        };
        PoInputGeneric.prototype.clear = function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        PoInputGeneric.prototype.writeValueModel = function (value) {
            this.passedWriteValue = true;
            if (this.inputEl) {
                if (value) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else {
                    // Se o valor for indefinido, deve limpar o campo.
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.changeModel.emit(value);
            }
        };
        PoInputGeneric.prototype.getScreenValue = function () {
            var screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
            if (this.type === 'number') {
                var parsedValue = parseFloat(screenValue);
                return parsedValue || parsedValue === 0 ? parsedValue : null;
            }
            else {
                return screenValue;
            }
        };
        PoInputGeneric.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoInputGeneric.prototype, "inputEl", void 0);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoInputGeneric.prototype, "onKeydown", null);
        __decorate([
            core.HostListener('keyup', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoInputGeneric.prototype, "onKeyup", null);
        PoInputGeneric = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoInputGeneric);
        return PoInputGeneric;
    }(PoInputBaseComponent));

    /* istanbul ignore next */
    var providers$2 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoEmailComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoEmailComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * po-email é um input específico para receber E-mail, com o pattern já configurado.
     *
     * @example
     *
     * <example name="po-email-basic" title="PO Email Basic">
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.html"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.ts"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-email-basic/sample-po-email-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-email-labs" title="PO Email Labs">
     *  <file name="sample-po-email-labs/sample-po-email-labs.component.html"> </file>
     *  <file name="sample-po-email-labs/sample-po-email-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-email-newsletter" title="PO Email - Newsletter">
     *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.html"> </file>
     *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.ts"> </file>
     * </example>
     */
    var PoEmailComponent = /** @class */ (function (_super) {
        __extends(PoEmailComponent, _super);
        /* istanbul ignore next */
        function PoEmailComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.icon = 'po-icon-mail';
            _this.maxlength = 254;
            _this.type = 'email';
            _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            return _this;
        }
        PoEmailComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                // Se não tem ngModel ou reactive form adiciona validação com classes css
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            });
            _super.prototype.ngAfterViewInit.call(this);
        };
        PoEmailComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        PoEmailComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoEmailComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoEmailComponent = __decorate([
            core.Component({
                selector: 'po-email',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$2
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoEmailComponent);
        return PoEmailComponent;
    }(PoInputGeneric));

    /* istanbul ignore next */
    var providers$3 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoLoginComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoLoginComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     * O po-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
     *
     * @example
     *
     * <example name="po-login-basic" title="PO Login Basic">
     *  <file name="sample-po-login-basic/sample-po-login-basic.component.html"> </file>
     *  <file name="sample-po-login-basic/sample-po-login-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-login-labs" title="PO Login Labs">
     *  <file name="sample-po-login-labs/sample-po-login-labs.component.html"> </file>
     *  <file name="sample-po-login-labs/sample-po-login-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-login-confirm" title="PO Login - Confirm Identity">
     *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.html"> </file>
     *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.ts"> </file>
     * </example>
     *
     */
    var PoLoginComponent = /** @class */ (function (_super) {
        __extends(PoLoginComponent, _super);
        /* istanbul ignore next */
        function PoLoginComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.type = 'text';
            return _this;
        }
        PoLoginComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoLoginComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoLoginComponent = __decorate([
            core.Component({
                selector: 'po-login',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-user\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$3
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoLoginComponent);
        return PoLoginComponent;
    }(PoInputGeneric));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
     */
    var PoLookupFilterService = /** @class */ (function () {
        function PoLookupFilterService(httpClient) {
            this.httpClient = httpClient;
        }
        PoLookupFilterService.prototype.getFilteredItems = function (filteredItemsParams) {
            var filterParams = filteredItemsParams.filterParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams"]);
            var validatedFilterParams = this.validateParams(filterParams);
            var params = __assign(__assign({}, restFilteredItemsParams), validatedFilterParams);
            return this.httpClient.get(this.url, { params: params });
        };
        PoLookupFilterService.prototype.getObjectByValue = function (value, filterParams) {
            var validatedFilterParams = this.validateParams(filterParams);
            return this.httpClient.get(this.url + "/" + value, { params: validatedFilterParams });
        };
        PoLookupFilterService.prototype.setUrl = function (url) {
            this.url = url;
        };
        PoLookupFilterService.prototype.validateParams = function (params) {
            return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
        };
        PoLookupFilterService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoLookupFilterService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoLookupFilterService);
        return PoLookupFilterService;
    }());

    /**
     * @description
     *
     * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
     * selecionar o registro que será enviado para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
     * buscar um registro.
     *
     * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
     * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
     *
     * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
     * `po-select` ou o `po-combo`.
     */
    var PoLookupBaseComponent = /** @class */ (function () {
        function PoLookupBaseComponent(defaultService) {
            this.defaultService = defaultService;
            this._disabled = false;
            this._required = false;
            this.oldValue = '';
            this.onChangePropagate = null;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
            this.placeholder = '';
            /**
             * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
             * Será passado por parâmetro o objeto de erro retornado.
             */
            this.onError = new core.EventEmitter();
            /**
             * Evento será disparado quando ocorrer alguma seleção.
             * Será passado por parâmetro o objeto com o valor selecionado.
             */
            this.selected = new core.EventEmitter();
        }
        Object.defineProperty(PoLookupBaseComponent.prototype, "filterService", {
            get: function () {
                return this._filterService;
            },
            /**
             * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
             * `PoLookupFilter` ou uma URL.
             *
             * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
             *
             * ```
             * url + ?page=1&pageSize=20&filter=Peter
             * ```
             *
             * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
             * - Coluna decrescente:
             * ```
             *  url + ?page=1&pageSize=20&filter=Peter&order=-name
             * ```
             *
             * - Coluna ascendente:
             * ```
             *  url + ?page=1&pageSize=20&filter=Peter&order=name
             * ```
             *
             * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
             * parâmetro `{ age: 23 }` a URL ficaria:
             *
             * ```
             * url + ?page=1&pageSize=20&age=23&filter=Peter
             * ```
             *
             * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
             * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
             */
            set: function (filterService) {
                this._filterService = filterService;
                this.setService(this.filterService);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "noAutocomplete", {
            get: function () {
                return this._noAutocomplete;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a propriedade nativa `autocomplete` do campo como `off`.
             *
             * @default `false`
             */
            set: function (value) {
                this._noAutocomplete = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.valueToModel);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoLookupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default false
             * @optional
             */
            set: function (disabled) {
                this._disabled = disabled === '' ? true : convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        PoLookupBaseComponent.prototype.ngOnDestroy = function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        PoLookupBaseComponent.prototype.ngOnInit = function () {
            this.initializeColumn();
        };
        PoLookupBaseComponent.prototype.initializeColumn = function () {
            if (this.fieldLabel) {
                this.keysDescription = [this.fieldLabel];
            }
            else {
                this.keysDescription = [];
                this.keysDescription = this.columns.filter(function (element) { return element.fieldLabel; }).map(function (element) { return element.property; });
            }
        };
        PoLookupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        PoLookupBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        PoLookupBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        // Seleciona o valor do model.
        PoLookupBaseComponent.prototype.selectValue = function (valueSelected) {
            this.valueToModel = valueSelected[this.fieldValue];
            this.callOnChange(this.valueToModel);
            this.selected.emit(valueSelected);
        };
        PoLookupBaseComponent.prototype.callOnChange = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada.
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
        };
        PoLookupBaseComponent.prototype.searchById = function (value) {
            var _this = this;
            if (typeof value === 'string') {
                value = value.trim();
            }
            if (value !== '') {
                this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(function (element) {
                    if (element) {
                        _this.oldValue = element[_this.fieldLabel];
                        _this.selectValue(element);
                        _this.setViewValue(_this.getFormattedLabel(element), element);
                    }
                    else {
                        _this.cleanModel();
                    }
                }, function (error) {
                    _this.cleanModel();
                    _this.onError.emit(error);
                });
            }
            else {
                this.cleanModel();
            }
        };
        PoLookupBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoLookupBaseComponent.prototype.writeValue = function (value) {
            if (value && value instanceof Object) {
                // Esta condição é executada quando é retornado o objeto selecionado do componente Po Lookup Modal.
                this.oldValue = value[this.fieldLabel];
                this.valueToModel = value[this.fieldValue];
                this.setViewValue(this.getFormattedLabel(value), value);
            }
            else if (value) {
                // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
                this.searchById(value);
            }
            else {
                this.cleanViewValue();
            }
        };
        PoLookupBaseComponent.prototype.cleanModel = function () {
            this.cleanViewValue();
            this.callOnChange(undefined);
        };
        PoLookupBaseComponent.prototype.cleanViewValue = function () {
            this.setViewValue('', {});
            this.oldValue = '';
            this.valueToModel = null;
        };
        // Formata a label do campo.
        PoLookupBaseComponent.prototype.getFormattedLabel = function (value) {
            return value ? this.keysDescription.map(function (column) { return value[column]; }).join(' - ') : '';
        };
        // Chama o método writeValue e preenche o model.
        PoLookupBaseComponent.prototype.selectModel = function (value) {
            this.writeValue(value);
            if (value && value instanceof Object) {
                this.selectValue(value);
            }
        };
        PoLookupBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        PoLookupBaseComponent.prototype.setService = function (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            if (service && isTypeof(service, 'string')) {
                this.service = this.defaultService;
                this.service.setUrl(service);
            }
        };
        PoLookupBaseComponent.ctorParameters = function () { return [
            { type: PoLookupFilterService }
        ]; };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoLookupBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoLookupBaseComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-field-value'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "fieldValue", void 0);
        __decorate([
            core.Input('p-field-label'),
            __metadata("design:type", String)
        ], PoLookupBaseComponent.prototype, "fieldLabel", void 0);
        __decorate([
            core.Input('p-filter-params'),
            __metadata("design:type", Object)
        ], PoLookupBaseComponent.prototype, "filterParams", void 0);
        __decorate([
            core.Input('p-field-format'),
            __metadata("design:type", Function)
        ], PoLookupBaseComponent.prototype, "fieldFormat", void 0);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Array)
        ], PoLookupBaseComponent.prototype, "columns", void 0);
        __decorate([
            core.Input('p-filter-service'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoLookupBaseComponent.prototype, "filterService", null);
        __decorate([
            core.Input('p-no-autocomplete'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoLookupBaseComponent.prototype, "noAutocomplete", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoLookupBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoLookupBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoLookupBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Output('p-error'),
            __metadata("design:type", core.EventEmitter)
        ], PoLookupBaseComponent.prototype, "onError", void 0);
        __decorate([
            core.Output('p-selected'),
            __metadata("design:type", core.EventEmitter)
        ], PoLookupBaseComponent.prototype, "selected", void 0);
        PoLookupBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoLookupFilterService])
        ], PoLookupBaseComponent);
        return PoLookupBaseComponent;
    }());

    var poLookupLiteralsDefault = {
        en: {
            modalPrimaryActionLabel: 'Select',
            modalSecondaryActionLabel: 'Cancel',
            modalPlaceholder: 'Search',
            modalTitle: 'Select a record',
            modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
            modalTableNoData: poTableLiteralsDefault.en.noData,
            modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData
        },
        es: {
            modalPrimaryActionLabel: 'Seleccionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Buscar',
            modalTitle: 'Seleccione un registro',
            modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
            modalTableNoData: poTableLiteralsDefault.es.noData,
            modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData
        },
        pt: {
            modalPrimaryActionLabel: 'Selecionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Pesquisar',
            modalTitle: 'Selecione um registro',
            modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
            modalTableNoData: poTableLiteralsDefault.pt.noData,
            modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData
        },
        ru: {
            modalPrimaryActionLabel: 'выбирать',
            modalSecondaryActionLabel: 'отменить',
            modalPlaceholder: 'поиск',
            modalTitle: 'Выберите запись',
            modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
            modalTableNoData: poTableLiteralsDefault.ru.noData,
            modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
            modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData
        }
    };
    /**
     * @docsPrivate
     *
     * Classe base do componente Po Lookup Modal.
     */
    var PoLookupModalBaseComponent = /** @class */ (function () {
        function PoLookupModalBaseComponent() {
            var _this = this;
            this.hasNext = true;
            this.isLoading = false;
            this.page = 1;
            this.pageSize = 10;
            this.primaryAction = {
                action: function () {
                    _this.items.forEach(function (element) {
                        if (element['$selected']) {
                            _this.model.emit(element);
                            _this.poModal.close();
                        }
                    });
                },
                label: this.literals.modalPrimaryActionLabel
            };
            this.searchValue = '';
            this.secondaryAction = {
                action: function () {
                    _this.model.emit(null);
                    _this.poModal.close();
                },
                label: this.literals.modalSecondaryActionLabel
            };
            /** Evento utilizado ao selecionar um registro da tabela. */
            this.model = new core.EventEmitter();
        }
        Object.defineProperty(PoLookupModalBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poLookupLiteralsDefault[browserLanguage()];
            },
            /** Objeto com as literais usadas no `po-lookup-modal`. */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poLookupLiteralsDefault[poLocaleDefault]), poLookupLiteralsDefault[browserLanguage()]), value);
                    if (value.modalTitle) {
                        this.title = this.literals.modalTitle;
                    }
                }
                else {
                    this._literals = poLookupLiteralsDefault[browserLanguage()];
                }
                this.primaryAction.label = this.literals.modalPrimaryActionLabel;
                this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
                this.setTableLiterals();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoLookupModalBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da modal. */
            set: function (value) {
                this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
            },
            enumerable: true,
            configurable: true
        });
        PoLookupModalBaseComponent.prototype.ngOnDestroy = function () {
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.searchSubscription) {
                this.searchSubscription.unsubscribe();
            }
            if (this.showMoreSubscription) {
                this.showMoreSubscription.unsubscribe();
            }
        };
        PoLookupModalBaseComponent.prototype.ngOnInit = function () {
            this.initializeData();
            this.setTableLiterals();
        };
        PoLookupModalBaseComponent.prototype.search = function () {
            var _this = this;
            this.page = 1;
            if (this.searchValue) {
                this.isLoading = true;
                this.searchSubscription = this.getFilteredItems(this.searchValue).subscribe(function (data) {
                    _this.items = data.items;
                    _this.hasNext = data.hasNext;
                    _this.isLoading = false;
                });
            }
            else {
                this.initializeData();
            }
        };
        PoLookupModalBaseComponent.prototype.showMoreEvent = function () {
            var _this = this;
            this.page++;
            this.isLoading = true;
            this.showMoreSubscription = this.getFilteredItems(this.searchValue).subscribe(function (data) {
                data.items.forEach(function (item) {
                    _this.items.push(item);
                });
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            });
        };
        PoLookupModalBaseComponent.prototype.getFilteredItems = function (filter) {
            var _a = this, page = _a.page, pageSize = _a.pageSize, filterParams = _a.filterParams;
            if (this.filterService.getFilteredItems) {
                var filteredParams = this.getFilteredParams(filter);
                return this.filterService.getFilteredItems(filteredParams);
            }
            return this.filterService.getFilteredData(filter, page, pageSize, filterParams);
        };
        PoLookupModalBaseComponent.prototype.getFilteredParams = function (filter) {
            var _a = this, page = _a.page, pageSize = _a.pageSize, filterParams = _a.filterParams, sort = _a.sort;
            var filteredParams = {};
            var order = this.getOrderParam(sort);
            var params = { filter: filter, page: page, pageSize: pageSize, order: order, filterParams: filterParams };
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key]) {
                    filteredParams[key] = params[key];
                }
            }
            return filteredParams;
        };
        PoLookupModalBaseComponent.prototype.getOrderParam = function (sort) {
            if (sort === void 0) { sort = { type: undefined }; }
            var column = sort.column, type = sort.type;
            if (!column) {
                return;
            }
            if (type === exports.PoTableColumnSortType.Descending) {
                return "-" + column.property;
            }
            return "" + column.property;
        };
        PoLookupModalBaseComponent.prototype.initializeData = function () {
            var _this = this;
            this.isLoading = true;
            this.filterSubscription = this.getFilteredItems('').subscribe(function (data) {
                _this.items = data.items;
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            });
        };
        PoLookupModalBaseComponent.prototype.setTableLiterals = function () {
            this.tableLiterals = {
                'noColumns': this.literals.modalTableNoColumns,
                'noData': this.literals.modalTableNoData,
                'loadingData': this.literals.modalTableLoadingData,
                'loadMoreData': this.literals.modalTableLoadMoreData
            };
        };
        __decorate([
            core.ViewChild(PoModalComponent, { static: true }),
            __metadata("design:type", PoModalComponent)
        ], PoLookupModalBaseComponent.prototype, "poModal", void 0);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Array)
        ], PoLookupModalBaseComponent.prototype, "columns", void 0);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array)
        ], PoLookupModalBaseComponent.prototype, "items", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoLookupModalBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoLookupModalBaseComponent.prototype, "title", null);
        __decorate([
            core.Input('p-filter-service'),
            __metadata("design:type", Object)
        ], PoLookupModalBaseComponent.prototype, "filterService", void 0);
        __decorate([
            core.Input('p-filter-params'),
            __metadata("design:type", Object)
        ], PoLookupModalBaseComponent.prototype, "filterParams", void 0);
        __decorate([
            core.Output('p-change-model'),
            __metadata("design:type", core.EventEmitter)
        ], PoLookupModalBaseComponent.prototype, "model", void 0);
        PoLookupModalBaseComponent = __decorate([
            core.Directive()
        ], PoLookupModalBaseComponent);
        return PoLookupModalBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoLookupModalBaseComponent
     */
    var PoLookupModalComponent = /** @class */ (function (_super) {
        __extends(PoLookupModalComponent, _super);
        function PoLookupModalComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.keyUpObservable = null;
            _this.containerHeight = 375;
            _this.tableHeight = 370;
            return _this;
        }
        PoLookupModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.initializeEventInput();
            this.setTableHeight();
        };
        PoLookupModalComponent.prototype.initializeEventInput = function () {
            var _this = this;
            this.keyUpObservable = rxjs.fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(operators.filter(function (e) { return _this.validateEnterPressed(e); }), operators.debounceTime(400));
            this.keyUpObservable.subscribe(function () {
                _this.search();
            });
        };
        PoLookupModalComponent.prototype.openModal = function () {
            this.poModal.open();
        };
        PoLookupModalComponent.prototype.sortBy = function (sort) {
            this.sort = sort;
        };
        PoLookupModalComponent.prototype.setTableHeight = function () {
            if (window.innerHeight < 615) {
                this.tableHeight -= 50;
                this.containerHeight -= 50;
            }
        };
        PoLookupModalComponent.prototype.validateEnterPressed = function (e) {
            return e.keyCode === 13;
        };
        __decorate([
            core.ViewChild('inpsearch', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoLookupModalComponent.prototype, "inputSearchEl", void 0);
        PoLookupModalComponent = __decorate([
            core.Component({
                selector: 'po-lookup-modal',
                template: "<po-modal\n  p-click-out=\"false\"\n  p-hide-close=\"false\"\n  p-size=\"lg\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"title\"\n>\n  <po-field-container class=\"po-lookup-header po-md-6 po-pull-right\" [p-optional]=\"false\">\n    <div class=\"po-field-container-content\">\n      <input\n        #inpsearch\n        class=\"po-input po-input-icon-right\"\n        name=\"contentSearch\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"literals.modalPlaceholder\"\n        type=\"text\"\n      />\n\n      <div class=\"po-field-icon-container-right\">\n        <span #iconLookup class=\"po-icon po-field-icon po-icon-search\" (click)=\"search()\"> </span>\n      </div>\n    </div>\n  </po-field-container>\n\n  <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\n    <po-table\n      class=\"po-md-12\"\n      p-checkbox=\"true\"\n      p-hide-detail=\"true\"\n      p-single-select=\"true\"\n      p-sort=\"true\"\n      [p-columns]=\"columns\"\n      [p-height]=\"tableHeight\"\n      [p-items]=\"items\"\n      [p-literals]=\"tableLiterals\"\n      [p-loading]=\"isLoading\"\n      [p-show-more-disabled]=\"!hasNext\"\n      (p-show-more)=\"showMoreEvent()\"\n      (p-sort-by)=\"sortBy($event)\"\n    >\n    </po-table>\n  </div>\n</po-modal>\n"
            })
        ], PoLookupModalComponent);
        return PoLookupModalComponent;
    }(PoLookupModalBaseComponent));

    /**
     * @docsPrivate
     *
     * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
     */
    var PoLookupModalService = /** @class */ (function () {
        function PoLookupModalService(poComponentInjector) {
            this.poComponentInjector = poComponentInjector;
            this.componentRef = null;
            this.selectValueEvent = new core.EventEmitter();
        }
        /**
         * Método responsável por abrir a modal de busca das informações.
         *
         * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
         * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
         * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
         * @param title {string} Definição do título da modal.
         * @param literals {PoLookupLiterals} Literais utilizadas no componente.
         */
        PoLookupModalService.prototype.openModal = function (params) {
            var _this = this;
            var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
            this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
            this.componentRef.instance.title = title;
            this.componentRef.instance.columns = columns;
            this.componentRef.instance.filterService = service;
            this.componentRef.instance.filterParams = filterParams;
            this.componentRef.instance.literals = literals;
            this.componentRef.instance.model.subscribe(function ($event) {
                _this.selectValue($event);
            });
            this.componentRef.changeDetectorRef.detectChanges();
            this.componentRef.instance.openModal();
        };
        // Este metodo é chamado quando é selecionado um item na lookup modal.
        PoLookupModalService.prototype.selectValue = function (value) {
            if (value) {
                this.selectValueEvent.emit(value);
            }
            this.componentRef.destroy();
        };
        PoLookupModalService.ctorParameters = function () { return [
            { type: PoComponentInjectorService }
        ]; };
        PoLookupModalService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PoComponentInjectorService])
        ], PoLookupModalService);
        return PoLookupModalService;
    }());

    /* istanbul ignore next */
    var providers$4 = [
        PoLookupFilterService,
        PoLookupModalService,
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoLookupComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoLookupComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoLookupBaseComponent
     *
     * @description
     *
     * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
     * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
     * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
     *
     * Importante:
     *
     * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * ```
     * <po-lookup
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </po-lookup>
     * ```
     *
     * @example
     *
     * <example name="po-lookup-basic" title="PO Lookup Basic">
     *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
     *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-labs" title="PO Lookup Labs">
     *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
     *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-hero" title="PO Lookup - Hero">
     *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
     *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
     *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
     *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
     *  <file name="sample-po-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
     *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
     * </example>
     */
    var PoLookupComponent = /** @class */ (function (_super) {
        __extends(PoLookupComponent, _super);
        function PoLookupComponent(poLookupFilterService, poLookupModalService) {
            var _this = _super.call(this, poLookupFilterService) || this;
            _this.poLookupModalService = poLookupModalService;
            return _this;
        }
        Object.defineProperty(PoLookupComponent.prototype, "autocomplete", {
            get: function () {
                return this.noAutocomplete ? 'off' : 'on';
            },
            enumerable: true,
            configurable: true
        });
        PoLookupComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoLookupComponent.prototype.ngOnDestroy = function () {
            if (this.modalSubscription) {
                this.modalSubscription.unsubscribe();
            }
        };
        PoLookupComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoLookupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
         *
         * focusLookup() {
         *   this.lookup.focus();
         * }
         * ```
         */
        PoLookupComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoLookupComponent.prototype.openLookup = function () {
            var _this = this;
            if (this.isAllowedOpenModal()) {
                var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
                this.poLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: this.label, literals: literals });
                if (!this.modalSubscription) {
                    this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(function (element) {
                        _this.selectModel(element);
                    });
                }
            }
        };
        PoLookupComponent.prototype.setViewValue = function (value, object) {
            if (this.fieldFormat) {
                this.setInputValueWipoieldFormat(object);
            }
            else {
                this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
            }
        };
        PoLookupComponent.prototype.getViewValue = function () {
            return this.inputEl.nativeElement.value;
        };
        PoLookupComponent.prototype.searchEvent = function () {
            var value = this.getViewValue();
            if (this.oldValue !== value) {
                this.searchById(value);
            }
        };
        PoLookupComponent.prototype.isAllowedOpenModal = function () {
            if (!this.service) {
                console.warn('No service informed');
            }
            return !!(this.service && !this.disabled);
        };
        PoLookupComponent.prototype.setInputValueWipoieldFormat = function (objectSelected) {
            var isEmpty = Object.keys(objectSelected).length === 0;
            var fieldFormated = this.fieldFormat(objectSelected);
            this.oldValue = isEmpty ? '' : fieldFormated;
            this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
        };
        PoLookupComponent.ctorParameters = function () { return [
            { type: PoLookupFilterService },
            { type: PoLookupModalService }
        ]; };
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoLookupComponent.prototype, "inputEl", void 0);
        PoLookupComponent = __decorate([
            core.Component({
                selector: 'po-lookup',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <input\n      #inp\n      class=\"po-input po-input-icon-right\"\n      type=\"text\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$4
            }),
            __metadata("design:paramtypes", [PoLookupFilterService, PoLookupModalService])
        ], PoLookupComponent);
        return PoLookupComponent;
    }(PoLookupBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de pesquisa que será criado dentro do dropdown do `po-multiselect`.
     */
    var PoMultiselectSearchComponent = /** @class */ (function () {
        function PoMultiselectSearchComponent() {
            /** Evento que será disparado a cada tecla digitada no campo de busca. */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoMultiselectSearchComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder || this.literals.placeholderSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * @default `Buscar`
             */
            set: function (placeholder) {
                this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
            },
            enumerable: true,
            configurable: true
        });
        PoMultiselectSearchComponent.prototype.onChange = function (event) {
            this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
        };
        PoMultiselectSearchComponent.prototype.setFocus = function () {
            this.inputElement.nativeElement.focus();
        };
        PoMultiselectSearchComponent.prototype.clean = function () {
            this.inputElement.nativeElement.value = '';
        };
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoMultiselectSearchComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoMultiselectSearchComponent.prototype, "placeholder", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", Object)
        ], PoMultiselectSearchComponent.prototype, "change", void 0);
        __decorate([
            core.ViewChild('inputElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectSearchComponent.prototype, "inputElement", void 0);
        PoMultiselectSearchComponent = __decorate([
            core.Component({
                selector: 'po-multiselect-search',
                template: "<div class=\"po-field-container-content po-multiselect-container-search\">\n  <div class=\"po-field-icon-container-left\">\n    <span class=\"po-icon po-icon-search po-field-icon\"></span>\n  </div>\n\n  <input\n    #inputElement\n    class=\"po-input po-input-icon-left\"\n    type=\"text\"\n    [placeholder]=\"placeholder\"\n    (keyup)=\"onChange($event)\"\n  />\n</div>\n"
            })
        ], PoMultiselectSearchComponent);
        return PoMultiselectSearchComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
     */
    var PoMultiselectDropdownComponent = /** @class */ (function () {
        function PoMultiselectDropdownComponent() {
            this.scrollTop = 0;
            this.show = false;
            /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
            this.hideSearch = false;
            /** Propriedade que recebe a lista de opções selecionadas. */
            this.selectedValues = [];
            /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
            this.options = [];
            /** Evento disparado a cada tecla digitada na pesquisa. */
            this.changeSearch = new core.EventEmitter();
            /** Evento disparado a cada alteração na lista das opções selecionadas. */
            this.change = new core.EventEmitter();
            /**
             * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
             * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
             * para notificar o componente principal que deve fechar o dropdown.
             */
            this.closeDropdown = new core.EventEmitter();
        }
        Object.defineProperty(PoMultiselectDropdownComponent.prototype, "hasOptions", {
            get: function () {
                var _a;
                return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
            },
            enumerable: true,
            configurable: true
        });
        PoMultiselectDropdownComponent.prototype.scrollTo = function (index) {
            this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
        };
        PoMultiselectDropdownComponent.prototype.isSelectedItem = function (option) {
            return this.selectedValues.some(function (selectedItem) { return selectedItem === option.value; });
        };
        PoMultiselectDropdownComponent.prototype.clickItem = function (check, option) {
            this.updateSelectedValues(check, option);
            if (!this.hideSearch) {
                this.searchElement.setFocus();
            }
        };
        PoMultiselectDropdownComponent.prototype.updateSelectedValues = function (checked, option) {
            if (checked) {
                this.selectedValues.push(option.value);
            }
            else {
                var indexSelectedValues = this.selectedValues.indexOf(option.value);
                this.selectedValues.splice(indexSelectedValues, 1);
            }
            this.change.emit(this.selectedValues);
        };
        PoMultiselectDropdownComponent.prototype.callChangeSearch = function (event) {
            this.changeSearch.emit(event);
        };
        PoMultiselectDropdownComponent.prototype.onKeydown = function (event) {
            if (event.keyCode === 9) {
                this.closeDropdown.emit();
            }
        };
        PoMultiselectDropdownComponent.prototype.controlVisibility = function (toOpen) {
            var _this = this;
            this.show = toOpen;
            setTimeout(function () {
                if (toOpen && _this.searchElement && !_this.hideSearch) {
                    _this.searchElement.setFocus();
                    _this.searchElement.clean();
                }
            });
        };
        __decorate([
            core.Input('p-hide-search'),
            __metadata("design:type", Boolean)
        ], PoMultiselectDropdownComponent.prototype, "hideSearch", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoMultiselectDropdownComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-placeholder-search'),
            __metadata("design:type", String)
        ], PoMultiselectDropdownComponent.prototype, "placeholderSearch", void 0);
        __decorate([
            core.Input('p-selected-values'),
            __metadata("design:type", Array)
        ], PoMultiselectDropdownComponent.prototype, "selectedValues", void 0);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array)
        ], PoMultiselectDropdownComponent.prototype, "options", void 0);
        __decorate([
            core.Output('p-change-search'),
            __metadata("design:type", Object)
        ], PoMultiselectDropdownComponent.prototype, "changeSearch", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", Object)
        ], PoMultiselectDropdownComponent.prototype, "change", void 0);
        __decorate([
            core.Output('p-close-dropdown'),
            __metadata("design:type", Object)
        ], PoMultiselectDropdownComponent.prototype, "closeDropdown", void 0);
        __decorate([
            core.ViewChild('container', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectDropdownComponent.prototype, "container", void 0);
        __decorate([
            core.ViewChild('ulElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectDropdownComponent.prototype, "ulElement", void 0);
        __decorate([
            core.ViewChild('searchElement'),
            __metadata("design:type", PoMultiselectSearchComponent)
        ], PoMultiselectDropdownComponent.prototype, "searchElement", void 0);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoMultiselectDropdownComponent.prototype, "onKeydown", null);
        PoMultiselectDropdownComponent = __decorate([
            core.Component({
                selector: 'po-multiselect-dropdown',
                template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <po-multiselect-search\n    #searchElement\n    *ngIf=\"!hideSearch && hasOptions\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\"\n  >\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!options.length\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <po-multiselect-item\n      *ngFor=\"let option of options\"\n      [p-label]=\"option.label\"\n      [p-selected]=\"isSelectedItem(option)\"\n      (p-change)=\"clickItem($event, option)\"\n    >\n    </po-multiselect-item>\n  </ul>\n</div>\n"
            })
        ], PoMultiselectDropdownComponent);
        return PoMultiselectDropdownComponent;
    }());

    /**
     * @usedBy PoMultiselectComponent
     *
     * @description
     *
     * Define o tipo de busca usado no po-multiselect.
     */

    (function (PoMultiselectFilterMode) {
        /** Verifica se o texto *inicia* com o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["startsWith"] = 0] = "startsWith";
        /** Verifica se o texto *contém* o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["contains"] = 1] = "contains";
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        PoMultiselectFilterMode[PoMultiselectFilterMode["endsWith"] = 2] = "endsWith";
    })(exports.PoMultiselectFilterMode || (exports.PoMultiselectFilterMode = {}));

    var poMultiselectLiteralsDefault = {
        en: {
            noData: 'No data found',
            placeholderSearch: 'Search'
        },
        es: {
            noData: 'Datos no encontrados',
            placeholderSearch: 'Busca'
        },
        pt: {
            noData: 'Nenhum dado encontrado',
            placeholderSearch: 'Buscar'
        },
        ru: {
            noData: 'Данные не найдены',
            placeholderSearch: 'искать'
        }
    };
    /**
     * @description
     *
     * O po-multiselect é um componente de múltipla seleção.
     * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
     *
     * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
     * e mais rápido para a seleção do usuário.
     *
     * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
     * po-select, po-combo ou po-radio-group.
     */
    var PoMultiselectBaseComponent = /** @class */ (function () {
        function PoMultiselectBaseComponent() {
            this._disabled = false;
            this._filterMode = exports.PoMultiselectFilterMode.startsWith;
            this._hideSearch = false;
            this._required = false;
            this._sort = false;
            this.selectedOptions = [];
            this.visibleOptionsDropdown = [];
            this.visibleDisclaimers = [];
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Mensagem apresentada enquanto o campo estiver vazio. */
            this.placeholder = '';
            /**
             * @description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * @default `Buscar`
             */
            this.placeholderSearch = '';
            /** Pode ser informada uma função que será disparada quando houver alterações no ngModel. */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poMultiselectLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-multiselect`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoMultiselectLiterals = {
             *    noData: 'Nenhum dado encontrado',
             *    placeholderSearch: 'Buscar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoMultiselectLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <po-multiselect
             *   [p-literals]="customLiterals">
             * </po-po-multiselect>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poMultiselectLiteralsDefault[poLocaleDefault]), poMultiselectLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poMultiselectLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
             *
             * @default `false`
             */
            set: function (required) {
                this._required = required === '' ? true : convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel();
                this.updateVisibleItems();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "hideSearch", {
            get: function () {
                return this._hideSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
             *
             * @default `false`
             */
            set: function (hideSearch) {
                this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * @description
             *
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
             * Esta lista deve conter os valores e os labels que serão apresentados na tela.
             *
             * > Para atualizar a lista de opções do `po-multiselect` dinamicamente deve-se utilizar dados imutáveis.
             * Exemplo de adição de um novo item com spread:
             * ```
             * this.options = [...this.options, { label: 'Example', value: 'example' }];
             * ```
             */
            set: function (options) {
                this._options = options;
                this.validAndSortOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "sort", {
            get: function () {
                return this._sort;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
             * dropdown.
             *
             * @default `false`
             */
            set: function (sort) {
                this._sort = sort === '' ? true : convertToBoolean(sort);
                this.validAndSortOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterMode", {
            get: function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
             * Valores definidos no enum: PoMultiselectFilterMode
             *
             * @default `startsWith`
             */
            set: function (filterMode) {
                this._filterMode = filterMode in exports.PoMultiselectFilterMode ? filterMode : exports.PoMultiselectFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = exports.PoMultiselectFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = exports.PoMultiselectFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = exports.PoMultiselectFilterMode.endsWith;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        PoMultiselectBaseComponent.prototype.ngOnInit = function () {
            this.updateList(this.options);
        };
        PoMultiselectBaseComponent.prototype.validAndSortOptions = function () {
            if (this.options && this.options.length) {
                removeUndefinedAndNullOptions(this.options);
                removeDuplicatedOptions(this.options);
                this.setUndefinedLabels(this.options);
                if (this.sort) {
                    sortOptionsByProperty(this.options, 'label');
                }
            }
        };
        PoMultiselectBaseComponent.prototype.setUndefinedLabels = function (options) {
            options.forEach(function (option) {
                if (!option['label']) {
                    option.label = option.value;
                }
            });
        };
        PoMultiselectBaseComponent.prototype.updateList = function (options) {
            if (options) {
                this.visibleOptionsDropdown = options;
            }
        };
        PoMultiselectBaseComponent.prototype.callOnChange = function (selectedOptions) {
            if (this.onModelChange) {
                this.onModelChange(this.getValuesFromOptions(selectedOptions));
                this.eventChange(selectedOptions);
            }
        };
        PoMultiselectBaseComponent.prototype.eventChange = function (selectedOptions) {
            if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
                this.change.emit(selectedOptions);
            }
            this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
        };
        PoMultiselectBaseComponent.prototype.getValuesFromOptions = function (selectedOptions) {
            return selectedOptions && selectedOptions.length ? selectedOptions.map(function (option) { return option.value; }) : [];
        };
        PoMultiselectBaseComponent.prototype.getLabelByValue = function (value) {
            var index = this.options.findIndex(function (option) { return option.value === value; });
            return this.options[index].label;
        };
        PoMultiselectBaseComponent.prototype.changeItems = function (selectedValues) {
            this.updateSelectedOptions(selectedValues);
            this.callOnChange(this.selectedOptions);
        };
        PoMultiselectBaseComponent.prototype.searchByLabel = function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                var newOptions_1 = [];
                options.forEach(function (option) {
                    if (option.label && _this.compareMethod(search, option, filterMode)) {
                        newOptions_1.push(option);
                    }
                });
                this.visibleOptionsDropdown = newOptions_1;
            }
        };
        PoMultiselectBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
            switch (filterMode) {
                case exports.PoMultiselectFilterMode.startsWith:
                    return this.startsWith(search, option);
                case exports.PoMultiselectFilterMode.contains:
                    return this.contains(search, option);
                case exports.PoMultiselectFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        PoMultiselectBaseComponent.prototype.startsWith = function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        PoMultiselectBaseComponent.prototype.contains = function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        PoMultiselectBaseComponent.prototype.endsWith = function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        PoMultiselectBaseComponent.prototype.validate = function (c) {
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoMultiselectBaseComponent.prototype.updateSelectedOptions = function (values) {
            var _this = this;
            this.selectedOptions = [];
            values.forEach(function (value) {
                _this.options.forEach(function (option) {
                    if (option.value === value) {
                        _this.selectedOptions.push(option);
                    }
                });
            });
            this.updateVisibleItems();
        };
        PoMultiselectBaseComponent.prototype.writeValue = function (values) {
            values = values || [];
            // Validar se todos os items existem entre os options, senão atualizar o model
            this.updateSelectedOptions(values);
            if (this.selectedOptions.length < values.length) {
                this.callOnChange(this.selectedOptions);
            }
        };
        PoMultiselectBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoMultiselectBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoMultiselectBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoMultiselectBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoMultiselectBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoMultiselectBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoMultiselectBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoMultiselectBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoMultiselectBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoMultiselectBaseComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('p-placeholder-search'),
            __metadata("design:type", String)
        ], PoMultiselectBaseComponent.prototype, "placeholderSearch", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoMultiselectBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMultiselectBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMultiselectBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-hide-search'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMultiselectBaseComponent.prototype, "hideSearch", null);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoMultiselectBaseComponent.prototype, "options", null);
        __decorate([
            core.Input('p-sort'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMultiselectBaseComponent.prototype, "sort", null);
        __decorate([
            core.Input('p-filter-mode'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoMultiselectBaseComponent.prototype, "filterMode", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoMultiselectBaseComponent.prototype, "change", void 0);
        PoMultiselectBaseComponent = __decorate([
            core.Directive()
        ], PoMultiselectBaseComponent);
        return PoMultiselectBaseComponent;
    }());

    var poMultiselectContainerOffset = 8;
    var poMultiselectContainerPositionDefault = 'bottom';
    /* istanbul ignore next */
    var providers$5 = [
        PoControlPositionService,
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoMultiselectComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoMultiselectComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoMultiselectBaseComponent
     *
     * @example
     *
     * <example name="po-multiselect-basic" title="PO Multiselect Basic">
     *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
     *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-labs" title="PO Multiselect Labs">
     *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
     *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
     *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
     *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
     * </example>
     *
     * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
     *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
     *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoMultiselectComponent = /** @class */ (function (_super) {
        __extends(PoMultiselectComponent, _super);
        function PoMultiselectComponent(renderer, changeDetector, controlPosition, el) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.el = el;
            _this.disclaimerOffset = 0;
            _this.dropdownIcon = 'po-icon-arrow-down';
            _this.dropdownOpen = false;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.isCalculateVisibleItems = true;
            _this.onScroll = function () {
                _this.adjustContainerPosition();
            };
            return _this;
        }
        PoMultiselectComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
            this.initialized = true;
        };
        PoMultiselectComponent.prototype.ngDoCheck = function () {
            var inputWidth = this.inputElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
                this.debounceResize();
                this.visibleElement = true;
                return;
            }
        };
        PoMultiselectComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoMultiselectComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
         *
         * focusMultiselect() {
         *   this.multiselect.focus();
         * }
         * ```
         */
        PoMultiselectComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputElement.nativeElement.focus();
            }
        };
        PoMultiselectComponent.prototype.getInputWidth = function () {
            return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
        };
        PoMultiselectComponent.prototype.getDisclaimersWidth = function () {
            var disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
            return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
        };
        PoMultiselectComponent.prototype.calculateVisibleItems = function () {
            var disclaimersWidth = this.getDisclaimersWidth();
            var inputWidth = this.getInputWidth();
            var extraDisclaimerSize = 38;
            var disclaimersVisible = disclaimersWidth[0];
            this.visibleDisclaimers = [];
            if (inputWidth > 0) {
                var sum = 0;
                var i = 0;
                for (i = 0; i < this.selectedOptions.length; i++) {
                    sum += disclaimersWidth[i];
                    this.visibleDisclaimers.push(this.selectedOptions[i]);
                    if (sum > inputWidth) {
                        sum -= disclaimersWidth[i];
                        this.isCalculateVisibleItems = false;
                        break;
                    }
                }
                if (disclaimersVisible || !this.selectedOptions.length) {
                    if (i === this.selectedOptions.length) {
                        this.isCalculateVisibleItems = false;
                        return;
                    }
                    if (sum + extraDisclaimerSize > inputWidth) {
                        this.visibleDisclaimers.splice(-2, 2);
                        var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                    else {
                        this.visibleDisclaimers.splice(-1, 1);
                        var label = '+' + (this.selectedOptions.length - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                }
            }
        };
        PoMultiselectComponent.prototype.updateVisibleItems = function () {
            this.visibleDisclaimers = [].concat(this.selectedOptions);
            this.debounceResize();
            // quando estiver dentro de modal
            if (!this.inputElement.nativeElement.offsetWidth) {
                this.isCalculateVisibleItems = true;
            }
        };
        PoMultiselectComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                _this.calculateVisibleItems();
            }, 200);
        };
        PoMultiselectComponent.prototype.onKeyDown = function (event) {
            if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
                event.preventDefault();
                this.controlDropdownVisibility(true);
                return;
            }
            if (event.keyCode === PoKeyCodeEnum.tab) {
                this.controlDropdownVisibility(false);
                return;
            }
        };
        PoMultiselectComponent.prototype.toggleDropdownVisibility = function () {
            if (this.disabled) {
                return;
            }
            this.controlDropdownVisibility(!this.dropdownOpen);
        };
        PoMultiselectComponent.prototype.openDropdown = function (toOpen) {
            if (toOpen && !this.disabled) {
                this.controlDropdownVisibility(true);
            }
        };
        PoMultiselectComponent.prototype.controlDropdownVisibility = function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        PoMultiselectComponent.prototype.scrollToSelectedOptions = function () {
            var _this = this;
            if (this.selectedOptions && this.selectedOptions.length) {
                var index = this.options.findIndex(function (option) { return option.value === _this.selectedOptions[0].value; });
                this.dropdown.scrollTo(index);
            }
        };
        PoMultiselectComponent.prototype.setVisibleOptionsDropdown = function (options) {
            this.visibleOptionsDropdown = options;
        };
        PoMultiselectComponent.prototype.changeSearch = function (event) {
            var _this = this;
            event && event.value
                ? this.searchByLabel(event.value, this.options, this.filterMode)
                : this.setVisibleOptionsDropdown(this.options);
            // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
            setTimeout(function () { return _this.adjustContainerPosition(); });
        };
        PoMultiselectComponent.prototype.getPlaceholder = function () {
            return this.placeholder && !this.visibleDisclaimers.length ? this.placeholder : '';
        };
        PoMultiselectComponent.prototype.closeDisclaimer = function (value) {
            var index = this.selectedOptions.findIndex(function (option) { return option.value === value; });
            this.selectedOptions.splice(index, 1);
            this.updateVisibleItems();
            this.callOnChange(this.selectedOptions);
        };
        PoMultiselectComponent.prototype.wasClickedOnToggle = function (event) {
            if (!this.inputElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                !this.dropdownElement.nativeElement.contains(event.target) &&
                !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
                this.dropdownOpen) {
                this.controlDropdownVisibility(false);
            }
        };
        PoMultiselectComponent.prototype.adjustContainerPosition = function () {
            this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
        };
        PoMultiselectComponent.prototype.close = function () {
            this.dropdownIcon = 'po-icon-arrow-down';
            this.dropdownOpen = false;
            this.dropdown.controlVisibility(false);
            this.setVisibleOptionsDropdown(this.options);
            this.removeListeners();
        };
        PoMultiselectComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickOutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.updateVisibleItems();
                isMobile() ? _this.adjustContainerPosition() : _this.close();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoMultiselectComponent.prototype.open = function () {
            this.dropdownIcon = 'po-icon-arrow-up';
            this.dropdownOpen = true;
            this.dropdown.controlVisibility(true);
            this.setVisibleOptionsDropdown(this.options);
            this.initializeListeners();
            this.scrollToSelectedOptions();
            this.changeDetector.detectChanges();
            this.setPositionDropdown();
        };
        PoMultiselectComponent.prototype.removeListeners = function () {
            if (this.clickOutListener) {
                this.clickOutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoMultiselectComponent.prototype.setPositionDropdown = function () {
            this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        PoMultiselectComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: PoControlPositionService },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild('dropdownElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectComponent.prototype, "dropdownElement", void 0);
        __decorate([
            core.ViewChild('dropdownElement', { static: true }),
            __metadata("design:type", Object)
        ], PoMultiselectComponent.prototype, "dropdown", void 0);
        __decorate([
            core.ViewChild('disclaimerContainer', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectComponent.prototype, "disclaimerContainerElement", void 0);
        __decorate([
            core.ViewChild('iconElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectComponent.prototype, "iconElement", void 0);
        __decorate([
            core.ViewChild('inputElement', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMultiselectComponent.prototype, "inputElement", void 0);
        PoMultiselectComponent = __decorate([
            core.Component({
                selector: 'po-multiselect',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\" [class.po-multiselect-show]=\"dropdownOpen\">\n    <input\n      #inputElement\n      class=\"po-input po-input-icon-right po-clickable\"\n      readonly\n      type=\"text\"\n      [value]=\"getPlaceholder()\"\n      [disabled]=\"disabled\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconElement\n        class=\"po-icon po-field-icon {{ dropdownIcon }}\"\n        [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        (click)=\"toggleDropdownVisibility()\"\n      >\n      </span>\n    </div>\n\n    <div #disclaimerContainer class=\"po-multiselect-field\" [class.po-multiselect-field-disabled]=\"disabled\">\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n    </div>\n  </div>\n\n  <po-multiselect-dropdown\n    #dropdownElement\n    [p-hide-search]=\"hideSearch\"\n    [p-literals]=\"literals\"\n    [p-options]=\"visibleOptionsDropdown\"\n    [p-selected-values]=\"getValuesFromOptions(selectedOptions)\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\n  >\n  </po-multiselect-dropdown>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$5
            }),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ChangeDetectorRef,
                PoControlPositionService,
                core.ElementRef])
        ], PoMultiselectComponent);
        return PoMultiselectComponent;
    }(PoMultiselectBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
     */
    var PoMultiselectItemComponent = /** @class */ (function () {
        function PoMultiselectItemComponent() {
            /** Esta propriedade indica se o campo está selecionado ou não. */
            this.selected = false;
            /** Evento que será disparado toda vez que o usuário marcar ou desmarcar um item. */
            this.change = new core.EventEmitter();
        }
        PoMultiselectItemComponent.prototype.itemClicked = function () {
            this.selected = !this.selected;
            this.change.emit(this.selected);
        };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoMultiselectItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-selected'),
            __metadata("design:type", Boolean)
        ], PoMultiselectItemComponent.prototype, "selected", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", Object)
        ], PoMultiselectItemComponent.prototype, "change", void 0);
        PoMultiselectItemComponent = __decorate([
            core.Component({
                selector: 'po-multiselect-item',
                template: "<li [class.po-multiselect-item-selected]=\"selected\" (click)=\"itemClicked()\">\n  <a class=\"po-multiselect-item\">\n    <input\n      [checked]=\"selected\"\n      class=\"po-multiselect-checkbox-input\"\n      [class.po-multiselect-checkbox-input-checked]=\"selected\"\n      type=\"checkbox\"\n    />\n\n    <label class=\"po-multiselect-checkbox-label po-clickable\">\n      {{ label }}\n    </label>\n  </a>\n</li>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoMultiselectItemComponent);
        return PoMultiselectItemComponent;
    }());

    var poRichTextBodyCommands = [
        'bold',
        'italic',
        'underline',
        'justifyleft',
        'justifycenter',
        'justifyright',
        'justifyfull',
        'insertUnorderedList',
        'Createlink'
    ];
    var PoRichTextBodyComponent = /** @class */ (function () {
        function PoRichTextBodyComponent() {
            this.change = new core.EventEmitter();
            this.commands = new core.EventEmitter();
            this.selectedLink = new core.EventEmitter();
            this.shortcutCommand = new core.EventEmitter();
            this.value = new core.EventEmitter();
            this.onAnchorClick = function (event) {
                var target = event.target, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
                var url;
                var elementLink;
                if (ctrlKey || metaKey) {
                    if (event.path) {
                        event.path.forEach(function (element) {
                            if (element.nodeName === 'A') {
                                url = element.href;
                                elementLink = element;
                            }
                        });
                    }
                    else {
                        url = target.attributes.href.value;
                        elementLink = target;
                    }
                    openExternalLink(url);
                    elementLink.classList.remove('po-clickable');
                }
            };
        }
        PoRichTextBodyComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.bodyElement.nativeElement.designMode = 'on';
            // timeout necessário para setar o valor vindo do writeValue do componente principal.
            setTimeout(function () { return _this.updateValueWithModelValue(); });
        };
        PoRichTextBodyComponent.prototype.executeCommand = function (command) {
            this.bodyElement.nativeElement.focus();
            if (typeof command === 'object') {
                if (command.command === 'InsertHTML') {
                    var linkCommand = command.command, urlLink = command.value.urlLink, urlLinkText = command.value.urlLinkText;
                    this.handleCommandLink(linkCommand, urlLink, urlLinkText);
                }
                else {
                    document.execCommand(command.command, false, command.value);
                }
            }
            else {
                document.execCommand(command, false, null);
            }
            this.updateModel();
            this.value.emit(this.modelValue);
        };
        PoRichTextBodyComponent.prototype.linkEditing = function (event) {
            this.isLinkEditing = !!event;
        };
        PoRichTextBodyComponent.prototype.onBlur = function () {
            var _this = this;
            if (this.modelValue !== this.valueBeforeChange) {
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout(function () {
                    _this.change.emit(_this.modelValue);
                }, 200);
            }
        };
        PoRichTextBodyComponent.prototype.focus = function () {
            this.bodyElement.nativeElement.focus();
        };
        PoRichTextBodyComponent.prototype.onClick = function () {
            this.emitSelectionCommands();
        };
        PoRichTextBodyComponent.prototype.onFocus = function () {
            this.valueBeforeChange = this.modelValue;
        };
        PoRichTextBodyComponent.prototype.onKeyDown = function (event) {
            var keyK = event.keyCode === PoKeyCodeEnum.keyK;
            var isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
            if (isLinkShortcut) {
                event.preventDefault();
                this.shortcutCommand.emit();
            }
            this.toggleCursorOnLink(event, 'add');
        };
        PoRichTextBodyComponent.prototype.onKeyUp = function (event) {
            this.toggleCursorOnLink(event, 'remove');
            this.removeBrElement();
            this.updateModel();
            this.emitSelectionCommands();
        };
        PoRichTextBodyComponent.prototype.onPaste = function () {
            this.addClickListenerOnAnchorElements();
            this.update();
        };
        PoRichTextBodyComponent.prototype.update = function () {
            var _this = this;
            setTimeout(function () { return _this.updateModel(); });
            setTimeout(function () {
                _this.removeBrElement();
                _this.updateModel();
                _this.emitSelectionCommands();
            });
        };
        PoRichTextBodyComponent.prototype.addClickListenerOnAnchorElements = function () {
            var _this = this;
            this.bodyElement.nativeElement.querySelectorAll('a').forEach(function (element) {
                element.addEventListener('click', _this.onAnchorClick);
            });
        };
        PoRichTextBodyComponent.prototype.emitSelectionCommands = function () {
            var commands = poRichTextBodyCommands.filter(function (command) { return document.queryCommandState(command); });
            var rgbColor = document.queryCommandValue('ForeColor');
            var hexColor;
            if (!isIE()) {
                hexColor = this.rgbToHex(rgbColor);
            }
            if (this.isCursorPositionedInALink()) {
                commands.push('Createlink');
            }
            this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
            this.commands.emit({ commands: commands, hexColor: hexColor });
        };
        PoRichTextBodyComponent.prototype.getTextSelection = function () {
            var textSelection = document.getSelection();
            if (!textSelection) {
                return;
            }
            var focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
            var anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
            var node = focusNode || anchorNode;
            var tagName;
            if (node) {
                tagName = node['tagName'] || node['nodeName'];
                return {
                    node: node,
                    tagName: tagName
                };
            }
        };
        PoRichTextBodyComponent.prototype.handleCommandLink = function (linkCommand, urlLink, urlLinkText) {
            if (isIE()) {
                this.insertHtmlLinkElement(urlLink, urlLinkText);
            }
            else {
                // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
                var linkValue = isFirefox() && !this.isLinkEditing
                    ? "&nbsp;" + this.makeLinkTag(urlLink, urlLinkText) + "&nbsp;"
                    : this.makeLinkTag(urlLink, urlLinkText);
                document.execCommand(linkCommand, false, linkValue);
            }
            this.addClickListenerOnAnchorElements();
        };
        // tratamento específico para IE pois não suporta o comando 'insertHTML'.
        PoRichTextBodyComponent.prototype.insertHtmlLinkElement = function (urlLink, urlLinkText) {
            var selection = document.getSelection();
            var selectionRange = selection.getRangeAt(0);
            var elementLink = document.createElement('a');
            var elementlinkText = document.createTextNode(urlLinkText);
            elementLink.appendChild(elementlinkText);
            elementLink.href = urlLink;
            elementLink.setAttribute('target', '_blank');
            elementLink.classList.add('po-rich-text-link');
            selectionRange.deleteContents();
            selectionRange.insertNode(elementLink);
        };
        PoRichTextBodyComponent.prototype.isCursorPositionedInALink = function () {
            var textSelection = this.getTextSelection();
            this.linkElement = undefined;
            var isLink = false;
            if (textSelection && textSelection.node && textSelection.tagName === 'A') {
                this.linkElement = textSelection.node;
                isLink = true;
            }
            else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
                isLink = true;
            }
            else {
                isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
            }
            return isLink;
        };
        PoRichTextBodyComponent.prototype.isParentNodeAnchor = function (textSelection) {
            var element = textSelection.node;
            var isLink = false;
            while (element && (element.tagName !== null || element.nodeName !== null)) {
                if (element.tagName === 'A' || element.nodeName === 'A') {
                    this.linkElement = element;
                    isLink = true;
                    return isLink;
                }
                element = element.parentElement || element.parentNode;
            }
            this.linkElement = undefined;
            return isLink;
        };
        PoRichTextBodyComponent.prototype.makeLinkTag = function (urlLink, urlLinkText) {
            return "<a class=\"po-rich-text-link\" href=\"" + urlLink + "\" target=\"_blank\">" + (urlLinkText || urlLink) + "</a>";
        };
        // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
        PoRichTextBodyComponent.prototype.removeBrElement = function () {
            var bodyElement = this.bodyElement.nativeElement;
            if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
                bodyElement.querySelector('br').remove();
            }
        };
        PoRichTextBodyComponent.prototype.rgbToHex = function (rgb) {
            // Tratamento necessário para converter o código rgb para hexadecimal.
            var sep = rgb.indexOf(',') > -1 ? ',' : ' ';
            rgb = rgb.substr(4).split(')')[0].split(sep);
            var r = (+rgb[0]).toString(16);
            var g = (+rgb[1]).toString(16);
            var b = (+rgb[2]).toString(16);
            if (r.length === 1) {
                r = '0' + r;
            }
            if (g.length === 1) {
                g = '0' + g;
            }
            if (b.length === 1) {
                b = '0' + b;
            }
            return '#' + r + g + b;
        };
        PoRichTextBodyComponent.prototype.toggleCursorOnLink = function (event, action) {
            var selection = document.getSelection();
            var element = selection.focusNode ? selection.focusNode.parentNode : undefined;
            var isCtrl = event.key === 'Control';
            var isCommand = event.key === 'Meta';
            var isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
            if (element) {
                if (isOnCtrlLink) {
                    element['classList'][action]('po-clickable');
                }
                else {
                    var isClickable = element['classList'] && element['classList'].contains('po-clickable');
                    if (isClickable) {
                        element['classList'].remove('po-clickable');
                    }
                }
                this.updateModel();
            }
        };
        PoRichTextBodyComponent.prototype.updateModel = function () {
            this.modelValue = this.bodyElement.nativeElement.innerHTML;
            this.value.emit(this.modelValue);
        };
        PoRichTextBodyComponent.prototype.updateValueWithModelValue = function () {
            if (this.modelValue) {
                this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
            }
        };
        PoRichTextBodyComponent.prototype.verifyCursorPositionInFirefoxIEEdge = function () {
            var textSelection = document.getSelection();
            var nodeLink = textSelection.focusNode;
            var isLink = false;
            if (nodeLink && nodeLink.nodeName === 'A') {
                this.linkElement = nodeLink;
                isLink = true;
            }
            else {
                var range = textSelection.getRangeAt(0);
                var fragmentDocument = range.cloneContents();
                var element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
                this.linkElement = element && element.nodeName === 'A' ? element : undefined;
                isLink = !!this.linkElement;
            }
            return isLink;
        };
        __decorate([
            core.ViewChild('bodyElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoRichTextBodyComponent.prototype, "bodyElement", void 0);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", String)
        ], PoRichTextBodyComponent.prototype, "height", void 0);
        __decorate([
            core.Input('p-model-value'),
            __metadata("design:type", String)
        ], PoRichTextBodyComponent.prototype, "modelValue", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoRichTextBodyComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", String)
        ], PoRichTextBodyComponent.prototype, "readonly", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", Object)
        ], PoRichTextBodyComponent.prototype, "change", void 0);
        __decorate([
            core.Output('p-commands'),
            __metadata("design:type", Object)
        ], PoRichTextBodyComponent.prototype, "commands", void 0);
        __decorate([
            core.Output('p-selected-link'),
            __metadata("design:type", Object)
        ], PoRichTextBodyComponent.prototype, "selectedLink", void 0);
        __decorate([
            core.Output('p-shortcut-command'),
            __metadata("design:type", Object)
        ], PoRichTextBodyComponent.prototype, "shortcutCommand", void 0);
        __decorate([
            core.Output('p-value'),
            __metadata("design:type", Object)
        ], PoRichTextBodyComponent.prototype, "value", void 0);
        PoRichTextBodyComponent = __decorate([
            core.Component({
                selector: 'po-rich-text-body',
                template: "<div\n  #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  (paste)=\"onPaste()\"\n></div>\n"
            })
        ], PoRichTextBodyComponent);
        return PoRichTextBodyComponent;
    }());

    /**
     * @description
     *
     * O componente `po-rich-text` é um editor de textos enriquecidos.
     *
     * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
     *
     * > No navegador Internet Explorer não é possível alterar a cor do texto.
     */
    var PoRichTextBaseComponent = /** @class */ (function () {
        function PoRichTextBaseComponent() {
            this.invalid = false;
            this.onChangeModel = null;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * @description
             *
             * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
             */
            this.errorMessage = '';
            /** Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado. */
            this.change = new core.EventEmitter();
            /** Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado. */
            this.changeModel = new core.EventEmitter();
        }
        Object.defineProperty(PoRichTextBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da área de edição de texto.
             *
             * > Altura mínima do componente é `94` e a altura máxima é `262`.
             */
            set: function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: function (value) {
                this._placeholder = value || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (value) {
                this._readonly = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (value) {
                this._required = convertToBoolean(value);
                this.validateModel(this.value);
            },
            enumerable: true,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoRichTextBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        PoRichTextBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoRichTextBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoRichTextBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, false, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoRichTextBaseComponent.prototype.writeValue = function (value) {
            this.value = value;
        };
        // Executa a função onChange
        PoRichTextBaseComponent.prototype.updateModel = function (value) {
            // Quando o rich-text não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(value);
            }
        };
        PoRichTextBaseComponent.prototype.validateModel = function (value) {
            if (this.validatorChange) {
                this.validatorChange(value);
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoRichTextBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-error-message'),
            __metadata("design:type", String)
        ], PoRichTextBaseComponent.prototype, "errorMessage", void 0);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoRichTextBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoRichTextBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoRichTextBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoRichTextBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoRichTextBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoRichTextBaseComponent.prototype, "placeholder", null);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoRichTextBaseComponent.prototype, "readonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoRichTextBaseComponent.prototype, "required", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoRichTextBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('p-change-model'),
            __metadata("design:type", core.EventEmitter)
        ], PoRichTextBaseComponent.prototype, "changeModel", void 0);
        PoRichTextBaseComponent = __decorate([
            core.Directive()
        ], PoRichTextBaseComponent);
        return PoRichTextBaseComponent;
    }());

    /* istanbul ignore next */
    var providers$6 = [
        {
            provide: forms.NG_VALUE_ACCESSOR,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoRichTextComponent; }),
            multi: true
        },
        {
            provide: forms.NG_VALIDATORS,
            // tslint:disable-next-line
            useExisting: core.forwardRef(function () { return PoRichTextComponent; }),
            multi: true
        }
    ];
    /**
     * @docsExtends PoRichTextBaseComponent
     *
     * @example
     *
     * <example name="po-rich-text-basic" title="PO Rich Text Basic">
     *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
     *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-rich-text-labs" title="PO Rich Text Labs">
     *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
     *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
     *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
     * </example>
     */
    var PoRichTextComponent = /** @class */ (function (_super) {
        __extends(PoRichTextComponent, _super);
        function PoRichTextComponent(element) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.listener = _this.validateClassesForRequired.bind(_this);
            return _this;
        }
        Object.defineProperty(PoRichTextComponent.prototype, "errorMsg", {
            get: function () {
                return this.errorMessage !== '' && !this.value && this.required && this.invalid ? this.errorMessage : '';
            },
            enumerable: true,
            configurable: true
        });
        PoRichTextComponent.prototype.ngAfterViewInit = function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            this.addKeyListeners();
            this.verifyAutoFocus();
        };
        PoRichTextComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangeModel) {
                this.element.nativeElement.removeEventListener('keyup', this.listener);
                this.element.nativeElement.removeEventListener('keydown', this.listener);
                this.element.nativeElement.removeEventListener('cut', this.listener);
                this.element.nativeElement.removeEventListener('paste', this.listener);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoRichTextComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
         *
         * focusRichText() {
         *   this.richText.focus();
         * }
         * ```
         */
        PoRichTextComponent.prototype.focus = function () {
            this.bodyElement.focus();
        };
        PoRichTextComponent.prototype.onChangeValue = function (value) {
            this.change.emit(value);
        };
        PoRichTextComponent.prototype.updateValue = function (value) {
            this.value = value;
            this.invalid = !value;
            this.controlChangeModelEmitter(this.value);
            this.updateModel(this.value);
        };
        PoRichTextComponent.prototype.addKeyListeners = function () {
            if (!this.onChangeModel) {
                this.element.nativeElement.addEventListener('keyup', this.listener);
                this.element.nativeElement.addEventListener('keydown', this.listener);
                this.element.nativeElement.addEventListener('cut', this.listener);
                this.element.nativeElement.addEventListener('paste', this.listener);
            }
        };
        PoRichTextComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        PoRichTextComponent.prototype.verifyAutoFocus = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoRichTextComponent.prototype.validateClassesForRequired = function () {
            var _this = this;
            setTimeout(function () {
                var value = _this.value;
                var element = _this.element.nativeElement;
                if (!value && _this.required) {
                    element.classList.add('ng-invalid');
                    element.classList.add('ng-dirty');
                }
                else {
                    element.classList.remove('ng-invalid');
                }
            });
        };
        PoRichTextComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ViewChild(PoRichTextBodyComponent, { static: true }),
            __metadata("design:type", PoRichTextBodyComponent)
        ], PoRichTextComponent.prototype, "bodyElement", void 0);
        PoRichTextComponent = __decorate([
            core.Component({
                selector: 'po-rich-text',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <po-rich-text-body\n      #richTextBody\n      [p-height]=\"height\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-selected-link)=\"richTextModal.selectedLink($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\"\n    >\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar\n      #richTextToolbar\n      [p-readonly]=\"readonly\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n      (p-modal)=\"richTextModal.openModal($event)\"\n    >\n    </po-rich-text-toolbar>\n\n    <po-rich-text-modal\n      #richTextModal\n      (p-command)=\"richTextBody.executeCommand($event)\"\n      (p-link-editing)=\"richTextBody.linkEditing($event)\"\n    >\n    </po-rich-text-modal>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n</po-field-container>\n",
                providers: providers$6
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoRichTextComponent);
        return PoRichTextComponent;
    }(PoRichTextBaseComponent));

    var poRichTextLiteralsDefault = {
        en: {
            bold: 'Bold',
            italic: 'Italic',
            underline: 'Underline',
            left: 'Left',
            center: 'Center',
            right: 'Right',
            justify: 'Justify',
            textColor: 'Text color',
            unorderedList: 'Bulleted list',
            insertLink: 'Insert link',
            linkTextLabel: 'Text with link',
            linkUrlTextHelper: 'Paste in the text box below the copied browser link',
            linkUrlTextPlaceholder: 'Enter the link address that will be attached to the text.',
            cancel: 'Cancel',
            editLink: 'Edit link',
            insert: 'Insert',
            insertImage: 'Insert image',
            urlImage: 'URL image'
        },
        es: {
            bold: 'Negrita',
            italic: 'Cursiva',
            underline: 'Subrayado',
            left: 'Izquierda',
            center: 'Centro',
            right: 'Derecha',
            justify: 'Justificado',
            textColor: 'Color del texto',
            unorderedList: 'Lista con viñetas',
            insertLink: 'Insertar el link',
            linkTextLabel: 'Texto con enlace',
            linkUrlTextHelper: 'Pegue en el cuadro de texto debajo del enlace del navegador copiado',
            linkUrlTextPlaceholder: 'Ingrese la dirección del enlace que se adjuntará al texto.',
            cancel: 'Cancelar',
            editLink: 'Editar enlace',
            insert: 'Insertar',
            insertImage: 'Insertar imagen',
            urlImage: 'Imagen URL'
        },
        pt: {
            bold: 'Negrito',
            italic: 'Itálico',
            underline: 'Sublinhado',
            left: 'Esquerda',
            center: 'Centro',
            right: 'Direita',
            justify: 'Justificado',
            textColor: 'Cor do texto',
            unorderedList: 'Lista com marcadores',
            insertLink: 'Inserir link',
            linkTextLabel: 'Texto com link',
            linkUrlTextHelper: 'Cole na caixa de texto abaixo o link copiado do navegador',
            linkUrlTextPlaceholder: 'Insira o endereço do link que será anexado ao texto',
            cancel: 'Cancelar',
            editLink: 'Editar link',
            insert: 'Inserir',
            insertImage: 'Inserir imagem',
            urlImage: 'Imagem em URL'
        }
    };

    /**
     * @docsPrivate
     *
     * @usedBy PoRichTextComponent
     *
     * @description
     *
     * *Enum* `PoRichTextModalType` para especificação dos tipos de modal.
     */
    var PoRichTextModalType;
    (function (PoRichTextModalType) {
        /**
         * Exibe os dados para inserção de imagens.
         */
        PoRichTextModalType["Image"] = "image";
        /**
         * Exibe os dados para inserção de link e texto customizado para link.
         */
        PoRichTextModalType["Link"] = "link";
    })(PoRichTextModalType || (PoRichTextModalType = {}));

    /**
     * @description
     *
     * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
     *
     * - success,
     * - warning,
     * - error,
     * - information.
     *
     * Cada um destes métodos recebe como parâmetro o objeto "PoNotification" que contém os dados da mensagem e o
     * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
     *
     * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
     * Após este tempo a mesma é removida automaticamente.
     *
     */
    var PoNotificationBaseService = /** @class */ (function () {
        function PoNotificationBaseService() {
            // Array responsável por guardar a instância de po-toaster's superiores.
            this.stackTop = [];
            // Array responsável por guardar a instância de po-toaster's inferiores.
            this.stackBottom = [];
            // Duração da notificação ativa.
            this.defaultDuration = 10000;
        }
        /**
         * Emite uma notificação de sucesso.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
         */
        PoNotificationBaseService.prototype.success = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Success));
        };
        /**
         * Emite uma notificação de atenção.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.warning = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Warning));
        };
        /**
         * Emite uma notificação de erro.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.error = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Error));
        };
        /**
         * Emite uma notificação de informação.
         *
         * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        PoNotificationBaseService.prototype.information = function (notification) {
            this.createToaster(this.buildToaster(notification, exports.PoToasterType.Information));
        };
        /**
         * Define em milissegundos a duração padrão para as notificações.
         *
         * > Padrão 10 segundos.
         *
         * @param {number} defaultDuration Duração em milisegundos
         */
        PoNotificationBaseService.prototype.setDefaultDuration = function (defaultDuration) {
            this.defaultDuration = defaultDuration;
        };
        /**
         * @docsPrivate
         *
         * Cria um objeto do tipo PoToaster de acordo o tipo.
         *
         * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
         */
        PoNotificationBaseService.prototype.buildToaster = function (notification, type) {
            var _this = this;
            var index = 0;
            var orientation;
            if (notification.orientation === undefined ||
                notification.orientation === exports.PoToasterOrientation.Bottom) {
                index = this.stackBottom.length;
                orientation = exports.PoToasterOrientation.Bottom;
            }
            else {
                index = this.stackTop.length;
                orientation = exports.PoToasterOrientation.Top;
            }
            var toaster = {
                componentRef: undefined,
                message: notification.message || notification,
                type: type,
                orientation: orientation,
                action: notification.action,
                actionLabel: notification.actionLabel,
                position: index,
                duration: notification.duration || this.defaultDuration
            };
            if (notification.action) {
                toaster.action = function (param) {
                    notification.action();
                    _this.destroyToaster(param.componentRef);
                };
            }
            return toaster;
        };
        return PoNotificationBaseService;
    }());

    /**
     * @docsExtends PoNotificationBaseService
     *
     * @example
     *
     * <example name="po-notification-basic" title="PO Notification Basic">
     *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
     *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-notification-labs" title="PO Notification Labs">
     *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
     *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-notification-sales" title="PO Notification - Sales">
     *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
     *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
     * </example>
     */
    var PoNotificationService = /** @class */ (function (_super) {
        __extends(PoNotificationService, _super);
        function PoNotificationService(poComponentInjector) {
            var _this = _super.call(this) || this;
            _this.poComponentInjector = poComponentInjector;
            return _this;
        }
        PoNotificationService.prototype.createToaster = function (toaster) {
            var _this = this;
            var componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
            toaster.componentRef = componentRef;
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.configToaster(toaster);
            if (toaster.orientation === exports.PoToasterOrientation.Top) {
                this.stackTop.push(componentRef);
            }
            else {
                this.stackBottom.push(componentRef);
            }
            this.observableOnClose(componentRef);
            if (toaster.action === undefined) {
                setTimeout(function () {
                    _this.destroyToaster(componentRef);
                }, toaster.duration);
            }
        };
        PoNotificationService.prototype.destroyToaster = function (toaster) {
            var stack;
            if (toaster.instance.orientation === exports.PoToasterOrientation.Top) {
                stack = this.stackTop;
            }
            else {
                stack = this.stackBottom;
            }
            var index = stack.indexOf(toaster);
            stack.splice(index, 1);
            this.poComponentInjector.destroyComponentInApplication(toaster);
            for (var count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        };
        PoNotificationService.prototype.observableOnClose = function (componentRef) {
            var _this = this;
            componentRef.instance.observableOnClose.subscribe(function () {
                _this.destroyToaster(componentRef);
            });
        };
        PoNotificationService.ctorParameters = function () { return [
            { type: PoComponentInjectorService }
        ]; };
        PoNotificationService.ɵprov = core.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(core.ɵɵinject(PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
        PoNotificationService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [PoComponentInjectorService])
        ], PoNotificationService);
        return PoNotificationService;
    }(PoNotificationBaseService));

    // Enum de status de envio dos arquivos.
    var PoUploadStatus;
    (function (PoUploadStatus) {
        // Enviou com sucesso.
        PoUploadStatus[PoUploadStatus["Uploaded"] = 0] = "Uploaded";
        // Está enviando.
        PoUploadStatus[PoUploadStatus["Uploading"] = 1] = "Uploading";
        // Ocorreu algum erro no envio.
        PoUploadStatus[PoUploadStatus["Error"] = 2] = "Error";
        // Não enviou ou aconteceu algum erro.
        PoUploadStatus[PoUploadStatus["None"] = 3] = "None";
    })(PoUploadStatus || (PoUploadStatus = {}));

    // Classe responsável pelo arquivo do PO Upload
    var PoUploadFile = /** @class */ (function () {
        function PoUploadFile(file) {
            if (file) {
                this.name = file.name;
                this.displayName = file.name + " - " + this.getFileSize(file.size);
                this.extension = this.getExtension(file.name);
                this.size = file.size;
                this.rawFile = file;
                this.uid = this.generateUUID();
                this.status = PoUploadStatus.None;
            }
        }
        PoUploadFile.prototype.getExtension = function (value) {
            if (value) {
                var extension = value.substr(value.lastIndexOf('.'));
                return extension.toLowerCase();
            }
            return '';
        };
        PoUploadFile.prototype.generateUUID = function () {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
        };
        // Retorna o tamanho do arquivo em KBytes.
        PoUploadFile.prototype.getFileSize = function (size) {
            var kbSize = 0;
            if (size) {
                kbSize = Math.ceil(size / 1024);
            }
            return kbSize + " KB";
        };
        return PoUploadFile;
    }());

    var PoUploadBaseService = /** @class */ (function () {
        function PoUploadBaseService(http) {
            this.http = http;
            this.formField = 'files';
            this.requests = [];
        }
        /**
         * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
         *
         * @param url URL da requisição a ser efetuada.
         * @param files Arquivos a serem enviados.
         * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
         * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
         * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
         * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
         */
        PoUploadBaseService.prototype.upload = function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
            var filesLength = files.length;
            var uploadEvent = {
                data: {},
                file: null
            };
            for (var i = 0; i < filesLength; i++) {
                var formData = new FormData();
                var file = files[i];
                var fileName = file.rawFile.name;
                formData.append(this.formField, file.rawFile, fileName);
                // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
                if (tOnUpload) {
                    uploadEvent['file'] = file;
                    tOnUpload.emit(uploadEvent);
                    formData.append('data', JSON.stringify(uploadEvent.data));
                }
                this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
            }
        };
        PoUploadBaseService.prototype.sendFile = function (url, file, formData, uploadCallback, successCallback, errorCallback) {
            var _this = this;
            var request = this.getRequest(url, formData).subscribe(function (event) {
                if (event.type === http.HttpEventType.UploadProgress) {
                    _this.addRequest(file, request);
                    var percentDone = Math.round((100 * event.loaded) / event.total);
                    uploadCallback(file, percentDone);
                }
                else if (event instanceof http.HttpResponse) {
                    // Sucesso, arquivos enviados.
                    successCallback(file, event);
                }
            }, function (err) {
                errorCallback(file, err);
            });
        };
        PoUploadBaseService.prototype.getRequest = function (url, formData) {
            var req = new http.HttpRequest('POST', url, formData, {
                reportProgress: true
            });
            return this.http.request(req);
        };
        PoUploadBaseService.prototype.stopRequestByFile = function (file, callback) {
            var requestObj = this.requests.find(function (req) {
                return req.file.uid === file.uid;
            });
            if (requestObj) {
                var request = requestObj.request;
                request.unsubscribe();
                this.removeRequest(requestObj);
                callback();
            }
        };
        PoUploadBaseService.prototype.removeRequest = function (requestObj) {
            var index = this.requests.indexOf(requestObj);
            this.requests.splice(index, 1);
        };
        PoUploadBaseService.prototype.addRequest = function (file, request) {
            var hasRequest = this.requests.some(function (req) {
                return req.file.uid === file.uid;
            });
            if (!hasRequest) {
                this.requests.push({ file: file, request: request });
            }
        };
        PoUploadBaseService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoUploadBaseService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoUploadBaseService);
        return PoUploadBaseService;
    }());

    var PoUploadService = /** @class */ (function (_super) {
        __extends(PoUploadService, _super);
        function PoUploadService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoUploadService = __decorate([
            core.Injectable()
        ], PoUploadService);
        return PoUploadService;
    }(PoUploadBaseService));

    var poUploadLiteralsDefault = {
        en: {
            files: 'files',
            folders: 'folders',
            selectFile: 'Select file',
            selectFiles: 'Select files',
            selectFolder: 'Select folder',
            deleteFile: 'Delete',
            cancel: 'Cancel',
            tryAgain: 'Try again',
            startSending: 'Start sending',
            dragFilesHere: 'Drag files here',
            dragFoldersHere: 'Drag folders here',
            selectFilesOnComputer: 'or select files on your computer',
            selectFolderOnComputer: 'or select folder on your computer',
            dropFilesHere: 'Drop files here',
            dropFoldersHere: 'Drop folders here',
            invalidDropArea: '{0} were not dropped in the correct area',
            invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
            invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
            invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
            invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
            numberOfFilesAllowed: '{0} file(s) allowed',
            allowedFormats: 'Accepted file formats: {0}.',
            allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
            maxFileSizeAllowed: 'Size limit per file: {0} maximum',
            minFileSizeAllowed: 'Size limit per file: {0} minimum',
            errorOccurred: 'An error has occurred',
            sentWithSuccess: 'Sent with success'
        },
        es: {
            files: 'archivos',
            folders: 'carpetas',
            selectFile: 'Seleccionar archivo',
            selectFiles: 'Seleccionar archivos',
            selectFolder: 'Seleccionar carpeta',
            deleteFile: 'Borrar',
            cancel: 'Cancelar',
            tryAgain: 'Intentar de nuevo',
            startSending: 'Iniciar carga',
            dragFilesHere: 'Arrastra los archivos aquí',
            dragFoldersHere: 'Arrastra las carpetas aquí',
            selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
            selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
            dropFilesHere: 'Deja los archivos aquí',
            dropFoldersHere: 'Deja las carpetas aquí',
            invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
            invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
            invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
            invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
            invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
            numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
            allowedFormats: 'Formatos aceptados: {0}.',
            allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
            maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
            minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
            errorOccurred: 'Ocurrio un error',
            sentWithSuccess: 'Enviado con éxito'
        },
        pt: {
            files: 'arquivos',
            folders: 'diretórios',
            selectFile: 'Selecionar arquivo',
            selectFiles: 'Selecionar arquivos',
            selectFolder: 'Selecionar pasta',
            deleteFile: 'Excluir',
            cancel: 'Cancelar',
            tryAgain: 'Tentar Novamente',
            startSending: 'Iniciar envio',
            dragFilesHere: 'Arraste os arquivos aqui',
            dragFoldersHere: 'Arraste as pastas aqui',
            selectFilesOnComputer: 'ou selecione os arquivos no computador',
            selectFolderOnComputer: 'ou selecione a pasta no computador',
            dropFilesHere: 'Solte os arquivos aqui',
            dropFoldersHere: 'Solte as pastas aqui',
            invalidDropArea: 'Os {0} não foram inseridos no local correto',
            invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
            invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
            invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
            invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
            numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
            allowedFormats: 'Formatos adotados: {0}.',
            allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
            maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
            minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
            errorOccurred: 'Ocorreu um erro',
            sentWithSuccess: 'Enviado com sucesso'
        },
        ru: {
            files: 'файлы',
            folders: 'папки с файлами',
            selectFile: 'Выберите файл',
            selectFiles: 'Выберите файлы',
            selectFolder: 'Выберите папку с файлами',
            deleteFile: 'удалять',
            cancel: 'отменить',
            tryAgain: 'попробуйте еще раз',
            startSending: 'Начать загрузку',
            dragFilesHere: 'Перетащите файлы сюда',
            dragFoldersHere: 'Перетащите сюда папки',
            selectFilesOnComputer: 'или выберите файлы на компьютере',
            selectFolderOnComputer: 'или выберите папку на вашем компьютере',
            dropFilesHere: 'Оставьте файлы здесь',
            dropFoldersHere: 'Перетащите сюда папки',
            invalidDropArea: '{0} не были вставлены в правильном месте.',
            invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
            invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
            invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
            invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
            numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
            allowedFormats: 'Форматы приняты: {0}.',
            allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
            maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
            minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
            errorOccurred: 'Произошла ошибка.',
            sentWithSuccess: 'Успешно отправлено'
        }
    };
    var poUploadFormFieldDefault = 'files';
    var poUploadMaxFileSize = 31457280; // 30MB
    var poUploadMinFileSize = 0;
    /**
     * @description
     *
     * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
     * Este componente também possibilita algumas configurações como:
     *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
     *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
     *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
     * clique em enviar.
     *  - Restrições de formatos de arquivo e tamanho.
     *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
     *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
     *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
     */
    var PoUploadBaseComponent = /** @class */ (function () {
        function PoUploadBaseComponent(uploadService) {
            this.uploadService = uploadService;
            this._dragDrop = false;
            this.extensionNotAllowed = 0;
            this.quantityNotAllowed = 0;
            this.sizeNotAllowed = 0;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Define o valor do atributo `name` do componente. */
            this.name = 'file';
            /**
             * @optional
             *
             * @description
             *
             * Define se o envio do arquivo será automático ao selecionar o mesmo.
             *
             * @default `false`
             */
            this.autoUpload = false;
            /**
             * Função que será executada no momento de realizar o envio do arquivo,
             * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
             * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
             * que será enviado em conjunto com o arquivo na requisição, por exemplo:
             *
             * ```
             *   event.data = {id: 'id do usuario'};
             * ```
             */
            this.onUpload = new core.EventEmitter();
            /**
             * Evento será disparado quando ocorrer algum erro no envio do arquivo.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
             */
            this.onError = new core.EventEmitter();
            /**
             * Evento será disparado quando o envio do arquivo for realizado com sucesso.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
             */
            this.onSuccess = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(PoUploadBaseComponent.prototype, "directory", {
            get: function () {
                return this._directory;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
             *
             * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
             *
             * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
             *
             * @default `false`
             */
            set: function (value) {
                this._directory = convertToBoolean(value);
                this.canHandleDirectory = this._directory && !isIE() && !isMobile();
                this.setDirectoryAttribute(this.canHandleDirectory);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "dragDrop", {
            get: function () {
                return this._dragDrop;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
             * automaticamente.
             *
             * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
             *
             * @default `false`
             */
            set: function (value) {
                this._dragDrop = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideRestrictionsInfo", {
            get: function () {
                return this._hideRestrictionsInfo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta visualmente as informações de restrições para o upload.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideRestrictionsInfo = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideSelectButton", {
            get: function () {
                return this._hideSelectButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de seleção de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `selectFiles()` para seleção de arquivos.
             *
             * @default `false`
             */
            set: function (value) {
                this._hideSelectButton = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "hideSendButton", {
            get: function () {
                return this._hideSendButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de envio de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
             *
             * @default `false`
             */
            set: function (value) {
                this._hideSendButton = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poUploadLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-upload`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoUploadLiterals = {
             *    cancel: 'Desistir',
             *    deleteFile: 'Deletar',
             *  };
             *
             * Ou passando apenas as literais que deseja customizar:,
             *    selectFile: 'Buscar arquivo',
             * ```
             *    startSending: 'Enviar'
             *   tryAgain: 'Recomeçar',
             *
             * ```
             *  const customLiterals: PoUploadLiterals = {
             *    deleteFile: 'Deletar'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <po-upload
             *   [p-literals]="customLiterals">
             * </po-upload>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poUploadLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "fileRestrictions", {
            get: function () {
                return this._fileRestrictions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
             * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
             */
            set: function (restrictions) {
                this._fileRestrictions = this.initRestrictions(restrictions);
                this.setAllowedExtensions(restrictions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "formField", {
            get: function () {
                return this._formField;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
             *
             * @default `files`
             */
            set: function (value) {
                this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
                this.getUploadService().formField = this.formField;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.currentFiles);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "isMultiple", {
            get: function () {
                return this.canHandleDirectory ? true : this._isMultiple;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se pode selecionar mais de um arquivo.
             *
             * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
             */
            set: function (value) {
                this._isMultiple = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.currentFiles);
            },
            enumerable: true,
            configurable: true
        });
        PoUploadBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoUploadBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoUploadBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoUploadBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoUploadBaseComponent.prototype.writeValue = function (model) {
            if (model) {
                if (!isEquals(this.currentFiles, model)) {
                    this.currentFiles = this.parseFiles(model);
                }
            }
            else {
                this.currentFiles = undefined;
            }
        };
        PoUploadBaseComponent.prototype.isExceededFileLimit = function (currentFilesLength) {
            return (this.isMultiple &&
                this.fileRestrictions &&
                this.fileRestrictions.maxFiles > 0 &&
                this.fileRestrictions.maxFiles <= currentFilesLength);
        };
        // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
        PoUploadBaseComponent.prototype.parseFiles = function (files) {
            var poUploadFiles = this.currentFiles || [];
            var filesLength = files.length;
            for (var i = 0; i < filesLength; i++) {
                if (this.isExceededFileLimit(poUploadFiles.length)) {
                    this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                    break;
                }
                var file = new PoUploadFile(files[i]);
                if (this.checkRestrictions(file)) {
                    poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
                }
            }
            this.sendFeedback();
            return poUploadFiles;
        };
        PoUploadBaseComponent.prototype.validateModel = function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Verifica se o arquivo está de acordo com as restrições.
        PoUploadBaseComponent.prototype.checkRestrictions = function (file) {
            var restrictions = this.fileRestrictions;
            if (restrictions) {
                var allowedExtensions = restrictions.allowedExtensions;
                var minFileSize = restrictions.minFileSize;
                var maxFileSize = restrictions.maxFileSize;
                var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
                var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
                if (!isAcceptSize) {
                    this.sizeNotAllowed = this.sizeNotAllowed + 1;
                }
                return isAccept && isAcceptSize;
            }
            return true;
        };
        PoUploadBaseComponent.prototype.existsFileSameName = function (file, files) {
            return files.some(function (currentFile) { return file.name === currentFile.name; });
        };
        PoUploadBaseComponent.prototype.getUploadService = function () {
            return this.uploadService;
        };
        PoUploadBaseComponent.prototype.insertFileInFiles = function (newFile, files) {
            if (this.existsFileSameName(newFile, files)) {
                return this.updateExistsFileInFiles(newFile, files);
            }
            if (this.isMultiple) {
                files.push(newFile);
            }
            else {
                files.splice(0, files.length, newFile);
            }
            return files;
        };
        PoUploadBaseComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
            if (allowedExtensions === void 0) { allowedExtensions = []; }
            var isAllowed = allowedExtensions.some(function (ext) { return ext.toLowerCase() === extension; });
            if (!isAllowed) {
                this.extensionNotAllowed = this.extensionNotAllowed + 1;
            }
            return isAllowed;
        };
        PoUploadBaseComponent.prototype.setAllowedExtensions = function (restrictions) {
            if (restrictions === void 0) { restrictions = {}; }
            var _allowedExtensions = restrictions.allowedExtensions || [];
            this.allowedExtensions = _allowedExtensions.join(',');
        };
        PoUploadBaseComponent.prototype.initRestrictions = function (restrictions) {
            if (!restrictions) {
                return;
            }
            var minFileSize = restrictions.minFileSize || poUploadMinFileSize;
            var maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
            return __assign(__assign({}, restrictions), { maxFileSize: maxFileSize, minFileSize: minFileSize });
        };
        PoUploadBaseComponent.prototype.updateExistsFileInFiles = function (newFile, files) {
            var fileIndex = files.findIndex(function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded; });
            if (fileIndex !== -1) {
                files.splice(fileIndex, 1, newFile);
            }
            return files;
        };
        PoUploadBaseComponent.ctorParameters = function () { return [
            { type: PoUploadService }
        ]; };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoUploadBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-directory'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "directory", null);
        __decorate([
            core.Input('p-drag-drop-height'),
            __metadata("design:type", Number)
        ], PoUploadBaseComponent.prototype, "dragDropHeight", void 0);
        __decorate([
            core.Input('p-drag-drop'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "dragDrop", null);
        __decorate([
            core.Input('p-hide-restrictions-info'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "hideRestrictionsInfo", null);
        __decorate([
            core.Input('p-hide-select-button'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "hideSelectButton", null);
        __decorate([
            core.Input('p-hide-send-button'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "hideSendButton", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoUploadBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoUploadBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoUploadBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-url'),
            __metadata("design:type", String)
        ], PoUploadBaseComponent.prototype, "url", void 0);
        __decorate([
            core.Input('p-restrictions'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoUploadBaseComponent.prototype, "fileRestrictions", null);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoUploadBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-form-field'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoUploadBaseComponent.prototype, "formField", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-auto-upload'),
            __metadata("design:type", Boolean)
        ], PoUploadBaseComponent.prototype, "autoUpload", void 0);
        __decorate([
            core.Input('p-multiple'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "isMultiple", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoUploadBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoUploadBaseComponent.prototype, "required", null);
        __decorate([
            core.Output('p-upload'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadBaseComponent.prototype, "onUpload", void 0);
        __decorate([
            core.Output('p-error'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadBaseComponent.prototype, "onError", void 0);
        __decorate([
            core.Output('p-success'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadBaseComponent.prototype, "onSuccess", void 0);
        __decorate([
            core.Output('ngModelChange'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadBaseComponent.prototype, "ngModelChange", void 0);
        PoUploadBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoUploadService])
        ], PoUploadBaseComponent);
        return PoUploadBaseComponent;
    }());

    var PoUploadDragDropAreaComponent = /** @class */ (function () {
        function PoUploadDragDropAreaComponent(elementRef) {
            this.elementRef = elementRef;
            this.selectFiles = new core.EventEmitter();
        }
        PoUploadDragDropAreaComponent.prototype.focus = function () {
            this.selectFilesLinkElement.nativeElement.focus();
        };
        PoUploadDragDropAreaComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('p-directory-compatible'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropAreaComponent.prototype, "directoryCompatible", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropAreaComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number)
        ], PoUploadDragDropAreaComponent.prototype, "height", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoUploadDragDropAreaComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-overlay'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropAreaComponent.prototype, "overlay", void 0);
        __decorate([
            core.Output('p-select-files'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropAreaComponent.prototype, "selectFiles", void 0);
        __decorate([
            core.ViewChild('selectFilesLink'),
            __metadata("design:type", core.ElementRef)
        ], PoUploadDragDropAreaComponent.prototype, "selectFilesLinkElement", void 0);
        PoUploadDragDropAreaComponent = __decorate([
            core.Component({
                selector: 'po-upload-drag-drop-area',
                template: "<div\n  class=\"po-upload-drag-drop-area\"\n  [ngClass]=\"{ 'po-upload-drag-drop-area-disabled': disabled }\"\n  [style.height.px]=\"height\"\n>\n  <div class=\"po-upload-drag-drop-area-container\">\n    <ng-container *ngIf=\"overlay && !disabled; then overlayTemplate; else defaultTemplate\"> </ng-container>\n  </div>\n</div>\n\n<ng-template #overlayTemplate>\n  <span class=\"po-upload-drag-drop-area-overlay-icon po-icon po-icon-upload-cloud\"></span>\n\n  <div class=\"po-upload-drag-drop-area-overlay-label\">\n    {{ directoryCompatible ? literals?.dropFoldersHere : literals?.dropFilesHere }}\n  </div>\n</ng-template>\n\n<ng-template #defaultTemplate>\n  <span class=\"po-upload-drag-drop-area-icon po-icon po-icon-upload-cloud\"></span>\n\n  <div class=\"po-upload-drag-drop-area-label\">\n    {{ directoryCompatible ? literals?.dragFoldersHere : literals?.dragFilesHere }}\n  </div>\n\n  <button\n    #selectFilesLink\n    class=\"po-upload-drag-drop-area-select-files\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-clickable': !disabled }\"\n    (click)=\"selectFiles.emit()\"\n  >\n    {{ directoryCompatible ? literals?.selectFolderOnComputer : literals?.selectFilesOnComputer }}\n  </button>\n</ng-template>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoUploadDragDropAreaComponent);
        return PoUploadDragDropAreaComponent;
    }());

    var PoUploadDragDropHeightDefault = 320;
    var PoUploadDragDropHeightMin = 160;
    var PoUploadDragDropComponent = /** @class */ (function () {
        function PoUploadDragDropComponent(changeDetector) {
            this.changeDetector = changeDetector;
            this._dragDropHeight = PoUploadDragDropHeightDefault;
            this.isDragOver = false;
            this.fileChange = new core.EventEmitter();
            this.selectFiles = new core.EventEmitter();
        }
        Object.defineProperty(PoUploadDragDropComponent.prototype, "dragDropHeight", {
            get: function () {
                return this._dragDropHeight;
            },
            set: function (value) {
                var dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
                this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
            },
            enumerable: true,
            configurable: true
        });
        PoUploadDragDropComponent.prototype.focus = function () {
            this.dragDropAreaComponent.focus();
        };
        PoUploadDragDropComponent.prototype.onAreaElement = function (element) {
            this.areaElement = element;
            // necessário para não ocorrer o erro HasBeenChecked
            this.changeDetector.detectChanges();
        };
        PoUploadDragDropComponent.prototype.onDragLeave = function () {
            this.isDragOver = false;
        };
        PoUploadDragDropComponent.prototype.onDragOver = function () {
            this.isDragOver = true;
        };
        PoUploadDragDropComponent.prototype.onFileChange = function (files) {
            this.isDragOver = false;
            this.fileChange.emit(files);
        };
        PoUploadDragDropComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('dragDropOverlay', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoUploadDragDropComponent.prototype, "dragDropOverlayElement", void 0);
        __decorate([
            core.ViewChild(PoUploadDragDropAreaComponent, { static: true }),
            __metadata("design:type", PoUploadDragDropAreaComponent)
        ], PoUploadDragDropComponent.prototype, "dragDropAreaComponent", void 0);
        __decorate([
            core.Input('p-directory-compatible'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropComponent.prototype, "directoryCompatible", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-drag-drop-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoUploadDragDropComponent.prototype, "dragDropHeight", null);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoUploadDragDropComponent.prototype, "literals", void 0);
        __decorate([
            core.Output('p-file-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropComponent.prototype, "fileChange", void 0);
        __decorate([
            core.Output('p-select-files'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropComponent.prototype, "selectFiles", void 0);
        PoUploadDragDropComponent = __decorate([
            core.Component({
                selector: 'po-upload-drag-drop',
                template: "<po-upload-drag-drop-area-overlay\n  #dragDropOverlay\n  *ngIf=\"isDragOver\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-literals]=\"literals\"\n  [p-target]=\"dragDropAreaComponent.elementRef\"\n  (p-area-element)=\"onAreaElement($event)\"\n>\n</po-upload-drag-drop-area-overlay>\n\n<po-upload-drag-drop-area\n  p-upload-drag-drop\n  [p-area-element]=\"areaElement\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-height]=\"dragDropHeight\"\n  [p-literals]=\"literals\"\n  [p-overlay]=\"false\"\n  (p-drag-leave)=\"onDragLeave()\"\n  (p-drag-over)=\"onDragOver()\"\n  (p-file-change)=\"onFileChange($event)\"\n  (p-select-files)=\"selectFiles.emit()\"\n>\n</po-upload-drag-drop-area>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoUploadDragDropComponent);
        return PoUploadDragDropComponent;
    }());

    /**
     * @docsExtends PoUploadBaseComponent
     *
     * @example
     *
     * <example name="po-upload-basic" title="PO Upload Basic">
     *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
     *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-labs" title="PO Upload Labs">
     *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
     *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-resume" title="PO Upload - Resume">
     *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
     *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
     * </example>
     *
     * <example name="po-upload-rs" title="PO Upload - Realize & Show">
     *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
     *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
     * </example>
     */
    var PoUploadComponent = /** @class */ (function (_super) {
        __extends(PoUploadComponent, _super);
        function PoUploadComponent(uploadService, renderer, i18nPipe, notification) {
            var _a, _b;
            var _this = _super.call(this, uploadService) || this;
            _this.renderer = renderer;
            _this.i18nPipe = i18nPipe;
            _this.notification = notification;
            _this.infoByUploadStatus = (_a = {},
                _a[PoUploadStatus.Uploaded] = {
                    text: function () { return _this.literals.sentWithSuccess; },
                    icon: 'po-icon-ok'
                },
                _a[PoUploadStatus.Error] = {
                    text: function () { return _this.literals.errorOccurred; }
                },
                _a[PoUploadStatus.Uploading] = {
                    text: function (percent) { return percent + '%'; }
                },
                _a);
            _this.progressStatusByFileStatus = (_b = {},
                _b[PoUploadStatus.Uploaded] = exports.PoProgressStatus.Success,
                _b[PoUploadStatus.Error] = exports.PoProgressStatus.Error,
                _b);
            _this.calledByCleanInputValue = false;
            return _this;
        }
        PoUploadComponent_1 = PoUploadComponent;
        Object.defineProperty(PoUploadComponent.prototype, "displayDragDrop", {
            get: function () {
                return this.dragDrop && !isMobile();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "displaySendButton", {
            get: function () {
                var currentFiles = this.currentFiles || [];
                return !this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "selectFileButtonLabel", {
            get: function () {
                if (this.canHandleDirectory) {
                    return this.literals.selectFolder;
                }
                else if (this.isMultiple) {
                    return this.literals.selectFiles;
                }
                else {
                    return this.literals.selectFile;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasMoreThanFourItems", {
            get: function () {
                return this.currentFiles && this.currentFiles.length > 4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasMultipleFiles", {
            get: function () {
                return this.currentFiles && this.currentFiles.length > 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "hasFileNotUploaded", {
            get: function () {
                if (Array.isArray(this.currentFiles)) {
                    return this.currentFiles.some(function (file) { return file.status !== PoUploadStatus.Uploaded; });
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "isDisabled", {
            get: function () {
                var currentFiles = this.currentFiles || [];
                return !!(this.hasAnyFileUploading(currentFiles) ||
                    !this.url ||
                    this.disabled ||
                    this.isExceededFileLimit(currentFiles.length));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadComponent.prototype, "maxFiles", {
            get: function () {
                return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
            },
            enumerable: true,
            configurable: true
        });
        PoUploadComponent.prototype.cancel = function (file) {
            if (file.status === PoUploadStatus.Uploading) {
                return this.stopUpload(file);
            }
            this.removeFile(file);
        };
        PoUploadComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
        PoUploadComponent.prototype.clear = function () {
            this.currentFiles = undefined;
            this.updateModel([]);
            this.cleanInputValue();
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoUploadComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
         *
         * focusUpload() {
         *   this.upload.focus();
         * }
         * ```
         */
        PoUploadComponent.prototype.focus = function () {
            if (!this.disabled) {
                if (this.uploadButton) {
                    this.uploadButton.focus();
                    return;
                }
                if (this.displayDragDrop) {
                    this.poUploadDragDropComponent.focus();
                }
            }
        };
        // Verifica se existe algum arquivo sendo enviado ao serviço.
        PoUploadComponent.prototype.hasAnyFileUploading = function (files) {
            if (files && files.length) {
                return files.some(function (file) { return file.status === PoUploadStatus.Uploading; });
            }
            return false;
        };
        // retorna se o status do arquivo é diferente de enviado
        PoUploadComponent.prototype.isAllowCancelEvent = function (status) {
            return status !== PoUploadStatus.Uploaded;
        };
        // Função disparada ao selecionar algum arquivo.
        PoUploadComponent.prototype.onFileChange = function (event) {
            // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
            if (this.calledByCleanInputValue) {
                this.calledByCleanInputValue = false;
                return event.preventDefault();
            }
            var files = event.target.files;
            this.updateFiles(files);
            this.cleanInputValue();
        };
        PoUploadComponent.prototype.onFileChangeDragDrop = function (files) {
            this.updateFiles(files);
        };
        // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
        PoUploadComponent.prototype.removeFile = function (file) {
            var index = this.currentFiles.indexOf(file);
            this.currentFiles.splice(index, 1);
            this.updateModel(__spread(this.currentFiles));
        };
        /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
        PoUploadComponent.prototype.selectFiles = function () {
            this.calledByCleanInputValue = false;
            this.inputFile.nativeElement.click();
        };
        PoUploadComponent.prototype.sendFeedback = function () {
            if (this.sizeNotAllowed > 0) {
                var minFileSize = formatBytes(this.fileRestrictions.minFileSize);
                var maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
                var args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
                this.setPipeArguments('invalidSize', args);
                this.sizeNotAllowed = 0;
            }
            if (this.extensionNotAllowed > 0) {
                var allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
                var args = [this.extensionNotAllowed, allowedExtensionsFormatted];
                this.setPipeArguments('invalidFormat', args);
                this.extensionNotAllowed = 0;
            }
            if (this.quantityNotAllowed > 0) {
                var args = [this.quantityNotAllowed];
                this.setPipeArguments('invalidAmount', args);
                this.quantityNotAllowed = 0;
            }
        };
        /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
        PoUploadComponent.prototype.sendFiles = function () {
            if (this.currentFiles && this.currentFiles.length) {
                this.uploadFiles(this.currentFiles);
            }
        };
        PoUploadComponent.prototype.setDirectoryAttribute = function (canHandleDirectory) {
            if (canHandleDirectory) {
                this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
            }
            else {
                this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
            }
        };
        // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
        PoUploadComponent.prototype.stopUpload = function (file) {
            var _this = this;
            this.uploadService.stopRequestByFile(file, function () {
                if (_this.autoUpload) {
                    _this.removeFile(file);
                }
                else {
                    _this.stopUploadHandler(file);
                }
            });
        };
        PoUploadComponent.prototype.trackByFn = function (index, file) {
            return file.uid;
        };
        // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
        PoUploadComponent.prototype.uploadFiles = function (files) {
            var _this = this;
            var filesFiltered = files.filter(function (file) { return file.status !== PoUploadStatus.Uploaded; });
            this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, percent) {
                // UPLOADING
                _this.uploadingHandler(file, percent);
            }, function (file, eventResponse) {
                // SUCCESS
                _this.responseHandler(file, PoUploadStatus.Uploaded);
                _this.onSuccess.emit(eventResponse);
            }, function (file, eventError) {
                // Error
                _this.responseHandler(file, PoUploadStatus.Error);
                _this.onError.emit(eventError);
            });
        };
        PoUploadComponent.prototype.cleanInputValue = function () {
            this.calledByCleanInputValue = true;
            this.inputFile.nativeElement.value = '';
        };
        // função disparada na resposta do sucesso ou error
        PoUploadComponent.prototype.responseHandler = function (file, status) {
            file.status = status;
            file.percent = 100;
        };
        // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
        PoUploadComponent.prototype.setPipeArguments = function (literalAttributes, literalArguments) {
            var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
            this.notification.information(pipeArguments);
        };
        // Função disparada ao parar um envio de arquivo.
        PoUploadComponent.prototype.stopUploadHandler = function (file) {
            file.status = PoUploadStatus.None;
            file.percent = 0;
        };
        PoUploadComponent.prototype.updateFiles = function (files) {
            this.currentFiles = this.parseFiles(files);
            this.updateModel(__spread(this.currentFiles));
            if (this.autoUpload) {
                this.uploadFiles(this.currentFiles);
            }
        };
        // Atualiza o ngModel para os arquivos passados por parâmetro.
        PoUploadComponent.prototype.updateModel = function (files) {
            var modelFiles = this.mapCleanUploadFiles(files);
            this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
        };
        // Função disparada enquanto o arquivo está sendo enviado ao serviço.
        PoUploadComponent.prototype.uploadingHandler = function (file, percent) {
            file.status = PoUploadStatus.Uploading;
            file.percent = percent;
        };
        // retorna os objetos do array sem as propriedades: percent e displayName
        PoUploadComponent.prototype.mapCleanUploadFiles = function (files) {
            var mapedByUploadFile = function (progressFile) {
                var percent = progressFile.percent, displayName = progressFile.displayName, uploadFile = __rest(progressFile, ["percent", "displayName"]);
                return uploadFile;
            };
            return files.map(mapedByUploadFile);
        };
        var PoUploadComponent_1;
        PoUploadComponent.ctorParameters = function () { return [
            { type: PoUploadService },
            { type: core.Renderer2 },
            { type: PoI18nPipe },
            { type: PoNotificationService }
        ]; };
        __decorate([
            core.ViewChild('inputFile', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoUploadComponent.prototype, "inputFile", void 0);
        __decorate([
            core.ViewChild(PoUploadDragDropComponent),
            __metadata("design:type", PoUploadDragDropComponent)
        ], PoUploadComponent.prototype, "poUploadDragDropComponent", void 0);
        __decorate([
            core.ViewChild('uploadButton'),
            __metadata("design:type", PoButtonComponent)
        ], PoUploadComponent.prototype, "uploadButton", void 0);
        PoUploadComponent = PoUploadComponent_1 = __decorate([
            core.Component({
                selector: 'po-upload',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-upload\">\n    <input\n      #inputFile\n      class=\"po-upload-input\"\n      type=\"file\"\n      [accept]=\"allowedExtensions\"\n      [attr.name]=\"name\"\n      [disabled]=\"isDisabled\"\n      [multiple]=\"isMultiple\"\n      [required]=\"required\"\n      (change)=\"onFileChange($event)\"\n    />\n\n    <po-upload-drag-drop\n      *ngIf=\"displayDragDrop\"\n      [p-directory-compatible]=\"canHandleDirectory\"\n      [p-disabled]=\"isDisabled\"\n      [p-drag-drop-height]=\"dragDropHeight\"\n      [p-literals]=\"literals\"\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\n      (p-select-files)=\"selectFiles()\"\n    >\n    </po-upload-drag-drop>\n\n    <po-button\n      *ngIf=\"!hideSelectButton && !displayDragDrop\"\n      #uploadButton\n      class=\"po-upload-button\"\n      for=\"file\"\n      [p-disabled]=\"isDisabled\"\n      [p-label]=\"selectFileButtonLabel\"\n      (p-click)=\"selectFiles()\"\n    >\n    </po-button>\n\n    <po-upload-file-restrictions\n      *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\n      class=\"po-upload-file-restrictions\"\n      [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\n      [p-max-files]=\"maxFiles\"\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\"\n    >\n    </po-upload-file-restrictions>\n\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\n      <po-container\n        p-no-shadow\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\n        [p-no-border]=\"!hasMoreThanFourItems\"\n        [p-no-padding]=\"!hasMoreThanFourItems\"\n      >\n        <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\n          <po-progress\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\n            [p-text]=\"file.displayName\"\n            [p-value]=\"file.percent\"\n            (p-cancel)=\"cancel(file)\"\n            (p-retry)=\"uploadFiles([file])\"\n          >\n          </po-progress>\n        </div>\n      </po-container>\n    </div>\n\n    <po-button\n      *ngIf=\"displaySendButton\"\n      class=\"po-upload-send-button\"\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\n      p-type=\"primary\"\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\n      [p-label]=\"literals.startSending\"\n      (p-click)=\"uploadFiles(currentFiles)\"\n    >\n    </po-button>\n  </div>\n</po-field-container>\n",
                providers: [
                    PoI18nPipe,
                    PoUploadService,
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoUploadComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoUploadComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [PoUploadService,
                core.Renderer2,
                PoI18nPipe,
                PoNotificationService])
        ], PoUploadComponent);
        return PoUploadComponent;
    }(PoUploadBaseComponent));

    var uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
    var PoRichTextModalComponent = /** @class */ (function () {
        function PoRichTextModalComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.selection = document.getSelection();
            this.uploadRestrictions = {
                allowedExtensions: uploadRestrictions
            };
            this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.modalCancelAction = {
                label: this.literals.cancel,
                action: function () {
                    _this.modal.close();
                    _this.command.emit();
                    _this.retrieveCursorPosition();
                    _this.cleanUpFields();
                }
            };
            this.modalConfirmAction = {
                label: this.literals.insert,
                disabled: false,
                action: function () { return _this.insertElementRef(); }
            };
            this.modalLinkConfirmAction = {
                label: this.linkConfirmAction(),
                disabled: true,
                action: function () { return (_this.isLinkEditing ? _this.toEditLink() : _this.toInsertLink(_this.urlLink, _this.urlLinkText)); }
            };
            this.command = new core.EventEmitter();
            this.linkEditing = new core.EventEmitter();
        }
        Object.defineProperty(PoRichTextModalComponent.prototype, "modalTitle", {
            get: function () {
                if (this.modalType === 'image') {
                    return this.literals.insertImage;
                }
                return this.linkConfirmAction();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextModalComponent.prototype, "isUploadValid", {
            get: function () {
                return !!(this.uploadModel && this.uploadModel.length);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextModalComponent.prototype, "isUrlValid", {
            get: function () {
                return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextModalComponent.prototype, "modalPrimaryAction", {
            get: function () {
                return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
            },
            enumerable: true,
            configurable: true
        });
        PoRichTextModalComponent.prototype.convertToBase64 = function () {
            return __awaiter(this, void 0, void 0, function () {
                var uploadImage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isUploadValid) return [3 /*break*/, 2];
                            uploadImage = this.uploadModel[0].rawFile;
                            return [4 /*yield*/, convertImageToBase64(uploadImage)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        PoRichTextModalComponent.prototype.linkConfirmAction = function () {
            return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
        };
        PoRichTextModalComponent.prototype.emitCommand = function (value) {
            var command;
            if (value && this.modalType === PoRichTextModalType.Image) {
                command = 'insertImage';
                this.command.emit({ command: command, value: value });
            }
        };
        PoRichTextModalComponent.prototype.formModelValidate = function () {
            return (this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid);
        };
        PoRichTextModalComponent.prototype.insertElementRef = function () {
            return __awaiter(this, void 0, void 0, function () {
                var uploadImage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.modalType === PoRichTextModalType.Image && !this.urlImage)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.convertToBase64()];
                        case 1:
                            uploadImage = _a.sent();
                            _a.label = 2;
                        case 2:
                            this.retrieveCursorPosition();
                            this.modal.close();
                            if (this.isUrlValid || this.isUploadValid) {
                                this.emitCommand(this.urlImage || uploadImage);
                            }
                            this.cleanUpFields();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PoRichTextModalComponent.prototype.openModal = function (type) {
            this.modalType = type;
            this.saveCursorPosition();
            if (this.modalType === PoRichTextModalType.Link) {
                this.prepareModalForLink();
                this.modalLinkConfirmAction.label = this.linkConfirmAction();
            }
            this.modal.open();
        };
        PoRichTextModalComponent.prototype.selectedLink = function (event) {
            this.isSelectedLink = !!event;
            this.linkElement = event;
        };
        PoRichTextModalComponent.prototype.checkIfIsEmpty = function (urlLink, urlLinkText) {
            return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
        };
        PoRichTextModalComponent.prototype.cleanUpFields = function () {
            this.urlImage = undefined;
            this.urlLink = undefined;
            this.urlLinkText = undefined;
            this.uploadModel = undefined;
            this.isLinkEditing = false;
            this.isSelectedLink = false;
            this.linkElement = undefined;
        };
        PoRichTextModalComponent.prototype.formReset = function (control) {
            control.markAsPristine();
            control.markAsUntouched();
            control.updateValueAndValidity();
        };
        PoRichTextModalComponent.prototype.prepareModalForLink = function () {
            var _this = this;
            this.saveSelectionText();
            if (this.modalLinkForm) {
                this.formReset(this.modalLinkForm.control);
            }
            setTimeout(function () {
                _this.formModelValidate();
            });
            if (this.isSelectedLink) {
                this.isLinkEditing = true;
                this.setLinkEditableForModal();
            }
            this.linkEditing.emit(this.isLinkEditing);
        };
        PoRichTextModalComponent.prototype.restoreSelection = function () {
            if (this.savedSelection) {
                if (this.selection) {
                    this.selection.removeAllRanges();
                    this.selection.addRange(this.savedSelection);
                }
                return true;
            }
            else {
                return false;
            }
        };
        PoRichTextModalComponent.prototype.retrieveCursorPosition = function () {
            this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
        };
        PoRichTextModalComponent.prototype.saveCursorPosition = function () {
            this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
        };
        PoRichTextModalComponent.prototype.saveSelectionText = function () {
            if (this.selection.anchorNode !== null) {
                this.savedSelection = this.selection.getRangeAt(0);
                this.urlLinkText = this.selection.toString();
            }
            else {
                return null;
            }
        };
        PoRichTextModalComponent.prototype.setLinkEditableForModal = function () {
            this.urlLinkText = this.linkElement.innerText;
            this.urlLink = this.linkElement.getAttribute('href');
        };
        PoRichTextModalComponent.prototype.toEditLink = function () {
            if (isIE()) {
                this.linkElement.parentNode.removeChild(this.linkElement);
            }
            else {
                this.linkElement.remove();
            }
            this.toInsertLink(this.urlLink, this.urlLinkText);
        };
        PoRichTextModalComponent.prototype.toInsertLink = function (urlLink, urlLinkText) {
            this.modal.close();
            this.restoreSelection();
            var urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
            var urlAsExternalLink = isExternalLink(urlLink) ? urlLink : "http://" + urlLink;
            var command = 'InsertHTML';
            var value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
            this.command.emit({ command: command, value: value });
            this.cleanUpFields();
        };
        PoRichTextModalComponent.ctorParameters = function () { return [
            { type: PoLanguageService }
        ]; };
        __decorate([
            core.ViewChild('modal', { static: true }),
            __metadata("design:type", PoModalComponent)
        ], PoRichTextModalComponent.prototype, "modal", void 0);
        __decorate([
            core.ViewChild('modalImageForm'),
            __metadata("design:type", forms.NgForm)
        ], PoRichTextModalComponent.prototype, "modalImageForm", void 0);
        __decorate([
            core.ViewChild('upload', { static: true }),
            __metadata("design:type", PoUploadComponent)
        ], PoRichTextModalComponent.prototype, "upload", void 0);
        __decorate([
            core.ViewChild('modalImage', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoRichTextModalComponent.prototype, "modalImage", void 0);
        __decorate([
            core.ViewChild('modalLink', { static: true }),
            __metadata("design:type", PoModalComponent)
        ], PoRichTextModalComponent.prototype, "modalLink", void 0);
        __decorate([
            core.ViewChild('modalLinkForm'),
            __metadata("design:type", forms.NgForm)
        ], PoRichTextModalComponent.prototype, "modalLinkForm", void 0);
        __decorate([
            core.Output('p-command'),
            __metadata("design:type", Object)
        ], PoRichTextModalComponent.prototype, "command", void 0);
        __decorate([
            core.Output('p-link-editing'),
            __metadata("design:type", Object)
        ], PoRichTextModalComponent.prototype, "linkEditing", void 0);
        PoRichTextModalComponent = __decorate([
            core.Component({
                selector: 'po-rich-text-modal',
                template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalPrimaryAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"modalTitle\"\n>\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\n</po-modal>\n\n<ng-template #modalImage>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #modalLink>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [PoLanguageService])
        ], PoRichTextModalComponent);
        return PoRichTextModalComponent;
    }());

    var poRichTextDefaultColor = '#000000';
    var PoRichTextToolbarComponent = /** @class */ (function () {
        function PoRichTextToolbarComponent(languageService) {
            var _this = this;
            this.languageService = languageService;
            this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.alignButtons = [
                {
                    command: 'justifyleft',
                    icon: 'po-icon-align-left',
                    tooltip: this.literals.left,
                    action: this.emitAlignCommand.bind(this, 'justifyleft'),
                    selected: true
                },
                {
                    command: 'justifycenter',
                    icon: 'po-icon-align-center',
                    tooltip: this.literals.center,
                    action: this.emitAlignCommand.bind(this, 'justifycenter')
                },
                {
                    command: 'justifyright',
                    icon: 'po-icon-align-right',
                    tooltip: this.literals.right,
                    action: this.emitAlignCommand.bind(this, 'justifyright')
                },
                {
                    command: 'justifyfull',
                    icon: 'po-icon-align-justify',
                    tooltip: this.literals.justify,
                    action: this.emitAlignCommand.bind(this, 'justifyfull')
                }
            ];
            this.formatButtons = [
                {
                    command: 'bold',
                    icon: 'po-icon-text-bold',
                    tooltip: this.literals.bold,
                    action: this.emitCommand.bind(this, 'bold')
                },
                {
                    command: 'italic',
                    icon: 'po-icon-text-italic',
                    tooltip: this.literals.italic,
                    action: this.emitCommand.bind(this, 'italic')
                },
                {
                    command: 'underline',
                    icon: 'po-icon-text-underline',
                    tooltip: this.literals.underline,
                    action: this.emitCommand.bind(this, 'underline')
                }
            ];
            this.listButtons = [
                {
                    command: 'insertUnorderedList',
                    icon: 'po-icon-list',
                    tooltip: this.literals.unorderedList,
                    action: this.emitCommand.bind(this, 'insertUnorderedList')
                }
            ];
            this.linkButtons = [
                {
                    command: 'Createlink',
                    icon: 'po-icon-link',
                    tooltip: this.literals.insertLink + " (Ctrl + K)",
                    action: function () { return _this.modal.emit(PoRichTextModalType.Link); }
                }
            ];
            this.mediaButtons = [
                {
                    tooltip: this.literals.insertImage,
                    icon: 'po-icon-picture',
                    action: function () { return _this.modal.emit(PoRichTextModalType.Image); }
                }
            ];
            this.command = new core.EventEmitter();
            this.modal = new core.EventEmitter();
        }
        Object.defineProperty(PoRichTextToolbarComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            set: function (value) {
                this._readonly = value;
                this.toggleDisableButtons(this._readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRichTextToolbarComponent.prototype, "isInternetExplorer", {
            get: function () {
                return isIE();
            },
            enumerable: true,
            configurable: true
        });
        PoRichTextToolbarComponent.prototype.ngAfterViewInit = function () {
            this.removeButtonFocus();
            this.setColorInColorPicker(poRichTextDefaultColor);
        };
        PoRichTextToolbarComponent.prototype.changeTextColor = function (value) {
            var command = 'foreColor';
            this.command.emit({ command: command, value: value });
        };
        PoRichTextToolbarComponent.prototype.setButtonsStates = function (obj) {
            if (!this.readonly) {
                this.alignButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
                this.formatButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
                this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
                this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
                this.setColorInColorPicker(obj.hexColor);
            }
        };
        PoRichTextToolbarComponent.prototype.shortcutTrigger = function () {
            this.modal.emit(PoRichTextModalType.Link);
        };
        PoRichTextToolbarComponent.prototype.emitAlignCommand = function (command) {
            var index = this.alignButtons.findIndex(function (btn) { return btn.command === command; });
            if (this.alignButtons[index].selected) {
                this.alignButtons[index].selected = false;
            }
            this.command.emit(command);
        };
        PoRichTextToolbarComponent.prototype.emitCommand = function (command) {
            this.command.emit(command);
        };
        PoRichTextToolbarComponent.prototype.removeButtonFocus = function () {
            var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
            buttons.forEach(function (button) { return button.setAttribute('tabindex', '-1'); });
        };
        PoRichTextToolbarComponent.prototype.setColorInColorPicker = function (color) {
            this.colorPickerInput.nativeElement.value = color;
        };
        PoRichTextToolbarComponent.prototype.toggleDisableButtons = function (state) {
            this.alignButtons.forEach(function (button) { return (button.disabled = state); });
            this.formatButtons.forEach(function (button) { return (button.disabled = state); });
            this.listButtons[0].disabled = state;
            this.linkButtons[0].disabled = state;
            this.mediaButtons[0].disabled = state;
        };
        PoRichTextToolbarComponent.ctorParameters = function () { return [
            { type: PoLanguageService }
        ]; };
        __decorate([
            core.ViewChild('colorPickerInput', { read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], PoRichTextToolbarComponent.prototype, "colorPickerInput", void 0);
        __decorate([
            core.ViewChild('toolbarElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoRichTextToolbarComponent.prototype, "toolbarElement", void 0);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoRichTextToolbarComponent.prototype, "readonly", null);
        __decorate([
            core.Output('p-command'),
            __metadata("design:type", Object)
        ], PoRichTextToolbarComponent.prototype, "command", void 0);
        __decorate([
            core.Output('p-modal'),
            __metadata("design:type", Object)
        ], PoRichTextToolbarComponent.prototype, "modal", void 0);
        PoRichTextToolbarComponent = __decorate([
            core.Component({
                selector: 'po-rich-text-toolbar',
                template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [PoLanguageService])
        ], PoRichTextToolbarComponent);
        return PoRichTextToolbarComponent;
    }());

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @example
     *
     * <example name="po-input-basic" title="PO Input Basic">
     *  <file name="sample-po-input-basic/sample-po-input-basic.component.html"> </file>
     *  <file name="sample-po-input-basic/sample-po-input-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-input-labs" title="PO Input Labs">
     *  <file name="sample-po-input-labs/sample-po-input-labs.component.html"> </file>
     *  <file name="sample-po-input-labs/sample-po-input-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-input-reactive-form" title="PO Input - Reactive Form">
     *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.html"> </file>
     *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoInputComponent = /** @class */ (function (_super) {
        __extends(PoInputComponent, _super);
        /* istanbul ignore next */
        function PoInputComponent(el) {
            return _super.call(this, el) || this;
        }
        PoInputComponent_1 = PoInputComponent;
        PoInputComponent.prototype.extraValidation = function (c) {
            return null;
        };
        var PoInputComponent_1;
        PoInputComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoInputComponent = PoInputComponent_1 = __decorate([
            core.Component({
                selector: 'po-input',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoInputComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoInputComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoInputComponent);
        return PoInputComponent;
    }(PoInputGeneric));

    var PoNumberBaseComponent = /** @class */ (function (_super) {
        __extends(PoNumberBaseComponent, _super);
        /* istanbul ignore next */
        function PoNumberBaseComponent(elementRef) {
            var _this = _super.call(this, elementRef) || this;
            _this.type = 'number';
            return _this;
        }
        PoNumberBaseComponent.prototype.eventOnInput = function (e) {
            if (!this.mask) {
                var value = e.target.value;
                var valueMaxlength = this.validMaxLength(this.maxlength, value);
                if (value !== valueMaxlength) {
                    value = valueMaxlength;
                    this.inputEl.nativeElement.value = value;
                }
                this.callOnChange(this.formatNumber(value));
            }
        };
        PoNumberBaseComponent.prototype.validMaxLength = function (maxlength, value) {
            if (maxlength && value.length > maxlength) {
                var substringValue = value.toString().substring(0, maxlength);
                if (substringValue && this.isEndWithDot(substringValue)) {
                    return substringValue.toString().substring(0, maxlength - 1);
                }
                return substringValue;
            }
            return value;
        };
        PoNumberBaseComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.onChangePropagate(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else {
                    // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            this.changeModel.emit(value);
        };
        PoNumberBaseComponent.prototype.isEndWithDot = function (value) {
            return value && value.lastIndexOf('.') === value.length - 1;
        };
        PoNumberBaseComponent.prototype.formatNumber = function (value) {
            return value ? Number(value) : null;
        };
        PoNumberBaseComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoNumberBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoNumberBaseComponent);
        return PoNumberBaseComponent;
    }(PoInputGeneric));

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * po-number é um input específico para receber apenas números.
     * É possível configurar um valor mínimo, máximo e um step com p-min, p-max e p-step,
     * respectivamente.
     *
     * @example
     *
     * <example name="po-number-basic" title="PO Number Basic">
     *  <file name="sample-po-number-basic/sample-po-number-basic.component.html"> </file>
     *  <file name="sample-po-number-basic/sample-po-number-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-number-labs" title="PO Number Labs">
     *  <file name="sample-po-number-labs/sample-po-number-labs.component.html"> </file>
     *  <file name="sample-po-number-labs/sample-po-number-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-number-calculate" title="PO Number - Calculate">
     *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.html"> </file>
     *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.ts"> </file>
     * </example>
     */
    var PoNumberComponent = /** @class */ (function (_super) {
        __extends(PoNumberComponent, _super);
        /* istanbul ignore next */
        function PoNumberComponent(el) {
            var _this = _super.call(this, el) || this;
            /**
             * @optional
             *
             * @description
             *
             * Intervalo.
             *
             * @default 1
             */
            _this.step = '1';
            return _this;
        }
        PoNumberComponent_1 = PoNumberComponent;
        Object.defineProperty(PoNumberComponent.prototype, "setMin", {
            set: function (min) {
                var parsedInt = parseInt(min, 10);
                this.min = !isNaN(parsedInt) ? parsedInt : undefined;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNumberComponent.prototype, "setMax", {
            set: function (max) {
                var parsedInt = parseInt(max, 10);
                this.max = !isNaN(parsedInt) ? parsedInt : undefined;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        PoNumberComponent.prototype.extraValidation = function (abstractControl) {
            if (minFailed(this.min, abstractControl.value)) {
                return {
                    min: {
                        valid: false
                    }
                };
            }
            if (maxFailed(this.max, abstractControl.value)) {
                return {
                    max: {
                        valid: false
                    }
                };
            }
            return null;
        };
        var PoNumberComponent_1;
        PoNumberComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('p-min'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoNumberComponent.prototype, "setMin", null);
        __decorate([
            core.Input('p-max'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoNumberComponent.prototype, "setMax", null);
        __decorate([
            core.Input('p-step'),
            __metadata("design:type", String)
        ], PoNumberComponent.prototype, "step", void 0);
        PoNumberComponent = PoNumberComponent_1 = __decorate([
            core.Component({
                selector: 'po-number',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <input\n      #inp\n      class=\"po-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"eventOnBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-default-value]=\"null\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"> </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoNumberComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoNumberComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoNumberComponent);
        return PoNumberComponent;
    }(PoNumberBaseComponent));

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
     *
     * @example
     *
     * <example name="po-password-basic" title="PO Password Basic">
     *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
     *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-password-labs" title="PO Password Labs">
     *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
     *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-password-reset" title="PO Password - Reset">
     *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
     *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
     * </example>
     */
    var PoPasswordComponent = /** @class */ (function (_super) {
        __extends(PoPasswordComponent, _super);
        /* istanbul ignore next */
        function PoPasswordComponent(el) {
            var _this = _super.call(this, el) || this;
            _this._hidePasswordPeek = false;
            _this.type = 'password';
            _this.visiblePassword = false;
            return _this;
        }
        PoPasswordComponent_1 = PoPasswordComponent;
        Object.defineProperty(PoPasswordComponent.prototype, "hidePasswordPeek", {
            get: function () {
                return this._hidePasswordPeek;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite esconder a função de espiar a senha digitada.
             *
             * @default `false`
             */
            set: function (value) {
                this._hidePasswordPeek = convertToBoolean(value);
                if (value) {
                    this.visiblePassword = false;
                    this.type = 'password';
                }
            },
            enumerable: true,
            configurable: true
        });
        PoPasswordComponent.prototype.extraValidation = function (c) {
            return null;
        };
        PoPasswordComponent.prototype.showPassword = function () {
            this.visiblePassword = !this.visiblePassword;
            this.type = this.type === 'password' ? 'text' : 'password';
        };
        var PoPasswordComponent_1;
        PoPasswordComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('p-hide-password-peek'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoPasswordComponent.prototype, "hidePasswordPeek", null);
        PoPasswordComponent = PoPasswordComponent_1 = __decorate([
            core.Component({
                selector: 'po-password',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-lock\" [class.po-field-icon-disabled]=\"disabled\"> </span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.po-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean class=\"po-icon po-field-icon\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"> </po-clean>\n\n      <span\n        *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"po-icon po-field-icon\"\n        [ngClass]=\"visiblePassword ? 'po-icon-eye' : 'po-icon-eye-off po-field-icon-disabled'\"\n        (click)=\"showPassword()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoPasswordComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoPasswordComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoPasswordComponent);
        return PoPasswordComponent;
    }(PoInputGeneric));

    var poRadioGroupColumnsDefaultLength = 6;
    var poRadioGroupColumnsTotalLength = 12;
    /**
     * @description
     *
     * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
     * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
     * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
     *
     * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
     * [**po-checkbox-group**](/documentation/po-checkbox-group).
     *
     * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
     */
    var PoRadioGroupBaseComponent = /** @class */ (function () {
        function PoRadioGroupBaseComponent() {
            this._columns = poRadioGroupColumnsDefaultLength;
            this._disabled = false;
            this._required = false;
            this.mdColumns = poRadioGroupColumnsDefaultLength;
            this.onChangePropagate = null;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Evento ao alterar valor do campo. */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a quantidade de colunas para exibição das opções.
             *
             * **Considerações:**
             *  - É possível exibir as opções entre `1` e `4` colunas.
             *  - O número máximo de colunas é invariável nas seguintes resoluções:
             *    + `sm`: `1`
             *    + `md`: `2`
             *
             * @default `2`
             */
            set: function (value) {
                var columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoRadioGroupBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Lista de opções que serão exibidas.
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
             */
            set: function (value) {
                this._options = value;
                removeDuplicatedOptions(this.options);
            },
            enumerable: true,
            configurable: true
        });
        // Função que controla quando deve ser emitido onChange e atualiza o Model
        PoRadioGroupBaseComponent.prototype.changeValue = function (changedValue) {
            if (this.onChangePropagate) {
                this.onChangePropagate(changedValue);
            }
            if (this.value !== changedValue) {
                this.change.emit(changedValue);
            }
            this.value = changedValue;
        };
        PoRadioGroupBaseComponent.prototype.registerOnChange = function (fn) {
            this.onChangePropagate = fn;
        };
        PoRadioGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoRadioGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.validatorChange = fn;
        };
        PoRadioGroupBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
        };
        PoRadioGroupBaseComponent.prototype.writeValue = function (modelValue) {
            this.value = modelValue;
            // Busca radio com o valor especificado
            var element = this.getElementByValue(modelValue);
            if (!element && this.onChangePropagate) {
                this.value = undefined;
                this.onChangePropagate(this.value);
            }
        };
        PoRadioGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        PoRadioGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
            var gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
        };
        PoRadioGroupBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoRadioGroupBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoRadioGroupBaseComponent.prototype, "columns", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoRadioGroupBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoRadioGroupBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoRadioGroupBaseComponent.prototype, "options", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoRadioGroupBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoRadioGroupBaseComponent.prototype, "change", void 0);
        PoRadioGroupBaseComponent = __decorate([
            core.Directive()
        ], PoRadioGroupBaseComponent);
        return PoRadioGroupBaseComponent;
    }());

    /**
     * @docsExtends PoRadioGroupBaseComponent
     *
     * @example
     *
     * <example name="po-radio-group-basic" title="PO Radio Group Basic">
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-labs" title="PO Radio Group Labs">
     *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
     *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-translator" title="PO Radio Group - Translator">
     *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
     *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
     * </example>
     *
     * <example name="po-radio-group-translator-reactive-form" title="PO Radio Group - Translator Reactive Form">
     *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
     *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var PoRadioGroupComponent = /** @class */ (function (_super) {
        __extends(PoRadioGroupComponent, _super);
        function PoRadioGroupComponent(differs) {
            var _this = _super.call(this) || this;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoRadioGroupComponent_1 = PoRadioGroupComponent;
        PoRadioGroupComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoRadioGroupComponent.prototype.ngDoCheck = function () {
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
            }
        };
        PoRadioGroupComponent.prototype.eventClick = function (value, disabled) {
            if (!disabled) {
                this.changeValue(value);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoRadioGroupComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
         *
         * focusRadio() {
         *   this.radio.focus();
         * }
         * ```
         */
        PoRadioGroupComponent.prototype.focus = function () {
            var _this = this;
            if (this.radioLabels && !this.disabled) {
                var radioLabel = this.radioLabels.find(function (_, index) { return !_this.options[index].disabled; });
                if (radioLabel) {
                    radioLabel.nativeElement.focus();
                }
            }
        };
        PoRadioGroupComponent.prototype.getElementByValue = function (value) {
            return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
        };
        PoRadioGroupComponent.prototype.onKeyUp = function (event, value) {
            var key = event.keyCode || event.which;
            if (this.isArrowKey(key)) {
                this.changeValue(value);
            }
        };
        PoRadioGroupComponent.prototype.isArrowKey = function (key) {
            return key >= 37 && key <= 40;
        };
        var PoRadioGroupComponent_1;
        PoRadioGroupComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoRadioGroupComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoRadioGroupComponent.prototype, "help", void 0);
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoRadioGroupComponent.prototype, "inputEl", void 0);
        __decorate([
            core.ViewChildren('inputRadio'),
            __metadata("design:type", core.QueryList)
        ], PoRadioGroupComponent.prototype, "radioLabels", void 0);
        PoRadioGroupComponent = PoRadioGroupComponent_1 = __decorate([
            core.Component({
                selector: 'po-radio-group',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\n    <div *ngFor=\"let option of options\" class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n      <input\n        #inputRadio\n        class=\"po-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.po-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\"\n      />\n      <label\n        class=\"po-radio-group-label\"\n        [class.po-clickable]=\"!inputRadio.disabled\"\n        [for]=\"name\"\n        (click)=\"eventClick(option.value, option.disabled === true || disabled)\"\n      >\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoRadioGroupComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoRadioGroupComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.IterableDiffers])
        ], PoRadioGroupComponent);
        return PoRadioGroupComponent;
    }(PoRadioGroupBaseComponent));

    /**
     * @description
     *
     * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
     * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
     * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
     * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
     *
     * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
     *
     * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
     * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
     */
    var PoSelectBaseComponent = /** @class */ (function () {
        function PoSelectBaseComponent(element, changeDetector) {
            this.element = element;
            this._disabled = false;
            this._readonly = false;
            this._required = false;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             * > Caso mais de um elemento seja configurado com essa propriedade,
             * o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
            this.readyToValidation = false;
            this.element = element;
            this.changeDetector = changeDetector;
        }
        Object.defineProperty(PoSelectBaseComponent.prototype, "options", {
            get: function () {
                return this._options;
            },
            /**
             * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
             * Caso esta lista estiver vazia, o model será undefined.
             */
            set: function (options) {
                this._options = options;
                removeDuplicatedOptions(this._options);
                removeUndefinedAndNullOptions(this._options);
                this.onUpdateOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSelectBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSelectBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente para leitura.
             *
             * @default `false`
             */
            set: function (value) {
                this._readonly = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSelectBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        PoSelectBaseComponent.prototype.callModelChange = function (value) {
            // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
            return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
        };
        PoSelectBaseComponent.prototype.onChange = function (value) {
            this.change.emit(value);
        };
        PoSelectBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            return null;
        };
        PoSelectBaseComponent.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        PoSelectBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        PoSelectBaseComponent.prototype.registerOnValidatorChange = function (fn) {
            this.onValidatorChange = fn;
        };
        PoSelectBaseComponent.prototype.validateModel = function () {
            if (this.onValidatorChange) {
                this.onValidatorChange();
            }
        };
        PoSelectBaseComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoSelectBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoSelectBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoSelectBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoSelectBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoSelectBaseComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoSelectBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-options'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoSelectBaseComponent.prototype, "options", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoSelectBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('ngModelChange'),
            __metadata("design:type", core.EventEmitter)
        ], PoSelectBaseComponent.prototype, "ngModelChange", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoSelectBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoSelectBaseComponent.prototype, "readonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoSelectBaseComponent.prototype, "required", null);
        PoSelectBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [core.ElementRef, core.ChangeDetectorRef])
        ], PoSelectBaseComponent);
        return PoSelectBaseComponent;
    }());

    /**
     * @usedBy PoSelectComponent
     *
     * @description
     *
     * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
     *
     * > Quando utilizada em _mobile_ será exibido o componente nativo.
     *
     * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-select-option-template` com `ng-template`
     * dentro da tag `po-select`.
     *
     * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [p-options]="options">
     *     <ng-template p-select-option-template let-option>
     *       <option-template [option]="option"></option-template>
     *     </ng-template>
     * </po-select>
     * ...
     * ```
     *
     * ```
     * ...
     * <po-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [p-options]="options">
     *     <div *p-select-option-template="let option">
     *       <option-template [option]="option"></option-template>
     *     </div>
     * </po-select>
     * ...
     *
     * ```
     */
    var PoSelectOptionTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoSelectOptionTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoSelectOptionTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        PoSelectOptionTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-select-option-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoSelectOptionTemplateDirective);
        return PoSelectOptionTemplateDirective;
    }());

    var poSelectContentOffset = 8;
    var poSelectContentPositionDefault = 'bottom';
    /**
     * @docsExtends PoSelectBaseComponent
     *
     * @example
     *
     * <example name="po-select-basic" title="PO Select Basic">
     *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
     *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-select-labs" title="PO Select Labs">
     *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
     *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-select-customer-registration" title="PO Select - Customer registration">
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
     *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
     *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
     *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
     * </example>
     */
    var PoSelectComponent = /** @class */ (function (_super) {
        __extends(PoSelectComponent, _super);
        function PoSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
            var _this = _super.call(this, element, changeDetector) || this;
            _this.renderer = renderer;
            _this.controlPosition = controlPosition;
            _this.isMobile = isMobile();
            _this.open = false;
            _this.selectIcon = 'po-icon-arrow-down';
            _this.onScroll = function () {
                _this.controlPosition.adjustPosition(poSelectContentPositionDefault);
            };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        PoSelectComponent_1 = PoSelectComponent;
        Object.defineProperty(PoSelectComponent.prototype, "isInvisibleSelectNative", {
            get: function () {
                return this.readonly && this.isMobile;
            },
            enumerable: true,
            configurable: true
        });
        PoSelectComponent.prototype.onKeydown = function ($event) {
            var charCode = $event.which || $event.keyCode;
            // Tratamentos para quando o readonly for ativado.
            if (this.readonly) {
                // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
                if (charCode !== PoKeyCodeEnum.tab) {
                    this.disableDefaultEventAndToggleButton();
                    $event.preventDefault();
                }
                return;
            }
            // Seleciona os itens com as teclas "up" e "down"
            if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
                this.disableDefaultEventAndToggleButton();
            }
            // Abre o po-select com as teclas "enter" e "espaço"
            if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
                this.disableDefaultEventAndToggleButton();
            }
            // Fecha o po-select com a tecla "tab"
            if (this.open && charCode === PoKeyCodeEnum.tab) {
                $event.preventDefault();
                this.toggleButton();
            }
        };
        PoSelectComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoSelectComponent.prototype.ngDoCheck = function () {
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
                removeUndefinedAndNullOptions(this.options);
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoSelectComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
         *
         * focusSelect() {
         *   this.select.focus();
         * }
         * ```
         */
        PoSelectComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.selectElement.nativeElement.focus();
            }
        };
        PoSelectComponent.prototype.hideDropDown = function () {
            this.selectIcon = 'po-icon-arrow-down';
            this.selector('.po-select-container').classList.remove('po-select-show');
            this.open = false;
            this.changeDetector.markForCheck();
            this.selectElement.nativeElement.focus();
            this.removeListeners();
        };
        PoSelectComponent.prototype.isEqual = function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        PoSelectComponent.prototype.onOptionClick = function (option) {
            this.updateModel(option);
            this.toggleButton();
        };
        // Altera o valor ao selecionar um item.
        PoSelectComponent.prototype.onSelectChange = function (value) {
            if (value && this.options && this.options.length) {
                var optionFound = this.findOptionValue(value);
                if (optionFound) {
                    this.updateModel(optionFound);
                    this.setScrollPosition(optionFound.value);
                }
            }
        };
        PoSelectComponent.prototype.onUpdateOptions = function () {
            if (this.modelValue) {
                this.onSelectChange(this.modelValue);
            }
        };
        PoSelectComponent.prototype.scrollValue = function (index, clientHeight) {
            var heightScrollValue = index * this.getSelectItemHeight();
            return (this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0);
        };
        PoSelectComponent.prototype.selector = function (query) {
            return this.element.nativeElement.querySelector(query);
        };
        PoSelectComponent.prototype.toggleButton = function () {
            this.open ? this.hideDropDown() : this.showDropdown();
        };
        // Atualiza valores
        PoSelectComponent.prototype.updateModel = function (option) {
            if (this.selectedValue !== option.value) {
                this.selectedValue = option.value;
                this.selectElement.nativeElement.value = option.value;
                this.callModelChange(option.value);
                this.displayValue = option.label;
                this.onChange(option.value);
            }
        };
        // Esconde Content do Select quando for clicado fora
        PoSelectComponent.prototype.wasClickedOnToggle = function (event) {
            if (!this.selectButtonElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target)) {
                this.hideDropDown();
            }
        };
        // Recebe as alterações do model
        PoSelectComponent.prototype.writeValue = function (value) {
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = optionFound.label;
                this.setScrollPosition(optionFound.value);
            }
            else if (validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.callModelChange(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
            this.modelValue = value;
            this.changeDetector.detectChanges();
        };
        // Método necessário para bloquear o evento default do select nativo.
        // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
        PoSelectComponent.prototype.disableDefaultEventAndToggleButton = function () {
            var _this = this;
            this.selectElement.nativeElement.style.display = 'none';
            setTimeout(function () {
                _this.selectElement.nativeElement.style.display = 'block';
                _this.toggleButton();
            });
        };
        PoSelectComponent.prototype.findOptionValue = function (value) {
            var _this = this;
            return this.options.find(function (option) { return _this.isEqual(option.value, value); });
        };
        PoSelectComponent.prototype.getSelectItemHeight = function () {
            var selectItem = this.selector('div.po-select-item');
            return selectItem && selectItem.clientHeight;
        };
        PoSelectComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.wasClickedOnToggle(event);
            });
            this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
                _this.hideDropDown();
            });
            window.addEventListener('scroll', this.onScroll, true);
        };
        PoSelectComponent.prototype.removeListeners = function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            this.eventResizeListener();
            window.removeEventListener('scroll', this.onScroll, true);
        };
        PoSelectComponent.prototype.setPositionDropdown = function () {
            this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
            this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        };
        PoSelectComponent.prototype.setScrollPosition = function (value) {
            var ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
            if (value && this.options && this.options.length) {
                var optionFound = this.findOptionValue(value);
                if (optionFound) {
                    var index = this.options.indexOf(optionFound);
                    ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                }
            }
        };
        PoSelectComponent.prototype.showDropdown = function () {
            if (!this.readonly) {
                this.selectElement.nativeElement.focus();
                this.selectIcon = 'po-icon-arrow-up';
                this.selector('.po-select-container').classList.add('po-select-show');
                this.open = true;
                this.changeDetector.markForCheck();
                this.setPositionDropdown();
                this.initializeListeners();
                if (this.options && this.options.length) {
                    this.setScrollPosition(this.selectedValue);
                }
            }
        };
        var PoSelectComponent_1;
        PoSelectComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.IterableDiffers },
            { type: core.Renderer2 },
            { type: PoControlPositionService }
        ]; };
        __decorate([
            core.ContentChild(PoSelectOptionTemplateDirective, { static: true }),
            __metadata("design:type", PoSelectOptionTemplateDirective)
        ], PoSelectComponent.prototype, "selectOptionTemplate", void 0);
        __decorate([
            core.ViewChild('contentList', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSelectComponent.prototype, "contentList", void 0);
        __decorate([
            core.ViewChild('icon', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSelectComponent.prototype, "iconElement", void 0);
        __decorate([
            core.ViewChild('select', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSelectComponent.prototype, "selectElement", void 0);
        __decorate([
            core.ViewChild('selectButton', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSelectComponent.prototype, "selectButtonElement", void 0);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoSelectComponent.prototype, "onKeydown", null);
        PoSelectComponent = PoSelectComponent_1 = __decorate([
            core.Component({
                selector: 'po-select',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <select\n    #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-select-mobile': isMobile, 'po-invisible': isInvisibleSelectNative }\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\"\n  >\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\" [disabled]=\"readonly\" [value]=\"option.value\" (click)=\"onOptionClick(option)\">\n      {{ option?.label }}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div\n      #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{ 'po-select-button-disabled': disabled, 'po-select-button-readonly': readonly }\"\n      (click)=\"toggleButton()\"\n    >\n      <span>{{ displayValue || placeholder }}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span\n          #icon\n          class=\"po-icon {{ selectIcon }} po-field-icon\"\n          [ngClass]=\"{ 'po-field-icon-disabled': disabled, 'po-field-icon-readonly': readonly }\"\n        ></span>\n      </div>\n    </div>\n\n    <ul #contentList class=\"po-select-content\" [ngClass]=\"{ 'po-invisible': isMobile }\">\n      <li\n        *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\"\n      >\n        <div class=\"po-select-item\">\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{ option?.label }}</span>\n          </ng-template>\n\n          <ng-template\n            #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option }\"\n          >\n          </ng-template>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoSelectComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoSelectComponent_1; }),
                        multi: true
                    },
                    PoControlPositionService
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.ChangeDetectorRef,
                core.IterableDiffers,
                core.Renderer2,
                PoControlPositionService])
        ], PoSelectComponent);
        return PoSelectComponent;
    }(PoSelectBaseComponent));

    /**
     * @usedBy PoSwitchComponent
     *
     * @description
     *
     * Enum para posicionar o label do valor do po-switch.
     */

    (function (PoSwitchLabelPosition) {
        /** Posiciona o label do lado esquerdo do switch. */
        PoSwitchLabelPosition[PoSwitchLabelPosition["Right"] = 0] = "Right";
        /** Posiciona o label do lado direito do switch. */
        PoSwitchLabelPosition[PoSwitchLabelPosition["Left"] = 1] = "Left";
    })(exports.PoSwitchLabelPosition || (exports.PoSwitchLabelPosition = {}));

    /**
     * @description
     *
     * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
     * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
     *
     * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
     *
     * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
     * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
     *
     * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
     */
    var PoSwitchBaseComponent = /** @class */ (function () {
        function PoSwitchBaseComponent() {
            this._disabled = false;
            this.switchValue = false;
            /**
             * @optional
             *
             * @description
             *
             * Aplica o foco no elemento ao ser iniciado.
             *  > Caso mais de um elemento seja configurado com essa propriedade,
             * o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /**
             * Texto exibido quando o valor do componente for `true`.
             *
             * @default `true`
             */
            this.labelOn = 'true';
            /**
             * Texto exibido quando o valor do componente for `false`.
             *
             * @default `false`
             */
            this.labelOff = 'false';
            /**
             * @optional
             *
             * @description
             *
             * Posição de exibição do rótulo.
             *
             * > Por padrão exibe à direita.
             */
            this.labelPosition = exports.PoSwitchLabelPosition.Right;
            /** Evento disparado ao alterar valor do campo. */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOn", {
            set: function (label) {
                this.labelOn = label || 'true';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOff", {
            set: function (label) {
                this.labelOff = label || 'false';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelPosition", {
            set: function (position) {
                this.labelPosition = position in exports.PoSwitchLabelPosition ? parseInt(position, 10) : exports.PoSwitchLabelPosition.Right;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSwitchBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica se o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        PoSwitchBaseComponent.prototype.changeValue = function (value) {
            if (this.switchValue !== value) {
                this.switchValue = value;
                if (this.propagateChange) {
                    this.propagateChange(value);
                }
                else {
                    this.ngModelChange.emit(value);
                }
                this.change.emit(this.switchValue);
            }
        };
        PoSwitchBaseComponent.prototype.eventClick = function () {
            if (!this.disabled) {
                this.changeValue(!this.switchValue);
            }
        };
        PoSwitchBaseComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        PoSwitchBaseComponent.prototype.registerOnTouched = function (fn) { };
        PoSwitchBaseComponent.prototype.writeValue = function (value) {
            if (value !== this.switchValue) {
                this.switchValue = !!value;
            }
        };
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoSwitchBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoSwitchBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoSwitchBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoSwitchBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-label-on'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoSwitchBaseComponent.prototype, "setLabelOn", null);
        __decorate([
            core.Input('p-label-off'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoSwitchBaseComponent.prototype, "setLabelOff", null);
        __decorate([
            core.Input('p-label-position'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoSwitchBaseComponent.prototype, "setLabelPosition", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoSwitchBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoSwitchBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('ngModelChange'),
            __metadata("design:type", core.EventEmitter)
        ], PoSwitchBaseComponent.prototype, "ngModelChange", void 0);
        PoSwitchBaseComponent = __decorate([
            core.Directive()
        ], PoSwitchBaseComponent);
        return PoSwitchBaseComponent;
    }());

    /**
     * @docsExtends PoSwitchBaseComponent
     *
     * @example
     *
     * <example name="po-switch-basic" title="PO Switch Basic">
     *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
     *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-switch-labs" title="PO Switch Labs">
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
     *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
     * </example>
     *
     * <example name="po-switch-order" title="PO Switch - Order Summary">
     *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
     *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
     * </example>
     *
     * <example name="po-switch-order-reactive-form" title="PO Switch - Order Summary Reactive Form">
     *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
     *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
     * </example>
     */
    var PoSwitchComponent = /** @class */ (function (_super) {
        __extends(PoSwitchComponent, _super);
        function PoSwitchComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        PoSwitchComponent_1 = PoSwitchComponent;
        PoSwitchComponent.prototype.ngAfterViewChecked = function () {
            this.changeDetector.detectChanges();
        };
        PoSwitchComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoSwitchComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
         *
         * focusSwitch() {
         *   this.switch.focus();
         * }
         * ```
         */
        PoSwitchComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.switchContainer.nativeElement.focus();
            }
        };
        PoSwitchComponent.prototype.getLabelPosition = function () {
            switch (this.labelPosition) {
                case exports.PoSwitchLabelPosition.Left:
                    return 'left';
                case exports.PoSwitchLabelPosition.Right:
                    return 'right';
                default:
                    return 'right';
            }
        };
        PoSwitchComponent.prototype.getSwitchPosition = function () {
            switch (this.labelPosition) {
                case exports.PoSwitchLabelPosition.Left:
                    return 'right';
                case exports.PoSwitchLabelPosition.Right:
                    return 'left';
                default:
                    return 'left';
            }
        };
        PoSwitchComponent.prototype.onKeyDown = function (event) {
            if (event.which === 32 || event.keyCode === 32) {
                event.preventDefault();
                this.eventClick();
            }
        };
        var PoSwitchComponent_1;
        PoSwitchComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('switchContainer', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSwitchComponent.prototype, "switchContainer", void 0);
        PoSwitchComponent = PoSwitchComponent_1 = __decorate([
            core.Component({
                selector: 'po-switch',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\">\n  <div class=\"po-field-container-content po-switch-content\" [attr.name]=\"name\">\n    <div\n      class=\"po-switch-container po-clickable\"\n      #switchContainer\n      [class.po-switch-container-disabled]=\"disabled\"\n      [class.po-switch-container-off]=\"switchValue === false && !disabled\"\n      [class.po-switch-container-on]=\"switchValue === true && !disabled\"\n      [class.po-switch-container-right]=\"getSwitchPosition() === 'right'\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (click)=\"eventClick()\"\n      (keydown)=\"onKeyDown($event)\"\n    >\n      <div\n        class=\"po-switch-button\"\n        [class.po-switch-button-on]=\"switchValue === true\"\n        [class.po-switch-button-off]=\"switchValue === false\"\n        [class.po-switch-button-disabled]=\"disabled\"\n      >\n        <span class=\"po-icon po-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span>\n      </div>\n    </div>\n\n    <span class=\"po-switch-label po-clickable po-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\">\n      {{ switchValue === true ? labelOn : labelOff }}\n    </span>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoSwitchComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoSwitchComponent);
        return PoSwitchComponent;
    }(PoSwitchBaseComponent));

    /**
     * @description
     *
     * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
     * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
     *
     * Importante:
     *
     * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
     * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
     *
     * ```
     * <po-textarea
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </po-textarea>
     * ```
     */
    var PoTextareaBaseComponent = /** @class */ (function () {
        function PoTextareaBaseComponent() {
            this._disabled = false;
            this._readonly = false;
            this._required = false;
            this._rows = 3;
            this.onChangePropagate = null;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * @optional
             *
             * @description
             *
             * Aplica foco no elemento ao ser iniciado.
             *
             * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
             *
             * @default `false`
             */
            this.autoFocus = false;
            /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
            this.placeholder = '';
            /** Evento disparado ao sair do campo. */
            this.blur = new core.EventEmitter();
            /** Evento disparado ao entrar do campo. */
            this.enter = new core.EventEmitter();
            /** Evento disparado ao alterar valor e deixar o campo. */
            this.change = new core.EventEmitter();
            /** Evento disparado ao alterar valor do model. */
            this.changeModel = new core.EventEmitter();
        }
        Object.defineProperty(PoTextareaBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: function (readonly) {
                this._readonly = convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
             *
             * @default `false`
             */
            set: function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "minlength", {
            get: function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: function (minlength) {
                this._minlength = convertToInt(minlength);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "maxlength", {
            get: function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: function (maxlength) {
                this._maxlength = convertToInt(maxlength);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTextareaBaseComponent.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade de linhas que serão exibidas.
             *
             * @default `3`
             */
            set: function (value) {
                this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
            },
            enumerable: true,
            configurable: true
        });
        PoTextareaBaseComponent.prototype.callOnChange = function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
            this.controlChangeModelEmitter(value);
        };
        PoTextareaBaseComponent.prototype.controlChangeModelEmitter = function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
        // usadas para interceptar as mudanças e não atualizar automaticamente o Model
        PoTextareaBaseComponent.prototype.registerOnChange = function (func) {
            this.onChangePropagate = func;
        };
        PoTextareaBaseComponent.prototype.registerOnTouched = function (func) {
            this.onTouched = func;
        };
        PoTextareaBaseComponent.prototype.registerOnValidatorChange = function (func) {
            this.validatorChange = func;
        };
        PoTextareaBaseComponent.prototype.validate = function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false
                    }
                };
            }
            if (minlengpoailed(this.minlength, abstractControl.value)) {
                return {
                    minlength: {
                        valid: false
                    }
                };
            }
            if (maxlengpoailed(this.maxlength, abstractControl.value)) {
                return {
                    maxlength: {
                        valid: false
                    }
                };
            }
        };
        // Função implementada do ControlValueAccessor
        PoTextareaBaseComponent.prototype.writeValue = function (value) {
            this.writeValueModel(value);
        };
        PoTextareaBaseComponent.prototype.validateModel = function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        __decorate([
            core.Input('p-auto-focus'), InputBoolean(),
            __metadata("design:type", Boolean)
        ], PoTextareaBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoTextareaBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String)
        ], PoTextareaBaseComponent.prototype, "help", void 0);
        __decorate([
            core.Input('p-placeholder'),
            __metadata("design:type", String)
        ], PoTextareaBaseComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input('name'),
            __metadata("design:type", String)
        ], PoTextareaBaseComponent.prototype, "name", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTextareaBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-optional'),
            __metadata("design:type", Boolean)
        ], PoTextareaBaseComponent.prototype, "optional", void 0);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTextareaBaseComponent.prototype, "readonly", null);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTextareaBaseComponent.prototype, "required", null);
        __decorate([
            core.Input('p-minlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoTextareaBaseComponent.prototype, "minlength", null);
        __decorate([
            core.Input('p-maxlength'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoTextareaBaseComponent.prototype, "maxlength", null);
        __decorate([
            core.Input('p-rows'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoTextareaBaseComponent.prototype, "rows", null);
        __decorate([
            core.Output('p-blur'),
            __metadata("design:type", core.EventEmitter)
        ], PoTextareaBaseComponent.prototype, "blur", void 0);
        __decorate([
            core.Output('p-enter'),
            __metadata("design:type", core.EventEmitter)
        ], PoTextareaBaseComponent.prototype, "enter", void 0);
        __decorate([
            core.Output('p-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoTextareaBaseComponent.prototype, "change", void 0);
        __decorate([
            core.Output('p-change-model'),
            __metadata("design:type", core.EventEmitter)
        ], PoTextareaBaseComponent.prototype, "changeModel", void 0);
        PoTextareaBaseComponent = __decorate([
            core.Directive()
        ], PoTextareaBaseComponent);
        return PoTextareaBaseComponent;
    }());

    /**
     * @docsExtends PoTextareaBaseComponent
     *
     * @example
     *
     * <example name="po-textarea-basic" title="PO Textarea Basic" >
     *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.html"> </file>
     *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-labs" title="PO Textarea Labs" >
     *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.html"> </file>
     *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-email" title="PO Textarea - Email" >
     *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.html"> </file>
     *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.ts"> </file>
     * </example>
     *
     * <example name="po-textarea-email-reactive-form" title="PO Textarea - Email Reactive Form" >
     *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.html"> </file>
     *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var PoTextareaComponent = /** @class */ (function (_super) {
        __extends(PoTextareaComponent, _super);
        function PoTextareaComponent() {
            var _this = _super.call(this) || this;
            _this.fireChange = false;
            return _this;
        }
        PoTextareaComponent_1 = PoTextareaComponent;
        /**
         * Função que atribui foco ao componente.
         *
         * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
         *
         * ```
         * import { PoTextareaComponent } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
         *
         * focusTextarea() {
         *   this.textarea.focus();
         * }
         * ```
         */
        PoTextareaComponent.prototype.focus = function () {
            if (!this.disabled) {
                this.inputEl.nativeElement.focus();
            }
        };
        PoTextareaComponent.prototype.ngAfterViewInit = function () {
            if (this.autoFocus) {
                this.focus();
            }
        };
        PoTextareaComponent.prototype.writeValueModel = function (value) {
            if (this.inputEl) {
                if (!value) {
                    // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.change.emit(value);
            }
        };
        PoTextareaComponent.prototype.validMaxLength = function (maxlength, value) {
            return maxlength && value.length > maxlength ? value.toString().substring(0, maxlength) : value;
        };
        PoTextareaComponent.prototype.eventOnInput = function (event) {
            var value = this.validMaxLength(this.maxlength, event.target.value);
            this.callOnChange(value);
            this.inputEl.nativeElement.value = value;
        };
        PoTextareaComponent.prototype.eventOnFocus = function () {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        PoTextareaComponent.prototype.eventOnBlur = function () {
            this.blur.emit();
            this.controlChangeEmitter();
        };
        PoTextareaComponent.prototype.controlChangeEmitter = function () {
            var elementValue = this.inputEl.nativeElement.value;
            if (elementValue !== this.valueBeforeChange) {
                this.change.emit(elementValue);
            }
        };
        var PoTextareaComponent_1;
        __decorate([
            core.ViewChild('inp', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoTextareaComponent.prototype, "inputEl", void 0);
        PoTextareaComponent = PoTextareaComponent_1 = __decorate([
            core.Component({
                selector: 'po-textarea',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <textarea\n      #inp\n      class=\"po-textarea\"\n      (blur)=\"eventOnBlur()\"\n      (focus)=\"eventOnFocus()\"\n      (input)=\"eventOnInput($event)\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n    >\n    </textarea>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoTextareaComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoTextareaComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [])
        ], PoTextareaComponent);
        return PoTextareaComponent;
    }(PoTextareaBaseComponent));

    var PoUploadDragDropDirective = /** @class */ (function () {
        function PoUploadDragDropDirective(i18nPipe, notification) {
            this.i18nPipe = i18nPipe;
            this.notification = notification;
            this.dragLeave = new core.EventEmitter();
            this.dragOver = new core.EventEmitter();
            this.fileChange = new core.EventEmitter();
        }
        PoUploadDragDropDirective.prototype.onDragLeave = function (event) {
            var _this = this;
            event.preventDefault();
            event.stopPropagation();
            this.timeout = setTimeout(function () { return _this.dragLeave.emit(); }, 30);
        };
        PoUploadDragDropDirective.prototype.onDragOver = function (event) {
            event.preventDefault();
            event.stopPropagation();
            clearTimeout(this.timeout);
            if (!this.disabled) {
                this.dragOver.emit();
            }
        };
        PoUploadDragDropDirective.prototype.onDrop = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.getFilesFromDataTransferItems(event);
            this.dragLeave.emit();
        };
        PoUploadDragDropDirective.prototype.getFilesFromDataTransferItems = function (event) {
            var _this = this;
            if (!this.disabled) {
                this.invalidFileType = 0;
                if (this.directoryCompatible) {
                    this.getOnlyDirectories(event.dataTransfer.items).then(function () {
                        _this.sendFiles(event, _this.files);
                    });
                }
                else {
                    var files = this.getOnlyFiles(event.dataTransfer.files);
                    this.sendFiles(event, files);
                }
            }
        };
        // analisa as entradas recursivamente
        PoUploadDragDropDirective.prototype.getFilesFromEntry = function (entry) {
            return __awaiter(this, void 0, void 0, function () {
                var file;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!entry.isFile) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.readFile(entry)];
                        case 1:
                            file = _a.sent();
                            return [2 /*return*/, [file]];
                        case 2:
                            if (!entry.isDirectory) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.readDirectory(entry)];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        PoUploadDragDropDirective.prototype.getOnlyDirectories = function (dataTransferItems) {
            return __awaiter(this, void 0, void 0, function () {
                var entries, dataTransferItems_1, dataTransferItems_1_1, item, entries_1, entries_1_1, entry, newFiles, e_1_1;
                var e_2, _a, e_1, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            entries = [];
                            try {
                                // lista todas as entradas antes de analisá-las
                                for (dataTransferItems_1 = __values(dataTransferItems), dataTransferItems_1_1 = dataTransferItems_1.next(); !dataTransferItems_1_1.done; dataTransferItems_1_1 = dataTransferItems_1.next()) {
                                    item = dataTransferItems_1_1.value;
                                    entries.push(item.webkitGetAsEntry());
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (dataTransferItems_1_1 && !dataTransferItems_1_1.done && (_a = dataTransferItems_1.return)) _a.call(dataTransferItems_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                            this.files = [];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 7, 8, 9]);
                            entries_1 = __values(entries), entries_1_1 = entries_1.next();
                            _c.label = 2;
                        case 2:
                            if (!!entries_1_1.done) return [3 /*break*/, 6];
                            entry = entries_1_1.value;
                            if (!entry.isFile) return [3 /*break*/, 3];
                            this.invalidFileType++;
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.getFilesFromEntry(entry)];
                        case 4:
                            newFiles = _c.sent();
                            this.files = this.files.concat(newFiles);
                            _c.label = 5;
                        case 5:
                            entries_1_1 = entries_1.next();
                            return [3 /*break*/, 2];
                        case 6: return [3 /*break*/, 9];
                        case 7:
                            e_1_1 = _c.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 9];
                        case 8:
                            try {
                                if (entries_1_1 && !entries_1_1.done && (_b = entries_1.return)) _b.call(entries_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        // return only files. If it is a directory, invalidFileType counts.
        PoUploadDragDropDirective.prototype.getOnlyFiles = function (fileList) {
            var _this = this;
            return Array.from(fileList).reduce(function (newFiles, file) {
                if (file.type) {
                    return newFiles.concat(file);
                }
                else {
                    _this.invalidFileType++;
                }
                return newFiles;
            }, []);
        };
        PoUploadDragDropDirective.prototype.readFile = function (entry) {
            return new Promise(function (resolve) {
                entry.file(function (file) {
                    resolve(file);
                });
            });
        };
        PoUploadDragDropDirective.prototype.readDirectory = function (entry) {
            return __awaiter(this, void 0, void 0, function () {
                var dirReader, files, newFiles;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dirReader = entry.createReader();
                            files = [];
                            return [4 /*yield*/, this.readDirectoryEntries(dirReader)];
                        case 1:
                            newFiles = _a.sent();
                            files = files.concat(newFiles);
                            return [2 /*return*/, files];
                    }
                });
            });
        };
        PoUploadDragDropDirective.prototype.readDirectoryEntries = function (dirReader) {
            var _this = this;
            return new Promise(function (resolve) {
                dirReader.readEntries(function (entries) { return __awaiter(_this, void 0, void 0, function () {
                    var files, entries_2, entries_2_1, entry, itemFiles, e_3_1;
                    var e_3, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                files = [];
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 6, 7, 8]);
                                entries_2 = __values(entries), entries_2_1 = entries_2.next();
                                _b.label = 2;
                            case 2:
                                if (!!entries_2_1.done) return [3 /*break*/, 5];
                                entry = entries_2_1.value;
                                return [4 /*yield*/, this.getFilesFromEntry(entry)];
                            case 3:
                                itemFiles = _b.sent();
                                files = files.concat(itemFiles);
                                _b.label = 4;
                            case 4:
                                entries_2_1 = entries_2.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_3_1 = _b.sent();
                                e_3 = { error: e_3_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
                                }
                                finally { if (e_3) throw e_3.error; }
                                return [7 /*endfinally*/];
                            case 8:
                                resolve(files);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
        PoUploadDragDropDirective.prototype.sendFeedback = function (invalidFiles) {
            if (invalidFiles) {
                this.setPipeArguments('invalidFileType', invalidFiles);
            }
        };
        PoUploadDragDropDirective.prototype.sendFiles = function (event, files) {
            if (this.areaElement.contains(event.target)) {
                if (files.length > 0) {
                    this.fileChange.emit(files);
                }
                this.sendFeedback(this.invalidFileType);
            }
            else {
                var invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
                this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
            }
        };
        // método responsável por setar os argumentos do i18nPipe.
        PoUploadDragDropDirective.prototype.setPipeArguments = function (literalAttributes, args) {
            var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
            this.notification.information(pipeArguments);
        };
        PoUploadDragDropDirective.ctorParameters = function () { return [
            { type: PoI18nPipe },
            { type: PoNotificationService }
        ]; };
        __decorate([
            core.Input('p-area-element'),
            __metadata("design:type", HTMLElement)
        ], PoUploadDragDropDirective.prototype, "areaElement", void 0);
        __decorate([
            core.Input('p-directory-compatible'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropDirective.prototype, "directoryCompatible", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropDirective.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoUploadDragDropDirective.prototype, "literals", void 0);
        __decorate([
            core.Output('p-drag-leave'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropDirective.prototype, "dragLeave", void 0);
        __decorate([
            core.Output('p-drag-over'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropDirective.prototype, "dragOver", void 0);
        __decorate([
            core.Output('p-file-change'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropDirective.prototype, "fileChange", void 0);
        __decorate([
            core.HostListener('document:dragleave', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoUploadDragDropDirective.prototype, "onDragLeave", null);
        __decorate([
            core.HostListener('document:dragover', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoUploadDragDropDirective.prototype, "onDragOver", null);
        __decorate([
            core.HostListener('document:drop', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PoUploadDragDropDirective.prototype, "onDrop", null);
        PoUploadDragDropDirective = __decorate([
            core.Directive({
                selector: '[p-upload-drag-drop]',
                providers: [PoI18nPipe]
            }),
            __metadata("design:paramtypes", [PoI18nPipe, PoNotificationService])
        ], PoUploadDragDropDirective);
        return PoUploadDragDropDirective;
    }());

    var PoUploadDragDropAreaOverlayComponent = /** @class */ (function () {
        function PoUploadDragDropAreaOverlayComponent(renderer) {
            this.renderer = renderer;
            this.areaElement = new core.EventEmitter();
        }
        PoUploadDragDropAreaOverlayComponent.prototype.ngAfterViewInit = function () {
            if (this.target) {
                this.setPosition(this.target);
            }
            this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
        };
        PoUploadDragDropAreaOverlayComponent.prototype.setPosition = function (targetElement) {
            var _this = this;
            var boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
            var clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
            clientRectKeys.forEach(function (clientRectKey) {
                var clientRectValue = boundingClientRect[clientRectKey];
                _this.renderer.setStyle(_this.DragDropAreaFixed.nativeElement, clientRectKey, clientRectValue + "px");
            });
        };
        PoUploadDragDropAreaOverlayComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('DragDropAreaFixed', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "DragDropAreaFixed", void 0);
        __decorate([
            core.Input('p-directory-compatible'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "directoryCompatible", void 0);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "literals", void 0);
        __decorate([
            core.Input('p-target'),
            __metadata("design:type", core.ElementRef)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "target", void 0);
        __decorate([
            core.Output('p-area-element'),
            __metadata("design:type", core.EventEmitter)
        ], PoUploadDragDropAreaOverlayComponent.prototype, "areaElement", void 0);
        PoUploadDragDropAreaOverlayComponent = __decorate([
            core.Component({
                selector: 'po-upload-drag-drop-area-overlay',
                template: "<div class=\"po-overlay-fixed\">\n  <po-upload-drag-drop-area\n    #DragDropAreaFixed\n    class=\"po-upload-drag-drop-area-overlay\"\n    [p-directory-compatible]=\"directoryCompatible\"\n    [p-disabled]=\"disabled\"\n    [p-literals]=\"literals\"\n    [p-overlay]=\"true\"\n  >\n  </po-upload-drag-drop-area>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], PoUploadDragDropAreaOverlayComponent);
        return PoUploadDragDropAreaOverlayComponent;
    }());

    var PoUploadFileRestrictionsComponent = /** @class */ (function () {
        function PoUploadFileRestrictionsComponent(changeDetector) {
            this.changeDetector = changeDetector;
        }
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", {
            get: function () {
                return this._allowedExtensions;
            },
            set: function (value) {
                this._allowedExtensions = this.formatAllowedExtensions(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "maxFileSize", {
            get: function () {
                return this._maxFileSize;
            },
            set: function (value) {
                this._maxFileSize = formatBytes(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "minFileSize", {
            get: function () {
                return this._minFileSize;
            },
            set: function (value) {
                this._minFileSize = formatBytes(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "language", {
            get: function () {
                return browserLanguage();
            },
            enumerable: true,
            configurable: true
        });
        PoUploadFileRestrictionsComponent.prototype.ngOnInit = function () {
            this.setLiterals();
        };
        PoUploadFileRestrictionsComponent.prototype.formatAllowedExtensions = function (allowedExtensions) {
            var conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y' };
            return allowedExtensions
                ? allowedExtensions
                    .join(', ')
                    .toUpperCase()
                    .replace(/,(?=[^,]*$)/, " " + conjunction[this.language])
                : undefined;
        };
        PoUploadFileRestrictionsComponent.prototype.setLiterals = function () {
            this.literals = __assign(__assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
            this.changeDetector.detectChanges();
        };
        PoUploadFileRestrictionsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('p-allowed-extensions'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [Object])
        ], PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", null);
        __decorate([
            core.Input('p-max-files'),
            __metadata("design:type", Number)
        ], PoUploadFileRestrictionsComponent.prototype, "maxFiles", void 0);
        __decorate([
            core.Input('p-max-file-size'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [Object])
        ], PoUploadFileRestrictionsComponent.prototype, "maxFileSize", null);
        __decorate([
            core.Input('p-min-file-size'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [Object])
        ], PoUploadFileRestrictionsComponent.prototype, "minFileSize", null);
        PoUploadFileRestrictionsComponent = __decorate([
            core.Component({
                selector: 'po-upload-file-restrictions',
                template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\n  </span>\n</p>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoUploadFileRestrictionsComponent);
        return PoUploadFileRestrictionsComponent;
    }());

    /**
     * @docsExtends PoInputBaseComponent
     *
     * @description
     *
     * po-url é um input específico para receber URL, com o pattern já configurado.
     *
     * @example
     *
     * <example name="po-url-basic" title="PO Url Basic">
     *   <file name="sample-po-url-basic/sample-po-url-basic.component.html"> </file>
     *   <file name="sample-po-url-basic/sample-po-url-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-url-labs" title="PO Url Labs">
     *   <file name="sample-po-url-labs/sample-po-url-labs.component.html"> </file>
     *   <file name="sample-po-url-labs/sample-po-url-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-url-shortener" title="PO Url - Shortener">
     *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.html"> </file>
     *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.ts"> </file>
     * </example>
     *
     */
    var PoUrlComponent = /** @class */ (function (_super) {
        __extends(PoUrlComponent, _super);
        /* istanbul ignore next */
        function PoUrlComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.icon = 'po-icon-world';
            _this.maxlength = 254;
            _this.type = 'url';
            _this.pattern = '^((https|http):\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-A-Za-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&A-Za-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-A-Za-z\\d_]*)?$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            return _this;
        }
        PoUrlComponent_1 = PoUrlComponent;
        PoUrlComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            setTimeout(function () {
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            });
            _super.prototype.ngAfterViewInit.call(this);
        };
        PoUrlComponent.prototype.ngOnDestroy = function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        PoUrlComponent.prototype.extraValidation = function (c) {
            return null;
        };
        var PoUrlComponent_1;
        PoUrlComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoUrlComponent = PoUrlComponent_1 = __decorate([
            core.Component({
                selector: 'po-url',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return PoUrlComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return PoUrlComponent_1; }),
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoUrlComponent);
        return PoUrlComponent;
    }(PoInputGeneric));

    /**
     * @description
     *
     * Módulo dos componentes: po-checkbox, po-checkbox-group, po-combo, po-datepicker, po-datepicker-range, po-email, po-input,
     * po-lookup, po-number, po-multiselect, po-password, po-radio-group, po-select, po-switch, po-textarea, po-upload
     * e po-url.
     *
     * > Não esqueça de importar o módulo `FormsModule` para usar os componentes de formulários e caso esteja trabalhando com
     * > formulários reativos, importe o módulo `ReactiveFormsModule`, ambos nativos do Angular.
     */
    var PoFieldModule = /** @class */ (function () {
        function PoFieldModule() {
        }
        PoFieldModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    http.HttpClientModule,
                    PoButtonGroupModule,
                    PoButtonModule,
                    PoCheckboxGroupModule,
                    PoContainerModule,
                    PoDisclaimerModule,
                    PoFieldContainerModule,
                    PoLoadingModule,
                    PoModalModule,
                    PoProgressModule,
                    PoServicesModule,
                    PoTableModule,
                    PoTooltipModule
                ],
                exports: [
                    PoCheckboxComponent,
                    PoCheckboxGroupModule,
                    PoCleanComponent,
                    PoComboComponent,
                    PoComboOptionTemplateDirective,
                    PoDecimalComponent,
                    PoDatepickerComponent,
                    PoDatepickerRangeComponent,
                    PoEmailComponent,
                    PoInputComponent,
                    PoLoginComponent,
                    PoLookupComponent,
                    PoLookupModalComponent,
                    PoMultiselectComponent,
                    PoNumberComponent,
                    PoPasswordComponent,
                    PoRadioGroupComponent,
                    PoRichTextComponent,
                    PoSelectComponent,
                    PoSelectOptionTemplateDirective,
                    PoSwitchComponent,
                    PoTextareaComponent,
                    PoUploadComponent,
                    PoUrlComponent
                ],
                declarations: [
                    PoCalendarComponent$1,
                    PoCleanComponent,
                    PoCheckboxComponent,
                    PoComboComponent,
                    PoComboOptionTemplateDirective,
                    PoDecimalComponent,
                    PoDatepickerComponent,
                    PoDatepickerRangeComponent,
                    PoEmailComponent,
                    PoInputComponent,
                    PoLoginComponent,
                    PoLookupComponent,
                    PoLookupModalComponent,
                    PoMultiselectComponent,
                    PoMultiselectDropdownComponent,
                    PoMultiselectItemComponent,
                    PoMultiselectSearchComponent,
                    PoNumberComponent,
                    PoPasswordComponent,
                    PoRadioGroupComponent,
                    PoRichTextBodyComponent,
                    PoRichTextComponent,
                    PoRichTextModalComponent,
                    PoRichTextToolbarComponent,
                    PoSelectComponent,
                    PoSelectOptionTemplateDirective,
                    PoSwitchComponent,
                    PoTextareaComponent,
                    PoUploadComponent,
                    PoUploadDragDropComponent,
                    PoUploadDragDropDirective,
                    PoUploadDragDropAreaOverlayComponent,
                    PoUploadDragDropAreaComponent,
                    PoUploadFileRestrictionsComponent,
                    PoUrlComponent
                ],
                providers: []
            })
        ], PoFieldModule);
        return PoFieldModule;
    }());

    /**
     * @usedBy PoInfoComponent
     *
     * @description
     *
     * Define os tipos de orientações disponíveis para o `po-info`.
     */

    (function (PoInfoOrientation) {
        /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
        PoInfoOrientation["Horizontal"] = "horizontal";
        /** Exibe o valor na vertical, ou seja, abaixo do label. */
        PoInfoOrientation["Vertical"] = "vertical";
    })(exports.PoInfoOrientation || (exports.PoInfoOrientation = {}));

    var poInfoOrientationDefault = exports.PoInfoOrientation.Vertical;
    var PoInfoBaseComponent = /** @class */ (function () {
        function PoInfoBaseComponent() {
            this._orientation = poInfoOrientationDefault;
            this.poInfoOrientation = exports.PoInfoOrientation;
        }
        Object.defineProperty(PoInfoBaseComponent.prototype, "labelSize", {
            get: function () {
                return this._labelSize;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
             * utilizado na orientação horizontal.
             *
             * Valores válidos:
             *  - `[1 .. 11]`
             *
             * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
             */
            set: function (value) {
                if (isNaN(parseInt(value, 10))) {
                    this._labelSize = undefined;
                }
                else {
                    value = parseInt(value, 10);
                    this._labelSize = value < 1 || value > 11 ? undefined : value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoInfoBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o layout de exibição.
             *
             * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
             *
             * @default `vertical`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoInfoBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-label-size'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoInfoBaseComponent.prototype, "labelSize", null);
        __decorate([
            core.Input('p-orientation'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoInfoBaseComponent.prototype, "orientation", null);
        __decorate([
            core.Input('p-url'),
            __metadata("design:type", String)
        ], PoInfoBaseComponent.prototype, "url", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", String)
        ], PoInfoBaseComponent.prototype, "value", void 0);
        PoInfoBaseComponent = __decorate([
            core.Directive()
        ], PoInfoBaseComponent);
        return PoInfoBaseComponent;
    }());

    /**
     * @docsExtends PoInfoBaseComponent
     *
     * @description
     *
     * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
     * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão PO.
     *
     * @example
     *
     * <example name="po-info-basic" title="PO Info Basic">
     *  <file name="sample-po-info-basic/sample-po-info-basic.component.html"> </file>
     *  <file name="sample-po-info-basic/sample-po-info-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-info-labs" title="PO Info Labs">
     *  <file name="sample-po-info-labs/sample-po-info-labs.component.html"> </file>
     *  <file name="sample-po-info-labs/sample-po-info-labs.component.ts"> </file>
     * </example>
     */
    var PoInfoComponent = /** @class */ (function (_super) {
        __extends(PoInfoComponent, _super);
        function PoInfoComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PoInfoComponent.prototype, "isExternalLink", {
            get: function () {
                return isExternalLink(this.url);
            },
            enumerable: true,
            configurable: true
        });
        PoInfoComponent = __decorate([
            core.Component({
                selector: 'po-info',
                template: "<div class=\"po-info\" [class.po-row]=\"orientation === poInfoOrientation.Horizontal && labelSize\">\n  <div\n    class=\"po-info-container-title\"\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + labelSize : ''\"\n    [class.po-info-label-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n    [class.po-text-nowrap]=\"orientation === poInfoOrientation.Horizontal && !labelSize\"\n  >\n    <span class=\"po-info-label\">\n      {{ orientation === poInfoOrientation.Horizontal ? label + ':' : label }}\n    </span>\n  </div>\n\n  <div\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + (12 - labelSize) : ''\"\n    [class.po-info-container-content]=\"orientation !== poInfoOrientation.Horizontal\"\n    [class.po-info-value-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n  >\n    <ng-container *ngIf=\"url; then infoLink; else infoValue\"></ng-container>\n  </div>\n</div>\n\n<ng-template #infoLink>\n  <ng-container *ngIf=\"isExternalLink; then externalLink; else internalLink\"> </ng-container>\n</ng-template>\n\n<ng-template #infoValue>\n  <span class=\"po-info-value\">{{ value }}</span>\n</ng-template>\n\n<ng-template #externalLink>\n  <a class=\"po-info-value po-info-link\" [href]=\"url\" target=\"_blank\">{{ value }}</a>\n</ng-template>\n\n<ng-template #internalLink>\n  <a class=\"po-info-value po-info-link\" [routerLink]=\"url\">{{ value }}</a>\n</ng-template>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoInfoComponent);
        return PoInfoComponent;
    }(PoInfoBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-info.
     */
    var PoInfoModule = /** @class */ (function () {
        function PoInfoModule() {
        }
        PoInfoModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule],
                declarations: [PoInfoComponent],
                exports: [PoInfoComponent],
                providers: [],
                schemas: []
            })
        ], PoInfoModule);
        return PoInfoModule;
    }());

    /**
     * @usedBy PoTagComponent
     *
     * @description
     *
     * Define os tipos de orientações disponíveis para o `po-tag`.
     */

    (function (PoTagOrientation) {
        /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
        PoTagOrientation["Horizontal"] = "horizontal";
        /** Exibe a tag na vertical, ou seja, abaixo do label. */
        PoTagOrientation["Vertical"] = "vertical";
    })(exports.PoTagOrientation || (exports.PoTagOrientation = {}));

    /**
     * @usedBy PoTagComponent
     *
     * @description
     *
     * Define os tipos disponíveis para o `po-tag`.
     */

    (function (PoTagType) {
        /** Erro, perigo, problema ou aviso crítico. */
        PoTagType["Danger"] = "danger";
        /** Informativo ou explicativo. */
        PoTagType["Info"] = "info";
        /** Confirmação, resultados positivos ou êxito */
        PoTagType["Success"] = "success";
        /** Aviso ou advertência. */
        PoTagType["Warning"] = "warning";
    })(exports.PoTagType || (exports.PoTagType = {}));

    var poTagColors = Object.values(PoColorPaletteEnum);
    var poTagOrientationDefault = exports.PoTagOrientation.Vertical;
    /**
     * @description
     *
     * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
     * na cor, iconografia e tipo.
     *
     * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
     * utilizando a tecla *tab*.
     *
     * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
     */
    var PoTagBaseComponent = /** @class */ (function () {
        function PoTagBaseComponent() {
            this._orientation = poTagOrientationDefault;
            this.poTagOrientation = exports.PoTagOrientation;
            /**
             * @optional
             *
             * @description
             *
             * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
             */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoTagBaseComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma cor para a *tag*.
             *
             * Valores válidos:
             *  - <span class="dot po-color-01"></span> `color-01`
             *  - <span class="dot po-color-02"></span> `color-02`
             *  - <span class="dot po-color-03"></span> `color-03`
             *  - <span class="dot po-color-04"></span> `color-04`
             *  - <span class="dot po-color-05"></span> `color-05`
             *  - <span class="dot po-color-06"></span> `color-06`
             *  - <span class="dot po-color-07"></span> `color-07`
             *  - <span class="dot po-color-08"></span> `color-08`
             *  - <span class="dot po-color-09"></span> `color-09`
             *  - <span class="dot po-color-10"></span> `color-10`
             *  - <span class="dot po-color-11"></span> `color-11`
             *  - <span class="dot po-color-12"></span> `color-12`
             *
             * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
             */
            set: function (value) {
                this._color = poTagColors.includes(value) ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
             *
             * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
             *
             * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
             * - <span class="po-icon po-icon-ok"></span> - `success`
             * - <span class="po-icon po-icon-warning"></span> - `warning`
             * - <span class="po-icon po-icon-close"></span> - `danger`
             * - <span class="po-icon po-icon-info"></span> - `info`
             *
             * @default `false`
             */
            set: function (value) {
                if (this.type) {
                    this._icon = convertToBoolean(value);
                }
                else {
                    this._icon = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "inverse", {
            get: function () {
                return this._inverse;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
             *
             * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
             * e a cor do fundo fica branca.
             *
             * @default `false`
             */
            set: function (value) {
                this._inverse = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o *layout* de exibição.
             *
             * @default `vertical`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagBaseComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo da *tag*.
             *
             * Valores válidos:
             *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
             *  - `warning`: cor amarela que representa aviso ou advertência.
             *  - `danger`: cor vermelha para erro ou aviso crítico.
             *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
             *
             * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
             *
             * @default `info`
             */
            set: function (value) {
                this._type = Object.values(exports.PoTagType).includes(value) ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-color'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTagBaseComponent.prototype, "color", null);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoTagBaseComponent.prototype, "icon", null);
        __decorate([
            core.Input('p-inverse'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTagBaseComponent.prototype, "inverse", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoTagBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-orientation'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTagBaseComponent.prototype, "orientation", null);
        __decorate([
            core.Input('p-type'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoTagBaseComponent.prototype, "type", null);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", String)
        ], PoTagBaseComponent.prototype, "value", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoTagBaseComponent.prototype, "click", void 0);
        PoTagBaseComponent = __decorate([
            core.Directive()
        ], PoTagBaseComponent);
        return PoTagBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Define os ícones disponíveis para o `po-tag`.
     */
    var PoTagIcon;
    (function (PoTagIcon) {
        /** Ícone fechar. */
        PoTagIcon["Danger"] = "po-icon-close";
        /** Ícone de informação. */
        PoTagIcon["Info"] = "po-icon-info";
        /** Ícone que representa confirmação. */
        PoTagIcon["Success"] = "po-icon-ok";
        /** Ícone com ponto de exclamação. */
        PoTagIcon["Warning"] = "po-icon-warning";
    })(PoTagIcon || (PoTagIcon = {}));

    var poTagTypeDefault = 'po-tag-' + exports.PoTagType.Info;
    /**
     * @docsExtends PoTagBaseComponent
     *
     * @example
     *
     * <example name="po-tag-basic" title="PO Tag Basic">
     *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
     *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tag-labs" title="PO Tag Labs">
     *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
     *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
     *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
     *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
     * </example>
     */
    var PoTagComponent = /** @class */ (function (_super) {
        __extends(PoTagComponent, _super);
        function PoTagComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoTagComponent.prototype.ngOnInit = function () {
            this.isClickable = this.click.observers.length > 0;
        };
        Object.defineProperty(PoTagComponent.prototype, "iconFromType", {
            get: function () {
                switch (this.type) {
                    case exports.PoTagType.Danger:
                        return PoTagIcon.Danger;
                    case exports.PoTagType.Info:
                        return PoTagIcon.Info;
                    case exports.PoTagType.Success:
                        return PoTagIcon.Success;
                    case exports.PoTagType.Warning:
                        return PoTagIcon.Warning;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagComponent.prototype, "iconTypeString", {
            get: function () {
                return typeof this.icon === 'string';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagComponent.prototype, "tagColor", {
            get: function () {
                if (this.type) {
                    return this.inverse ? "po-tag-" + this.type + "-inverse" : "po-tag-" + this.type;
                }
                if (this.color) {
                    return this.inverse ? "po-text-" + this.color : "po-" + this.color;
                }
                return this.inverse ? poTagTypeDefault + "-inverse" : poTagTypeDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTagComponent.prototype, "tagOrientation", {
            get: function () {
                return this.orientation === this.poTagOrientation.Horizontal;
            },
            enumerable: true,
            configurable: true
        });
        PoTagComponent.prototype.onClick = function () {
            var submittedTagItem = { value: this.value, type: this.type };
            this.click.emit(submittedTagItem);
        };
        PoTagComponent.prototype.onKeyPressed = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.onClick();
        };
        PoTagComponent = __decorate([
            core.Component({
                selector: 'po-tag',
                template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\n  </div>\n\n  <div class=\"po-tag-sub-container\">\n    <div\n      class=\"po-tag\"\n      [class.po-clickable]=\"isClickable\"\n      [class.po-tag-inverse]=\"inverse\"\n      [ngClass]=\"tagColor\"\n      tabindex=\"0\"\n      (click)=\"onClick()\"\n      (keydown.enter)=\"onKeyPressed($event)\"\n      (keydown.space)=\"$event.preventDefault()\"\n      (keyup.space)=\"onKeyPressed($event)\"\n    >\n      <span *ngIf=\"icon\" class=\"po-icon\" [ngClass]=\"!type && iconTypeString ? icon : iconFromType\"></span>\n      <span class=\"po-tag-value\">{{ value }}</span>\n    </div>\n  </div>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoTagComponent);
        return PoTagComponent;
    }(PoTagBaseComponent));

    /**
     * @description
     *
     * Módulo do componente `po-tag`.
     */
    var PoTagModule = /** @class */ (function () {
        function PoTagModule() {
        }
        PoTagModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoTagComponent],
                exports: [PoTagComponent],
                providers: [],
                schemas: []
            })
        ], PoTagModule);
        return PoTagModule;
    }());

    /**
     *
     * @description
     *
     * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
     *
     * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
     */
    var PoDynamicFormBaseComponent = /** @class */ (function () {
        function PoDynamicFormBaseComponent() {
            this._groupForm = false;
            /**
             * @optional
             *
             * @description
             *
             * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
             * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
             *
             * Portanto existem duas maneiras de recuperar o formulário,
             * através de *template reference* e através do *output*, veja os exemplos abaixo:
             *
             * > *template reference*
             *
             * ```html
             *  <po-dynamic-form #dynamicForm>
             *  </po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
             *  </po-button>
             *
             * ```
             *
             * > *Output*
             *
             * ```html
             *  ...
             *  <po-dynamic-form (p-form)="getForm($event)">
             *  </po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
             *  </po-button>
             *  ...
             *
             * ```
             *
             * ```ts
             *  ...
             *
             *  export class AppComponent {
             *
             *    dynamicForm: NgForm;
             *
             *    getForm(form: NgForm) {
             *      this.dynamicForm = form;
             *    }
             *
             *  }
             * ```
             *
             * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
             * o formulário pai.
             */
            this.formOutput = new core.EventEmitter();
        }
        Object.defineProperty(PoDynamicFormBaseComponent.prototype, "groupForm", {
            get: function () {
                return this._groupForm;
            },
            /**
             * @optional
             *
             * @description
             * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
             * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
             *
             * ```html
             * <form #parentForm="ngForm">
             *
             *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
             *
             *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
             * </form>
             * ```
             */
            set: function (value) {
                this._groupForm = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-auto-focus'),
            __metadata("design:type", String)
        ], PoDynamicFormBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-fields'),
            __metadata("design:type", Array)
        ], PoDynamicFormBaseComponent.prototype, "fields", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Object)
        ], PoDynamicFormBaseComponent.prototype, "value", void 0);
        __decorate([
            core.Output('p-form'),
            __metadata("design:type", core.EventEmitter)
        ], PoDynamicFormBaseComponent.prototype, "formOutput", void 0);
        __decorate([
            core.Input('p-group-form'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDynamicFormBaseComponent.prototype, "groupForm", null);
        __decorate([
            core.Input('p-load'),
            __metadata("design:type", Object)
        ], PoDynamicFormBaseComponent.prototype, "load", void 0);
        __decorate([
            core.Input('p-validate'),
            __metadata("design:type", Object)
        ], PoDynamicFormBaseComponent.prototype, "validate", void 0);
        PoDynamicFormBaseComponent = __decorate([
            core.Directive()
        ], PoDynamicFormBaseComponent);
        return PoDynamicFormBaseComponent;
    }());

    var PoDynamicFormOperation = /** @class */ (function () {
        function PoDynamicFormOperation(http) {
            this.http = http;
        }
        PoDynamicFormOperation.prototype.execute = function (action, param) {
            return typeof action === 'string' ? this.post(action, param) : rxjs.of(action(param));
        };
        PoDynamicFormOperation.prototype.post = function (url, body) {
            return this.http.post(url, body);
        };
        PoDynamicFormOperation.prototype.setFormDefaultIfEmpty = function (validateFields) {
            return (validateFields || {
                value: {},
                fields: [],
                focus: undefined
            });
        };
        return PoDynamicFormOperation;
    }());

    var PoDynamicFormLoadService = /** @class */ (function (_super) {
        __extends(PoDynamicFormLoadService, _super);
        function PoDynamicFormLoadService(http) {
            return _super.call(this, http) || this;
        }
        PoDynamicFormLoadService.prototype.createAndUpdateFieldsForm = function (loadedFields, fields) {
            if (loadedFields === void 0) { loadedFields = []; }
            if (fields === void 0) { fields = []; }
            return __spread(loadedFields).reduce(function (updatedFields, field) {
                var index = updatedFields.findIndex(function (updatedField) { return updatedField.property === field.property; });
                var hasProperty = index >= 0;
                if (hasProperty) {
                    updatedFields[index] = __assign(__assign({}, fields[index]), field);
                }
                else {
                    updatedFields.push(field);
                }
                return updatedFields;
            }, __spread(fields));
        };
        PoDynamicFormLoadService.prototype.executeLoad = function (load, value) {
            var _this = this;
            return this.execute(load, value).pipe(operators.map(function (loadedFormdData) { return _this.setFormDefaultIfEmpty(loadedFormdData); }));
        };
        PoDynamicFormLoadService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoDynamicFormLoadService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoDynamicFormLoadService);
        return PoDynamicFormLoadService;
    }(PoDynamicFormOperation));

    var PoDynamicFormValidationService = /** @class */ (function (_super) {
        __extends(PoDynamicFormValidationService, _super);
        function PoDynamicFormValidationService(http) {
            return _super.call(this, http) || this;
        }
        PoDynamicFormValidationService.prototype.sendFieldChange = function (field, value) {
            var _this = this;
            var changedValue = { property: field.property, value: value };
            return this.execute(field.validate, changedValue).pipe(operators.map(function (validateFields) { return _this.setFieldDefaultIfEmpty(validateFields); }));
        };
        PoDynamicFormValidationService.prototype.sendFormChange = function (validate, field, value) {
            var _this = this;
            var changedValue = { property: field.property, value: value };
            return this.execute(validate, changedValue).pipe(operators.map(function (validateFields) { return _this.setFormDefaultIfEmpty(validateFields); }));
        };
        PoDynamicFormValidationService.prototype.updateFieldsForm = function (validatedFields, fields) {
            if (validatedFields === void 0) { validatedFields = []; }
            if (fields === void 0) { fields = []; }
            return __spread(validatedFields).reduce(function (updatedFields, validatedField) {
                var index = updatedFields.findIndex(function (field) { return field.property === validatedField.property; });
                var hasProperty = index >= 0;
                if (hasProperty) {
                    updatedFields[index] = __assign(__assign({}, fields[index]), validatedField);
                }
                return updatedFields;
            }, __spread(fields));
        };
        PoDynamicFormValidationService.prototype.setFieldDefaultIfEmpty = function (validateFields) {
            return (validateFields || {
                field: {}
            });
        };
        PoDynamicFormValidationService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoDynamicFormValidationService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoDynamicFormValidationService);
        return PoDynamicFormValidationService;
    }(PoDynamicFormOperation));

    /**
     * @docsExtends PoDynamicFormBaseComponent
     *
     * @example
     *
     * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
     *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
     *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
     *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
     * </example>
     */
    var PoDynamicFormComponent = /** @class */ (function (_super) {
        __extends(PoDynamicFormComponent, _super);
        function PoDynamicFormComponent(changes, loadService, validationService) {
            var _this = _super.call(this) || this;
            _this.changes = changes;
            _this.loadService = loadService;
            _this.validationService = validationService;
            return _this;
        }
        Object.defineProperty(PoDynamicFormComponent.prototype, "form", {
            get: function () {
                return this._form || {};
            },
            set: function (value) {
                var _this = this;
                // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
                setTimeout(function () {
                    _this._form = value;
                    _this.emitForm();
                });
            },
            enumerable: true,
            configurable: true
        });
        PoDynamicFormComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoDynamicFormComponent.prototype.ngOnInit = function () {
            if (this.load) {
                this.loadDataOnInitialize();
            }
        };
        /**
         * Função que atribui foco ao campo desejado.
         *
         * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
         *
         * ``` html
         * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
         * ```
         *
         * ``` javascript
         * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
         *
         * ...
         *
         * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
         *
         * fields: Array<PoDynamicFormField> = [
         *   { property: 'fieldOne' },
         *   { property: 'fieldTwo' }
         * ];
         *
         * fieldFocus() {
         *   this.dynamicForm.focus('fieldTwo');
         * }
         * ```
         *
         * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
         */
        PoDynamicFormComponent.prototype.focus = function (property) {
            this.fieldsComponent.focus(property);
        };
        PoDynamicFormComponent.prototype.validateForm = function (field) {
            var _this = this;
            var previousFocusElement = document.activeElement;
            this.disableForm(true);
            var errorOnValidation = function () { return _this.disableForm(false); };
            this.sendFormSubscription = this.validationService
                .sendFormChange(this.validate, field, this.value)
                .subscribe(this.applyFormValidation(previousFocusElement), errorOnValidation);
        };
        PoDynamicFormComponent.prototype.applyFormUpdatesOnLoad = function (previousFocusElement) {
            var _this = this;
            return function (dynamicFormData) {
                _this.updateModelOnLoad(dynamicFormData);
                _this.disableForm(false);
                _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
            };
        };
        PoDynamicFormComponent.prototype.applyFormValidation = function (previousFocusElement) {
            var _this = this;
            return function (dynamicFormData) {
                _this.updateModelWithValidation(dynamicFormData);
                _this.disableForm(false);
                _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
            };
        };
        PoDynamicFormComponent.prototype.disableForm = function (value) {
            this.disabledForm = value;
            this.changes.detectChanges();
        };
        PoDynamicFormComponent.prototype.emitForm = function () {
            if (!this.groupForm && this.formOutput.observers.length) {
                this.formOutput.emit(this.form);
            }
        };
        PoDynamicFormComponent.prototype.loadDataOnInitialize = function () {
            var _this = this;
            var previousFocusElement = document.activeElement;
            this.disabledForm = true;
            var errorOnLoad = function () { return (_this.disabledForm = false); };
            this.onLoadSubscription = this.loadService
                .executeLoad(this.load, this.value)
                .subscribe(this.applyFormUpdatesOnLoad(previousFocusElement), errorOnLoad);
        };
        PoDynamicFormComponent.prototype.removeListeners = function () {
            if (this.onLoadSubscription) {
                this.onLoadSubscription.unsubscribe();
            }
            if (this.sendFormSubscription) {
                this.sendFormSubscription.unsubscribe();
            }
        };
        PoDynamicFormComponent.prototype.setFocusOnFieldByProperty = function (property, previousFocusElement) {
            var _this = this;
            if (property) {
                // precisa do timeout para que o valor seja atribuido no campo antes de setar o focus,
                // para nao disparar a mudança posteriormente. Situação ocorre quando retornar campo com valor e focus atribuido a ele.
                setTimeout(function () { return _this.focus(property); });
            }
            else {
                previousFocusElement['focus']();
            }
        };
        PoDynamicFormComponent.prototype.updateModelOnLoad = function (loadedFormData) {
            Object.assign(this.value, loadedFormData.value);
            this.fields = this.loadService.createAndUpdateFieldsForm(loadedFormData.fields, this.fields);
        };
        PoDynamicFormComponent.prototype.updateModelWithValidation = function (formData) {
            Object.assign(this.value, formData.value);
            this.fields = this.validationService.updateFieldsForm(formData.fields, this.fields);
        };
        PoDynamicFormComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: PoDynamicFormLoadService },
            { type: PoDynamicFormValidationService }
        ]; };
        __decorate([
            core.ViewChild('dynamicForm'),
            __metadata("design:type", forms.NgForm),
            __metadata("design:paramtypes", [forms.NgForm])
        ], PoDynamicFormComponent.prototype, "form", null);
        __decorate([
            core.ViewChild('fieldsComponent'),
            __metadata("design:type", Object)
        ], PoDynamicFormComponent.prototype, "fieldsComponent", void 0);
        PoDynamicFormComponent = __decorate([
            core.Component({
                selector: 'po-dynamic-form',
                template: "<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n  <po-dynamic-form-fields #fieldsComponent [p-auto-focus]=\"autoFocus\" [p-fields]=\"fields\" [p-value]=\"value\">\n  </po-dynamic-form-fields>\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n  <form #dynamicForm=\"ngForm\">\n    <po-dynamic-form-fields\n      #fieldsComponent\n      [(p-fields)]=\"fields\"\n      [p-auto-focus]=\"autoFocus\"\n      [p-disabled-form]=\"disabledForm\"\n      [p-validate]=\"validate\"\n      [p-value]=\"value\"\n      (p-form-validate)=\"validateForm($event)\"\n    >\n    </po-dynamic-form-fields>\n  </form>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef,
                PoDynamicFormLoadService,
                PoDynamicFormValidationService])
        ], PoDynamicFormComponent);
        return PoDynamicFormComponent;
    }(PoDynamicFormBaseComponent));

    function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns) {
        var systemGrid = {
            sm: smColumns || gridColumns || 12,
            md: mdColumns || gridColumns || 6,
            lg: lgColumns || gridColumns || 4,
            xl: xlColumns || gridColumns || 3
        };
        return "po-sm-" + systemGrid.sm + " po-md-" + systemGrid.md + " po-lg-" + systemGrid.lg + " po-xl-" + systemGrid.xl;
    }
    function isVisibleField(field) {
        var containsVisible = 'visible' in field;
        return containsVisible ? field.visible : true;
    }

    /**
     * @usedBy PoDynamicFormComponent
     *
     * @description
     *
     * Enum para definição do tipo de campo que será criado dinamicamente.
     */

    (function (PoDynamicFieldType) {
        /** Valor booleano. */
        PoDynamicFieldType["Boolean"] = "boolean";
        /** Valor numérico que contém casas decimais e milhar. */
        PoDynamicFieldType["Currency"] = "currency";
        /** Valor para data. */
        PoDynamicFieldType["Date"] = "date";
        /** Valor para data e hora. */
        PoDynamicFieldType["DateTime"] = "datetime";
        /** Utilizado para informar/exibir hora. */
        PoDynamicFieldType["Time"] = "time";
        /** Valor númerico. */
        PoDynamicFieldType["Number"] = "number";
        /** Texto. */
        PoDynamicFieldType["String"] = "string";
    })(exports.PoDynamicFieldType || (exports.PoDynamicFieldType = {}));

    var PoDynamicFormFieldsBaseComponent = /** @class */ (function () {
        function PoDynamicFormFieldsBaseComponent(titleCasePipe) {
            this.titleCasePipe = titleCasePipe;
            this._value = {};
            this.visibleFields = [];
            this.fieldsChange = new core.EventEmitter();
            this.formValidate = new core.EventEmitter();
        }
        Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
            set: function (value) {
                this._fields = Array.isArray(value) ? __spread(value) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            // valor que será utilizado para iniciar valor no componente.
            set: function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: true,
            configurable: true
        });
        PoDynamicFormFieldsBaseComponent.prototype.compareTo = function (value, compareTo) {
            return value === compareTo;
        };
        // retorna um array com os objetos configurados e visiveis.
        PoDynamicFormFieldsBaseComponent.prototype.getVisibleFields = function () {
            var _this = this;
            var visibleFields = [];
            this.fields.forEach(function (field) {
                if (_this.existsProperty(visibleFields, field.property)) {
                    _this.printError("\"po-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: PoDynamicFormField.");
                    return;
                }
                if (!field['property']) {
                    _this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                    return;
                }
                if (isVisibleField(field)) {
                    visibleFields.push(_this.createField(field));
                }
            });
            return visibleFields;
        };
        // converte um array em string para um array de objetos que contem label e value.
        PoDynamicFormFieldsBaseComponent.prototype.convertOptions = function (options) {
            var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
            if (everyOptionString) {
                return options.map(function (value) { return ({ label: value, value: value }); });
            }
            return options;
        };
        // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
        PoDynamicFormFieldsBaseComponent.prototype.createField = function (field) {
            var control = this.getComponentControl(field);
            var options = !!field.options ? this.convertOptions(field.options) : undefined;
            var focus = this.hasFocus(field);
            var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
            return __assign(__assign({ label: this.titleCasePipe.transform(field.property) }, field), { componentClass: componentClass,
                control: control,
                focus: focus,
                options: options });
        };
        PoDynamicFormFieldsBaseComponent.prototype.existsProperty = function (fields, property) {
            return fields.some(function (field) {
                return field.property === property;
            });
        };
        // recupera o componente de acordo com algumas regras do field.
        PoDynamicFormFieldsBaseComponent.prototype.getComponentControl = function (field) {
            if (field === void 0) { field = {}; }
            var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
            if (this.isNumberType(field, type)) {
                return 'number';
            }
            else if (this.isCurrencyType(field, type)) {
                return 'decimal';
            }
            else if (this.isSelect(field)) {
                return 'select';
            }
            else if (this.isRadioGroup(field)) {
                return 'radioGroup';
            }
            else if (this.isCheckboxGroup(field)) {
                return 'checkboxGroup';
            }
            else if (this.isMultiselect(field)) {
                return 'multiselect';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Boolean)) {
                return 'switch';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Date) || this.compareTo(type, exports.PoDynamicFieldType.DateTime)) {
                return 'datepicker';
            }
            else if (this.compareTo(type, exports.PoDynamicFieldType.Time)) {
                field.mask = field.mask || '99:99';
                return 'input';
            }
            else if (this.isCombo(field)) {
                return 'combo';
            }
            else if (this.isLookup(field)) {
                return 'lookup';
            }
            else if (this.isTextarea(field)) {
                return 'textarea';
            }
            else if (this.isPassword(field)) {
                return 'password';
            }
            return 'input';
        };
        PoDynamicFormFieldsBaseComponent.prototype.hasFocus = function (field) {
            return !!this.autoFocus && this.autoFocus === field.property;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return !optionsService && optionsMulti && !!options && options.length <= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCombo = function (field) {
            var optionsService = field.optionsService;
            return !!optionsService && isTypeof(optionsService, 'string');
        };
        PoDynamicFormFieldsBaseComponent.prototype.isCurrencyType = function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, exports.PoDynamicFieldType.Currency) && !mask && !pattern;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isLookup = function (field) {
            var searchService = field.searchService;
            return !!searchService && isTypeof(searchService, 'string');
        };
        PoDynamicFormFieldsBaseComponent.prototype.isMultiselect = function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return !optionsService && optionsMulti && !!options && options.length > 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isNumberType = function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, exports.PoDynamicFieldType.Number) && !mask && !pattern;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isPassword = function (field) {
            var secret = field.secret;
            return secret;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isRadioGroup = function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length <= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isSelect = function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length > 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.isTextarea = function (field) {
            var rows = field.rows;
            return rows && rows >= 3;
        };
        PoDynamicFormFieldsBaseComponent.prototype.printError = function (error) {
            console.error(error);
        };
        PoDynamicFormFieldsBaseComponent.ctorParameters = function () { return [
            { type: common.TitleCasePipe }
        ]; };
        __decorate([
            core.Input('p-auto-focus'),
            __metadata("design:type", String)
        ], PoDynamicFormFieldsBaseComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input('p-fields'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoDynamicFormFieldsBaseComponent.prototype, "fields", null);
        __decorate([
            core.Output('p-fieldsChange'),
            __metadata("design:type", Object)
        ], PoDynamicFormFieldsBaseComponent.prototype, "fieldsChange", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDynamicFormFieldsBaseComponent.prototype, "value", null);
        __decorate([
            core.Input('p-disabled-form'),
            __metadata("design:type", Boolean)
        ], PoDynamicFormFieldsBaseComponent.prototype, "disabledForm", void 0);
        __decorate([
            core.Input('p-validate'),
            __metadata("design:type", Object)
        ], PoDynamicFormFieldsBaseComponent.prototype, "validate", void 0);
        __decorate([
            core.Output('p-form-validate'),
            __metadata("design:type", Object)
        ], PoDynamicFormFieldsBaseComponent.prototype, "formValidate", void 0);
        PoDynamicFormFieldsBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [common.TitleCasePipe])
        ], PoDynamicFormFieldsBaseComponent);
        return PoDynamicFormFieldsBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente de criação dos campos dinâmicos.
     */
    var PoDynamicFormFieldsComponent = /** @class */ (function (_super) {
        __extends(PoDynamicFormFieldsComponent, _super);
        function PoDynamicFormFieldsComponent(titleCasePipe, validationService, changes) {
            var _this = _super.call(this, titleCasePipe) || this;
            _this.validationService = validationService;
            _this.changes = changes;
            _this.previousValue = {};
            return _this;
        }
        PoDynamicFormFieldsComponent.prototype.ngOnChanges = function (changes) {
            if (changes.fields) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        PoDynamicFormFieldsComponent.prototype.focus = function (property) {
            var foundComponent = this.components.find(function (component) { return component.name === property; });
            if (foundComponent) {
                foundComponent.focus();
            }
        };
        PoDynamicFormFieldsComponent.prototype.isDisabled = function (field) {
            return field.disabled || this.disabledForm;
        };
        PoDynamicFormFieldsComponent.prototype.onChangeField = function (visibleField) {
            return __awaiter(this, void 0, void 0, function () {
                var property, isChangedValueField, _a, changedField, changedFieldIndex;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            property = visibleField.property;
                            isChangedValueField = this.previousValue[property] !== this.value[property];
                            if (!isChangedValueField) return [3 /*break*/, 3];
                            _a = this.getField(property), changedField = _a.changedField, changedFieldIndex = _a.changedFieldIndex;
                            if (!changedField.validate) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.validateField(changedField, changedFieldIndex, visibleField)];
                        case 1:
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            this.triggerValidationOnForm(changedFieldIndex);
                            _b.label = 3;
                        case 3:
                            this.previousValue[property] = this.value[property];
                            return [2 /*return*/];
                    }
                });
            });
        };
        PoDynamicFormFieldsComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoDynamicFormFieldsComponent.prototype.applyFieldValidation = function (index, validatedField) {
            var field = this.fields[index];
            this.fields[index] = __assign(__assign({}, field), validatedField.field);
            this.updateFields();
            if (validatedField.hasOwnProperty('value')) {
                this.value[field.property] = validatedField.value;
            }
            this.changes.detectChanges();
            if (validatedField.focus) {
                this.focus(field.property);
            }
        };
        PoDynamicFormFieldsComponent.prototype.getField = function (property) {
            var changedFieldIndex = this.fields.findIndex(function (field) { return field.property === property; });
            var changedField = this.fields[changedFieldIndex];
            return { changedField: changedField, changedFieldIndex: changedFieldIndex };
        };
        PoDynamicFormFieldsComponent.prototype.triggerValidationOnForm = function (changedFieldIndex) {
            var hasValidationForm = this.validate && this.formValidate.observers.length;
            if (hasValidationForm) {
                var updatedField = this.fields[changedFieldIndex];
                this.formValidate.emit(updatedField);
            }
        };
        PoDynamicFormFieldsComponent.prototype.updateFields = function () {
            this.fieldsChange.emit(this.fields);
            this.visibleFields = this.getVisibleFields();
        };
        PoDynamicFormFieldsComponent.prototype.validateField = function (field, fieldIndex, visibleField) {
            return __awaiter(this, void 0, void 0, function () {
                var value, previousDisabled, validatedField, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            value = this.value[field.property];
                            previousDisabled = visibleField.disabled;
                            visibleField.disabled = true;
                            this.changes.detectChanges();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.validationService.sendFieldChange(field, value).toPromise()];
                        case 2:
                            validatedField = _b.sent();
                            this.applyFieldValidation(fieldIndex, validatedField);
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            visibleField.disabled = previousDisabled;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        PoDynamicFormFieldsComponent.ctorParameters = function () { return [
            { type: common.TitleCasePipe },
            { type: PoDynamicFormValidationService },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChildren('component'),
            __metadata("design:type", core.QueryList)
        ], PoDynamicFormFieldsComponent.prototype, "components", void 0);
        PoDynamicFormFieldsComponent = __decorate([
            core.Component({
                selector: 'po-dynamic-form-fields',
                template: "<div class=\"po-row\" *ngIf=\"visibleFields && visibleFields.length > 0\">\n  <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <po-datepicker\n      #component\n      *ngIf=\"compareTo(field.control, 'datepicker')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-format]=\"field.format\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-datepicker>\n\n    <po-input\n      #component\n      *ngIf=\"compareTo(field.control, 'input')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-mask]=\"field.mask\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-input>\n\n    <po-number\n      #component\n      *ngIf=\"compareTo(field.control, 'number')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-number>\n\n    <po-decimal\n      #component\n      *ngIf=\"compareTo(field.control, 'decimal')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-decimal>\n\n    <po-select\n      #component\n      *ngIf=\"compareTo(field.control, 'select')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-select>\n\n    <po-radio-group\n      #component\n      *ngIf=\"compareTo(field.control, 'radioGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-columns=\"3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-radio-group>\n\n    <po-switch\n      #component\n      *ngIf=\"compareTo(field.control, 'switch')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-label-off]=\"field.booleanFalse\"\n      [p-label-on]=\"field.booleanTrue\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-switch>\n\n    <po-combo\n      #component\n      *ngIf=\"compareTo(field.control, 'combo')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-combo>\n\n    <po-lookup\n      #component\n      *ngIf=\"compareTo(field.control, 'lookup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      p-field-label=\"label\"\n      p-field-value=\"value\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.searchService\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-lookup>\n\n    <po-checkbox-group\n      #component\n      *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-columns=\"3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-checkbox-group>\n\n    <po-multiselect\n      #component\n      *ngIf=\"compareTo(field.control, 'multiselect')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-multiselect>\n\n    <po-textarea\n      #component\n      *ngIf=\"compareTo(field.control, 'textarea')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      [p-rows]=\"field.rows\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-textarea>\n\n    <po-password\n      #component\n      *ngIf=\"compareTo(field.control, 'password')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-password>\n  </ng-container>\n</div>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }],
                providers: [PoDynamicFormValidationService]
            }),
            __metadata("design:paramtypes", [common.TitleCasePipe,
                PoDynamicFormValidationService,
                core.ChangeDetectorRef])
        ], PoDynamicFormFieldsComponent);
        return PoDynamicFormFieldsComponent;
    }(PoDynamicFormFieldsBaseComponent));

    var PoDynamicViewService = /** @class */ (function () {
        function PoDynamicViewService(http) {
            this.http = http;
        }
        PoDynamicViewService.prototype.onLoad = function (url, value) {
            return this.http.post(url, value).toPromise();
        };
        PoDynamicViewService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoDynamicViewService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoDynamicViewService);
        return PoDynamicViewService;
    }());

    /**
     *
     * @description
     *
     * Componente para listar dados dinamicamente a partir de uma lista de objetos.
     *
     * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
     *
     */
    var PoDynamicViewBaseComponent = /** @class */ (function () {
        function PoDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
            this.currencyPipe = currencyPipe;
            this.datePipe = datePipe;
            this.decimalPipe = decimalPipe;
            this.timePipe = timePipe;
            this.titleCasePipe = titleCasePipe;
            this.dynamicViewService = dynamicViewService;
            this._fields = [];
            this._showAllValue = false;
            this._value = {};
            this.visibleFields = [];
        }
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "fields", {
            get: function () {
                return this._fields;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de objetos que implementam a interface `PoDynamicView`.
             *
             * > Ex: `[ { property: 'age' } ]`
             *
             * Regras de tipagem e formatação dos valores exibidos:
             *
             * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
             * como formato padrão.
             * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
             * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
             * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
             * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
             *
             * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
             *
             * @default `[]`
             */
            set: function (fields) {
                this._fields = Array.isArray(fields) ? __spread(fields) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "showAllValue", {
            get: function () {
                return this._showAllValue;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
             *
             * @default `false`
             */
            set: function (value) {
                this._showAllValue = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoDynamicViewBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @description
             *
             * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
             * dos objetos contidos na propridade `p-fields`.
             *
             * > Ex: `{ age: '35' }`
             */
            set: function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: true,
            configurable: true
        });
        // retorna os fields com os valores recuperados do objeto value.
        PoDynamicViewBaseComponent.prototype.getConfiguredFields = function () {
            var _this = this;
            var newFields = [];
            this.fields.forEach(function (field) {
                if (isVisibleField(field)) {
                    newFields.push(_this.createField(field));
                }
            });
            return newFields;
        };
        // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
        PoDynamicViewBaseComponent.prototype.getMergedFields = function () {
            var _this = this;
            var mergedFields = __spread(this.getConfiguredFields());
            this.getValueFields().forEach(function (valueField) {
                var fieldIndex = mergedFields.findIndex(function (field) { return field.property === valueField.property; });
                var property = valueField.property;
                if (fieldIndex === -1) {
                    mergedFields.push(_this.createField({ property: property }));
                }
            });
            return mergedFields;
        };
        // retorna o objeto value como fields.
        PoDynamicViewBaseComponent.prototype.getValueFields = function () {
            var _this = this;
            return Object.keys(this.value).map(function (property) {
                return _this.createField({ property: property });
            });
        };
        PoDynamicViewBaseComponent.prototype.createField = function (field) {
            var property = field.property;
            var value = this.transformValue(field.type, this.value[property], field.format);
            var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
            return __assign({ property: property,
                value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
        };
        PoDynamicViewBaseComponent.prototype.transformValue = function (type, value, format) {
            var transformedValue = value;
            switch (type) {
                case 'currency':
                    transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                    break;
                case 'date':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                    break;
                case 'dateTime':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                    break;
                case 'number':
                    transformedValue = this.decimalPipe.transform(value, format);
                    break;
                case 'time':
                    transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                    break;
            }
            return transformedValue;
        };
        PoDynamicViewBaseComponent.ctorParameters = function () { return [
            { type: common.CurrencyPipe },
            { type: common.DatePipe },
            { type: common.DecimalPipe },
            { type: PoTimePipe },
            { type: common.TitleCasePipe },
            { type: PoDynamicViewService }
        ]; };
        __decorate([
            core.Input('p-fields'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoDynamicViewBaseComponent.prototype, "fields", null);
        __decorate([
            core.Input('p-show-all-value'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoDynamicViewBaseComponent.prototype, "showAllValue", null);
        __decorate([
            core.Input('p-load'),
            __metadata("design:type", Object)
        ], PoDynamicViewBaseComponent.prototype, "load", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoDynamicViewBaseComponent.prototype, "value", null);
        PoDynamicViewBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [common.CurrencyPipe,
                common.DatePipe,
                common.DecimalPipe,
                PoTimePipe,
                common.TitleCasePipe,
                PoDynamicViewService])
        ], PoDynamicViewBaseComponent);
        return PoDynamicViewBaseComponent;
    }());

    /**
     * @docsExtends PoDynamicViewBaseComponent
     *
     * @example
     *
     * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
     *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
     *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
     *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
     *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
     * </example>
     *
     * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
     *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
     *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
     * </example>
     */
    var PoDynamicViewComponent = /** @class */ (function (_super) {
        __extends(PoDynamicViewComponent, _super);
        function PoDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
            return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) || this;
        }
        PoDynamicViewComponent.prototype.ngOnChanges = function (changes) {
            if (changes.fields || changes.value || changes.showAllValue) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        PoDynamicViewComponent.prototype.ngOnInit = function () {
            if (this.load) {
                this.updateValuesAndFieldsOnLoad();
            }
        };
        PoDynamicViewComponent.prototype.getValuesAndFieldsFromLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var valueAndFieldsFromLoad;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(typeof this.load === 'string')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.dynamicViewService.onLoad(this.load, this.value)];
                        case 1:
                            valueAndFieldsFromLoad = _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            if (typeof this.load === 'function') {
                                valueAndFieldsFromLoad = this.load();
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/, valueAndFieldsFromLoad || {}];
                    }
                });
            });
        };
        PoDynamicViewComponent.prototype.getVisibleFields = function () {
            if (this.showAllValue) {
                return this.getMergedFields();
            }
            return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
        };
        PoDynamicViewComponent.prototype.setFieldOnLoad = function (fieldOnLoad) {
            var index = this.fields.findIndex(function (field) { return field.property === fieldOnLoad.property; });
            if (index >= 0) {
                this.fields[index] = __assign(__assign({}, this.fields[index]), fieldOnLoad);
            }
            else {
                this.fields.push(__assign({}, fieldOnLoad));
            }
        };
        PoDynamicViewComponent.prototype.setFieldsOnLoad = function (fields) {
            var _this = this;
            if (fields) {
                fields.forEach(function (fieldOnLoad) {
                    _this.setFieldOnLoad(fieldOnLoad);
                });
            }
        };
        PoDynamicViewComponent.prototype.setValueOnLoad = function (newValue) {
            Object.assign(this.value, newValue);
        };
        PoDynamicViewComponent.prototype.updateValuesAndFieldsOnLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, fields;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getValuesAndFieldsFromLoad()];
                        case 1:
                            _a = _b.sent(), value = _a.value, fields = _a.fields;
                            this.setValueOnLoad(value);
                            this.setFieldsOnLoad(fields);
                            this.visibleFields = this.getVisibleFields();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PoDynamicViewComponent.ctorParameters = function () { return [
            { type: common.CurrencyPipe },
            { type: common.DatePipe },
            { type: common.DecimalPipe },
            { type: PoTimePipe },
            { type: common.TitleCasePipe },
            { type: PoDynamicViewService }
        ]; };
        PoDynamicViewComponent = __decorate([
            core.Component({
                selector: 'po-dynamic-view',
                template: "<div class=\"po-dynamic-view po-row\" *ngIf=\"visibleFields.length\">\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\"> </ng-container>\n  </ng-template>\n</div>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"field.value\"> </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag\n    [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\"\n  >\n  </po-tag>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [common.CurrencyPipe,
                common.DatePipe,
                common.DecimalPipe,
                PoTimePipe,
                common.TitleCasePipe,
                PoDynamicViewService])
        ], PoDynamicViewComponent);
        return PoDynamicViewComponent;
    }(PoDynamicViewBaseComponent));

    var PoDynamicModule = /** @class */ (function () {
        function PoDynamicModule() {
        }
        PoDynamicModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule],
                declarations: [PoDynamicFormComponent, PoDynamicFormFieldsComponent, PoDynamicViewComponent],
                exports: [PoDynamicFormComponent, PoDynamicViewComponent],
                providers: [
                    common.CurrencyPipe,
                    common.DatePipe,
                    common.DecimalPipe,
                    PoTimePipe,
                    common.TitleCasePipe,
                    PoDynamicFormLoadService,
                    PoDynamicFormValidationService,
                    PoDynamicViewService
                ]
            })
        ], PoDynamicModule);
        return PoDynamicModule;
    }());

    var PoGridCellActionComponent = /** @class */ (function () {
        function PoGridCellActionComponent() {
            this.position = '';
        }
        PoGridCellActionComponent.prototype.onKeyDownContent = function (event) {
            // console.log('onKeyDownContent: ', event);
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
                // this.openActions(this.value);
                return;
            }
        };
        __decorate([
            core.Input('p-position'),
            __metadata("design:type", String)
        ], PoGridCellActionComponent.prototype, "position", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", String)
        ], PoGridCellActionComponent.prototype, "value", void 0);
        PoGridCellActionComponent = __decorate([
            core.Component({
                selector: 'po-grid-cell-action',
                template: "<div>\n  <div\n    #contentElement\n    [id]=\"position\"\n    class=\"po-grid-cell-action-content\"\n    tabindex=\"0\"\n    (keydown)=\"onKeyDownContent($event)\"\n  >\n    <span>{{ value || '&nbsp;' }}</span>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], PoGridCellActionComponent);
        return PoGridCellActionComponent;
    }());

    var PoGridCellComponent = /** @class */ (function () {
        function PoGridCellComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this._value = '';
            this.edit = false;
            this.editValue = '';
            this.align = 'left';
            this.freeze = false;
            this.tabIndex = -1;
            this.position = '';
            this.readonly = false;
            this.required = false;
            this.valueChange = new core.EventEmitter();
        }
        Object.defineProperty(PoGridCellComponent.prototype, "width", {
            get: function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: function (value) {
                this._width = value;
                if (this.freeze && !this._width) {
                    this._width = 100;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoGridCellComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            // @Input('p-value') value?: string;
            set: function (value) {
                this._value = value;
                this.valueChange.emit(this._value);
            },
            enumerable: true,
            configurable: true
        });
        PoGridCellComponent.prototype.onKeyDownContent = function (event) {
            // console.log('onKeyDownContent: ', event);
            // BACKSPACE / DELETE
            if (!event.ctrlKey && (event.keyCode === 8 || event.keyCode === 46)) {
                if (this.readonly) {
                    return;
                }
                event.preventDefault();
                this.value = '';
                return;
            }
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
                this.onEditCell(this.value);
                return;
            }
            // A..Z - 0..9
            if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57)) {
                event.preventDefault();
                this.onEditCell(event.key);
                return;
            }
        };
        PoGridCellComponent.prototype.dblclick = function (event) {
            // console.log('dblclick: ', event);
            event.preventDefault();
            this.onEditCell(this.value);
        };
        PoGridCellComponent.prototype.onBlurInput = function (event) {
            // console.log('onBlurInput: ', event);
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
        };
        PoGridCellComponent.prototype.onKeyDownInput = function (event) {
            // console.log('onKeyDownInput: ', event);
            // ENTER
            if (event.keyCode === 13) {
                this.value = this.editValue;
                this.editValue = undefined;
                this.edit = false;
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
            }
            // ESCAPE
            if (event.keyCode === 27) {
                this.editValue = undefined;
                this.edit = false;
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
                event.stopPropagation();
            }
        };
        PoGridCellComponent.prototype.onEditCell = function (value) {
            if (this.readonly) {
                return;
            }
            this.editValue = value;
            this.edit = true;
            this.changeDetectorRef.detectChanges();
            this.inputElement.nativeElement.focus();
        };
        PoGridCellComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('p-align'),
            __metadata("design:type", String)
        ], PoGridCellComponent.prototype, "align", void 0);
        __decorate([
            core.Input('p-freeze'),
            __metadata("design:type", Boolean)
        ], PoGridCellComponent.prototype, "freeze", void 0);
        __decorate([
            core.Input('p-tab-index'),
            __metadata("design:type", Number)
        ], PoGridCellComponent.prototype, "tabIndex", void 0);
        __decorate([
            core.Input('p-position'),
            __metadata("design:type", String)
        ], PoGridCellComponent.prototype, "position", void 0);
        __decorate([
            core.Input('p-width'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoGridCellComponent.prototype, "width", null);
        __decorate([
            core.Input('p-readonly'),
            __metadata("design:type", Boolean)
        ], PoGridCellComponent.prototype, "readonly", void 0);
        __decorate([
            core.Input('p-required'),
            __metadata("design:type", Boolean)
        ], PoGridCellComponent.prototype, "required", void 0);
        __decorate([
            core.Output('p-valueChange'),
            __metadata("design:type", Object)
        ], PoGridCellComponent.prototype, "valueChange", void 0);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoGridCellComponent.prototype, "value", null);
        __decorate([
            core.ViewChild('inputElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoGridCellComponent.prototype, "inputElement", void 0);
        __decorate([
            core.ViewChild('contentElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoGridCellComponent.prototype, "contentElement", void 0);
        PoGridCellComponent = __decorate([
            core.Component({
                selector: 'po-grid-cell',
                template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div\n      #contentElement\n      [id]=\"position\"\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=\"dblclick($event)\"\n    >\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement\n      class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput($event)\"\n    />\n\n    <!-- <po-input\n      #inputElement class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (p-blur)=\"onBlurInput($event)\">\n    </po-input> -->\n  </ng-template>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoGridCellComponent);
        return PoGridCellComponent;
    }());

    /**
     * @description
     *
     * Componente grid.
     *
     * Ações / atalhos:
     *
     * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
     * - ARROW-DOWN: Navega para celula inferior;
     * - ARROW-RIGHT: Navega para celula direita;
     * - ARROW-LEFT: Navega para celula esquerda;
     * - TAB: Navega para próxima celula;
     * - SHIFT+TAB: Navega para celula anterior;
     * - CTRL+DEL: Remove linha;
     * - DEL/BACKSPACE: Limpa celula;
     * - ENTER: Edita linha com valor atual/Confirma edição da celula;
     * - DOUBLE-CLICK: Edita linha com valor atual;
     * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
     * - A..Z/0..9: Inicia edição com valor em branco.
     *
     * @example
     *
     * <example name="po-grid-basic" title="PO Grid Basic">
     *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
     *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
     * </example>
     */
    var PoGridComponent = /** @class */ (function () {
        function PoGridComponent(changeDetectorRef, elRef, renderer) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.elRef = elRef;
            this.lastCell = '0-0';
            this.lastRow = 0;
            this.lastColumn = 0;
            this.currencyCell = '0-0';
            this.currencyRow = 0;
            this.currencyColumn = 0;
            this.logger = false;
            this.width = '100%';
            this.widporeeze = 0;
            this.widthActions = 0;
            this._columns = [];
            /**
             * @description
             *
             * Ações disparadas quando uma linha do grid é manipulada.
             */
            this.rowActions = {};
            /**
             * Lista com os dados que serão exibidos no grid.
             */
            this.data = [];
            this.debounceResize();
            this.resizeListener = renderer.listen('window', 'resize', function (event) {
                _this.debounceResize();
            });
        }
        Object.defineProperty(PoGridComponent.prototype, "columns", {
            get: function () {
                return this._columns.filter(function (column) { return column.freeze !== true && column.action !== true; });
            },
            /**
             * Colunas exibidas no grid.
             */
            set: function (value) {
                this._columns = __spread(value);
                this._columns.forEach(function (column) {
                    column.label = column.label || column.property;
                    if (column.freeze === true) {
                        column.cssWidth = (column.width || 100) + "px";
                    }
                    else {
                        column.cssWidth = column.width ? column.width + "px" : '100%';
                    }
                });
            },
            enumerable: true,
            configurable: true
        });
        PoGridComponent.prototype.ngOnDestroy = function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        PoGridComponent.prototype.debounceResize = function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(function () {
                var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
                _this.width = widthTableWrapper - (_this.widporeeze + 8) - _this.widthActions + "px";
            }, 100);
        };
        Object.defineProperty(PoGridComponent.prototype, "freezeColumns", {
            get: function () {
                var freezeColumns = this._columns.filter(function (column) { return column.freeze === true; });
                this.widporeeze = freezeColumns.reduce(function (prev, current) { return prev + (current.width || 100); }, 0);
                return freezeColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoGridComponent.prototype, "actionColumns", {
            get: function () {
                var actionsColumns = this._columns.filter(function (column) { return column.action === true; });
                this.widthActions = actionsColumns.length > 0 ? 56 : 0;
                return actionsColumns;
            },
            enumerable: true,
            configurable: true
        });
        PoGridComponent.prototype.cancelRow = function (event, row) {
            var _this = this;
            var el = event.path.find(function (element) { return element.id; });
            if (!el) {
                return;
            }
            var _a = __read(el.id.split('-'), 1), x = _a[0];
            if (this.isEmptyRow(x)) {
                if (!this.removeRow(event, row)) {
                    return;
                }
                this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
            }
            else {
                this.data[+x - 1] = Object.assign({}, this.currencyObj);
                setTimeout(function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); });
            }
        };
        PoGridComponent.prototype.removeRow = function (event, row) {
            if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
                return false;
            }
            var index = this.data.indexOf(row);
            this.data.splice(index, 1);
            this.changeDetectorRef.detectChanges();
            if (this.data.length === 0 || index === this.data.length) {
                this.selectCell(this.currencyRow - 1, this.currencyColumn);
            }
            else {
                this.selectCell(this.currencyRow, this.currencyColumn);
            }
            return true;
        };
        PoGridComponent.prototype.tableKeydown = function (event, direction) {
            var _a = __read(event.target.id.split('-'), 2), row = _a[0], col = _a[1];
            row = +row;
            col = +col;
            var prow = +row;
            var pcol = +col;
            // event.preventDefault();
            // event.stopPropagation();
            // debugger;
            if (direction === 'down') {
                if (row <= this.data.length) {
                    prow++;
                }
                if (row === this.data.length) {
                    if (row === 0 || !this.isEmptyRow(row)) {
                        if (this.saveRow(row)) {
                            if (!this.insertRow()) {
                                return;
                            }
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        prow--;
                    }
                }
            }
            else if (direction === 'up' && row > 0) {
                prow--;
            }
            else if (direction === 'left' && col > 0) {
                pcol--;
            }
            else if (direction === 'right' && col < this._columns.length - 1) {
                pcol++;
            }
            else if (direction === 'next') {
                if (col < this._columns.length - 1) {
                    pcol++;
                    event.preventDefault();
                }
                else if (row < this.data.length) {
                    pcol = 0;
                    prow++;
                    event.preventDefault();
                }
            }
            else if (direction === 'prior') {
                if (col > 0) {
                    pcol--;
                    event.preventDefault();
                }
                else if (row > 0) {
                    pcol = this._columns.length - 1;
                    prow--;
                    event.preventDefault();
                }
            }
            if (this.currencyCell === prow + "-" + pcol) {
                // console.log('vazou');
                return;
            }
            // debugger;
            if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
                if (!this.isEmptyRow(row)) {
                    if (!this.saveRow(row)) {
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            if (this.currencyRow !== prow) {
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
                // console.log('mudou de linha');
            }
            this.lastCell = event.target.id;
            this.lastRow = row;
            this.lastColumn = col;
            this.selectCell(prow, pcol);
        };
        PoGridComponent.prototype.tableClick = function (event) {
            var el = event.path.find(function (element) { return element.id; });
            if (!el) {
                this.selectCell(this.currencyRow, this.currencyColumn);
                return;
            }
            if (this.currencyCell === el.id) {
                return;
            }
            var _a = __read(el.id.split('-'), 2), row = _a[0], col = _a[1];
            var prow = +row;
            var pcol = +col;
            if (prow !== this.currencyRow) {
                if (this.currencyRow > 0) {
                    if (!this.isEmptyRow(this.currencyRow)) {
                        if (!this.saveRow(this.currencyRow)) {
                            this.selectCell(this.currencyRow, this.currencyColumn);
                            return;
                        }
                    }
                    else {
                        if (!this.removeRow(event, row)) {
                            return;
                        }
                    }
                }
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
                // console.log('>>>>>>> ', prow - 1);
            }
            this.lastCell = this.currencyCell;
            this.lastRow = this.currencyRow;
            this.lastColumn = this.currencyColumn;
            this.currencyCell = el.id;
            this.currencyRow = prow;
            this.currencyColumn = pcol;
        };
        PoGridComponent.prototype.saveRow = function (row) {
            // console.log(this.data[row - 1]);
            var _this = this;
            var obj = this.data[row - 1];
            if (!Object.keys(obj).some(function (prop) { return obj[prop] !== _this.currencyObj[prop]; })) {
                // console.log('tudo igual');
                return true;
            }
            if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
                return false;
            }
            var requireds = [];
            this.columns.forEach(function (column) {
                if (column.required === true && !obj[column.property]) {
                    requireds.push(column.property);
                }
            });
            return requireds.length === 0;
        };
        PoGridComponent.prototype.insertRow = function () {
            var obj = {};
            if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
                return false;
            }
            // this.currencyObj = Object.assign({}, obj);
            this.data.push(obj);
            this.changeDetectorRef.detectChanges();
            return true;
        };
        PoGridComponent.prototype.isEmptyRow = function (row) {
            var obj = this.data[row - 1];
            if (!obj) {
                // title
                return false;
            }
            var filled = Object.keys(obj).some(function (property) { return obj[property]; });
            return !filled;
        };
        PoGridComponent.prototype.selectCell = function (row, col) {
            var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
            if (nextCell) {
                this.currencyCell = row + "-" + col;
                this.currencyRow = row;
                this.currencyColumn = col;
                nextCell.focus();
            }
        };
        PoGridComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('table', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoGridComponent.prototype, "tableElement", void 0);
        __decorate([
            core.ViewChild('wrapper', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoGridComponent.prototype, "tableWrapper", void 0);
        __decorate([
            core.Input('p-row-actions'),
            __metadata("design:type", Object)
        ], PoGridComponent.prototype, "rowActions", void 0);
        __decorate([
            core.Input('p-columns'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoGridComponent.prototype, "columns", null);
        __decorate([
            core.Input('p-data'),
            __metadata("design:type", Array)
        ], PoGridComponent.prototype, "data", void 0);
        PoGridComponent = __decorate([
            core.Component({
                selector: 'po-grid',
                template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br />\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br />\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br />\n    <hr />\n    currencyObj: {{ currencyObj | json }}\n    <hr />\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\"\n      >\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div\n          class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\"\n          [style.max-width]=\"width\"\n          [style.min-width]=\"width\"\n        >\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"po-grid-footer-wrapper\">\n    <div class=\"po-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n  <div class=\"po-grid po-grid-actions\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-title\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-align]=\"column.align\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell-action\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-cell\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-value]=\"row[column.property]\"\n        >\n        </po-grid-cell-action>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef, core.ElementRef, core.Renderer2])
        ], PoGridComponent);
        return PoGridComponent;
    }());

    var PoGridHeadComponent = /** @class */ (function () {
        function PoGridHeadComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.align = 'left';
            this.boolean = false;
            this.position = '';
            this.tabIndex = -1;
        }
        Object.defineProperty(PoGridHeadComponent.prototype, "width", {
            get: function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        PoGridHeadComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('p-align'),
            __metadata("design:type", String)
        ], PoGridHeadComponent.prototype, "align", void 0);
        __decorate([
            core.Input('p-freeze'),
            __metadata("design:type", Boolean)
        ], PoGridHeadComponent.prototype, "boolean", void 0);
        __decorate([
            core.Input('p-position'),
            __metadata("design:type", String)
        ], PoGridHeadComponent.prototype, "position", void 0);
        __decorate([
            core.Input('p-tab-index'),
            __metadata("design:type", Number)
        ], PoGridHeadComponent.prototype, "tabIndex", void 0);
        __decorate([
            core.Input('p-width'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoGridHeadComponent.prototype, "width", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoGridHeadComponent.prototype, "title", void 0);
        PoGridHeadComponent = __decorate([
            core.Component({
                selector: 'po-grid-head',
                template: "<div>\n  <div [id]=\"position\" class=\"po-grid-head-content po-grid-head-{{ align }}\" tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoGridHeadComponent);
        return PoGridHeadComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-grid.
     */
    var PoGridModule = /** @class */ (function () {
        function PoGridModule() {
        }
        PoGridModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule, PoFieldModule],
                declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent],
                exports: [PoGridComponent]
            })
        ], PoGridModule);
        return PoGridModule;
    }());

    var poListViewLiteralsDefault = {
        en: {
            hideDetails: 'Hide details',
            loadMoreData: 'Load more data',
            noData: 'No data found',
            selectAll: 'Select all',
            showDetails: 'Show details'
        },
        es: {
            hideDetails: 'Ocultar detalles',
            loadMoreData: 'Cargar más resultados',
            noData: 'Datos no encontrados',
            selectAll: 'Seleccionar todos',
            showDetails: 'Mostrar detalles'
        },
        pt: {
            hideDetails: 'Ocultar detalhes',
            loadMoreData: 'Carregar mais resultados',
            noData: 'Nenhum dado encontrado',
            selectAll: 'Selecionar todos',
            showDetails: 'Exibir detalhes'
        },
        ru: {
            hideDetails: 'Скрыть детали',
            loadMoreData: 'Загрузить больше результатов',
            noData: 'Данные не найдены',
            selectAll: 'Выбрать все',
            showDetails: 'Посмотреть детали'
        }
    };
    /**
     * @description
     *
     * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
     * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
     *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
     * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
     *
     * O componente disponibiliza uma área específica para exibição informações adicionais,
     * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
     */
    var PoListViewBaseComponent = /** @class */ (function () {
        function PoListViewBaseComponent() {
            this.selectAll = false;
            this.showHeader = false;
            /**
             * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
             *
             * > Caso nenhuma ação for definida o mesmo não ficará visível.
             */
            this.showMore = new core.EventEmitter();
            /**
             * Ação que será executada ao clicar no título.
             *
             * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
             */
            this.titleAction = new core.EventEmitter();
        }
        Object.defineProperty(PoListViewBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de ações que serão exibidas no componente.
             */
            set: function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-list-view` em *pixels*.
             */
            set: function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "hideSelectAll", {
            get: function () {
                return this._hideSelectAll;
            },
            /**
             * @description
             *
             * Esconde o *checkbox* para seleção de todos os itens.
             *
             * @default `false`
             */
            set: function (hideSelectAll) {
                this._hideSelectAll = convertToBoolean(hideSelectAll);
                this.showMainHeader();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /** Lista de itens que serão exibidos no componente. */
            set: function (value) {
                this._items = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poListViewLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-list-view`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoListViewLiterals = {
             *    hideDetail: 'Ocultar detalhes completamente',
             *    loadMoreData: 'Mais dados',
             *    showDetail: 'Mostrar mais detalhes',
             *    selectAll: 'Selecionar todos os itens'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoListViewLiterals = {
             *    showDetail: 'Mostrar mais detalhes'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-list-view
             *   [p-literals]="customLiterals">
             * </po-list-view>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poListViewLiteralsDefault[poLocaleDefault]), poListViewLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poListViewLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "select", {
            get: function () {
                return this._select;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
             * item está selecionado, por exemplo:
             *
             * ```
             *  item.$selected
             *
             *  // ou
             *
             *  item['$selected']
             * ```
             *
             * @default `false`
             */
            set: function (select) {
                this._select = convertToBoolean(select);
                this.showMainHeader();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewBaseComponent.prototype, "showMoreDisabled", {
            get: function () {
                return this._showMoreDisabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o botão `Carregar Mais Resultados` será desabilitado.
             */
            set: function (value) {
                this._showMoreDisabled = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        PoListViewBaseComponent.prototype.onClickAction = function (listViewAction, item) {
            var cleanItem = this.deleteInternalAttrs(item);
            if (listViewAction.action) {
                listViewAction.action(cleanItem);
            }
        };
        PoListViewBaseComponent.prototype.onShowMore = function () {
            this.showMore.emit();
        };
        PoListViewBaseComponent.prototype.runTitleAction = function (listItem) {
            var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
            this.titleAction.emit(itemWithPublicProperties);
        };
        PoListViewBaseComponent.prototype.selectAllListItems = function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach(function (item) {
                    item.$selected = _this.selectAll;
                });
            }
        };
        PoListViewBaseComponent.prototype.selectListItem = function (row) {
            row.$selected = !row.$selected;
            this.selectAll = this.checkIfItemsAreSelected(this.items);
        };
        PoListViewBaseComponent.prototype.deleteInternalAttrs = function (item) {
            var itemCopy = item ? __assign({}, item) : undefined;
            for (var key in itemCopy) {
                if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                    delete itemCopy[key];
                }
            }
            return itemCopy;
        };
        PoListViewBaseComponent.prototype.checkIfItemsAreSelected = function (items) {
            var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
            var everyChecked = function (item) { return item.$selected; };
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        PoListViewBaseComponent.prototype.showMainHeader = function () {
            this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
        };
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoListViewBaseComponent.prototype, "actions", null);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoListViewBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-hide-select-all'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoListViewBaseComponent.prototype, "hideSelectAll", null);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoListViewBaseComponent.prototype, "items", null);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoListViewBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-property-link'),
            __metadata("design:type", String)
        ], PoListViewBaseComponent.prototype, "propertyLink", void 0);
        __decorate([
            core.Input('p-property-title'),
            __metadata("design:type", String)
        ], PoListViewBaseComponent.prototype, "propertyTitle", void 0);
        __decorate([
            core.Input('p-select'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoListViewBaseComponent.prototype, "select", null);
        __decorate([
            core.Input('p-show-more-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoListViewBaseComponent.prototype, "showMoreDisabled", null);
        __decorate([
            core.Output('p-show-more'),
            __metadata("design:type", core.EventEmitter)
        ], PoListViewBaseComponent.prototype, "showMore", void 0);
        __decorate([
            core.Output('p-title-action'),
            __metadata("design:type", core.EventEmitter)
        ], PoListViewBaseComponent.prototype, "titleAction", void 0);
        PoListViewBaseComponent = __decorate([
            core.Directive()
        ], PoListViewBaseComponent);
        return PoListViewBaseComponent;
    }());

    /**
     * @usedBy PoListViewComponent
     *
     * @description
     *
     * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-list-view
     *   p-property-title="name"
     *   [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
     *
     *   <ng-template p-list-view-content-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
     *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-list-view
     *    p-property-title="name"
     *    [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
     *
     *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-list-view>
     * ...
     *
     * ```
     *
     * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
     * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
     * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * @Component({
     *    selector: 'app-root',
     *    template: `
     *      ...
     *      <po-list-view
     *        [p-items]="items">
     *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
     *          <div class="po-row">
     *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
     *          </div>
     *        </ng-template>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public items = [{
     *      code: 1200,
     *      product: 'Rice',
     *      customer: 'Supermarket 1',
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      customer: 'Supermarket 2'
     *    }];
     *
     *    customTitle(item) {
     *      return `${item.code} - ${item.product}`;
     *    }
     * }
     * ```
     */
    var PoListViewContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoListViewContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoListViewContentTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", Function)
        ], PoListViewContentTemplateDirective.prototype, "title", void 0);
        PoListViewContentTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-list-view-content-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoListViewContentTemplateDirective);
        return PoListViewContentTemplateDirective;
    }());

    /**
     * @usedBy PoListViewComponent
     *
     * @description
     *
     * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
     * botão `Exibir detalhes` abaixo do conteúdo principal do item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-list-view
     *   p-property-title="name"
     *   [p-items]="items">
     *
     *   <ng-template p-list-view-detail-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
     *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-list-view
     *    p-property-title="name"
     *    [p-items]="items">
     *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-list-view>
     * ...
     *
     * ```
     */
    var PoListViewDetailTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoListViewDetailTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoListViewDetailTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        __decorate([
            core.Input('p-show-detail'),
            __metadata("design:type", Function)
        ], PoListViewDetailTemplateDirective.prototype, "showDetail", void 0);
        PoListViewDetailTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-list-view-detail-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoListViewDetailTemplateDirective);
        return PoListViewDetailTemplateDirective;
    }());

    /**
     * @docsExtends PoListViewBaseComponent
     *
     * @example
     *
     * <example name="po-list-view-basic" title="PO List View Basic">
     *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
     *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-list-view-labs" title="PO List View Labs">
     *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
     *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
     *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
     * </example>
     */
    var PoListViewComponent = /** @class */ (function (_super) {
        __extends(PoListViewComponent, _super);
        function PoListViewComponent(changeDetector, differs) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(PoListViewComponent.prototype, "hasContentTemplate", {
            get: function () {
                return !!this.listViewContentTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "hasDetailTemplate", {
            get: function () {
                return !!this.listViewDetailTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "displayShowMoreButton", {
            get: function () {
                return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "showButtonsActions", {
            get: function () {
                return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "showPopupActions", {
            get: function () {
                return this.visibleActions && this.visibleActions.length > 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "titleHasAction", {
            get: function () {
                return this.titleAction.observers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoListViewComponent.prototype, "visibleActions", {
            get: function () {
                return this.actions && this.actions.filter(function (action) { return action.visible !== false; });
            },
            enumerable: true,
            configurable: true
        });
        PoListViewComponent.prototype.ngAfterContentInit = function () {
            this.initShowDetail();
        };
        PoListViewComponent.prototype.ngDoCheck = function () {
            this.checkItemsChange();
        };
        PoListViewComponent.prototype.checkTitleType = function (item) {
            if (this.propertyLink && item[this.propertyLink]) {
                return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        PoListViewComponent.prototype.getItemTitle = function (item) {
            return this.hasContentTemplate && this.listViewContentTemplate.title
                ? this.listViewContentTemplate.title(item)
                : item[this.propertyTitle];
        };
        PoListViewComponent.prototype.hasItems = function () {
            return this.items && this.items.length > 0;
        };
        PoListViewComponent.prototype.returnBooleanValue = function (listViewAction, item) {
            return isTypeof(listViewAction.disabled, 'function')
                ? listViewAction.disabled(item)
                : listViewAction.disabled;
        };
        PoListViewComponent.prototype.trackBy = function (index) {
            return index;
        };
        PoListViewComponent.prototype.togglePopup = function (item, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.poPopupComponent.toggle(item);
        };
        PoListViewComponent.prototype.checkItemsChange = function () {
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
                this.showHeader = true;
            }
        };
        PoListViewComponent.prototype.initShowDetail = function () {
            var _this = this;
            if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
                this.items.forEach(function (item) { return (item.$showDetail = _this.listViewDetailTemplate.showDetail(item)); });
            }
        };
        PoListViewComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.ContentChild(PoListViewContentTemplateDirective, { static: true }),
            __metadata("design:type", PoListViewContentTemplateDirective)
        ], PoListViewComponent.prototype, "listViewContentTemplate", void 0);
        __decorate([
            core.ContentChild(PoListViewDetailTemplateDirective, { static: true }),
            __metadata("design:type", PoListViewDetailTemplateDirective)
        ], PoListViewComponent.prototype, "listViewDetailTemplate", void 0);
        __decorate([
            core.ViewChild('popup', { static: true }),
            __metadata("design:type", PoPopupComponent)
        ], PoListViewComponent.prototype, "poPopupComponent", void 0);
        PoListViewComponent = __decorate([
            core.Component({
                selector: 'po-list-view',
                template: "<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\"\n>\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\"\n        />\n        <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <input\n                  class=\"po-input po-checkbox-group-input\"\n                  type=\"checkbox\"\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\"\n                />\n                <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a\n                *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <a\n                *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <span\n                *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button\n                *ngFor=\"let action of visibleActions\"\n                p-small=\"true\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-type]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\"\n              >\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span\n                #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\"\n              >\n              </span>\n            </div>\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n",
                animations: [
                    animations.trigger('showHideDetail', [
                        animations.state('*', animations.style({ 'overflow-y': 'visible' })),
                        animations.state('void', animations.style({ 'overflow-y': 'hidden' })),
                        animations.transition('* => void', [animations.style({ height: '*', 'overflow-y': 'hidden' }), animations.animate(100, animations.style({ height: 0 }))]),
                        animations.transition('void => *', [animations.style({ height: '0' }), animations.animate(100, animations.style({ height: '*' }))])
                    ])
                ]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef, core.IterableDiffers])
        ], PoListViewComponent);
        return PoListViewComponent;
    }(PoListViewBaseComponent));

    /**
     * @description
     *
     * Módulo do componente `po-list-view`.
     *
     * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoListViewModule = /** @class */ (function () {
        function PoListViewModule() {
        }
        PoListViewModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule, PoButtonModule, PoPopupModule],
                declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                providers: [],
                schemas: []
            })
        ], PoListViewModule);
        return PoListViewModule;
    }());

    var PO_BADGE_COLORS = [
        'color-01',
        'color-02',
        'color-03',
        'color-04',
        'color-05',
        'color-06',
        'color-07',
        'color-08',
        'color-09',
        'color-10',
        'color-11',
        'color-12'
    ];
    var PO_BADGE_COLOR_DEFAULT = 'color-07';
    /**
     * @description
     *
     * @docsPrivate
     *
     * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
     */
    var PoBadgeBaseComponent = /** @class */ (function () {
        function PoBadgeBaseComponent() {
        }
        Object.defineProperty(PoBadgeBaseComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a cor de fundo do componente e aceita os valores:
             *
             * <span class="dot po-color-01"></span> `color-01`
             *
             * <span class="dot po-color-02"></span> `color-02`
             *
             * <span class="dot po-color-03"></span> `color-03`
             *
             * <span class="dot po-color-04"></span> `color-04`
             *
             * <span class="dot po-color-05"></span> `color-05`
             *
             * <span class="dot po-color-06"></span> `color-06`
             *
             * <span class="dot po-color-07"></span> `color-07`
             *
             * <span class="dot po-color-08"></span> `color-08`
             *
             * <span class="dot po-color-09"></span> `color-09`
             *
             * <span class="dot po-color-10"></span> `color-10`
             *
             * <span class="dot po-color-11"></span> `color-11`
             *
             * <span class="dot po-color-12"></span> `color-12`
             *
             * @default `color-07`
             */
            set: function (value) {
                this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoBadgeBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * @description
             *
             * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
             */
            set: function (value) {
                this._value = convertToInt(value);
                this.setBadgeValue(this._value);
            },
            enumerable: true,
            configurable: true
        });
        PoBadgeBaseComponent.prototype.setBadgeValue = function (value) {
            var validRangeValue = (value || value === 0) && value >= 0 && value < 100;
            this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
        };
        __decorate([
            core.Input('p-color'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoBadgeBaseComponent.prototype, "color", null);
        __decorate([
            core.Input('p-value'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoBadgeBaseComponent.prototype, "value", null);
        PoBadgeBaseComponent = __decorate([
            core.Directive()
        ], PoBadgeBaseComponent);
        return PoBadgeBaseComponent;
    }());

    /**
     * @docsExtends PoBadgeBaseComponent
     *
     * @docsPrivate
     */
    var PoBadgeComponent = /** @class */ (function (_super) {
        __extends(PoBadgeComponent, _super);
        function PoBadgeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoBadgeComponent = __decorate([
            core.Component({
                selector: 'po-badge',
                template: "<div class=\"po-badge po-{{ color }}\">\n  <span class=\"po-badge-value\">{{ badgeValue }}</span>\n</div>\n"
            })
        ], PoBadgeComponent);
        return PoBadgeComponent;
    }(PoBadgeBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-badge.
     */
    var PoBadgeModule = /** @class */ (function () {
        function PoBadgeModule() {
        }
        PoBadgeModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [PoBadgeComponent],
                exports: [PoBadgeComponent]
            })
        ], PoBadgeModule);
        return PoBadgeModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a interface `PoMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
     * caso for uma URL, no componente `po-menu`.
     */
    var PoMenuService = /** @class */ (function () {
        function PoMenuService(http) {
            this.http = http;
        }
        Object.defineProperty(PoMenuService.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: true,
            configurable: true
        });
        PoMenuService.prototype.configProperties = function (url) {
            this._url = url;
        };
        PoMenuService.prototype.getFilteredData = function (search, params) {
            var filterParams = __assign({ search: search }, params);
            return this.http
                .get(this.url, { params: filterParams })
                .pipe(operators.map(function (response) { return response && response.items; }));
        };
        PoMenuService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        PoMenuService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], PoMenuService);
        return PoMenuService;
    }());

    var poMenuLiteralsDefault = {
        en: { itemNotFound: 'Item not found.' },
        es: { itemNotFound: 'Elemento no encontrado.' },
        pt: { itemNotFound: 'Item não encontrado.' }
    };
    /**
     * @description
     *
     * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
     *
     * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
     * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
     */
    var PoMenuBaseComponent = /** @class */ (function () {
        function PoMenuBaseComponent(menuService) {
            this.menuService = menuService;
            this._collapsed = false;
            this._filter = false;
            this._maxLevel = 4;
            this._menus = [];
            this.literals = __assign(__assign({}, poMenuLiteralsDefault[poLocaleDefault]), poMenuLiteralsDefault[browserLanguage()]);
        }
        Object.defineProperty(PoMenuBaseComponent.prototype, "collapsed", {
            get: function () {
                return this._collapsed;
            },
            /**
             * @optional
             *
             * @description
             *
             * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
             *
             * > Utilize esta propriedade para iniciar o menu colapsado.
             *
             * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
             * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
             *
             * **Importante:**
             *
             * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
             *
             * @default `false`
             */
            set: function (collapsed) {
                this._collapsed = convertToBoolean(collapsed);
                this.validateCollapseClass();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "menus", {
            get: function () {
                return this._menus;
            },
            /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: function (menus) {
                this._menus = Array.isArray(menus) ? menus : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "maxLevel", {
            get: function () {
                return this._maxLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um campo para pesquisa no menu.
             * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
             * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
             *
             * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
             *
             * @default `false`
             */
            set: function (filter) {
                this._filter = filter === '' ? true : convertToBoolean(filter);
                this.filteredItems = __spread(this._menus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "service", {
            get: function () {
                return this._service;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
             * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
             * serviço implementando a interface `PoMenuFilter`.
             *
             * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
             * [Guia de implementação de APIs](https://po-ui.io/guides/api) do PO UI.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
             * no parâmetro `search`, veja exemplo:
             *
             * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
             *
             * ```
             * <po-menu p-service="/api/v1/fnd/menu">
             * </po-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas
             * ```
             *
             * > É necessário que propriedade `p-filter` esteja habilitada.
             */
            set: function (value) {
                this._service = value || undefined;
                this.configService(this.service);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "params", {
            get: function () {
                return this._params;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
             *
             * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
             * será passado como parâmetro, na função `getFilteredData`.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
             * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
             *
             * ```
             * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
             * </po-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
             * ```
             */
            set: function (value) {
                this._params = value && isTypeof(value, 'object') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "logo", {
            get: function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             */
            set: function (value) {
                this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuBaseComponent.prototype, "shortLogo", {
            get: function () {
                return this._shortLogo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
             * espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
             */
            set: function (value) {
                this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        PoMenuBaseComponent.prototype.configService = function (service) {
            if (typeof service === 'string' && service.trim()) {
                // service url
                this.menuService.configProperties(service);
                this.filterService = this.menuService;
            }
            else if (typeof service === 'object' && service.getFilteredData) {
                // custom service
                this.filterService = service;
            }
            else {
                this.filterService = undefined;
            }
        };
        PoMenuBaseComponent.prototype.setMenuExtraProperties = function () {
            var _this = this;
            this.allowIcons = !!this.menus.length;
            this.allowCollapseMenu = !!this.menus.length;
            this.menus.forEach(function (menuItem) {
                _this._level = 1;
                _this.allowIcons = _this.allowIcons ? validValue(menuItem.icon) : false;
                _this.allowCollapseMenu = _this.allowCollapseMenu && _this.allowIcons ? validValue(menuItem.shortLabel) : false;
                _this.removeBadgeAlert(menuItem);
                _this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    _this._level++;
                    _this.processSubItems(menuItem);
                }
            });
        };
        PoMenuBaseComponent.prototype.setMenuItemProperties = function (menuItem) {
            menuItem['id'] = menuItem['id'] || uuid$1.v4();
            menuItem['level'] = this._level;
            menuItem['type'] = this.setMenuType(menuItem);
        };
        PoMenuBaseComponent.prototype.validateMenus = function (menus) {
            var _this = this;
            menus.forEach(function (menu) { return _this.validateMenu(menu); });
        };
        PoMenuBaseComponent.prototype.processSubItems = function (menu) {
            var _this = this;
            menu.subItems.forEach(function (menuItem, index, menuItems) {
                var previousItem = menuItems[index - 1];
                if (previousItem && previousItem.subItems) {
                    _this._level = previousItem['level'];
                }
                if (_this._level <= _this.maxLevel) {
                    _this.setMenuItemProperties(menuItem);
                    if (menuItem.subItems) {
                        _this._level++;
                        _this.processSubItems(menuItem);
                    }
                }
                if (!menu['badgeAlert']) {
                    menu = _this.setMenuBadgeAlert(menu, menuItem);
                }
            });
            menu.subItems = Object.assign([], menu.subItems);
        };
        PoMenuBaseComponent.prototype.removeBadgeAlert = function (menuItem) {
            var _this = this;
            if (menuItem['badgeAlert']) {
                delete menuItem['badgeAlert'];
            }
            if (menuItem.subItems) {
                menuItem.subItems.forEach(function (subItem) { return _this.removeBadgeAlert(subItem); });
            }
        };
        PoMenuBaseComponent.prototype.setMenuBadgeAlert = function (parent, child) {
            var childHasSubItems = child.subItems && child.subItems.length;
            var childHasBadgeAlert = child['badgeAlert'];
            var childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
            parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
            return parent;
        };
        PoMenuBaseComponent.prototype.setMenuType = function (menuItem) {
            if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
                return 'subItems';
            }
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        PoMenuBaseComponent.prototype.validateMenu = function (menuItem) {
            var _this = this;
            if (!menuItem.label || menuItem.label.trim() === '') {
                throw new Error('O atributo PoMenuItem.label não pode ser vazio.');
            }
            else if (menuItem.subItems) {
                menuItem.subItems.forEach(function (subItem) {
                    _this.validateMenu(subItem);
                });
            }
        };
        PoMenuBaseComponent.ctorParameters = function () { return [
            { type: PoMenuService }
        ]; };
        __decorate([
            core.Input('p-collapsed'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMenuBaseComponent.prototype, "collapsed", null);
        __decorate([
            core.Input('p-menus'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoMenuBaseComponent.prototype, "menus", null);
        __decorate([
            core.Input('p-filter'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMenuBaseComponent.prototype, "filter", null);
        __decorate([
            core.Input('p-service'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoMenuBaseComponent.prototype, "service", null);
        __decorate([
            core.Input('p-params'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoMenuBaseComponent.prototype, "params", null);
        __decorate([
            core.Input('p-logo'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoMenuBaseComponent.prototype, "logo", null);
        __decorate([
            core.Input('p-short-logo'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoMenuBaseComponent.prototype, "shortLogo", null);
        PoMenuBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoMenuService])
        ], PoMenuBaseComponent);
        return PoMenuBaseComponent;
    }());

    /**
     * @usedBy PoMenuComponent
     *
     * @description
     *
     * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
     * [`po-menu`](/documentation/po-menu).
     *
     * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `p-menu-header-template` dentro da *tag* do
     * [`po-menu`](/documentation/po-menu). Podendo ser utilizada de duas formas:
     *
     * Com `ng-template`
     * ```
     * ...
     * <po-menu [p-menus]="menus">
     *   <ng-template p-menu-header-template>
     *     ...
     *   </ng-template>
     * </po-menu>
     * ...
     * ```
     *
     * ou com *syntax sugar*
     * ```
     * ...
     * <po-menu [p-menus]="menus">
     *   <div *p-menu-header-template>
     *     ...
     *   </div>
     * </po-menu>
     * ...
     * ```
     *
     * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
     */
    var PoMenuHeaderTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoMenuHeaderTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoMenuHeaderTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        PoMenuHeaderTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-menu-header-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoMenuHeaderTemplateDirective);
        return PoMenuHeaderTemplateDirective;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a comunicação entre os items do po-menu.
     */
    var PoMenuItemsService = /** @class */ (function () {
        function PoMenuItemsService() {
            this.subjectParent = new rxjs.Subject();
            this.subjectChild = new rxjs.Subject();
        }
        // Envia informações do click do po-menu-item para o po-menu
        PoMenuItemsService.prototype.sendToParentMenuClicked = function (menu) {
            this.subjectChild.next(menu);
        };
        // Recebe do po-menu-item sua informação de click.
        PoMenuItemsService.prototype.receiveFromChildMenuClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
        PoMenuItemsService.prototype.sendToChildMenuClicked = function (menu) {
            this.subjectParent.next(menu);
        };
        // Recebe do po-menu as informações processadas do click de um po-menu-item.
        PoMenuItemsService.prototype.receiveFromParentMenuClicked = function () {
            return this.subjectParent.asObservable();
        };
        PoMenuItemsService = __decorate([
            core.Injectable()
        ], PoMenuItemsService);
        return PoMenuItemsService;
    }());

    var poMenuDebounceTime = 400;
    var poMenuMinLength = 3;
    var poMenuRootLevel = 1;
    /**
     * @docsExtends PoMenuBaseComponent
     *
     * @description
     *
     * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
     *
     * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
     * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
     * então o menu alternará novamente para o estado aberto.
     *
     * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
     *
     * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
     * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
     *
     * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
     * um serviço customizado implementando a interface `PoMenuFilter`.
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '@angular/router';
     *
     * ...
     *
     * @NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     PoModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '@angular/core';
     *
     * import { RouterModule, Routes } from '@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * @NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * @example
     *
     * <example name="po-menu-basic" title="PO Menu Basic">
     *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
     *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-labs" title="PO Menu Labs">
     *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
     *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
     *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
     * </example>
     */
    var PoMenuComponent = /** @class */ (function (_super) {
        __extends(PoMenuComponent, _super);
        function PoMenuComponent(changeDetector, viewRef, element, renderer, router, menuItemsService, menuService) {
            var _this = _super.call(this, menuService) || this;
            _this.changeDetector = changeDetector;
            _this.element = element;
            _this.renderer = renderer;
            _this.router = router;
            _this.menuItemsService = menuItemsService;
            _this.filterLoading = false;
            _this.mobileOpened = false;
            _this.noData = false;
            _this.filteringItems = false;
            _this.menuInitialized = false;
            _this.menuPrevious = null;
            _this.parentRef = viewRef['_hostView'][8];
            return _this;
        }
        Object.defineProperty(PoMenuComponent.prototype, "isActiveItemMenuSubMenu", {
            get: function () {
                return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "enableCollapse", {
            get: function () {
                return this.isCollapsed && !this.collapsedMobile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "enableCollapseButton", {
            get: function () {
                return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "hasFooter", {
            get: function () {
                return ((this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton) ||
                    (this.collapsed && !this.collapsedMobile));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuComponent.prototype, "isCollapsed", {
            get: function () {
                return this.allowCollapseMenu && this.collapsed;
            },
            enumerable: true,
            configurable: true
        });
        PoMenuComponent.prototype.ngDoCheck = function () {
            if (this.filteringItems && this.filter) {
                return;
            }
            var menuCurrent = JSON.stringify(this.menus);
            if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
                this.updateMenu();
                this.validateCollapseClass();
            }
        };
        PoMenuComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        PoMenuComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscribeToMenuItem();
            this.subscribeToRoute();
            setTimeout(function () {
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            });
        };
        PoMenuComponent.prototype.activateMenuByUrl = function (urlPath, menus) {
            var _this = this;
            if (menus) {
                return menus.some(function (menu) {
                    var formattedLink = getFormattedLink(menu.link);
                    if (formattedLink === urlPath) {
                        _this.linkActive = formattedLink;
                        _this.activateMenuItem(menu);
                        return true;
                    }
                    else {
                        return _this.activateMenuByUrl(urlPath, menu.subItems);
                    }
                });
            }
        };
        PoMenuComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        /**
         * <a id="colapseMethod"></a>
         *
         * *Método para colapsar (retrair) o menu.
         */
        PoMenuComponent.prototype.collapse = function () {
            this.validateToggleMenu(true);
        };
        PoMenuComponent.prototype.debounceFilter = function (filter) {
            var _this = this;
            clearTimeout(this.timeoutFilter);
            this.timeoutFilter = setTimeout(function () {
                _this.filterProcess(filter);
            }, poMenuDebounceTime);
        };
        /**
         * <a id="expandMethod"></a>
         *
         * *Método para expandir (aumentar) o menu.
         */
        PoMenuComponent.prototype.expand = function () {
            this.validateToggleMenu(false);
        };
        PoMenuComponent.prototype.subscribeToMenuItem = function () {
            var _this = this;
            this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) {
                _this.clickMenuItem(menu);
            });
        };
        PoMenuComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    var urlRouter = _this.checkingRouterChildrenFragments();
                    _this.checkActiveMenuByUrl(urlRouter);
                }
            });
        };
        /**
         * <a id="toggleMethod"></a>
         * *Método que colapsa e expande o menu alternadamente.
         *
         * > *Os métodos apenas vão colapsar/expandir o menu se:
         *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         */
        PoMenuComponent.prototype.toggle = function () {
            this.validateToggleMenu(!this.collapsed);
        };
        PoMenuComponent.prototype.toggleMenuMobile = function () {
            this.mobileOpened = !this.mobileOpened;
            this.collapsedMobile = this.collapsed && this.mobileOpened;
            this.validateCollapseClass(this.collapsedMobile);
            if (isMobile()) {
                return;
            }
            if (this.mobileOpened) {
                this.createResizeListener();
            }
        };
        PoMenuComponent.prototype.activateCollapseSubMenuItem = function () {
            this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
            if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
                this.openParentMenu(this.activeMenuItem);
            }
        };
        PoMenuComponent.prototype.activateMenuItem = function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = menu.link;
            if (this.activeMenuItem['level'] > poMenuRootLevel) {
                this.openParentMenu(this.activeMenuItem);
            }
            else {
                this.groupedMenuItem = null;
            }
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        };
        PoMenuComponent.prototype.areSubMenus = function (menus) {
            return menus.every(function (menu) { return menu['level'] > poMenuRootLevel; });
        };
        PoMenuComponent.prototype.checkingRouterChildrenFragments = function () {
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
        };
        PoMenuComponent.prototype.clearGroupMenuIfFirstLevel = function (activeMenuItem) {
            if (activeMenuItem['level'] === poMenuRootLevel) {
                this.groupedMenuItem = undefined;
            }
        };
        PoMenuComponent.prototype.clickMenuItem = function (menu) {
            if (menu.action) {
                this.executeMenuAction(menu);
            }
            if (menu['type'] === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu['type'] === 'internalLink') {
                this.activateMenuItem(menu);
            }
            else if (menu['type'] === 'subItems') {
                if (this.filteringItems) {
                    this.filteringItems = false;
                }
                this.groupMenuItem(menu);
            }
            if (menu['type'] !== 'subItems') {
                this.mobileOpened = false;
            }
        };
        PoMenuComponent.prototype.convertToMenuItemFiltered = function (menuItem) {
            if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
            var label = menuItem.label, link = menuItem.link;
            var menuItemFiltered = { label: label, link: link };
            this.setMenuItemProperties(menuItemFiltered);
            return menuItemFiltered;
        };
        PoMenuComponent.prototype.createResizeListener = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.toggleResize();
                _this.resizeListener();
            });
        };
        PoMenuComponent.prototype.executeMenuAction = function (menu) {
            if (typeof menu.action === 'string') {
                this.parentRef[menu.action](menu);
            }
            else {
                menu.action.call(this.parentRef, menu);
            }
        };
        PoMenuComponent.prototype.filterItems = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var trimFilter, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            trimFilter = filter && filter.trim();
                            if (!trimFilter) return [3 /*break*/, 4];
                            this.filteredItems = [];
                            _a = this;
                            if (!this.filterService) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterOnService(trimFilter)];
                        case 1:
                            _b = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _b = this.filterLocalItems(trimFilter);
                            _c.label = 3;
                        case 3:
                            _a.filteredItems = _b;
                            this.filteringItems = true;
                            return [3 /*break*/, 5];
                        case 4:
                            this.filteredItems = __spread(this.menus);
                            this.filteringItems = false;
                            _c.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        PoMenuComponent.prototype.filterLocalItems = function (filter) {
            var filteredItems = [];
            this.findItems(this.menus, filter.toLowerCase(), filteredItems);
            return filteredItems;
        };
        PoMenuComponent.prototype.filterProcess = function (filter) {
            var _this = this;
            this.filterLoading = true;
            this.filterItems(filter)
                .then(function () {
                _this.filterLoading = false;
                _this.showNoData();
                _this.changeDetector.detectChanges();
                _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
            })
                .catch(function (error) {
                _this.filterLoading = false;
                Promise.reject(error);
            });
        };
        PoMenuComponent.prototype.filterOnService = function (search) {
            if (search === void 0) { search = ''; }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(search.length >= poMenuMinLength)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterService
                                    .getFilteredData(search, this.params)
                                    .pipe(operators.map(function (menuItemsFiltered) { return menuItemsFiltered.map(function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); }); }))
                                    .toPromise()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, this.filteredItems];
                    }
                });
            });
        };
        PoMenuComponent.prototype.findItems = function (menus, filter, filteredItems) {
            var _this = this;
            menus.forEach(function (menu) {
                if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                    (menu.subItems && _this.findItems(menu.subItems, filter, filteredItems))) {
                    filteredItems.push(menu);
                }
            });
        };
        PoMenuComponent.prototype.findParent = function (menus, menuItem) {
            var getParent = function (menuItems, id) {
                if (menuItems) {
                    for (var index = 0; index < menuItems.length; index++) {
                        var menu = menuItems[index];
                        if (menu.subItems && menu.subItems.find(function (subItem) { return subItem['id'] === id; })) {
                            return menu;
                        }
                        var found = getParent(menu.subItems, id);
                        if (found) {
                            return found;
                        }
                    }
                }
            };
            return getParent(menus, menuItem['id']);
        };
        PoMenuComponent.prototype.findRootParent = function (menus, menu) {
            var findParent = this.findParent;
            var getRootParent = function (menuItems, menuItem) {
                var parent = findParent(menuItems, menuItem);
                if (parent['level'] !== poMenuRootLevel) {
                    parent = getRootParent(menuItems, parent);
                }
                return parent;
            };
            return getRootParent(menus, menu);
        };
        PoMenuComponent.prototype.getActiveMenuParent = function (menus, activeMenuItem, groupedMenuItem) {
            if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
                return this.findRootParent(menus, activeMenuItem);
            }
        };
        PoMenuComponent.prototype.groupMenuItem = function (menu) {
            if (this.collapsed) {
                this.toggleMenuCollapse();
            }
            menu['isOpened'] = !menu['isOpened'];
            this.groupedMenuItem = menu;
            if (this.activeMenuItem &&
                menu['isOpened'] &&
                this.isActiveItemMenuSubMenu &&
                this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
                this.activateMenuItem(this.activeMenuItem);
            }
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        };
        PoMenuComponent.prototype.isRootMenuEqualGroupedMenu = function (menus, activeMenuItem, groupedMenuItem) {
            var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
            return activeMenuRootParent['id'] === groupedMenuItem['id'];
        };
        PoMenuComponent.prototype.openParentMenu = function (childMenu) {
            var parent = this.findParent(this.menus, childMenu);
            parent['isOpened'] = true;
            this.groupedMenuItem = parent;
        };
        PoMenuComponent.prototype.showNoData = function () {
            this.noData = this.filteredItems.length === 0;
        };
        PoMenuComponent.prototype.toggleGroupedMenuItem = function () {
            this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
        };
        PoMenuComponent.prototype.toggleMenuCollapse = function (collapsed) {
            if (collapsed === void 0) { collapsed = false; }
            this.collapsed = collapsed;
            if (this.groupedMenuItem && this.activeMenuItem) {
                this.groupedMenuItem =
                    this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
                this.toggleGroupedMenuItem();
            }
            if (this.activeMenuItem) {
                this.activateCollapseSubMenuItem();
                this.menuItemsService.sendToChildMenuClicked({
                    active: this.activeMenuItem,
                    grouped: this.groupedMenuItem,
                    activatedByRoute: true
                });
            }
            this.updateMenu();
        };
        PoMenuComponent.prototype.toggleResize = function () {
            if (this.mobileOpened) {
                this.mobileOpened = false;
                this.collapsedMobile = false;
                this.validateCollapseClass(this.collapsedMobile);
            }
        };
        PoMenuComponent.prototype.validateToggleMenu = function (collapsed) {
            if (!this.allowCollapseMenu) {
                return;
            }
            this.toggleMenuCollapse(collapsed);
        };
        PoMenuComponent.prototype.updateMenu = function () {
            this.menuInitialized = true;
            this.setMenuExtraProperties();
            this.filteredItems = __spread(this.menus);
            this.menuPrevious = JSON.stringify(this.menus);
            this.validateMenus(this.menus);
        };
        PoMenuComponent.prototype.validateCollapseClass = function (collapsedMobile) {
            var wrapper = this.element.nativeElement.parentNode;
            this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
        };
        PoMenuComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ViewContainerRef },
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: router.Router },
            { type: PoMenuItemsService },
            { type: PoMenuService }
        ]; };
        __decorate([
            core.ContentChild(PoMenuHeaderTemplateDirective, { static: true }),
            __metadata("design:type", PoMenuHeaderTemplateDirective)
        ], PoMenuComponent.prototype, "menuHeaderTemplate", void 0);
        PoMenuComponent = __decorate([
            core.Component({
                selector: 'po-menu',
                template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n  <span class=\"po-icon po-icon-menu\"></span>\n</div>\n\n<div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n  <div class=\"po-menu-header\">\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n      <a href=\"./\">\n        <img\n          [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n          [src]=\"enableCollapse ? shortLogo || logo : logo\"\n        />\n      </a>\n    </div>\n\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n    </div>\n\n    <po-menu-filter *ngIf=\"filter && !enableCollapse\" [p-loading]=\"filterLoading\" (p-filter)=\"debounceFilter($event)\">\n    </po-menu-filter>\n  </div>\n\n  <nav class=\"po-menu-body\">\n    <!-- Inner e outer para esconder scroll -->\n    <div class=\"po-menu-outer\">\n      <div class=\"po-menu-inner\">\n        <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n          <div class=\"po-menu-item-first\">\n            <div class=\"po-menu-icon-container po-menu-item-no-data\">\n              <span class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></span>\n              <div class=\"po-lg-10 po-menu-icon-label\">{{ literals.itemNotFound }}</div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngFor=\"let menu of filteredItems; let menuIndex = index\" class=\"po-menu-item-wrapper\">\n          <po-menu-item\n            [class.po-menu-item-first]=\"menuIndex === 0\"\n            [p-action]=\"menu.action\"\n            [p-badge-alert]=\"menu.badgeAlert\"\n            [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n            [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n            [p-collapsed-menu]=\"enableCollapse\"\n            [p-icon]=\"allowIcons ? menu.icon : null\"\n            [p-id]=\"menu.id\"\n            [p-label]=\"menu.label\"\n            [p-level]=\"menu.level\"\n            [p-link]=\"menu.link\"\n            [p-short-label]=\"menu.shortLabel\"\n            [p-sub-items]=\"menu.subItems\"\n            [p-type]=\"menu.type\"\n          >\n          </po-menu-item>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n    <a class=\"po-menu-collapse-button-icon po-clickable\" (click)=\"toggle()\">\n      <span\n        class=\"po-icon\"\n        [class.po-icon-menu-close]=\"enableCollapseButton\"\n        [class.po-icon-menu-open]=\"enableCollapse\"\n      >\n      </span>\n    </a>\n  </div>\n</div>\n",
                providers: [PoMenuItemsService, PoMenuService]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef,
                core.ViewContainerRef,
                core.ElementRef,
                core.Renderer2,
                router.Router,
                PoMenuItemsService,
                PoMenuService])
        ], PoMenuComponent);
        return PoMenuComponent;
    }(PoMenuBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que apresenta o campo de pesquisa no po-menu.
     */
    var PoMenuFilterComponent = /** @class */ (function () {
        function PoMenuFilterComponent() {
            // Variável necessária para o po-clean identificar que deve ser criado.
            this.clean = true;
            this.filter = new core.EventEmitter();
        }
        PoMenuFilterComponent.prototype.filterItems = function (search) {
            this.filter.emit(search);
        };
        __decorate([
            core.Input('p-loading'),
            __metadata("design:type", Boolean)
        ], PoMenuFilterComponent.prototype, "loading", void 0);
        __decorate([
            core.ViewChild('inputFilter', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoMenuFilterComponent.prototype, "inputFilterElement", void 0);
        __decorate([
            core.Output('p-filter'),
            __metadata("design:type", Object)
        ], PoMenuFilterComponent.prototype, "filter", void 0);
        PoMenuFilterComponent = __decorate([
            core.Component({
                selector: 'po-menu-filter',
                template: "<div class=\"po-menu-filter-container\">\n  <input\n    #inputFilter\n    type=\"text\"\n    class=\"po-menu-filter\"\n    placeholder=\"Pesquisar\"\n    (keyup)=\"filterItems(inputFilter.value)\"\n  />\n\n  <div class=\"po-menu-filter-search-icon-container\">\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\n    <po-loading-icon *ngIf=\"loading\"></po-loading-icon>\n  </div>\n  <div class=\"po-menu-filter-close-icon-container\">\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\n  </div>\n</div>\n"
            })
        ], PoMenuFilterComponent);
        return PoMenuFilterComponent;
    }());

    // valor para que caibam 3 linhas de `label`
    var poMenuItemSubItemSize = 98;
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que implementa cada item do po-menu.
     */
    var PoMenuItemComponent = /** @class */ (function () {
        function PoMenuItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
            this._isSelected = false;
            this._isSubItem = false;
            this.maxHeight = 0;
        }
        Object.defineProperty(PoMenuItemComponent.prototype, "badgeValue", {
            get: function () {
                return this._badgeValue;
            },
            // Valor do badge.
            set: function (badgeValue) {
                this._badgeValue = convertToInt(badgeValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            // Indica se o item está selecionado.
            set: function (value) {
                this._isSelected = convertToBoolean(value);
                this.isSelectedSubItem = this.isSelected && this.isSubItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "isSubItem", {
            get: function () {
                return this._isSubItem;
            },
            // Indica se o item é um sub item
            set: function (value) {
                this._isSubItem = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "subItems", {
            get: function () {
                return this._subItems;
            },
            // Lista de sub-items.
            set: function (subitems) {
                this._subItems = subitems;
                if (this.isOpened) {
                    this.calcMenuSubItemsMaxHeight();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoMenuItemComponent.prototype, "canShowBadge", {
            get: function () {
                return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
            },
            enumerable: true,
            configurable: true
        });
        PoMenuItemComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
        };
        PoMenuItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            // subscribe to menu component messages
            this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
                _this.processMenuItem(menu);
            });
        };
        PoMenuItemComponent.prototype.clickMenuItem = function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked({
                    link: this.link,
                    action: this.action,
                    id: this.id,
                    icon: this.icon,
                    label: this.label,
                    level: this.level,
                    subItems: this.subItems,
                    isSelected: this.isSelected,
                    isOpened: this.isOpened,
                    shortLabel: this.shortLabel,
                    type: this.type
                });
            }
        };
        PoMenuItemComponent.prototype.accordionAnimation = function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
            if (this.id === menuOpened['id']) {
                this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
            }
            if (hasSubItemOpened) {
                this.maxHeight = menuOpened['isOpened']
                    ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                    : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
                if (activatedByRoute) {
                    this.maxHeight = this.getMinimumHeight(0, this, menuActive);
                }
            }
        };
        PoMenuItemComponent.prototype.activateMenu = function (menu) {
            this.isSelected = menu && this.id === menu.id;
        };
        PoMenuItemComponent.prototype.calcMenuSubItemsMaxHeight = function () {
            var _this = this;
            setTimeout(function () {
                var subItems = Array.from(_this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
                subItems.forEach(function (menuItem) { return (_this.maxHeight += menuItem.offsetHeight); });
            });
        };
        PoMenuItemComponent.prototype.getMinimumHeight = function (minimumHeight, menuItem, menuActive) {
            minimumHeight += poMenuItemSubItemSize;
            if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
                for (var index = 0; index < menuItem.subItems.length; index++) {
                    minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
                }
            }
            return minimumHeight;
        };
        PoMenuItemComponent.prototype.groupedMenu = function (menuActive, menuOpened, activatedByRoute) {
            if (activatedByRoute === void 0) { activatedByRoute = false; }
            var hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
            this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
            this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
            if (!this.isOpened) {
                this.maxHeight = 0;
                return;
            }
            this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
        };
        PoMenuItemComponent.prototype.hasSubItem = function (subItems, id) {
            var _this = this;
            if (subItems) {
                return subItems.some(function (item) {
                    return item['id'] === id ? true : _this.hasSubItem(item.subItems, id);
                });
            }
        };
        PoMenuItemComponent.prototype.isMenuOpened = function (menuOpened, hasSubItemOpened) {
            if (menuOpened) {
                return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
            }
            return false;
        };
        PoMenuItemComponent.prototype.processMenuItem = function (menu) {
            if (this.type === 'internalLink') {
                this.activateMenu(menu.active);
                return;
            }
            if (this.type === 'subItems') {
                this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
                return;
            }
        };
        PoMenuItemComponent.ctorParameters = function () { return [
            { type: PoMenuItemsService }
        ]; };
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Object)
        ], PoMenuItemComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-badge-alert'),
            __metadata("design:type", Boolean)
        ], PoMenuItemComponent.prototype, "badgeAlert", void 0);
        __decorate([
            core.Input('p-badge-color'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "badgeColor", void 0);
        __decorate([
            core.Input('p-badge-value'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoMenuItemComponent.prototype, "badgeValue", null);
        __decorate([
            core.Input('p-collapsed-menu'),
            __metadata("design:type", Boolean)
        ], PoMenuItemComponent.prototype, "collapsedMenu", void 0);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-id'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "id", void 0);
        __decorate([
            core.Input('p-is-opened'),
            __metadata("design:type", Boolean)
        ], PoMenuItemComponent.prototype, "isOpened", void 0);
        __decorate([
            core.Input('p-is-selected'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMenuItemComponent.prototype, "isSelected", null);
        __decorate([
            core.Input('p-is-sub-item'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoMenuItemComponent.prototype, "isSubItem", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-level'),
            __metadata("design:type", Number)
        ], PoMenuItemComponent.prototype, "level", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "link", void 0);
        __decorate([
            core.Input('p-short-label'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "shortLabel", void 0);
        __decorate([
            core.Input('p-sub-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoMenuItemComponent.prototype, "subItems", null);
        __decorate([
            core.Input('p-type'),
            __metadata("design:type", String)
        ], PoMenuItemComponent.prototype, "type", void 0);
        __decorate([
            core.ViewChild('menuSubItems'),
            __metadata("design:type", core.ElementRef)
        ], PoMenuItemComponent.prototype, "menuSubItems", void 0);
        PoMenuItemComponent = __decorate([
            core.Component({
                selector: 'po-menu-item',
                template: "<!-- menu com link interno -->\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com sub itens -->\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n  <div #menuSubItems class=\"po-menu-sub-items\" [hidden]=\"collapsedMenu\" [style.maxHeight.px]=\"maxHeight\">\n    <div *ngFor=\"let subItem of subItems\">\n      <po-menu-item\n        p-is-sub-item\n        [p-action]=\"subItem.action\"\n        [p-badge-alert]=\"subItem.badgeAlert\"\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n        [p-id]=\"subItem.id\"\n        [p-label]=\"subItem.label\"\n        [p-level]=\"subItem.level\"\n        [p-link]=\"subItem.link\"\n        [p-sub-items]=\"subItem.subItems\"\n        [p-type]=\"subItem.type\"\n      >\n      </po-menu-item>\n    </div>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-item\"\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\n    [class.po-menu-item-selected]=\"isSelected\"\n    [class.po-menu-item-level-two]=\"level === 2\"\n    [class.po-menu-item-level-three]=\"level === 3\"\n    [class.po-menu-item-level-four]=\"level === 4\"\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <po-badge\n      *ngIf=\"canShowBadge\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\n      [p-color]=\"badgeColor\"\n      [p-value]=\"badgeValue\"\n    >\n    </po-badge>\n    <span *ngIf=\"level === 1 && icon\" class=\"po-icon {{ icon }} po-menu-icon-item\"></span>\n    <div\n      *ngIf=\"badgeAlert\"\n      class=\"po-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\n    ></div>\n    <span\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"po-icon po-menu-group-icon\"\n      [class.po-icon-arrow-up]=\"isOpened\"\n      [class.po-icon-arrow-down]=\"!isOpened\"\n    >\n    </span>\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </div>\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\n  </div>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [PoMenuItemsService])
        ], PoMenuItemComponent);
        return PoMenuItemComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-menu.
     */
    var PoMenuModule = /** @class */ (function () {
        function PoMenuModule() {
        }
        PoMenuModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule, PoBadgeModule, PoFieldModule, PoLoadingModule],
                declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent],
                exports: [PoMenuComponent, PoMenuHeaderTemplateDirective]
            })
        ], PoMenuModule);
        return PoMenuModule;
    }());

    /**
     * @description
     *
     * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
     * em páginas internas, externas da aplicação ou aciona uma ação.
     *
     * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
     * itens de menu como textos, links para redirecionamento, ações e ícones.
     */
    var PoMenuPanelBaseComponent = /** @class */ (function () {
        function PoMenuPanelBaseComponent() {
        }
        Object.defineProperty(PoMenuPanelBaseComponent.prototype, "menus", {
            get: function () {
                return this._menus;
            },
            /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: function (menus) {
                this._menus = Array.isArray(menus) ? menus : [];
                this.setMenuExtraProperties(this._menus);
                this.validateMenus(this._menus);
            },
            enumerable: true,
            configurable: true
        });
        PoMenuPanelBaseComponent.prototype.setMenuExtraProperties = function (menus) {
            var _this = this;
            menus.forEach(function (menuItem) { return _this.setMenuItemProperties(menuItem); });
        };
        PoMenuPanelBaseComponent.prototype.setMenuItemProperties = function (menuItem) {
            menuItem.id = menuItem.id || uuid$1.v4();
            menuItem.type = this.setMenuType(menuItem);
        };
        PoMenuPanelBaseComponent.prototype.setMenuType = function (menuItem) {
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        PoMenuPanelBaseComponent.prototype.validateMenu = function (menuItem) {
            if (!menuItem.label) {
                throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
            }
            if (!menuItem.icon) {
                throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
            }
        };
        PoMenuPanelBaseComponent.prototype.validateMenus = function (menus) {
            var _this = this;
            menus.forEach(function (menu) { return _this.validateMenu(menu); });
        };
        __decorate([
            core.Input('p-menus'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoMenuPanelBaseComponent.prototype, "menus", null);
        PoMenuPanelBaseComponent = __decorate([
            core.Directive()
        ], PoMenuPanelBaseComponent);
        return PoMenuPanelBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Serviço que implementa a comunicação entre os items do po-menu-panel.
     */
    var PoMenuPanelItemsService = /** @class */ (function () {
        function PoMenuPanelItemsService() {
            this.subjectChild = new rxjs.Subject();
            this.subjectParent = new rxjs.Subject();
        }
        // Recebe do po-menu-panel-item sua informação de click.
        PoMenuPanelItemsService.prototype.receiveFromChildMenuClicked = function () {
            return this.subjectChild.asObservable();
        };
        // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
        PoMenuPanelItemsService.prototype.receiveFromParentMenuClicked = function () {
            return this.subjectParent.asObservable();
        };
        // Envia informações do click do po-menu-panel-item para o po-menu
        PoMenuPanelItemsService.prototype.sendToParentMenuClicked = function (menu) {
            this.subjectChild.next(menu);
        };
        // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
        PoMenuPanelItemsService.prototype.sendToChildMenuClicked = function (menu) {
            this.subjectParent.next(menu);
        };
        PoMenuPanelItemsService = __decorate([
            core.Injectable()
        ], PoMenuPanelItemsService);
        return PoMenuPanelItemsService;
    }());

    /**
     * @docsExtends PoMenuPanelBaseComponent
     *
     * @description
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '@angular/router';
     *
     * ...
     *
     * @NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     PoModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '@angular/core';
     *
     * import { RouterModule, Routes } from '@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * @NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * @example
     *
     * <example name="po-menu-panel-basic" title="PO Menu Panel Basic">
     *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
     *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-panel-labs" title="PO Menu Panel Labs">
     *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
     *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-menu-panel-customer" title="PO Menu Panel - Customers">
     *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
     *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
     * </example>
     */
    var PoMenuPanelComponent = /** @class */ (function (_super) {
        __extends(PoMenuPanelComponent, _super);
        function PoMenuPanelComponent(viewRef, location, menuItemsService, router) {
            var _this = _super.call(this) || this;
            _this.location = location;
            _this.menuItemsService = menuItemsService;
            _this.router = router;
            _this.parentRef = viewRef['_hostView'][8];
            return _this;
        }
        PoMenuPanelComponent.prototype.ngOnDestroy = function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
        };
        PoMenuPanelComponent.prototype.ngOnInit = function () {
            this.subscribeToMenuItem();
            this.subscribeToRoute();
        };
        PoMenuPanelComponent.prototype.activateMenuByUrl = function (urlPath, menus) {
            var _this = this;
            if (menus) {
                return menus.some(function (menu) {
                    if (getFormattedLink(menu.link) === urlPath) {
                        _this.activateMenuItem(menu);
                        return true;
                    }
                });
            }
        };
        PoMenuPanelComponent.prototype.activateMenuItem = function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = getFormattedLink(menu.link);
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
        };
        PoMenuPanelComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        PoMenuPanelComponent.prototype.clickMenuItem = function (menu) {
            if (menu.action) {
                callFunction(menu.action, this.parentRef, menu);
            }
            if (menu.type === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu.type === 'internalLink') {
                this.activateMenuItem(menu);
            }
        };
        PoMenuPanelComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (rounterEvent) {
                if (rounterEvent instanceof router.NavigationEnd) {
                    _this.checkActiveMenuByUrl(_this.location.path());
                }
            });
        };
        PoMenuPanelComponent.prototype.subscribeToMenuItem = function () {
            var _this = this;
            this.itemSubscription = this.menuItemsService
                .receiveFromChildMenuClicked()
                .subscribe(function (menu) { return _this.clickMenuItem(menu); });
        };
        PoMenuPanelComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: common.Location },
            { type: PoMenuPanelItemsService },
            { type: router.Router }
        ]; };
        PoMenuPanelComponent = __decorate([
            core.Component({
                selector: 'po-menu-panel',
                template: "<div class=\"po-menu-panel\">\n  <div class=\"po-menu-panel-logo-container\">\n    <a href=\"./\">\n      <div class=\"po-menu-panel-logo\"></div>\n    </a>\n  </div>\n\n  <nav class=\"po-menu-panel-container\">\n    <div class=\"po-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus; let menuIndex = index\" class=\"po-menu-panel-item-wrapper\">\n        <po-menu-panel-item [class.po-menu-panel-item-first]=\"menuIndex === 0\" [p-menu-item-internal]=\"menu\">\n        </po-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef,
                common.Location,
                PoMenuPanelItemsService,
                router.Router])
        ], PoMenuPanelComponent);
        return PoMenuPanelComponent;
    }(PoMenuPanelBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que implementa cada item do po-menu-panel.
     */
    var PoMenuPanelItemComponent = /** @class */ (function () {
        function PoMenuPanelItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
        }
        PoMenuPanelItemComponent.prototype.ngOnDestroy = function () {
            this.itemsSubscription.unsubscribe();
        };
        PoMenuPanelItemComponent.prototype.ngOnInit = function () {
            // subscribe to menu component messages
            this.subscribeMenuClickedFromParent();
        };
        PoMenuPanelItemComponent.prototype.clickMenuItem = function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
            }
        };
        PoMenuPanelItemComponent.prototype.activateMenu = function (menu) {
            this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
        };
        PoMenuPanelItemComponent.prototype.processMenuItem = function (menu) {
            if (this.menuItemInternal.type === 'internalLink') {
                this.activateMenu(menu.active);
            }
        };
        PoMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = function () {
            var _this = this;
            this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(function (menu) {
                _this.processMenuItem(menu);
            });
        };
        PoMenuPanelItemComponent.ctorParameters = function () { return [
            { type: PoMenuPanelItemsService }
        ]; };
        __decorate([
            core.Input('p-menu-item-internal'),
            __metadata("design:type", Object)
        ], PoMenuPanelItemComponent.prototype, "menuItemInternal", void 0);
        PoMenuPanelItemComponent = __decorate([
            core.Component({
                selector: 'po-menu-panel-item',
                template: "<!-- menu com link interno -->\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu com link externo -->\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu sem link -->\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-panel-item\"\n    p-tooltip-position=\"right\"\n    [class.po-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\n    [p-tooltip]=\"menuItemInternal.label\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <span class=\"po-icon {{ menuItemInternal.icon }}\"></span>\n  </div>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [PoMenuPanelItemsService])
        ], PoMenuPanelItemComponent);
        return PoMenuPanelItemComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-menu-panel.
     */
    var PoMenuPanelModule = /** @class */ (function () {
        function PoMenuPanelModule() {
        }
        PoMenuPanelModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule, PoFieldModule, PoTooltipModule],
                declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent],
                exports: [PoMenuPanelComponent],
                providers: [PoMenuPanelItemsService]
            })
        ], PoMenuPanelModule);
        return PoMenuPanelModule;
    }());

    var PoNavbarActionComponent = /** @class */ (function () {
        function PoNavbarActionComponent(viewContainerRef, router) {
            this.router = router;
            this.parentRef = viewContainerRef['_hostView'][8];
        }
        PoNavbarActionComponent.prototype.click = function () {
            if (this.action) {
                callFunction(this.action, this.parentRef || this);
                return;
            }
            if (this.link) {
                return this.openUrl(this.link);
            }
        };
        PoNavbarActionComponent.prototype.openUrl = function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        PoNavbarActionComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: router.Router }
        ]; };
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Function)
        ], PoNavbarActionComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", String)
        ], PoNavbarActionComponent.prototype, "icon", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoNavbarActionComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoNavbarActionComponent.prototype, "link", void 0);
        __decorate([
            core.Input('p-tooltip-text'),
            __metadata("design:type", String)
        ], PoNavbarActionComponent.prototype, "tooltip", void 0);
        PoNavbarActionComponent = __decorate([
            core.Component({
                selector: 'po-navbar-action',
                template: "<div tabindex=\"0\" class=\"po-navbar-action-content po-clickable\" (click)=\"click()\">\n  <span class=\"po-icon {{ icon }}\" [p-tooltip]=\"tooltip\"> </span>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef, router.Router])
        ], PoNavbarActionComponent);
        return PoNavbarActionComponent;
    }());

    var PoNavbarActionPopupComponent = /** @class */ (function () {
        function PoNavbarActionPopupComponent() {
        }
        PoNavbarActionPopupComponent.prototype.getLastIconAction = function () {
            if (this.iconActions && this.iconActions.length) {
                return this.iconActions[this.iconActions.length - 1].icon;
            }
        };
        __decorate([
            core.Input('p-icon-actions'),
            __metadata("design:type", Array)
        ], PoNavbarActionPopupComponent.prototype, "iconActions", void 0);
        PoNavbarActionPopupComponent = __decorate([
            core.Component({
                selector: 'po-navbar-action-popup',
                template: "<div tabindex=\"0\" #target class=\"po-navbar-action-popup-content po-clickable\" (click)=\"popup.toggle()\">\n  <span class=\"po-icon {{ getLastIconAction() }}\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"iconActions\" [p-target]=\"target\"> </po-popup>\n"
            })
        ], PoNavbarActionPopupComponent);
        return PoNavbarActionPopupComponent;
    }());

    var PoNavbarActionsComponent = /** @class */ (function () {
        function PoNavbarActionsComponent() {
        }
        Object.defineProperty(PoNavbarActionsComponent.prototype, "iconActions", {
            get: function () {
                return this._iconActions;
            },
            set: function (actions) {
                this._iconActions = actions.map(function (action) { return (__assign(__assign({}, action), { separator: true, url: action.link })); });
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-icon-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoNavbarActionsComponent.prototype, "iconActions", null);
        PoNavbarActionsComponent = __decorate([
            core.Component({
                selector: 'po-navbar-actions',
                template: "<po-navbar-action\n  *ngFor=\"let iconAction of iconActions\"\n  class=\"po-navbar-action\"\n  [p-action]=\"iconAction.action\"\n  [p-icon]=\"iconAction.icon\"\n  [p-label]=\"iconAction.label\"\n  [p-link]=\"iconAction.link\"\n  [p-tooltip-text]=\"iconAction.tooltip\"\n>\n</po-navbar-action>\n\n<po-navbar-action-popup class=\"po-navbar-action-popup\" [p-icon-actions]=\"iconActions\"> </po-navbar-action-popup>\n"
            })
        ], PoNavbarActionsComponent);
        return PoNavbarActionsComponent;
    }());

    var PoNavbarActionsModule = /** @class */ (function () {
        function PoNavbarActionsModule() {
        }
        PoNavbarActionsModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoPopupModule, PoTooltipModule],
                declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent],
                exports: [PoNavbarActionsComponent]
            })
        ], PoNavbarActionsModule);
        return PoNavbarActionsModule;
    }());

    var poNavbarLiteralsDefault = {
        en: {
            navbarLinks: 'Navbar links'
        },
        es: {
            navbarLinks: 'Navbar links'
        },
        pt: {
            navbarLinks: 'Navbar links'
        },
        ru: {
            navbarLinks: 'Navbar связи'
        }
    };
    /**
     * @description
     *
     * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
     * páginas da aplicação. Também possui ícones com ações.
     */
    var PoNavbarBaseComponent = /** @class */ (function () {
        function PoNavbarBaseComponent() {
            this._iconActions = [];
            this._items = [];
            this._shadow = false;
        }
        Object.defineProperty(PoNavbarBaseComponent.prototype, "iconActions", {
            get: function () {
                return this._iconActions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
             */
            set: function (value) {
                this._iconActions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de items do `po-navbar`.
             */
            set: function (value) {
                this._items = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poNavbarLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com a literal usada na propriedade `p-literals`.
             *
             * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
             *
             * ```
             *  const customLiterals: PoNavbarLiterals = {
             *    navbarLinks: 'Itens de navegação'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-navbar
             *   [p-literals]="customLiterals">
             * </po-navbar>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poNavbarLiteralsDefault[poLocaleDefault]), poNavbarLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poNavbarLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "logo", {
            get: function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a logo apresentada `po-navbar`.
             */
            set: function (value) {
                this._logo = value;
                if (this.menu) {
                    this.validateMenuLogo();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNavbarBaseComponent.prototype, "shadow", {
            get: function () {
                return this._shadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplica uma sombra na parte inferior do `po-navbar`.
             *
             * @default `false`
             */
            set: function (value) {
                this._shadow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-icon-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoNavbarBaseComponent.prototype, "iconActions", null);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoNavbarBaseComponent.prototype, "items", null);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoNavbarBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-logo'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoNavbarBaseComponent.prototype, "logo", null);
        __decorate([
            core.Input('p-menu'),
            __metadata("design:type", PoMenuComponent)
        ], PoNavbarBaseComponent.prototype, "menu", void 0);
        __decorate([
            core.Input('p-shadow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoNavbarBaseComponent.prototype, "shadow", null);
        PoNavbarBaseComponent = __decorate([
            core.Directive()
        ], PoNavbarBaseComponent);
        return PoNavbarBaseComponent;
    }());

    var PoNavbarItemComponent = /** @class */ (function () {
        function PoNavbarItemComponent() {
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoNavbarItemComponent.prototype, "type", {
            get: function () {
                return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
            },
            enumerable: true,
            configurable: true
        });
        PoNavbarItemComponent.prototype.itemClick = function (label, link) {
            if (this.action) {
                this.action({ label: label, link: link });
            }
            this.click.emit();
        };
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Function)
        ], PoNavbarItemComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-clickable'),
            __metadata("design:type", Boolean)
        ], PoNavbarItemComponent.prototype, "clickable", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoNavbarItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoNavbarItemComponent.prototype, "link", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoNavbarItemComponent.prototype, "click", void 0);
        PoNavbarItemComponent = __decorate([
            core.Component({
                selector: 'po-navbar-item',
                template: "<ng-container [ngSwitch]=\"type\">\n  <a\n    *ngSwitchCase=\"'externalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [href]=\"link\"\n    target=\"_blank\"\n    (click)=\"itemClick()\"\n  >\n    {{ label }}\n  </a>\n\n  <a\n    *ngSwitchCase=\"'internalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [routerLink]=\"link\"\n    (click)=\"itemClick(label, link)\"\n  >\n    {{ label }}\n  </a>\n</ng-container>\n"
            })
        ], PoNavbarItemComponent);
        return PoNavbarItemComponent;
    }());

    var PoNavbarItemsComponent = /** @class */ (function () {
        function PoNavbarItemsComponent(router) {
            this.router = router;
        }
        PoNavbarItemsComponent.prototype.ngOnDestroy = function () {
            this.routeSubscription.unsubscribe();
        };
        PoNavbarItemsComponent.prototype.ngOnInit = function () {
            this.subscribeToRoute();
        };
        PoNavbarItemsComponent.prototype.selectItem = function (item) {
            this.selectedItem = item;
        };
        PoNavbarItemsComponent.prototype.checkActiveItemByUrl = function (urlRouter) {
            this.selectedItem = this.items.find(function (item) { return item.link === urlRouter; });
        };
        PoNavbarItemsComponent.prototype.checkRouterChildrenFragments = function () {
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
        };
        PoNavbarItemsComponent.prototype.subscribeToRoute = function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe(function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    var urlRouter = _this.checkRouterChildrenFragments();
                    _this.checkActiveItemByUrl(urlRouter);
                }
            });
        };
        PoNavbarItemsComponent.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        __decorate([
            core.ViewChild('navbarItemsContainer', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoNavbarItemsComponent.prototype, "navbarItemsContainer", void 0);
        __decorate([
            core.ViewChildren(PoNavbarItemComponent, { read: core.ElementRef }),
            __metadata("design:type", core.QueryList)
        ], PoNavbarItemsComponent.prototype, "allNavbarItems", void 0);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array)
        ], PoNavbarItemsComponent.prototype, "items", void 0);
        PoNavbarItemsComponent = __decorate([
            core.Component({
                selector: 'po-navbar-items',
                template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        (p-click)=\"selectItem(item)\"\n      >\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
            }),
            __metadata("design:paramtypes", [router.Router])
        ], PoNavbarItemsComponent);
        return PoNavbarItemsComponent;
    }());

    var poNavbarNavigationWidth = 88;
    var poNavbarMenuMedia = 768;
    var poNavbarMatchMedia = "(max-width: " + poNavbarMenuMedia + "px)";
    var poNavbarTiming = '250ms ease';
    /**
     * @docsExtends PoNavbarBaseComponent
     */
    var PoNavbarComponent = /** @class */ (function (_super) {
        __extends(PoNavbarComponent, _super);
        function PoNavbarComponent(renderer, builder, changeDetector) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.builder = builder;
            _this.changeDetector = changeDetector;
            _this.showItemsNavigation = false;
            _this.offset = 0;
            _this.onMediaQueryChange = function (changed) {
                _this.changeNavbarMenuItems(changed.matches, _this.menuItems, _this.items, _this.literals.navbarLinks);
            };
            _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
            return _this;
        }
        Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableLeft", {
            get: function () {
                return this.offset === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableRight", {
            get: function () {
                return this.disableRight && this.offset !== 0;
            },
            enumerable: true,
            configurable: true
        });
        PoNavbarComponent.prototype.ngAfterViewInit = function () {
            this.displayItemsNavigation();
            if (this.menu) {
                this.initNavbarMenu();
            }
        };
        PoNavbarComponent.prototype.ngOnDestroy = function () {
            if (this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        };
        PoNavbarComponent.prototype.navigateItems = function (orientation) {
            orientation === 'left' ? this.navigateLeft() : this.navigateRight();
            this.animate(this.offset);
        };
        PoNavbarComponent.prototype.allNavbarItemsWidth = function () {
            return this.navbarItems.allNavbarItems.reduce(function (previous, current) { return previous + current.nativeElement.offsetWidth; }, 0);
        };
        PoNavbarComponent.prototype.animate = function (offset) {
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
            this.player.play();
        };
        PoNavbarComponent.prototype.buildTransitionAnimation = function (offset) {
            return this.builder.build([animations.animate(poNavbarTiming, animations.keyframes([animations.style({ transform: "translateX(" + -offset + "px)" })]))]);
        };
        PoNavbarComponent.prototype.changeNavbarMenuItems = function (isCollapsedMedia, menuItems, navbarItems, label) {
            if (isCollapsedMedia) {
                var subItems = [{ label: label, subItems: navbarItems }];
                this.menu.menus = __spread(subItems, menuItems);
            }
            else {
                this.menu.menus = menuItems;
            }
        };
        PoNavbarComponent.prototype.calculateLeftNavigation = function () {
            var _this = this;
            var calculatedOffset;
            this.navbarItems.allNavbarItems.some(function (navbarItem) {
                var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
                var navbarItemWidth = navbarItem.nativeElement.offsetWidth;
                if (navbarItemOffset >= _this.offset) {
                    calculatedOffset = navbarItemOffset - (_this.navbarItemsWidth() - navbarItemWidth);
                    return true;
                }
            });
            return calculatedOffset;
        };
        PoNavbarComponent.prototype.calculateRightNavigation = function (itemBreakPoint) {
            var calculatedOffset;
            this.navbarItems.allNavbarItems.some(function (navbarItem) {
                var offsetLeft = navbarItem.nativeElement.offsetLeft;
                var finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
                if (itemBreakPoint < finalPosition) {
                    calculatedOffset = offsetLeft;
                    return true;
                }
            });
            return calculatedOffset;
        };
        PoNavbarComponent.prototype.displayItemsNavigation = function () {
            this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
            this.changeDetector.detectChanges();
            if (this.offset !== 0) {
                this.setOffsetToZero();
                this.animate(this.offset);
            }
        };
        PoNavbarComponent.prototype.initNavbarMenu = function () {
            this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
            this.menuItems = this.menu.menus;
            if (window.innerWidth < poNavbarMenuMedia) {
                this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
            }
            this.validateMenuLogo();
            this.mediaQuery.addListener(this.onMediaQueryChange);
        };
        PoNavbarComponent.prototype.navbarItemsWidth = function () {
            return this.navbarItemsElement.nativeElement.offsetWidth;
        };
        PoNavbarComponent.prototype.navigateLeft = function () {
            this.disableRight = false;
            this.offset = this.calculateLeftNavigation();
            if (this.offset < 0) {
                this.setOffsetToZero();
            }
        };
        PoNavbarComponent.prototype.navigateRight = function () {
            var maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
            var itemBreakPoint = this.offset + this.navbarItemsWidth();
            this.offset = this.calculateRightNavigation(itemBreakPoint);
            this.validateMaxOffset(maxAllowedOffset);
        };
        PoNavbarComponent.prototype.setOffsetToZero = function () {
            this.offset = 0;
        };
        PoNavbarComponent.prototype.validateMaxOffset = function (maxAllowedOffset) {
            if (this.offset >= maxAllowedOffset) {
                this.offset = maxAllowedOffset;
                this.disableRight = true;
            }
        };
        PoNavbarComponent.prototype.validateMenuLogo = function () {
            if (this.menu.logo && this.logo) {
                this.menu.logo = undefined;
                this.menu.changeDetector.detectChanges();
            }
        };
        PoNavbarComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: animations.AnimationBuilder },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild(PoNavbarItemsComponent, { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoNavbarComponent.prototype, "navbarItemsElement", void 0);
        __decorate([
            core.ViewChild(PoNavbarItemsComponent, { static: true }),
            __metadata("design:type", PoNavbarItemsComponent)
        ], PoNavbarComponent.prototype, "navbarItems", void 0);
        PoNavbarComponent = __decorate([
            core.Component({
                selector: 'po-navbar',
                template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!menu, 'po-navbar-no-logo': !logo }\"\n    [p-logo]=\"logo\"\n  >\n  </po-navbar-logo>\n\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\n\n  <po-navbar-item-navigation\n    *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\"\n  >\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\n</header>\n\n<po-menu *ngIf=\"!menu\" [p-menus]=\"items\"> </po-menu>\n"
            }),
            __metadata("design:paramtypes", [core.Renderer2,
                animations.AnimationBuilder,
                core.ChangeDetectorRef])
        ], PoNavbarComponent);
        return PoNavbarComponent;
    }(PoNavbarBaseComponent));

    var PoNavbarItemsModule = /** @class */ (function () {
        function PoNavbarItemsModule() {
        }
        PoNavbarItemsModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule],
                declarations: [PoNavbarItemComponent, PoNavbarItemsComponent],
                exports: [PoNavbarItemsComponent]
            })
        ], PoNavbarItemsModule);
        return PoNavbarItemsModule;
    }());

    var PoNavbarLogoComponent = /** @class */ (function () {
        function PoNavbarLogoComponent() {
        }
        __decorate([
            core.Input('p-logo'),
            __metadata("design:type", String)
        ], PoNavbarLogoComponent.prototype, "logo", void 0);
        PoNavbarLogoComponent = __decorate([
            core.Component({
                selector: 'po-navbar-logo',
                template: "<a href=\"./\">\n  <img *ngIf=\"logo\" class=\"po-navbar-logo-image\" alt=\"logo\" [src]=\"logo\" />\n</a>\n"
            })
        ], PoNavbarLogoComponent);
        return PoNavbarLogoComponent;
    }());

    var PoNavbarItemNavigationComponent = /** @class */ (function () {
        function PoNavbarItemNavigationComponent() {
            this.click = new core.EventEmitter();
        }
        __decorate([
            core.Input('p-disable-left'),
            __metadata("design:type", Boolean)
        ], PoNavbarItemNavigationComponent.prototype, "disableLeft", void 0);
        __decorate([
            core.Input('p-disable-right'),
            __metadata("design:type", Boolean)
        ], PoNavbarItemNavigationComponent.prototype, "disableRight", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoNavbarItemNavigationComponent.prototype, "click", void 0);
        PoNavbarItemNavigationComponent = __decorate([
            core.Component({
                selector: 'po-navbar-item-navigation',
                template: "<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"left\"\n  [p-disabled]=\"disableLeft\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n\n<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"right\"\n  [p-disabled]=\"disableRight\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n"
            })
        ], PoNavbarItemNavigationComponent);
        return PoNavbarItemNavigationComponent;
    }());

    var PoNavbarItemNavigationIconComponent = /** @class */ (function () {
        function PoNavbarItemNavigationIconComponent() {
            this.click = new core.EventEmitter();
        }
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoNavbarItemNavigationIconComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-icon'),
            __metadata("design:type", Boolean)
        ], PoNavbarItemNavigationIconComponent.prototype, "icon", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoNavbarItemNavigationIconComponent.prototype, "click", void 0);
        PoNavbarItemNavigationIconComponent = __decorate([
            core.Component({
                selector: 'po-navbar-item-navigation-icon',
                template: "<div\n  [ngClass]=\"{ 'po-navbar-item-navigation-icon-disabled': disabled, 'po-clickable': !disabled }\"\n  tabindex=\"0\"\n  (click)=\"disabled ? undefined : click.emit(icon)\"\n>\n  <span class=\"po-icon po-icon-arrow-{{ icon }}\"></span>\n</div>\n"
            })
        ], PoNavbarItemNavigationIconComponent);
        return PoNavbarItemNavigationIconComponent;
    }());

    var PoNavbarItemNavigationModule = /** @class */ (function () {
        function PoNavbarItemNavigationModule() {
        }
        PoNavbarItemNavigationModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule],
                declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent],
                exports: [PoNavbarItemNavigationComponent]
            })
        ], PoNavbarItemNavigationModule);
        return PoNavbarItemNavigationModule;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-navbar`.
     *
     * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoNavbarModule = /** @class */ (function () {
        function PoNavbarModule() {
        }
        PoNavbarModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoNavbarActionsModule, PoNavbarItemsModule, PoNavbarItemNavigationModule, PoMenuModule],
                declarations: [PoNavbarComponent, PoNavbarLogoComponent],
                exports: [PoNavbarComponent]
            })
        ], PoNavbarModule);
        return PoNavbarModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
     * e para as ações dos componentes po-page-edit e po-page-detail.
     *
     * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
     * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
     * necessários de alinhamento dos componentes.
     *
     * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
     * definido com a altura de 100% para que o po-page maximize seu tamanho.
     * ```
     * html, body {
     *   height:100%;
     * }
     * ```
     */
    var PoPageBaseComponent = /** @class */ (function () {
        function PoPageBaseComponent() {
        }
        return PoPageBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoPageBaseComponent
     */
    var PoPageComponent = /** @class */ (function (_super) {
        __extends(PoPageComponent, _super);
        function PoPageComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageComponent = __decorate([
            core.Component({
                selector: 'po-page',
                template: "<div class=\"po-page\">\n  <ng-content> </ng-content>\n</div>\n"
            })
        ], PoPageComponent);
        return PoPageComponent;
    }(PoPageBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
     */
    var PoPageContentBaseComponent = /** @class */ (function () {
        function PoPageContentBaseComponent() {
        }
        return PoPageContentBaseComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoPageContentBaseComponent
     */
    var PoPageContentComponent = /** @class */ (function (_super) {
        __extends(PoPageContentComponent, _super);
        function PoPageContentComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.contentOpacity = 0;
            _this.height = '90%';
            _this.overflowY = 'none';
            _this.initializeListeners();
            return _this;
        }
        PoPageContentComponent.prototype.ngAfterViewInit = function () {
            this.recalculateHeaderSize();
        };
        PoPageContentComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPageContentComponent.prototype.recalculateHeaderSize = function () {
            var _this = this;
            setTimeout(function () {
                var pageHeaderElement = document.querySelector('div.po-page-header');
                _this.setHeightContent(pageHeaderElement);
                _this.contentOpacity = 1;
            });
        };
        PoPageContentComponent.prototype.setHeightContent = function (poPageHeader) {
            var bodyHeight = document.body.clientHeight;
            var pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
            var newHeight = bodyHeight - pageHeaderHeight;
            this.height = newHeight + "px";
        };
        PoPageContentComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function () {
                _this.recalculateHeaderSize();
            });
        };
        PoPageContentComponent.prototype.removeListeners = function () {
            this.resizeListener();
        };
        PoPageContentComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        PoPageContentComponent = __decorate([
            core.Component({
                selector: 'po-page-content',
                template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], PoPageContentComponent);
        return PoPageContentComponent;
    }(PoPageContentBaseComponent));

    /**
     * @description
     *
     * O componente `po-page-default` é utilizado como o container principal para as telas sem um template definido.
     */
    var PoPageDefaultBaseComponent = /** @class */ (function () {
        function PoPageDefaultBaseComponent() {
            this._actions = [];
        }
        Object.defineProperty(PoPageDefaultBaseComponent.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
             */
            set: function (actions) {
                this._actions = Array.isArray(actions) ? actions : [];
                this.setDropdownActions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPageDefaultBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.ViewChild(PoPageContentComponent, { static: true }),
            __metadata("design:type", PoPageContentComponent)
        ], PoPageDefaultBaseComponent.prototype, "poPageContent", void 0);
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoPageDefaultBaseComponent.prototype, "actions", null);
        __decorate([
            core.Input('p-breadcrumb'),
            __metadata("design:type", Object)
        ], PoPageDefaultBaseComponent.prototype, "breadcrumb", void 0);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPageDefaultBaseComponent.prototype, "title", null);
        PoPageDefaultBaseComponent = __decorate([
            core.Directive()
        ], PoPageDefaultBaseComponent);
        return PoPageDefaultBaseComponent;
    }());

    /**
     * @docsExtends PoPageDefaultBaseComponent
     *
     * @example
     *
     * <example name="po-page-default-basic" title="PO Page Default Basic">
     *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.html"> </file>
     *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-default-labs" title="PO Page Default Labs">
     *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.html"> </file>
     *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-default-dashboard" title="PO Page Default - Dashboard">
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.html"> </file>
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.ts"> </file>
     *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.service.ts"> </file>
     * </example>
     */
    var PoPageDefaultComponent = /** @class */ (function (_super) {
        __extends(PoPageDefaultComponent, _super);
        function PoPageDefaultComponent(viewRef, renderer, router) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.limitPrimaryActions = 3;
            _this.maxWidthMobile = 480;
            _this.parentRef = viewRef['_hostView'][8];
            return _this;
        }
        PoPageDefaultComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.setIsMobile();
            this.setDropdownActions();
            this.renderer.listen('window', 'resize', function (event) {
                _this.onResize(event);
            });
        };
        PoPageDefaultComponent.prototype.ngOnChanges = function (changes) {
            this.setDropdownActions();
        };
        PoPageDefaultComponent.prototype.actionIsDisabled = function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        PoPageDefaultComponent.prototype.callAction = function (item) {
            if (item.url) {
                isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
            }
            else if (item.action) {
                callFunction(item.action, this.parentRef);
            }
        };
        PoPageDefaultComponent.prototype.hasPageHeader = function () {
            return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageDefaultComponent.prototype.onResize = function (event) {
            var width = event.target.innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        PoPageDefaultComponent.prototype.setIsMobile = function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        PoPageDefaultComponent.prototype.setDropdownActions = function () {
            if (this.actions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
            }
        };
        PoPageDefaultComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: router.Router }
        ]; };
        PoPageDefaultComponent = __decorate([
            core.Component({
                selector: 'po-page-default',
                template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div class=\"po-page-header-actions\">\n      <po-dropdown *ngIf=\"actions.length > limitPrimaryActions\" p-label=\"Outras a\u00E7\u00F5es\" [p-actions]=\"dropdownActions\">\n      </po-dropdown>\n\n      <po-button\n        *ngIf=\"actions.length === 3 && actions[2] && !isMobile\"\n        [p-disabled]=\"actionIsDisabled(actions[2])\"\n        [p-label]=\"actions[2].label\"\n        (p-click)=\"callAction(actions[2])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n        [p-disabled]=\"actionIsDisabled(actions[1])\"\n        [p-label]=\"actions[1].label\"\n        (p-click)=\"callAction(actions[1])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"actions[0]\"\n        p-type=\"primary\"\n        [p-disabled]=\"actionIsDisabled(actions[0])\"\n        [p-icon]=\"actions[0].icon\"\n        [p-label]=\"actions[0].label\"\n        (p-click)=\"callAction(actions[0])\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef, core.Renderer2, router.Router])
        ], PoPageDefaultComponent);
        return PoPageDefaultComponent;
    }(PoPageDefaultBaseComponent));

    var poPageDetailLiteralsDefault = {
        en: {
            back: 'Back',
            edit: 'Edit',
            remove: 'Remove'
        },
        es: {
            back: 'Volver',
            edit: 'Editar',
            remove: 'Eliminar'
        },
        pt: {
            back: 'Voltar',
            edit: 'Editar',
            remove: 'Remover'
        },
        ru: {
            back: 'возвращение',
            edit: 'редактировать',
            remove: 'удаление'
        }
    };
    /**
     * @description
     *
     * O componente **po-page-detail** é utilizado como container principal para a tela de
     * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
     */
    var PoPageDetailBaseComponent = /** @class */ (function () {
        function PoPageDetailBaseComponent() {
            /**
             * Evento que será disparado ao clicar no botão de "Voltar".
             *
             * ```
             * <po-page-detail (p-back)="myBackFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
             */
            this.back = new core.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Editar".
             *
             * ```
             * <po-page-detail (p-edit)="myEditFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
             */
            this.edit = new core.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Remover".
             *
             * ```
             * <po-page-detail (p-remove)="myRemoveFunction()">
             * </po-page-detail>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
             */
            this.remove = new core.EventEmitter();
        }
        Object.defineProperty(PoPageDetailBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageDetailLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-detail`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageDetailLiterals = {
             *    edit: 'Edição',
             *    remove: 'Exclusão',
             *    back: 'Menu'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageDetailLiterals = {
             *    remove: 'Excluir registro permanentemente'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-detail
             *   [p-literals]="customLiterals">
             * </po-page-detail>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poPageDetailLiteralsDefault[poLocaleDefault]), poPageDetailLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poPageDetailLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPageDetailBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.ViewChild(PoPageContentComponent, { static: true }),
            __metadata("design:type", PoPageContentComponent)
        ], PoPageDetailBaseComponent.prototype, "poPageContent", void 0);
        __decorate([
            core.Input('p-breadcrumb'),
            __metadata("design:type", Object)
        ], PoPageDetailBaseComponent.prototype, "breadcrumb", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPageDetailBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPageDetailBaseComponent.prototype, "title", null);
        __decorate([
            core.Output('p-back'),
            __metadata("design:type", Object)
        ], PoPageDetailBaseComponent.prototype, "back", void 0);
        __decorate([
            core.Output('p-edit'),
            __metadata("design:type", Object)
        ], PoPageDetailBaseComponent.prototype, "edit", void 0);
        __decorate([
            core.Output('p-remove'),
            __metadata("design:type", Object)
        ], PoPageDetailBaseComponent.prototype, "remove", void 0);
        PoPageDetailBaseComponent = __decorate([
            core.Directive()
        ], PoPageDetailBaseComponent);
        return PoPageDetailBaseComponent;
    }());

    /**
     * @docsExtends PoPageDetailBaseComponent
     *
     * @example
     *
     * <example name="po-page-detail-basic" title="PO Page Detail Basic">
     *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.html"> </file>
     *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-detail-labs" title="PO Page Detail Labs">
     *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.html"> </file>
     *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-detail-user" title="PO Page Detail - User">
     *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.html"> </file>
     *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.ts"> </file>
     * </example>
     */
    var PoPageDetailComponent = /** @class */ (function (_super) {
        __extends(PoPageDetailComponent, _super);
        function PoPageDetailComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageDetailComponent.prototype.hasAnyAction = function () {
            return this.hasEvent('back') || this.hasEvent('edit') || this.hasEvent('remove');
        };
        PoPageDetailComponent.prototype.hasEditFn = function (property) {
            if (property === 'icon') {
                return this.hasEvent('edit') ? '' : 'po-icon-delete';
            }
            else if (property === 'type') {
                return this.hasEvent('edit') ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        PoPageDetailComponent.prototype.hasEditOrRemoveFn = function (property) {
            if (property === 'icon') {
                return this.hasEvent('edit') || this.hasEvent('remove') ? '' : 'po-icon-arrow-left';
            }
            else if (property === 'type') {
                return this.hasEvent('edit') || this.hasEvent('remove') ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        PoPageDetailComponent.prototype.hasEvent = function (event) {
            return !!this[event].observers.length;
        };
        PoPageDetailComponent.prototype.hasPageHeader = function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageDetailComponent = __decorate([
            core.Component({
                selector: 'po-page-detail',
                template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('back')\"\n        [p-icon]=\"hasEditOrRemoveFn('icon')\"\n        [p-label]=\"literals.back\"\n        [p-type]=\"hasEditOrRemoveFn('type')\"\n        (p-click)=\"back.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('remove')\"\n        [p-icon]=\"hasEditFn('icon')\"\n        [p-label]=\"literals.remove\"\n        [p-type]=\"hasEditFn('type')\"\n        (p-click)=\"remove.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('edit')\"\n        p-icon=\"po-icon-edit\"\n        p-type=\"primary\"\n        [p-label]=\"literals.edit\"\n        (p-click)=\"edit.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n"
            })
        ], PoPageDetailComponent);
        return PoPageDetailComponent;
    }(PoPageDetailBaseComponent));

    var poPageEditLiteralsDefault = {
        en: {
            cancel: 'Cancel',
            save: 'Save',
            saveNew: 'Save and New'
        },
        es: {
            cancel: 'Cancelar',
            save: 'Guardar',
            saveNew: 'Guardar y Nuevo'
        },
        pt: {
            cancel: 'Cancelar',
            save: 'Salvar',
            saveNew: 'Salvar e Novo'
        },
        ru: {
            cancel: 'отменить',
            save: 'экономить',
            saveNew: 'Сохранить и новый'
        }
    };
    /**
     * @description
     *
     * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
     * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
     *
     * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
     * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
     * regra de negócio não tenha sido atendida.
     */
    var PoPageEditBaseComponent = /** @class */ (function () {
        function PoPageEditBaseComponent() {
            /**
             * Evento que será disparado ao clicar no botão de "Cancelar".
             *
             * ```
             * <po-page-edit (p-cancel)="myCancelFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
             */
            this.cancel = new core.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Salvar".
             *
             * ```
             * <po-page-edit (p-save)="mySaveFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
             */
            this.save = new core.EventEmitter();
            /**
             * Evento que será disparado ao clicar no botão de "Salvar e Novo".
             *
             * ```
             * <po-page-edit (p-save-new)="mySaveNewFunction()">
             * </po-page-edit>
             * ```
             *
             * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
             */
            this.saveNew = new core.EventEmitter();
        }
        Object.defineProperty(PoPageEditBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageEditLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-edit`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageEditLiterals = {
             *    cancel: 'Voltar',
             *    save: 'Confirmar',
             *    saveNew: 'Confirmar e criar um novo'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageEditLiterals = {
             *    cancel: 'Cancelar processo'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-edit
             *   [p-literals]="customLiterals">
             * </po-page-edit>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poPageEditLiteralsDefault[poLocaleDefault]), poPageEditLiteralsDefault[browserLanguage()]), value);
                }
                else {
                    this._literals = poPageEditLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPageEditBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /** Título da página. */
            set: function (title) {
                var _this = this;
                this._title = title;
                setTimeout(function () { return _this.poPageContent.recalculateHeaderSize(); });
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.ViewChild(PoPageContentComponent, { static: true }),
            __metadata("design:type", PoPageContentComponent)
        ], PoPageEditBaseComponent.prototype, "poPageContent", void 0);
        __decorate([
            core.Input('p-breadcrumb'),
            __metadata("design:type", Object)
        ], PoPageEditBaseComponent.prototype, "breadcrumb", void 0);
        __decorate([
            core.Input('p-disable-submit'),
            __metadata("design:type", Boolean)
        ], PoPageEditBaseComponent.prototype, "disableSubmit", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPageEditBaseComponent.prototype, "literals", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoPageEditBaseComponent.prototype, "title", null);
        __decorate([
            core.Output('p-cancel'),
            __metadata("design:type", Object)
        ], PoPageEditBaseComponent.prototype, "cancel", void 0);
        __decorate([
            core.Output('p-save'),
            __metadata("design:type", Object)
        ], PoPageEditBaseComponent.prototype, "save", void 0);
        __decorate([
            core.Output('p-save-new'),
            __metadata("design:type", Object)
        ], PoPageEditBaseComponent.prototype, "saveNew", void 0);
        PoPageEditBaseComponent = __decorate([
            core.Directive()
        ], PoPageEditBaseComponent);
        return PoPageEditBaseComponent;
    }());

    /**
     * @docsExtends PoPageEditBaseComponent
     *
     * @example
     *
     * <example name="po-page-edit-basic" title="PO Page Edit Basic">
     *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.html"> </file>
     *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-edit-labs" title="PO Page Edit Labs">
     *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.html"> </file>
     *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-edit-user" title="PO Page Edit - User">
     *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.html"> </file>
     *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.ts"> </file>
     * </example>
     */
    var PoPageEditComponent = /** @class */ (function (_super) {
        __extends(PoPageEditComponent, _super);
        function PoPageEditComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageEditComponent.prototype.getIcon = function (icon) {
            if (icon === 'cancel') {
                return this.isPrimaryAction('cancel') ? 'po-icon-close' : '';
            }
            if (icon === 'saveNew') {
                return this.isPrimaryAction('saveNew') ? 'po-icon-ok' : '';
            }
            return '';
        };
        PoPageEditComponent.prototype.getType = function (type) {
            var isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
            var isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
            return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';
        };
        PoPageEditComponent.prototype.hasAnyAction = function () {
            return this.hasEvent('cancel') || this.hasEvent('saveNew') || this.hasEvent('save');
        };
        PoPageEditComponent.prototype.hasPageHeader = function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageEditComponent.prototype.hasEvent = function (event) {
            return !!this[event].observers.length;
        };
        PoPageEditComponent.prototype.isPrimaryAction = function (action) {
            var hasSaveAction = this.hasEvent('save');
            if (action === 'saveNew') {
                return !hasSaveAction;
            }
            if (action === 'cancel') {
                var hasSaveNewAction = this.hasEvent('saveNew');
                return !hasSaveNewAction && !hasSaveAction;
            }
            return false;
        };
        PoPageEditComponent = __decorate([
            core.Component({
                selector: 'po-page-edit',
                template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('cancel')\"\n        [p-icon]=\"getIcon('cancel')\"\n        [p-label]=\"literals.cancel\"\n        [p-type]=\"getType('cancel')\"\n        (p-click)=\"cancel.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('saveNew')\"\n        [p-disabled]=\"disableSubmit\"\n        [p-icon]=\"getIcon('saveNew')\"\n        [p-label]=\"literals.saveNew\"\n        [p-type]=\"getType('saveNew')\"\n        (p-click)=\"saveNew.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('save')\"\n        p-icon=\"po-icon-ok\"\n        p-type=\"primary\"\n        [p-disabled]=\"disableSubmit\"\n        [p-label]=\"literals.save\"\n        (p-click)=\"save.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n"
            })
        ], PoPageEditComponent);
        return PoPageEditComponent;
    }(PoPageEditBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * O componente **po-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
     * po-page-list e po-page-base.
     */
    var PoPageHeaderBaseComponent = /** @class */ (function () {
        function PoPageHeaderBaseComponent() {
        }
        Object.defineProperty(PoPageHeaderBaseComponent.prototype, "breadcrumb", {
            get: function () {
                return this._breadcrumb;
            },
            /** Objeto com propriedades do breadcrumb. */
            set: function (value) {
                this._breadcrumb = value;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-breadcrumb'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPageHeaderBaseComponent.prototype, "breadcrumb", null);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoPageHeaderBaseComponent.prototype, "title", void 0);
        PoPageHeaderBaseComponent = __decorate([
            core.Directive()
        ], PoPageHeaderBaseComponent);
        return PoPageHeaderBaseComponent;
    }());

    /**
     * @docsPrivate
     * @docsExtends PoPageHeaderBaseComponent
     */
    var PoPageHeaderComponent = /** @class */ (function (_super) {
        __extends(PoPageHeaderComponent, _super);
        function PoPageHeaderComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoPageHeaderComponent = __decorate([
            core.Component({
                selector: 'po-page-header',
                template: "<div class=\"po-page-header\">\n  <!-- Breadcrumb -->\n  <div class=\"po-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\n    <po-breadcrumb\n      [p-favorite-service]=\"breadcrumb.favorite\"\n      [p-items]=\"breadcrumb.items\"\n      [p-params-service]=\"breadcrumb.params\"\n    >\n    </po-breadcrumb>\n  </div>\n\n  <!-- Titulo -->\n  <h1 class=\"po-page-header-title\" *ngIf=\"title\">\n    {{ title }}\n  </h1>\n\n  <!-- Opera\u00E7\u00F5es -->\n  <ng-content></ng-content>\n</div>\n"
            })
        ], PoPageHeaderComponent);
        return PoPageHeaderComponent;
    }(PoPageHeaderBaseComponent));

    var poPageListLiteralsDefault = {
        en: {
            otherActions: 'Other actions'
        },
        es: {
            otherActions: 'Otras acciones'
        },
        pt: {
            otherActions: 'Outras ações'
        },
        ru: {
            otherActions: 'Другие действия'
        }
    };
    /**
     * @description
     *
     * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
     * podendo ser apresentado como lista ou tabela.
     *
     * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
     * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
     * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
     *
     * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
     * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
     */
    var PoPageListBaseComponent = /** @class */ (function (_super) {
        __extends(PoPageListBaseComponent, _super);
        function PoPageListBaseComponent(languageService) {
            var _this = _super.call(this) || this;
            _this.language = languageService.getShortLanguage();
            return _this;
        }
        Object.defineProperty(PoPageListBaseComponent.prototype, "disclaimerGroup", {
            get: function () {
                return this._disclaimerGroup;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
             */
            set: function (value) {
                if (!value) {
                    value = {};
                }
                this._disclaimerGroup = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoPageListBaseComponent.prototype, "literals", {
            get: function () {
                return this._literals || poPageListLiteralsDefault[this.language];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `po-page-list`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: PoPageListLiterals = {
             *    otherActions: 'Mais ações'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: PoPageListLiterals = {
             *    otherActions: 'Ações da página'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <po-page-list
             *   [p-literals]="customLiterals">
             * </po-page-list>
             * ```
             *
             * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
             */
            set: function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign(__assign(__assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
                }
                else {
                    this._literals = poPageListLiteralsDefault[this.language];
                }
            },
            enumerable: true,
            configurable: true
        });
        PoPageListBaseComponent.ctorParameters = function () { return [
            { type: PoLanguageService }
        ]; };
        __decorate([
            core.Input('p-breadcrumb'),
            __metadata("design:type", Object)
        ], PoPageListBaseComponent.prototype, "breadcrumb", void 0);
        __decorate([
            core.Input('p-disclaimer-group'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPageListBaseComponent.prototype, "disclaimerGroup", null);
        __decorate([
            core.Input('p-filter'),
            __metadata("design:type", Object)
        ], PoPageListBaseComponent.prototype, "filter", void 0);
        __decorate([
            core.Input('p-literals'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PoPageListBaseComponent.prototype, "literals", null);
        PoPageListBaseComponent = __decorate([
            core.Directive(),
            __metadata("design:paramtypes", [PoLanguageService])
        ], PoPageListBaseComponent);
        return PoPageListBaseComponent;
    }(PoPageDefaultBaseComponent));

    /**
     * @docsExtends PoPageListBaseComponent
     *
     * @example
     *
     * <example name="po-page-list-basic" title="PO Page List Basic">
     *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.html"> </file>
     *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-list-labs" title="PO Page List Labs">
     *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.html"> </file>
     *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-page-list-hiring-processes" title="PO Page List - Hiring Processes">
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.html"> </file>
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.ts"> </file>
     *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.service.ts"> </file>
     * </example>
     */
    var PoPageListComponent = /** @class */ (function (_super) {
        __extends(PoPageListComponent, _super);
        /* istanbul ignore next */
        function PoPageListComponent(viewRef, languageService, renderer, router, changeDetector) {
            var _this = _super.call(this, languageService) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.changeDetector = changeDetector;
            _this.limitPrimaryActions = 3;
            _this.isRecalculate = true;
            _this.maxWidthMobile = 480;
            _this.callFunction = callFunction;
            _this.parentRef = viewRef['_hostView'][8];
            _this.initializeListeners();
            return _this;
        }
        PoPageListComponent.prototype.ngOnInit = function () {
            this.advancedSearch = this.initializeFixedLiterals();
        };
        PoPageListComponent.prototype.ngAfterContentInit = function () {
            this.setIsMobile();
            this.setDropdownActions();
        };
        PoPageListComponent.prototype.ngOnChanges = function (changes) {
            this.setDropdownActions();
        };
        PoPageListComponent.prototype.ngOnDestroy = function () {
            this.removeListeners();
        };
        PoPageListComponent.prototype.actionIsDisabled = function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        PoPageListComponent.prototype.callAction = function (item) {
            if (item.url) {
                isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
            }
            else if (item.action) {
                callFunction(item.action, this.parentRef);
            }
        };
        PoPageListComponent.prototype.hasPageHeader = function () {
            return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
        };
        PoPageListComponent.prototype.onResize = function (event) {
            var width = event.target.innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        PoPageListComponent.prototype.setIsMobile = function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        PoPageListComponent.prototype.setDropdownActions = function () {
            if (this.actions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
            }
        };
        PoPageListComponent.prototype.callActionFilter = function (field) {
            this.callFunction(this.filter[field], this.parentRef);
            this.changeDetector.detectChanges();
        };
        PoPageListComponent.prototype.onkeypress = function (key) {
            if (key === 13) {
                this.callActionFilter('action');
            }
        };
        PoPageListComponent.prototype.changeModel = function (newModel) {
            this.parentRef[this.filter.ngModel] = newModel;
        };
        // Recebe evento change do disclaimer e recalcula tela
        PoPageListComponent.prototype.onChangeDisclaimerGroup = function (disclaimers) {
            if ((disclaimers && disclaimers.length && this.isRecalculate) ||
                (disclaimers.length === 0 && !this.isRecalculate)) {
                this.poPageContent.recalculateHeaderSize();
                this.isRecalculate = !this.isRecalculate;
            }
            if (this.disclaimerGroup && this.disclaimerGroup.change) {
                this.disclaimerGroup.change(disclaimers);
            }
        };
        PoPageListComponent.prototype.initializeFixedLiterals = function () {
            var literal = {
                pt: {
                    advancedSearch: 'Busca avançada'
                },
                en: {
                    advancedSearch: 'Advanced search'
                },
                es: {
                    advancedSearch: 'Búsqueda avanzada'
                },
                ru: {
                    advancedSearch: 'полный поиск'
                }
            };
            return literal[this.language].advancedSearch;
        };
        PoPageListComponent.prototype.initializeListeners = function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
                _this.onResize(event);
            });
        };
        PoPageListComponent.prototype.removeListeners = function () {
            this.resizeListener();
        };
        PoPageListComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: PoLanguageService },
            { type: core.Renderer2 },
            { type: router.Router },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild(PoPageContentComponent, { static: true }),
            __metadata("design:type", PoPageContentComponent)
        ], PoPageListComponent.prototype, "poPageContent", void 0);
        PoPageListComponent = __decorate([
            core.Component({
                selector: 'po-page-list',
                template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [class.po-page-list-header-padding]=\"filter && !actions.length\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\"\n  >\n    <!-- OPERATIONS -->\n    <div class=\"po-page-list-operations\">\n      <div class=\"po-page-list-actions\" [class.po-page-list-actions-padding]=\"filter\">\n        <po-button\n          *ngIf=\"actions[0]\"\n          p-type=\"primary\"\n          [p-disabled]=\"actionIsDisabled(actions[0])\"\n          [p-icon]=\"actions[0].icon\"\n          [p-label]=\"actions[0].label\"\n          (p-click)=\"callAction(actions[0])\"\n        >\n        </po-button>\n\n        <po-button\n          *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n          [p-disabled]=\"actionIsDisabled(actions[1])\"\n          [p-label]=\"actions[1].label\"\n          (p-click)=\"callAction(actions[1])\"\n        >\n        </po-button>\n\n        <po-button\n          *ngIf=\"actions.length == 3 && actions[2] && !isMobile\"\n          [p-disabled]=\"actionIsDisabled(actions[2])\"\n          [p-label]=\"actions[2].label\"\n          (p-click)=\"callAction(actions[2])\"\n        >\n        </po-button>\n\n        <po-dropdown\n          *ngIf=\"actions.length > limitPrimaryActions\"\n          [p-actions]=\"dropdownActions\"\n          [p-label]=\"literals.otherActions\"\n        >\n        </po-dropdown>\n      </div>\n\n      <!-- FILTER -->\n      <div class=\"po-page-list-filter-wrapper\" *ngIf=\"filter\">\n        <div class=\"po-field-container-content po-page-filter-content\">\n          <div class=\"po-field-icon-container-right\">\n            <span class=\"po-icon po-icon-search po-field-icon\" (click)=\"callActionFilter('action')\"> </span>\n          </div>\n\n          <input\n            class=\"po-input po-input-icon-right\"\n            name=\"model\"\n            type=\"text\"\n            [ngModel]=\"parentRef[filter.ngModel]\"\n            [placeholder]=\"filter.placeholder || ''\"\n            (keypress)=\"onkeypress($event.keyCode)\"\n            (ngModelChange)=\"changeModel($event)\"\n          />\n        </div>\n\n        <div class=\"po-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\n          <span\n            class=\"po-page-list-filter-search-link\"\n            tabindex=\"0\"\n            (click)=\"callActionFilter('advancedAction')\"\n            (keydown.enter)=\"callActionFilter('advancedAction')\"\n          >\n            {{ advancedSearch }}\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"!!disclaimerGroup\"\n      [class.po-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup($event)\"\n    >\n    </po-disclaimer-group>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef,
                PoLanguageService,
                core.Renderer2,
                router.Router,
                core.ChangeDetectorRef])
        ], PoPageListComponent);
        return PoPageListComponent;
    }(PoPageListBaseComponent));

    /**
     * @description
     * Módulo dos componentes po-page-default, po-page-edit, po-page-list, po-page-login e po-page-detail.
     */
    var PoPageModule = /** @class */ (function () {
        function PoPageModule() {
        }
        PoPageModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    router.RouterModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoDisclaimerGroupModule,
                    PoDropdownModule,
                    PoFieldModule,
                    PoLanguageModule,
                    PoModalModule
                ],
                declarations: [
                    PoPageComponent,
                    PoPageContentComponent,
                    PoPageDefaultComponent,
                    PoPageDetailComponent,
                    PoPageEditComponent,
                    PoPageHeaderComponent,
                    PoPageListComponent
                ],
                exports: [PoPageDetailComponent, PoPageDefaultComponent, PoPageEditComponent, PoPageListComponent]
            })
        ], PoPageModule);
        return PoPageModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para o conjunto de círculos que faz a passagem de itens do `po-slide`.
     */
    var PoSlideCirclesComponent = /** @class */ (function () {
        function PoSlideCirclesComponent() {
            /** Evento emitido ao clicar em um controle. */
            this.click = new core.EventEmitter();
        }
        __decorate([
            core.Input('p-current-slide-index'),
            __metadata("design:type", Number)
        ], PoSlideCirclesComponent.prototype, "currentSlideIndex", void 0);
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array)
        ], PoSlideCirclesComponent.prototype, "items", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoSlideCirclesComponent.prototype, "click", void 0);
        PoSlideCirclesComponent = __decorate([
            core.Component({
                selector: 'po-slide-circles',
                template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\"\n    ></div>\n  </ng-container>\n</div>\n"
            })
        ], PoSlideCirclesComponent);
        return PoSlideCirclesComponent;
    }());

    var poSlideIntervalDefault = 4000;
    /**
     * @description
     *
     * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
     * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
     *
     * #### Boas práticas:
     * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
     * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
     * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
     */
    var PoSlideBaseComponent = /** @class */ (function () {
        function PoSlideBaseComponent() {
            this._interval = poSlideIntervalDefault;
        }
        Object.defineProperty(PoSlideBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
             *
             * @default `336`
             */
            set: function (value) {
                this._height = convertToInt(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSlideBaseComponent.prototype, "interval", {
            get: function () {
                return this._interval;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
             *
             * @default `4000`
             */
            set: function (value) {
                this._interval = convertToInt(value, poSlideIntervalDefault);
                this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSlideBaseComponent.prototype, "slides", {
            get: function () {
                return this._slides;
            },
            /**
             * @description
             *
             * Array de imagens ou dados para o slide, pode ser de três formas:
             *
             * - Array implementando objetos da interface `PoSlideItem`:
             * ```
             * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
             * ```
             * - Array de `strings` com os caminhos das imagens:
             * ```
             * ['/assets/image-1', '/assets/image-2' ]
             * ```
             * - Array com lista de itens (para utilizar template):
             * ```
             * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
             * ```
             *
             * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
             */
            set: function (value) {
                this._slides = value;
                this.setSlideItems(value);
                if (value && value.length) {
                    this.startSlide();
                }
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoSlideBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-interval'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoSlideBaseComponent.prototype, "interval", null);
        __decorate([
            core.Input('p-slides'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoSlideBaseComponent.prototype, "slides", null);
        PoSlideBaseComponent = __decorate([
            core.Directive()
        ], PoSlideBaseComponent);
        return PoSlideBaseComponent;
    }());

    /**
     * @usedBy PoSlideComponent
     *
     * @description
     *
     * Esta diretiva permite a customização de um slide.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item do slide corrente.
     *  - Índice: `index` determina o índice do slide corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <po-slide
     *   [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
     *
     *   <ng-template p-slide-content-template let-item let-code="index">
     *     <div class="po-row">
     *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
     *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
     *     </div>
     *   </ng-template>
     *
     * </po-slide>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <po-slide
     *    [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
     *
     *    <div *p-slide-content-template="let item, let i=index" class="po-row">
     *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
     *    </div>
     * </po-slide>
     * ...
     *
     * ```
     */
    var PoSlideContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function PoSlideContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        PoSlideContentTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        PoSlideContentTemplateDirective = __decorate([
            core.Directive({
                selector: '[p-slide-content-template]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], PoSlideContentTemplateDirective);
        return PoSlideContentTemplateDirective;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para cada item do po-slide.
     */
    var PoSlideItemComponent = /** @class */ (function () {
        function PoSlideItemComponent() {
            this.isIEOrEdge = isIEOrEdge();
        }
        PoSlideItemComponent.prototype.setLinkType = function () {
            if (!this.template && this.link) {
                return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        __decorate([
            core.ViewChild('slideItem', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSlideItemComponent.prototype, "itemElement", void 0);
        __decorate([
            core.Input('p-action'),
            __metadata("design:type", Function)
        ], PoSlideItemComponent.prototype, "action", void 0);
        __decorate([
            core.Input('p-alt'),
            __metadata("design:type", String)
        ], PoSlideItemComponent.prototype, "alt", void 0);
        __decorate([
            core.Input('p-data'),
            __metadata("design:type", Array)
        ], PoSlideItemComponent.prototype, "data", void 0);
        __decorate([
            core.Input('p-image'),
            __metadata("design:type", String)
        ], PoSlideItemComponent.prototype, "image", void 0);
        __decorate([
            core.Input('p-image-height'),
            __metadata("design:type", Number)
        ], PoSlideItemComponent.prototype, "imageHeight", void 0);
        __decorate([
            core.Input('p-template'),
            __metadata("design:type", PoSlideContentTemplateDirective)
        ], PoSlideItemComponent.prototype, "template", void 0);
        __decorate([
            core.Input('p-link'),
            __metadata("design:type", String)
        ], PoSlideItemComponent.prototype, "link", void 0);
        PoSlideItemComponent = __decorate([
            core.Component({
                selector: 'po-slide-item',
                template: "<div\n  #slideItem\n  class=\"po-slide-item\"\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\"\n>\n  <!-- slide com link interno -->\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-slide-item-link\" [routerLink]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-slide-item-link\" [href]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a\n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data } }\"\n    >\n    </ng-container>\n  </a>\n</div>\n\n<ng-template #slideItemTemplate let-item=\"item\" ; let-index=\"index\">\n  <div *ngIf=\"template\" class=\"po-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"\n    >\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item=\"item\">\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"po-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\"\n  />\n</ng-template>\n"
            })
        ], PoSlideItemComponent);
        return PoSlideItemComponent;
    }());

    var poSlideDefaultHeight = 336;
    var poSlideIntervalMin = 1000;
    var poSlideMinHeight = 192;
    var poSlideTiming = '250ms ease';
    /**
     * @docsExtends PoSlideBaseComponent
     *
     * @example
     * <example name="po-slide-basic" title="PO Slide Basic">
     *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
     *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-labs" title="PO Slide Labs">
     *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
     *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
     *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
     *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
     * </example>
     *
     * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
     *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
     *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
     * </example>
     */
    var PoSlideComponent = /** @class */ (function (_super) {
        __extends(PoSlideComponent, _super);
        function PoSlideComponent(builder) {
            var _this = _super.call(this) || this;
            _this.builder = builder;
            _this.isLoaded = false;
            _this.currentSlideIndex = 0;
            _this.slideItems = [];
            return _this;
        }
        Object.defineProperty(PoSlideComponent.prototype, "hasElements", {
            get: function () {
                return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "isImageSlide", {
            get: function () {
                return !this.slideContentTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "offset", {
            get: function () {
                return this.currentSlideIndex * this.slideItemWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoSlideComponent.prototype, "hasSlides", {
            get: function () {
                return !!this.slides && !!this.slides.length;
            },
            enumerable: true,
            configurable: true
        });
        PoSlideComponent.prototype.onResize = function () {
            if (this.slide) {
                this.setSlideItemWidth();
                this.goToItem(this.currentSlideIndex);
            }
        };
        PoSlideComponent.prototype.ngDoCheck = function () {
            if (!this.isLoaded && this.hasElements) {
                this.setSlideItemWidth();
                this.isLoaded = true;
                if (this.hasSlides) {
                    this.startSlide();
                }
            }
        };
        PoSlideComponent.prototype.ngOnChanges = function (changes) {
            if (changes.height) {
                this.setSlideHeight(this.height);
            }
        };
        PoSlideComponent.prototype.goToItem = function (index) {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = index;
            this.animate(this.offset);
        };
        PoSlideComponent.prototype.nextControl = function () {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.next();
        };
        PoSlideComponent.prototype.next = function () {
            if (this.currentSlideIndex + 1 === this.slideItems.length) {
                this.currentSlideIndex = 0;
                this.animate(0);
                return;
            }
            this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
            this.animate(this.offset);
        };
        PoSlideComponent.prototype.previous = function () {
            if (this.currentSlideIndex === 0) {
                this.currentSlideIndex = this.slideItems.length - 1;
                this.animate(this.offset);
                return;
            }
            this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
            this.animate(this.offset);
        };
        PoSlideComponent.prototype.previousControl = function () {
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.previous();
        };
        PoSlideComponent.prototype.setSlideHeight = function (height) {
            this.setHeight(height);
        };
        PoSlideComponent.prototype.animate = function (offset) {
            if (this.hasElements) {
                var animation = this.buildTransitionAnimation(offset);
                this.player = animation.create(this.slide.nativeElement);
                this.player.play();
            }
        };
        PoSlideComponent.prototype.buildTransitionAnimation = function (offset) {
            return this.builder.build([animations.animate(poSlideTiming, animations.keyframes([animations.style({ transform: "translateX(-" + offset + "px)" })]))]);
        };
        PoSlideComponent.prototype.createArrayForTemplate = function (slides) {
            this.slideItems = __spread(slides);
        };
        PoSlideComponent.prototype.createArrayFromSlides = function (slides) {
            var _this = this;
            var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
            if (isStringArray) {
                slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
            }
            else {
                this.slideItems = __spread(slides);
            }
        };
        PoSlideComponent.prototype.setDefaultHeight = function (height) {
            if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
                this.slide.nativeElement.style.height = poSlideDefaultHeight + "px";
                this.imageHeight = poSlideDefaultHeight;
            }
            else {
                this.imageHeight = undefined;
            }
        };
        PoSlideComponent.prototype.setHeight = function (height) {
            if (height && height > poSlideMinHeight) {
                this.slide.nativeElement.style.height = height + "px";
                this.imageHeight = height;
            }
            else {
                this.setDefaultHeight(height);
            }
        };
        PoSlideComponent.prototype.setSlideItemWidth = function () {
            if (this.hasElements) {
                this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
            }
        };
        PoSlideComponent.prototype.cancelInterval = function () {
            clearInterval(this.setInterval);
        };
        PoSlideComponent.prototype.setSlideItems = function (slides) {
            if (this.hasSlides) {
                this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
            }
            else {
                this.slideItems = [];
                this.cancelInterval();
            }
        };
        PoSlideComponent.prototype.startSlide = function () {
            this.setSlideHeight(this.height);
            if (this.interval > poSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = 0;
        };
        PoSlideComponent.prototype.startInterval = function () {
            var _this = this;
            if (this.setInterval) {
                this.cancelInterval();
            }
            this.setInterval =
                this.hasSlides && this.hasElements
                    ? setInterval(function () {
                        _this.next();
                    }, this.interval)
                    : undefined;
        };
        PoSlideComponent.ctorParameters = function () { return [
            { type: animations.AnimationBuilder }
        ]; };
        __decorate([
            core.ContentChild(PoSlideContentTemplateDirective, { static: true }),
            __metadata("design:type", PoSlideContentTemplateDirective)
        ], PoSlideComponent.prototype, "slideContentTemplate", void 0);
        __decorate([
            core.ViewChild('slide', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoSlideComponent.prototype, "slide", void 0);
        __decorate([
            core.ViewChildren(PoSlideItemComponent),
            __metadata("design:type", core.QueryList)
        ], PoSlideComponent.prototype, "itemsElements", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PoSlideComponent.prototype, "onResize", null);
        PoSlideComponent = __decorate([
            core.Component({
                selector: 'po-slide',
                template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" p-control=\"previous\" (p-click)=\"previousControl()\">\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n"
            }),
            __metadata("design:paramtypes", [animations.AnimationBuilder])
        ], PoSlideComponent);
        return PoSlideComponent;
    }(PoSlideBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a seta que controla a passagem de itens do `po-slide`.
     */
    var PoSlideControlComponent = /** @class */ (function () {
        function PoSlideControlComponent() {
            /** Evento emitido ao clicar em um controle. */
            this.click = new core.EventEmitter();
        }
        __decorate([
            core.Input('p-control'),
            __metadata("design:type", String)
        ], PoSlideControlComponent.prototype, "control", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoSlideControlComponent.prototype, "click", void 0);
        PoSlideControlComponent = __decorate([
            core.Component({
                selector: 'po-slide-control',
                template: "<div class=\"po-slide-control-{{ control }}\">\n  <div class=\"po-slide-arrow-circle\" (click)=\"click.emit()\">\n    <div class=\"po-slide-arrow po-slide-arrow-{{ control }}\"></div>\n  </div>\n</div>\n"
            })
        ], PoSlideControlComponent);
        return PoSlideControlComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-slide`.
     *
     * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoSlideModule = /** @class */ (function () {
        function PoSlideModule() {
        }
        PoSlideModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule, PoContainerModule],
                declarations: [
                    PoSlideCirclesComponent,
                    PoSlideComponent,
                    PoSlideControlComponent,
                    PoSlideContentTemplateDirective,
                    PoSlideItemComponent
                ],
                exports: [PoSlideComponent, PoSlideContentTemplateDirective],
                providers: [],
                schemas: []
            })
        ], PoSlideModule);
        return PoSlideModule;
    }());

    /**
     * @usedBy PoStepperComponent
     *
     * @description
     *
     * <a id="stepperStatus"></a>
     *
     * *Enums* para os status do `po-stepper` quando utilizada a propriedade `p-steps`.
     */

    (function (PoStepperStatus) {
        /** Define o estado do *step* como ativo. */
        PoStepperStatus["Active"] = "active";
        /** Define o estado do *step* como padrão. */
        PoStepperStatus["Default"] = "default";
        /** Define o estado do *step* como desabilitado. */
        PoStepperStatus["Disabled"] = "disabled";
        /** Define o estado do *step* como concluído. */
        PoStepperStatus["Done"] = "done";
        /** Define o estado do *step* com erro. */
        PoStepperStatus["Error"] = "error";
    })(exports.PoStepperStatus || (exports.PoStepperStatus = {}));

    /**
     * @description
     *
     * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
     *
     * ```
     * <po-stepper>
     *
     *    <po-step p-label="Endereço">
     *
     *        <!-- Conteúdo referente ao endereço -->
     *
     *    </po-step>
     *
     *    <po-step p-label="Pagamento">
     *
     *        <!-- Conteúdo referente ao pagamento -->
     *
     *    </po-step>
     *
     *  </po-stepper>
     * ```
     *
     * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
     * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
     * desabilitados (*disabled*).
     *
     * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
     * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
     * com o status desabilitado.
     *
     * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
     * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
     *
     * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
     * e exemplos de uso.
     */
    var PoStepComponent = /** @class */ (function () {
        function PoStepComponent(elementRef) {
            this.elementRef = elementRef;
            this._status = exports.PoStepperStatus.Disabled;
            // ID do step
            this.id = uuid();
        }
        Object.defineProperty(PoStepComponent.prototype, "status", {
            get: function () {
                return this._status;
            },
            // Estado de exibição do `po-step`.
            set: function (status) {
                this._status = status;
                this.setDisplayOnActiveOrError();
            },
            enumerable: true,
            configurable: true
        });
        PoStepComponent.prototype.ngAfterContentInit = function () {
            this.setDisplayOnActiveOrError();
        };
        PoStepComponent.prototype.setDisplayOnActiveOrError = function () {
            this.elementRef.nativeElement.style.display =
                this.status === exports.PoStepperStatus.Active || this.status === exports.PoStepperStatus.Error ? '' : 'none';
        };
        PoStepComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('p-can-active-next-step'),
            __metadata("design:type", Function)
        ], PoStepComponent.prototype, "canActiveNextStep", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoStepComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-status'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoStepComponent.prototype, "status", null);
        PoStepComponent = __decorate([
            core.Component({
                selector: 'po-step',
                template: "<ng-content></ng-content>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoStepComponent);
        return PoStepComponent;
    }());

    var poMediumStepSize = 32;
    var poLargeStepSize = 48;
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir os círculos dos *steps*.
     */
    var PoStepperCircleComponent = /** @class */ (function () {
        function PoStepperCircleComponent() {
        }
        Object.defineProperty(PoStepperCircleComponent.prototype, "isActive", {
            get: function () {
                return this.status === exports.PoStepperStatus.Active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDefault", {
            get: function () {
                return this.status === exports.PoStepperStatus.Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDisabled", {
            get: function () {
                return this.status === exports.PoStepperStatus.Disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isDone", {
            get: function () {
                return this.status === exports.PoStepperStatus.Done;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isError", {
            get: function () {
                return this.status === exports.PoStepperStatus.Error;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isLargeStep", {
            get: function () {
                return this.size >= poLargeStepSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperCircleComponent.prototype, "isMediumStep", {
            get: function () {
                return this.size >= poMediumStepSize && !this.isLargeStep;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-content'),
            __metadata("design:type", Object)
        ], PoStepperCircleComponent.prototype, "content", void 0);
        __decorate([
            core.Input('p-icons'),
            __metadata("design:type", Boolean)
        ], PoStepperCircleComponent.prototype, "icons", void 0);
        __decorate([
            core.Input('p-size'),
            __metadata("design:type", Number)
        ], PoStepperCircleComponent.prototype, "size", void 0);
        __decorate([
            core.Input('p-status'),
            __metadata("design:type", String)
        ], PoStepperCircleComponent.prototype, "status", void 0);
        PoStepperCircleComponent = __decorate([
            core.Component({
                selector: 'po-stepper-circle',
                template: "<div\n  class=\"po-stepper-circle\"\n  [class.po-stepper-circle-with-icon]=\"icons\"\n  [style.height.px]=\"size\"\n  [style.width.px]=\"size\"\n  [tabindex]=\"isDisabled ? -1 : 0\"\n>\n  <span\n    class=\"po-stepper-circle-content\"\n    [class.po-icon]=\"icons\"\n    [class.po-icon-exclamation]=\"icons && isError\"\n    [class.po-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\n    [class.po-icon-ok]=\"icons && isDone\"\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.po-stepper-circle-content-md]=\"isMediumStep\"\n  >\n    {{ !icons ? content : '' }}\n  </span>\n</div>\n"
            })
        ], PoStepperCircleComponent);
        return PoStepperCircleComponent;
    }());

    /**
     *
     * @usedBy PoStepperComponent
     *
     * @description
     *
     * <a id="stepperOrientation"></a>
     *
     * *Enums* para definição da orientação do `po-stepper`.
     */

    (function (PoStepperOrientation) {
        /** Define a exibição do componente na horizontal. */
        PoStepperOrientation["Horizontal"] = "horizontal";
        /** Define a exibição do componente na vertical. */
        PoStepperOrientation["Vertical"] = "vertical";
    })(exports.PoStepperOrientation || (exports.PoStepperOrientation = {}));

    var poStepperOrientationDefault = exports.PoStepperOrientation.Horizontal;
    /**
     * @description
     *
     * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
     * mais facilmente.
     *
     * Existem duas formas de utilização:
     *
     * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
     *
     * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
     * de renderização do que será exibido a cada *step* ativo.
     *
     * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
     * além da possibilidade de aumentar o tamanho dos *steps*.
     *
     * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
     * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
     * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
     *
     * #### Utilizando os métodos do componente:
     *
     * Para acessar os métodos do componente é necessário ter a referência do mesmo.
     *
     * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
     *
     * ```
     * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
     * ```
     *
     * E para acessar o método:
     *
     * ```
     * poStepperComponent.next();
     * ```
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `po-stepper` por página.
     */
    var PoStepperBaseComponent = /** @class */ (function () {
        function PoStepperBaseComponent() {
            this._orientation = poStepperOrientationDefault;
            this._sequential = true;
            this._step = 1;
            this._steps = [];
            /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
            this.onChangeStep = new core.EventEmitter();
        }
        Object.defineProperty(PoStepperBaseComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a orientação de exibição do `po-stepper`.
             *
             * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
             *
             * @default `PoStepperOrientation.Horizontal`
             */
            set: function (value) {
                this._orientation = Object.values(exports.PoStepperOrientation).includes(value)
                    ? value
                    : poStepperOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "step", {
            get: function () {
                return this._step;
            },
            /**
             * @optional
             *
             * @description
             *
             * Controla o passo atual do `po-stepper`.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
             *
             * @default `1`
             */
            set: function (step) {
                if (step >= 1 && step <= this.steps.length) {
                    this._step = step;
                    this._steps[this._step - 1].status = exports.PoStepperStatus.Active;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "steps", {
            get: function () {
                return this._steps;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
             */
            set: function (steps) {
                this._steps = Array.isArray(steps) ? steps : [];
                this._steps.forEach(function (step) { return (step.status = exports.PoStepperStatus.Default); });
                this.step = 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperBaseComponent.prototype, "sequential", {
            get: function () {
                return this._sequential;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o `po-stepper` será sequencial ou aleatório.
             *
             * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
             *
             * @default `true`
             */
            set: function (sequential) {
                this._sequential = convertToBoolean(sequential);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-orientation'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoStepperBaseComponent.prototype, "orientation", null);
        __decorate([
            core.Input('p-step'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoStepperBaseComponent.prototype, "step", null);
        __decorate([
            core.Input('p-steps'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoStepperBaseComponent.prototype, "steps", null);
        __decorate([
            core.Input('p-step-icons'),
            __metadata("design:type", Boolean)
        ], PoStepperBaseComponent.prototype, "stepIcons", void 0);
        __decorate([
            core.Input('p-step-size'),
            __metadata("design:type", Number)
        ], PoStepperBaseComponent.prototype, "stepSize", void 0);
        __decorate([
            core.Input('p-sequential'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoStepperBaseComponent.prototype, "sequential", null);
        __decorate([
            core.Output('p-change-step'),
            __metadata("design:type", Object)
        ], PoStepperBaseComponent.prototype, "onChangeStep", void 0);
        PoStepperBaseComponent = __decorate([
            core.Directive()
        ], PoStepperBaseComponent);
        return PoStepperBaseComponent;
    }());

    /**
     * @docsExtends PoStepperBaseComponent
     *
     * @example
     *
     * <example name="po-stepper-basic" title="PO Stepper Basic">
     *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
     *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-stepper-labs" title="PO Stepper Labs">
     *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
     *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-stepper-sales" title="PO Stepper - Sales">
     *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
     *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
     * </example>
     */
    var PoStepperComponent = /** @class */ (function (_super) {
        __extends(PoStepperComponent, _super);
        function PoStepperComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        Object.defineProperty(PoStepperComponent.prototype, "currentStepIndex", {
            get: function () {
                return this.step - 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperComponent.prototype, "stepList", {
            get: function () {
                return (this.usePoSteps && this.poSteps) || this.steps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperComponent.prototype, "usePoSteps", {
            get: function () {
                return !!this.poSteps.length;
            },
            enumerable: true,
            configurable: true
        });
        PoStepperComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.activeFirstStep();
            this.poSteps.changes.subscribe(function () {
                _this.controlStepsStatus(0, _this.poSteps.first);
            });
        };
        /**
         * Altera o status do *step* para ativo.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         *
         * @param {number} index Índice do `po-step` que se deseja ativar.
         */
        PoStepperComponent.prototype.active = function (index) {
            if (!this.usePoSteps) {
                return;
            }
            var stepsArray = this.getPoSteps();
            var step = stepsArray[index];
            var isDisabledStep = step.status === exports.PoStepperStatus.Disabled;
            var isErrorStep = step.status === exports.PoStepperStatus.Error;
            if (!isDisabledStep || isErrorStep) {
                this.changeStep(index, step);
            }
        };
        /**
         * Ativa o primeiro *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.first = function () {
            if (!this.usePoSteps) {
                return;
            }
            var firstStep = this.poSteps.first;
            var firstStepIndex = 0;
            this.changeStep(firstStepIndex, firstStep);
        };
        /**
         * Ativa o próximo *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.next = function () {
            if (!this.usePoSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var nextIndex = stepIndex + 1;
            var nextStep = steps[nextIndex];
            this.changeStep(nextIndex, nextStep);
        };
        /**
         * Ativa o *step* anterior.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
         */
        PoStepperComponent.prototype.previous = function () {
            if (!this.usePoSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var previousIndex = stepIndex - 1;
            var previousStep = steps[previousIndex];
            this.changeStep(previousIndex, previousStep);
        };
        PoStepperComponent.prototype.changeStep = function (stepIndex, step) {
            var _this = this;
            this.allowNextStep(stepIndex)
                .pipe(operators.take(1))
                .subscribe(function (nextStepAllowed) {
                if (nextStepAllowed) {
                    var isDifferentStep = !_this.currentActiveStep || step.id !== _this.currentActiveStep.id;
                    if (_this.usePoSteps && isDifferentStep) {
                        _this.controlStepsStatus(stepIndex, step);
                        _this.onChangeStep.emit(step);
                    }
                    else if (!_this.usePoSteps && stepIndex !== _this.currentStepIndex) {
                        // if para tratamento do modelo antigo do po-stepper
                        _this.onChangeStep.emit(stepIndex + 1);
                    }
                }
            });
        };
        PoStepperComponent.prototype.onStepActive = function (step) {
            this.currentActiveStep = step;
            this.previousActiveStep = this.poSteps.find(function (stepChild) { return stepChild.status === exports.PoStepperStatus.Active && stepChild.id !== step.id; });
            this.setPreviousStepAsDone();
        };
        PoStepperComponent.prototype.trackByFn = function (step) {
            return step.id;
        };
        PoStepperComponent.prototype.activeFirstStep = function () {
            var hasStepActive = this.poSteps.some(function (poStep) { return poStep.status === exports.PoStepperStatus.Active; });
            if (this.usePoSteps && !hasStepActive) {
                this.changeStep(0, this.poSteps.first);
            }
        };
        PoStepperComponent.prototype.allowNextStep = function (nextStepIndex) {
            if (!this.sequential) {
                return rxjs.of(true);
            }
            var isAllowNextStep$ = this.usePoSteps
                ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
                : this.steps.slice(this.step, nextStepIndex).every(function (step) { return step.status === exports.PoStepperStatus.Done; });
            return typeof isAllowNextStep$ === 'boolean' ? rxjs.of(isAllowNextStep$) : isAllowNextStep$;
        };
        PoStepperComponent.prototype.canActiveNextStep = function (currentActiveStep) {
            var _this = this;
            if (currentActiveStep === void 0) { currentActiveStep = {}; }
            if (!currentActiveStep.canActiveNextStep) {
                return rxjs.of(true);
            }
            var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
            var canActiveNextStep$ = canActiveNextStep instanceof rxjs.Observable ? canActiveNextStep : rxjs.of(canActiveNextStep);
            return canActiveNextStep$.pipe(operators.tap(function (isCanActiveNextStep) {
                currentActiveStep.status = _this.getStepperStatusByCanActive(isCanActiveNextStep);
            }), operators.catchError(function (err) {
                currentActiveStep.status = exports.PoStepperStatus.Error;
                return rxjs.throwError(err);
            }));
        };
        PoStepperComponent.prototype.controlStepsStatus = function (stepIndex, step) {
            if (this.usePoSteps) {
                this.setStepAsActive(step);
                this.setNextStepAsDefault(step);
                if (this.isBeforeStep(stepIndex)) {
                    this.setFinalSteppersAsDisabled(stepIndex);
                }
                this.changeDetector.detectChanges();
            }
        };
        PoStepperComponent.prototype.getStepperStatusByCanActive = function (canActiveNextStep) {
            return canActiveNextStep ? exports.PoStepperStatus.Done : exports.PoStepperStatus.Error;
        };
        PoStepperComponent.prototype.getStepsAndIndex = function (step) {
            if (step === void 0) { step = {}; }
            var steps = this.getPoSteps();
            var stepIndex = steps.findIndex(function (poStep) { return poStep.id === step.id; });
            return { steps: steps, stepIndex: stepIndex };
        };
        PoStepperComponent.prototype.getPoSteps = function () {
            return this.poSteps.toArray();
        };
        PoStepperComponent.prototype.isBeforeStep = function (stepIndex) {
            var _this = this;
            var currentActiveStepIndex = function () { return _this.getPoSteps().findIndex(function (step) { return step.id === _this.currentActiveStep.id; }); };
            return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
        };
        PoStepperComponent.prototype.setFinalSteppersAsDisabled = function (stepIndex) {
            this.getPoSteps()
                .filter(function (step, index) { return step && index >= stepIndex + 2; })
                .forEach(function (step) { return (step.status = exports.PoStepperStatus.Disabled); });
        };
        PoStepperComponent.prototype.setStepAsActive = function (step) {
            step.status = exports.PoStepperStatus.Active;
        };
        PoStepperComponent.prototype.setNextStepAsDefault = function (currentStep) {
            var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
            var nextIndex = stepIndex + 1;
            if (nextIndex < this.poSteps.length) {
                steps[nextIndex].status = exports.PoStepperStatus.Default;
            }
        };
        PoStepperComponent.prototype.setPreviousStepAsDone = function () {
            if (this.previousActiveStep) {
                this.previousActiveStep.status = exports.PoStepperStatus.Done;
            }
        };
        PoStepperComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ContentChildren(PoStepComponent),
            __metadata("design:type", core.QueryList)
        ], PoStepperComponent.prototype, "poSteps", void 0);
        PoStepperComponent = __decorate([
            core.Component({
                selector: 'po-stepper',
                template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n  <div class=\"po-stepper-container\">\n    <po-stepper-step\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index + 1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\"\n    >\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoStepperComponent);
        return PoStepperComponent;
    }(PoStepperBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir as legendas dos *steps*.
     */
    var PoStepperLabelComponent = /** @class */ (function () {
        function PoStepperLabelComponent() {
        }
        __decorate([
            core.Input('p-content'),
            __metadata("design:type", String)
        ], PoStepperLabelComponent.prototype, "content", void 0);
        PoStepperLabelComponent = __decorate([
            core.Component({
                selector: 'po-stepper-label',
                template: "<div class=\"po-stepper-label\">\n  {{ content }}\n</div>\n"
            })
        ], PoStepperLabelComponent);
        return PoStepperLabelComponent;
    }());

    var poStepperStepSizeDefault = 24;
    var poStepperStepSizeMax = 64;
    var poStepLiteralsDefault = {
        en: { label: 'Step' },
        es: { label: 'Paso' },
        pt: { label: 'Passo' }
    };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
     */
    var PoStepperStepComponent = /** @class */ (function () {
        function PoStepperStepComponent() {
            this._stepIcons = false;
            this._stepSize = poStepperStepSizeDefault;
            this.literals = __assign(__assign({}, poStepLiteralsDefault[poLocaleDefault]), poStepLiteralsDefault[browserLanguage()]);
            // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
            this.activated = new core.EventEmitter();
            // Evento que será emitido ao clicar no *step*.
            this.click = new core.EventEmitter();
            // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
            this.enter = new core.EventEmitter();
        }
        Object.defineProperty(PoStepperStepComponent.prototype, "label", {
            get: function () {
                return this._label;
            },
            // Label do *step*.
            set: function (value) {
                this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "status", {
            get: function () {
                return this._status;
            },
            // Define o estado de exibição.
            set: function (value) {
                this._status = value ? value : undefined;
                if (this.status === exports.PoStepperStatus.Active) {
                    this.activated.emit();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "stepIcons", {
            get: function () {
                return this._stepIcons;
            },
            set: function (stepIcons) {
                this._stepIcons = convertToBoolean(stepIcons);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "stepSize", {
            get: function () {
                return this._stepSize;
            },
            // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
            // O valor informado deve ser entre `24` e `64`.
            set: function (value) {
                this._stepSize =
                    value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax ? value : poStepperStepSizeDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "halfStepSize", {
            get: function () {
                return this.stepSize / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "isVerticalOrientation", {
            get: function () {
                return this.orientation === exports.PoStepperOrientation.Vertical;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoStepperStepComponent.prototype, "marginHorizontalBar", {
            get: function () {
                return this.isVerticalOrientation ? undefined : this.halfStepSize;
            },
            enumerable: true,
            configurable: true
        });
        PoStepperStepComponent.prototype.getStatusClass = function (status) {
            switch (status) {
                case exports.PoStepperStatus.Active:
                    return 'po-stepper-step-active';
                case exports.PoStepperStatus.Disabled:
                    return 'po-stepper-step-disabled';
                case exports.PoStepperStatus.Done:
                    return 'po-stepper-step-done';
                case exports.PoStepperStatus.Error:
                    return 'po-stepper-step-error';
                default:
                    return 'po-stepper-step-default';
            }
        };
        PoStepperStepComponent.prototype.onClick = function () {
            if (this.status !== exports.PoStepperStatus.Disabled) {
                this.click.emit();
            }
        };
        PoStepperStepComponent.prototype.onEnter = function () {
            if (this.status !== exports.PoStepperStatus.Disabled) {
                this.enter.emit();
            }
        };
        __decorate([
            core.Input('p-circle-content'),
            __metadata("design:type", Object)
        ], PoStepperStepComponent.prototype, "circleContent", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoStepperStepComponent.prototype, "label", null);
        __decorate([
            core.Input('p-orientation'),
            __metadata("design:type", String)
        ], PoStepperStepComponent.prototype, "orientation", void 0);
        __decorate([
            core.Input('p-status'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoStepperStepComponent.prototype, "status", null);
        __decorate([
            core.Input('p-step-icons'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoStepperStepComponent.prototype, "stepIcons", null);
        __decorate([
            core.Input('p-step-size'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoStepperStepComponent.prototype, "stepSize", null);
        __decorate([
            core.Output('p-activated'),
            __metadata("design:type", Object)
        ], PoStepperStepComponent.prototype, "activated", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoStepperStepComponent.prototype, "click", void 0);
        __decorate([
            core.Output('p-enter'),
            __metadata("design:type", Object)
        ], PoStepperStepComponent.prototype, "enter", void 0);
        PoStepperStepComponent = __decorate([
            core.Component({
                selector: 'po-stepper-step',
                template: "<div class=\"po-stepper-step\" [ngClass]=\"getStatusClass(status)\" (click)=\"onClick()\" (keydown.enter)=\"onEnter()\">\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\"\n    ></div>\n\n    <po-stepper-circle [p-content]=\"circleContent\" [p-icons]=\"stepIcons\" [p-size]=\"stepSize\" [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\"\n    ></div>\n  </div>\n\n  <po-stepper-label class=\"po-stepper-step-label-position\" [p-content]=\"label\"> </po-stepper-label>\n</div>\n"
            })
        ], PoStepperStepComponent);
        return PoStepperStepComponent;
    }());

    /**
     * @description
     * Módulo do componente po-stepper
     */
    var PoStepperModule = /** @class */ (function () {
        function PoStepperModule() {
        }
        PoStepperModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [
                    PoStepComponent,
                    PoStepperCircleComponent,
                    PoStepperComponent,
                    PoStepperLabelComponent,
                    PoStepperStepComponent
                ],
                exports: [PoStepComponent, PoStepperComponent]
            })
        ], PoStepperModule);
        return PoStepperModule;
    }());

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por manipular os botões de aba.
     */
    var PoTabButtonComponent = /** @class */ (function () {
        function PoTabButtonComponent(elementRef) {
            this.elementRef = elementRef;
            // Função sera emitida quando a tab ficar ativada
            this.activated = new core.EventEmitter();
            // Função sera emitida quando a tab ficar desabilitada ou escondida
            this.changeState = new core.EventEmitter();
            // Método recebido do usuário para ser disparado quando clicar na aba
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoTabButtonComponent.prototype, "active", {
            get: function () {
                return this._active;
            },
            // Ativa o botão
            set: function (value) {
                this._active = value;
                this.emitActivated();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabButtonComponent.prototype, "hide", {
            get: function () {
                return this._hide;
            },
            // Oculta o botão
            set: function (value) {
                this._hide = convertToBoolean(value);
                this.setDisplayOnHide();
            },
            enumerable: true,
            configurable: true
        });
        PoTabButtonComponent.prototype.ngOnChanges = function (changes) {
            if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
                this.changeState.emit(this);
            }
        };
        PoTabButtonComponent.prototype.onClick = function () {
            if (!this.disabled) {
                this.click.emit(this.id);
            }
        };
        PoTabButtonComponent.prototype.emitActivated = function () {
            if (this.active) {
                this.activated.emit(this);
            }
        };
        PoTabButtonComponent.prototype.setDisplayOnHide = function () {
            this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
        };
        PoTabButtonComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('p-active'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabButtonComponent.prototype, "active", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean)
        ], PoTabButtonComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input('p-hide'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabButtonComponent.prototype, "hide", null);
        __decorate([
            core.Input('p-id'),
            __metadata("design:type", String)
        ], PoTabButtonComponent.prototype, "id", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoTabButtonComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-small'),
            __metadata("design:type", Boolean)
        ], PoTabButtonComponent.prototype, "small", void 0);
        __decorate([
            core.Output('p-activated'),
            __metadata("design:type", Object)
        ], PoTabButtonComponent.prototype, "activated", void 0);
        __decorate([
            core.Output('p-change-state'),
            __metadata("design:type", Object)
        ], PoTabButtonComponent.prototype, "changeState", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoTabButtonComponent.prototype, "click", void 0);
        PoTabButtonComponent = __decorate([
            core.Component({
                selector: 'po-tab-button',
                template: "<div\n  class=\"po-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  [class.po-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\"\n>\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{ label }}\n  </span>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoTabButtonComponent);
        return PoTabButtonComponent;
    }());

    /**
     * @description
     *
     * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
     *
     * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
     * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
     *
     * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
     */
    var PoTabBaseComponent = /** @class */ (function () {
        function PoTabBaseComponent() {
            this._active = false;
            this._disabled = false;
            this._hide = false;
            // ID da aba
            this.id = uuid();
            /** Método disparado ao clicar na aba. */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(PoTabBaseComponent.prototype, "active", {
            get: function () {
                return this._active;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ativa a aba exibindo seu conteúdo.
             *
             * > Sugere-se utilizar na aba de conteúdo inicial.
             *
             * @default `false`
             */
            set: function (active) {
                this._active = convertToBoolean(active);
                this.setDisplayOnActive();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a aba.
             *
             * @default `false`
             */
            set: function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabBaseComponent.prototype, "hide", {
            get: function () {
                return this._hide;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a aba.
             *
             * @default `false`
             */
            set: function (hide) {
                this._hide = convertToBoolean(hide);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-active'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabBaseComponent.prototype, "active", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-hide'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabBaseComponent.prototype, "hide", null);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoTabBaseComponent.prototype, "label", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoTabBaseComponent.prototype, "click", void 0);
        PoTabBaseComponent = __decorate([
            core.Directive()
        ], PoTabBaseComponent);
        return PoTabBaseComponent;
    }());

    /**
     * @docsExtends PoTabBaseComponent
     */
    var PoTabComponent = /** @class */ (function (_super) {
        __extends(PoTabComponent, _super);
        function PoTabComponent(elementRef) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            return _this;
        }
        PoTabComponent.prototype.ngAfterContentInit = function () {
            this.setDisplayOnActive();
        };
        PoTabComponent.prototype.setDisplayOnActive = function () {
            this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
        };
        PoTabComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PoTabComponent = __decorate([
            core.Component({
                selector: 'po-tab',
                template: "<ng-content></ng-content>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], PoTabComponent);
        return PoTabComponent;
    }(PoTabBaseComponent));

    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para agrupamento de componentes `po-tab-button` que os rendereiza em uma um caixa de diálogo
     * no formato de lista.
     */
    var PoTabDropdownComponent = /** @class */ (function () {
        function PoTabDropdownComponent() {
            // Lista de abas
            this.tabs = [];
            // Evento que será emitido ao ativar uma aba
            this.activated = new core.EventEmitter();
            // Evento que será emitido a aba for desabilitada ou ocultada
            this.changeState = new core.EventEmitter();
            // Evento de click
            this.click = new core.EventEmitter();
        }
        PoTabDropdownComponent.prototype.getContainerClass = function () {
            return this.small ? 'po-tab-dropdown-container-sm' : 'po-tab-dropdown-container';
        };
        PoTabDropdownComponent.prototype.togglePopover = function () {
            this.popover.isHidden ? this.popover.open() : this.popover.close();
        };
        __decorate([
            core.ViewChild('popover', { static: true }),
            __metadata("design:type", PoPopoverComponent)
        ], PoTabDropdownComponent.prototype, "popover", void 0);
        __decorate([
            core.ViewChild('tabDrop', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], PoTabDropdownComponent.prototype, "tabDropdown", void 0);
        __decorate([
            core.Input('p-label'),
            __metadata("design:type", String)
        ], PoTabDropdownComponent.prototype, "label", void 0);
        __decorate([
            core.Input('p-small'),
            __metadata("design:type", Boolean)
        ], PoTabDropdownComponent.prototype, "small", void 0);
        __decorate([
            core.Input('p-tabs'),
            __metadata("design:type", Array)
        ], PoTabDropdownComponent.prototype, "tabs", void 0);
        __decorate([
            core.Output('p-activated'),
            __metadata("design:type", Object)
        ], PoTabDropdownComponent.prototype, "activated", void 0);
        __decorate([
            core.Output('p-change-state'),
            __metadata("design:type", Object)
        ], PoTabDropdownComponent.prototype, "changeState", void 0);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", Object)
        ], PoTabDropdownComponent.prototype, "click", void 0);
        PoTabDropdownComponent = __decorate([
            core.Component({
                selector: 'po-tab-dropdown',
                template: "<div\n  #tabDrop\n  class=\"po-tab-dropdown-content po-tab-button-md\"\n  [attr.tabindex]=\"0\"\n  [class.po-tab-button-sm]=\"small\"\n  (keyup.enter)=\"togglePopover()\"\n>\n  <div class=\"po-tab-button-label\">\n    {{ label }}\n    <span class=\"po-icon\" [ngClass]=\"popover.isHidden ? 'po-icon-arrow-down' : 'po-icon-arrow-up'\"> </span>\n  </div>\n</div>\n\n<po-popover #popover p-hide-arrow p-position=\"bottom\" [p-target]=\"tabDropdown\">\n  <div [ngClass]=\"getContainerClass()\">\n    <po-tab-button\n      *ngFor=\"let tab of tabs\"\n      class=\"po-tab-dropdown-button\"\n      [class.po-tab-dropdown-button-active]=\"tab.active\"\n      [p-active]=\"tab.active\"\n      [p-disabled]=\"tab.disabled\"\n      [p-hide]=\"tab.hide\"\n      [p-id]=\"tab.id\"\n      [p-label]=\"tab.label\"\n      [p-small]=\"small\"\n      (p-activated)=\"activated.emit(tab)\"\n      (p-change-state)=\"changeState.emit(tab)\"\n      (p-click)=\"popover.close(); click.emit(tab)\"\n    >\n    </po-tab-button>\n  </div>\n</po-popover>\n"
            })
        ], PoTabDropdownComponent);
        return PoTabDropdownComponent;
    }());

    /**
     * @description
     *
     * O componente `po-tabs` é responsável por agrupar [abas](/documentation/po-tab) dispostas numa linha horizontal,
     * ideal para facilitar a organização de conteúdos.
     *
     * Em dispositivos móveis o componente exibirá tadas as abas de maneira linear gerando um *scroll* na horizontal. Já em telas telas com
     * resoluções maiores, o componente exibirá até cinco abas normalmente, porém, à partir de seis abas o componente automaticamente torna
     * visível apenas as quatro primeiras, agrupando as subsequentes na quinta aba rotulada de **Mais**.
     *
     * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
     *
     * É possível realizar a navegação entre as abas através da tecla TAB do teclado.
     * Caso uma aba estiver desabilitada, não receberá foco de navegação.
     *
     * #### Boas práticas
     *
     * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
     * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
     */
    var PoTabsBaseComponent = /** @class */ (function () {
        function PoTabsBaseComponent() {
            this._small = false;
        }
        Object.defineProperty(PoTabsBaseComponent.prototype, "small", {
            get: function () {
                return this._small;
            },
            /**
             * @optinal
             *
             * @description
             *
             * Diminui o tamanho das abas.
             *
             * @default `false`
             */
            set: function (value) {
                this._small = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-small'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTabsBaseComponent.prototype, "small", null);
        PoTabsBaseComponent = __decorate([
            core.Directive()
        ], PoTabsBaseComponent);
        return PoTabsBaseComponent;
    }());

    var poTabsMaxNumberOfTabs = 5;
    /**
     * @docsExtends PoTabsBaseComponent
     *
     * @example
     *
     * <example name="po-tabs-basic" title="PO Tabs Basic">
     *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
     *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-labs" title="PO Tabs Labs">
     *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
     *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-travel" title="PO Tabs - Travel">
     *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
     *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
     * </example>
     *
     * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
     *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
     *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
     * </example>
     */
    var PoTabsComponent = /** @class */ (function (_super) {
        __extends(PoTabsComponent, _super);
        function PoTabsComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
            return _this;
        }
        Object.defineProperty(PoTabsComponent.prototype, "isMobileDevice", {
            get: function () {
                return isMobile();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "isShowTabDropdown", {
            get: function () {
                return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "overflowedTabs", {
            // tabs que serão apresentadas na aba "Mais"
            get: function () {
                var _this = this;
                return this.visibleTabs.filter(function (_tab, index) { return index > _this.maxNumberOfTabs - 2; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTabsComponent.prototype, "visibleTabs", {
            get: function () {
                return this.tabs.filter(function (tab) { return !tab.hide; });
            },
            enumerable: true,
            configurable: true
        });
        PoTabsComponent.prototype.closePopover = function () {
            var containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
            if (containsPopoverVisible) {
                this.tabDropdown.popover.close();
            }
        };
        PoTabsComponent.prototype.isVisibleTab = function (tab) {
            if (this.isMobileDevice) {
                return true;
            }
            var visibleTabIndex = this.visibleTabs.findIndex(function (visibleTab) { return visibleTab.id === tab.id; });
            return this.visibleTabs.length <= this.maxNumberOfTabs || visibleTabIndex < this.maxNumberOfTabs - 1;
        };
        // Função disparada quando alguma tab ficar ativa
        PoTabsComponent.prototype.onTabActive = function (tab) {
            this.previousActiveTab = this.tabs.find(function (tabChild) { return tabChild.active && tabChild.id !== tab.id; });
            this.deactivateTab();
        };
        // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
        PoTabsComponent.prototype.onTabChangeState = function (tab) {
            if (tab.active) {
                tab.active = false;
                this.activeDistinctTab();
                this.changeDetector.detectChanges();
            }
        };
        // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
        PoTabsComponent.prototype.selectedTab = function (tab) {
            tab.active = true;
            if (tab.click) {
                tab.click.emit(tab);
            }
            this.changeDetector.detectChanges();
        };
        PoTabsComponent.prototype.trackByFn = function (_i, tab) {
            return tab.id;
        };
        // ativa a previousActiveTab ou primeira tab encontrada.
        PoTabsComponent.prototype.activeDistinctTab = function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = true;
            }
            else {
                this.activeFirstTab();
            }
        };
        // Ativa a primeira Tab que não estiver desabilitada ou escondida.
        PoTabsComponent.prototype.activeFirstTab = function () {
            this.tabs.some(function (tabChild) {
                if (!tabChild.disabled && !tabChild.hide) {
                    tabChild.active = true;
                    return true;
                }
            });
        };
        // desativa previousActiveTab e dispara a detecção de mudança.
        PoTabsComponent.prototype.deactivateTab = function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = false;
                this.changeDetector.detectChanges();
            }
        };
        PoTabsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ContentChildren(PoTabComponent),
            __metadata("design:type", core.QueryList)
        ], PoTabsComponent.prototype, "tabs", void 0);
        __decorate([
            core.ViewChild('tabDropdown', { static: true }),
            __metadata("design:type", PoTabDropdownComponent)
        ], PoTabsComponent.prototype, "tabDropdown", void 0);
        PoTabsComponent = __decorate([
            core.Component({
                selector: 'po-tabs',
                template: "<div class=\"po-tabs-container\" [class.po-tabs-container-mobile]=\"isMobileDevice\">\n  <div class=\"po-tabs-header\">\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n      <po-tab-button\n        *ngIf=\"isVisibleTab(tab)\"\n        class=\"po-tab-button\"\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\n        [p-active]=\"tab.active\"\n        [p-disabled]=\"tab.disabled\"\n        [p-hide]=\"tab.hide\"\n        [p-id]=\"tab.id\"\n        [p-label]=\"tab.label\"\n        [p-small]=\"small\"\n        (keyup.enter)=\"closePopover()\"\n        (p-activated)=\"onTabActive(tab)\"\n        (p-change-state)=\"onTabChangeState(tab)\"\n        (p-click)=\"selectedTab(tab)\"\n      >\n      </po-tab-button>\n    </ng-container>\n\n    <po-tab-dropdown\n      #tabDropdown\n      *ngIf=\"isShowTabDropdown\"\n      class=\"po-tab-button po-tab-dropdown\"\n      p-label=\"Mais\"\n      [p-small]=\"small\"\n      [p-tabs]=\"overflowedTabs\"\n      (p-activated)=\"onTabActive($event)\"\n      (p-change-state)=\"onTabChangeState($event)\"\n      (p-click)=\"selectedTab($event)\"\n    >\n    </po-tab-dropdown>\n  </div>\n</div>\n\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], PoTabsComponent);
        return PoTabsComponent;
    }(PoTabsBaseComponent));

    /**
     * @description
     * Módulo do componente po-tabs
     */
    var PoTabsModule = /** @class */ (function () {
        function PoTabsModule() {
        }
        PoTabsModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoPopoverModule],
                declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent],
                exports: [PoTabComponent, PoTabsComponent]
            })
        ], PoTabsModule);
        return PoTabsModule;
    }());

    var poToolbarActionsIconDefault = 'po-icon-more';
    /**
     * @docsPrivate
     *
     * @usedBy PoToolbarComponent
     *
     * @description
     *
     * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
     */
    var PoToolbarActionsComponent = /** @class */ (function () {
        function PoToolbarActionsComponent() {
            this._actionsIcon = poToolbarActionsIconDefault;
        }
        Object.defineProperty(PoToolbarActionsComponent.prototype, "actionsIcon", {
            get: function () {
                return this._actionsIcon;
            },
            /** Define o ícone das ações. */
            set: function (icon) {
                this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array)
        ], PoToolbarActionsComponent.prototype, "actions", void 0);
        __decorate([
            core.Input('p-actions-icon'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoToolbarActionsComponent.prototype, "actionsIcon", null);
        PoToolbarActionsComponent = __decorate([
            core.Component({
                selector: 'po-toolbar-actions',
                template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\n",
                providers: [PoControlPositionService]
            })
        ], PoToolbarActionsComponent);
        return PoToolbarActionsComponent;
    }());

    /**
     * @description
     *
     * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
     */
    var PoToolbarBaseComponent = /** @class */ (function () {
        function PoToolbarBaseComponent() {
            /** Se falso, oculta o ícone de notificações. */
            this.showNotification = true;
        }
        Object.defineProperty(PoToolbarBaseComponent.prototype, "notificationNumber", {
            get: function () {
                return this._notificationNumber;
            },
            /**
             * @optional
             *
             * @description
             *
             * Número de notificações.
             */
            set: function (value) {
                this._notificationNumber = convertToInt(value, 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoToolbarBaseComponent.prototype, "isShowProfile", {
            get: function () {
                return !!(this.profile || this.profileActions);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-actions'),
            __metadata("design:type", Array)
        ], PoToolbarBaseComponent.prototype, "actions", void 0);
        __decorate([
            core.Input('p-actions-icon'),
            __metadata("design:type", String)
        ], PoToolbarBaseComponent.prototype, "actionsIcon", void 0);
        __decorate([
            core.Input('p-profile'),
            __metadata("design:type", Object)
        ], PoToolbarBaseComponent.prototype, "profile", void 0);
        __decorate([
            core.Input('p-profile-actions'),
            __metadata("design:type", Array)
        ], PoToolbarBaseComponent.prototype, "profileActions", void 0);
        __decorate([
            core.Input('p-show-notification'),
            __metadata("design:type", Boolean)
        ], PoToolbarBaseComponent.prototype, "showNotification", void 0);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String)
        ], PoToolbarBaseComponent.prototype, "title", void 0);
        __decorate([
            core.Input('p-notification-actions'),
            __metadata("design:type", Array)
        ], PoToolbarBaseComponent.prototype, "notificationActions", void 0);
        __decorate([
            core.Input('p-notification-number'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoToolbarBaseComponent.prototype, "notificationNumber", null);
        PoToolbarBaseComponent = __decorate([
            core.Directive()
        ], PoToolbarBaseComponent);
        return PoToolbarBaseComponent;
    }());

    /**
     * @docsExtends PoToolbarBaseComponent
     *
     * @example
     *
     * <example name="po-toolbar-basic" title="PO Toolbar Basic">
     *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.html"> </file>
     *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-toolbar-labs" title="PO Toolbar Labs">
     *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.html"> </file>
     *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-toolbar-logged" title="PO Toolbar - Logged">
     *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.html"> </file>
     *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.ts"> </file>
     * </example>
     */
    var PoToolbarComponent = /** @class */ (function (_super) {
        __extends(PoToolbarComponent, _super);
        function PoToolbarComponent(titleService, viewRef) {
            var _this = _super.call(this) || this;
            _this.titleService = titleService;
            _this.parentRef = viewRef['_hostView'][8];
            return _this;
        }
        PoToolbarComponent.prototype.ngOnInit = function () {
            this.setTitle(this.title);
        };
        PoToolbarComponent.prototype.setTitle = function (newTitle) {
            this.titleService.setTitle(newTitle);
        };
        PoToolbarComponent.ctorParameters = function () { return [
            { type: platformBrowser.Title },
            { type: core.ViewContainerRef }
        ]; };
        PoToolbarComponent = __decorate([
            core.Component({
                selector: 'po-toolbar',
                template: "<div class=\"po-toolbar\">\n  <div class=\"po-toolbar-title\">{{ title }}</div>\n\n  <div class=\"po-toolbar-group-icon\">\n    <po-toolbar-actions *ngIf=\"actions && actions.length\" [p-actions]=\"actions\" [p-actions-icon]=\"actionsIcon\">\n    </po-toolbar-actions>\n\n    <po-toolbar-notification\n      *ngIf=\"showNotification && notificationActions\"\n      [p-notification-actions]=\"notificationActions\"\n      [p-notification-number]=\"notificationNumber\"\n    >\n    </po-toolbar-notification>\n\n    <po-toolbar-profile *ngIf=\"isShowProfile\" [p-profile]=\"profile\" [p-profile-actions]=\"profileActions\">\n    </po-toolbar-profile>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [platformBrowser.Title, core.ViewContainerRef])
        ], PoToolbarComponent);
        return PoToolbarComponent;
    }(PoToolbarBaseComponent));

    /**
     * @docsPrivate
     *
     * @usedBy PoToolbarComponent
     *
     * @description
     *
     * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
     * como por exemplo um alerta de nova mensagem.
     *
     * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
     * ícone de notificações.
     */
    var PoToolbarNotificationComponent = /** @class */ (function () {
        function PoToolbarNotificationComponent() {
            this._notificationNumber = 0;
        }
        Object.defineProperty(PoToolbarNotificationComponent.prototype, "notificationNumber", {
            get: function () {
                return this._notificationNumber;
            },
            /** Define o número de notificações. */
            set: function (value) {
                this._notificationNumber = Number.isInteger(value) ? value : 0;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-notification-actions'),
            __metadata("design:type", Array)
        ], PoToolbarNotificationComponent.prototype, "notificationActions", void 0);
        __decorate([
            core.Input('p-notification-number'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoToolbarNotificationComponent.prototype, "notificationNumber", null);
        PoToolbarNotificationComponent = __decorate([
            core.Component({
                selector: 'po-toolbar-notification',
                template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\n  <span #notification class=\"po-icon po-icon-notification po-toolbar-icon\"></span>\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\n    {{ notificationNumber }}\n  </div>\n</div>\n\n<po-popup #popup [p-actions]=\"notificationActions\" [p-target]=\"notification\"> </po-popup>\n",
                providers: [PoControlPositionService]
            })
        ], PoToolbarNotificationComponent);
        return PoToolbarNotificationComponent;
    }());

    /**
     * @docsPrivate
     *
     * @docsExtends PoToolbarProfileComponent
     *
     * @description
     *
     * Componente `po-toolbar-profile`.
     */
    var PoToolbarProfileComponent = /** @class */ (function () {
        function PoToolbarProfileComponent() {
        }
        Object.defineProperty(PoToolbarProfileComponent.prototype, "profileAvatar", {
            get: function () {
                return this.profile ? this.profile.avatar : undefined;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-profile'),
            __metadata("design:type", Object)
        ], PoToolbarProfileComponent.prototype, "profile", void 0);
        __decorate([
            core.Input('p-profile-actions'),
            __metadata("design:type", Array)
        ], PoToolbarProfileComponent.prototype, "profileActions", void 0);
        PoToolbarProfileComponent = __decorate([
            core.Component({
                selector: 'po-toolbar-profile',
                template: "<div #profileElement class=\"po-toolbar-profile po-clickable\" (click)=\"popup.toggle()\">\n  <po-avatar p-size=\"xs\" [p-src]=\"profileAvatar\"></po-avatar>\n</div>\n\n<po-popup #popup [p-actions]=\"profileActions\" [p-target]=\"profileElement\">\n  <div p-popup-header-template *ngIf=\"profile?.title\" class=\"po-toolbar-profile-item-header\">\n    <po-avatar class=\"po-toolbar-profile-item-avatar\" p-size=\"sm\" [p-src]=\"profileAvatar\"> </po-avatar>\n\n    <div>\n      <div class=\"po-toolbar-profile-item-header-title\">\n        {{ profile.title }}\n      </div>\n\n      <div *ngIf=\"profile.subtitle\" class=\"po-toolbar-profile-item-header-subtitle\">\n        {{ profile.subtitle }}\n      </div>\n    </div>\n  </div>\n</po-popup>\n",
                providers: [PoControlPositionService]
            })
        ], PoToolbarProfileComponent);
        return PoToolbarProfileComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente po-toolbar
     *
     */
    var PoToolbarModule = /** @class */ (function () {
        function PoToolbarModule() {
        }
        PoToolbarModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoAvatarModule, PoPopupModule],
                declarations: [
                    PoToolbarActionsComponent,
                    PoToolbarComponent,
                    PoToolbarNotificationComponent,
                    PoToolbarProfileComponent
                ],
                exports: [PoToolbarComponent],
                providers: [],
                schemas: []
            })
        ], PoToolbarModule);
        return PoToolbarModule;
    }());

    var poTreeViewMaxLevel = 4;
    /**
     * @description
     *
     * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
     * hierárquica, desta forma sendo possível utilizar até 4 níveis.
     *
     * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
     * por meio das teclas *enter* e *space*.
     *
     * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
     *
     * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
     */
    var PoTreeViewBaseComponent = /** @class */ (function () {
        function PoTreeViewBaseComponent() {
            this._items = [];
            this._selectable = false;
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao colapsar um item.
             *
             * > Como parâmetro o componente envia o item colapsado.
             */
            this.collapsed = new core.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao expandir um item.
             *
             * > Como parâmetro o componente envia o item expandido.
             */
            this.expanded = new core.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao selecionar um item.
             *
             * > Como parâmetro o componente envia o item selecionado.
             */
            this.selected = new core.EventEmitter();
            /**
             * @optional
             *
             * @description
             *
             * Ação que será disparada ao desfazer a seleção de um item.
             *
             * > Como parâmetro o componente envia o item que foi desmarcado.
             */
            this.unselected = new core.EventEmitter();
        }
        Object.defineProperty(PoTreeViewBaseComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
             */
            set: function (value) {
                this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoTreeViewBaseComponent.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
             *
             * @default false
             */
            set: function (value) {
                this._selectable = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        PoTreeViewBaseComponent.prototype.emitExpanded = function (treeViewItem) {
            var event = treeViewItem.expanded ? 'expanded' : 'collapsed';
            this[event].emit(__assign({}, treeViewItem));
        };
        PoTreeViewBaseComponent.prototype.emitSelected = function (treeViewItem) {
            var event = treeViewItem.selected ? 'selected' : 'unselected';
            this.updateItemsOnSelect(treeViewItem);
            this[event].emit(__assign({}, treeViewItem));
        };
        PoTreeViewBaseComponent.prototype.addChildItemInParent = function (childItem, parentItem) {
            if (!parentItem.subItems) {
                parentItem.subItems = [];
            }
            parentItem.subItems.push(childItem);
        };
        // caso houver parentItem:
        //  - expande o parentItem caso o filho estiver expandido;
        //  - adiciona o childItem no parentItem;
        //  - marca o parentItem caso conter subItems marcodos ou nulos;
        // Se não conter parentItem, adiciona o childItem no items.
        PoTreeViewBaseComponent.prototype.addItem = function (items, childItem, parentItem) {
            if (parentItem) {
                this.expandParentItem(childItem, parentItem);
                this.addChildItemInParent(childItem, parentItem);
                this.selectItemBySubItems(parentItem);
                items.push(parentItem);
            }
            else {
                items.push(childItem);
            }
        };
        PoTreeViewBaseComponent.prototype.selectAllItems = function (items, isSelected) {
            var _this = this;
            items.forEach(function (item) {
                if (item.subItems) {
                    _this.selectAllItems(item.subItems, isSelected);
                }
                item.selected = isSelected;
            });
        };
        PoTreeViewBaseComponent.prototype.selectItemBySubItems = function (item) {
            item.selected = this.everyItemSelected(item.subItems);
        };
        // retornará:
        //  - true: se todos os items estiverem marcados;
        //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
        //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
        PoTreeViewBaseComponent.prototype.everyItemSelected = function (items) {
            if (items === void 0) { items = []; }
            var itemsLength = items.length;
            var lengthCheckedItems = items.filter(function (item) { return item.selected; }).length;
            if (itemsLength && itemsLength === lengthCheckedItems) {
                return true;
            }
            var hasIndeterminateItems = items.filter(function (item) { return item.selected || item.selected === null; }).length;
            if (hasIndeterminateItems) {
                return null;
            }
            return false;
        };
        // expande o item pai caso o filho estiver expandido.
        PoTreeViewBaseComponent.prototype.expandParentItem = function (childItem, parentItem) {
            if (childItem.expanded) {
                parentItem.expanded = true;
            }
        };
        PoTreeViewBaseComponent.prototype.getItemsByMaxLevel = function (items, level, parentItem, newItems) {
            var _this = this;
            if (items === void 0) { items = []; }
            if (level === void 0) { level = 0; }
            if (newItems === void 0) { newItems = []; }
            items.forEach(function (item) {
                var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
                if (level === poTreeViewMaxLevel) {
                    return;
                }
                if (Array.isArray(subItems)) {
                    // caso um item pai iniciar selecionado, deve selecionar os filhos.
                    if (currentItem.selected) {
                        _this.selectAllItems(subItems, currentItem.selected);
                    }
                    _this.getItemsByMaxLevel(subItems, ++level, currentItem);
                    --level;
                }
                _this.addItem(newItems, currentItem, parentItem);
            });
            return newItems;
        };
        PoTreeViewBaseComponent.prototype.getItemsWithParentSelected = function (items, parentItem, newItems) {
            var _this = this;
            if (items === void 0) { items = []; }
            if (newItems === void 0) { newItems = []; }
            items.forEach(function (item) {
                var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
                if (Array.isArray(subItems)) {
                    _this.getItemsWithParentSelected(subItems, currentItem);
                }
                _this.addItem(newItems, currentItem, parentItem);
            });
            return newItems;
        };
        PoTreeViewBaseComponent.prototype.updateItemsOnSelect = function (selectedItem) {
            if (selectedItem.subItems) {
                this.selectAllItems(selectedItem.subItems, selectedItem.selected);
            }
            this._items = this.getItemsWithParentSelected(this.items);
        };
        __decorate([
            core.Input('p-items'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], PoTreeViewBaseComponent.prototype, "items", null);
        __decorate([
            core.Input('p-selectable'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoTreeViewBaseComponent.prototype, "selectable", null);
        __decorate([
            core.Output('p-collapsed'),
            __metadata("design:type", Object)
        ], PoTreeViewBaseComponent.prototype, "collapsed", void 0);
        __decorate([
            core.Output('p-expanded'),
            __metadata("design:type", Object)
        ], PoTreeViewBaseComponent.prototype, "expanded", void 0);
        __decorate([
            core.Output('p-selected'),
            __metadata("design:type", Object)
        ], PoTreeViewBaseComponent.prototype, "selected", void 0);
        __decorate([
            core.Output('p-unselected'),
            __metadata("design:type", Object)
        ], PoTreeViewBaseComponent.prototype, "unselected", void 0);
        PoTreeViewBaseComponent = __decorate([
            core.Directive()
        ], PoTreeViewBaseComponent);
        return PoTreeViewBaseComponent;
    }());

    var PoTreeViewService = /** @class */ (function () {
        function PoTreeViewService() {
            this.expandedEvent = new rxjs.Subject();
            this.selectedEvent = new rxjs.Subject();
        }
        PoTreeViewService.prototype.emitExpandedEvent = function (treeViewItem) {
            return this.expandedEvent.next(treeViewItem);
        };
        PoTreeViewService.prototype.emitSelectedEvent = function (treeViewItem) {
            return this.selectedEvent.next(treeViewItem);
        };
        PoTreeViewService.prototype.onExpand = function () {
            return this.expandedEvent.asObservable();
        };
        PoTreeViewService.prototype.onSelect = function () {
            return this.selectedEvent.asObservable();
        };
        PoTreeViewService = __decorate([
            core.Injectable()
        ], PoTreeViewService);
        return PoTreeViewService;
    }());

    /**
     * @docsExtends PoTreeViewBaseComponent
     *
     * @example
     *
     * <example name="po-tree-view-basic" title="PO Tree View Basic">
     *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
     *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-labs" title="PO Tree View Labs">
     *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
     *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
     *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
     *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
     * </example>
     *
     * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
     *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
     *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
     * </example>
     */
    var PoTreeViewComponent = /** @class */ (function (_super) {
        __extends(PoTreeViewComponent, _super);
        function PoTreeViewComponent(treeViewService) {
            var _this = _super.call(this) || this;
            _this.treeViewService = treeViewService;
            return _this;
        }
        Object.defineProperty(PoTreeViewComponent.prototype, "hasItems", {
            get: function () {
                return !!(this.items && this.items.length);
            },
            enumerable: true,
            configurable: true
        });
        PoTreeViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.treeViewService.onExpand().subscribe(function (treeViewItem) {
                _this.emitExpanded(treeViewItem);
            });
            this.treeViewService.onSelect().subscribe(function (treeViewItem) {
                _this.emitSelected(treeViewItem);
            });
        };
        PoTreeViewComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        PoTreeViewComponent.ctorParameters = function () { return [
            { type: PoTreeViewService }
        ]; };
        PoTreeViewComponent = __decorate([
            core.Component({
                selector: 'po-tree-view',
                template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\" [p-item]=\"item\" [p-selectable]=\"selectable\">\n    </po-tree-view-item>\n  </ul>\n</po-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [PoTreeViewService]
            }),
            __metadata("design:paramtypes", [PoTreeViewService])
        ], PoTreeViewComponent);
        return PoTreeViewComponent;
    }(PoTreeViewBaseComponent));

    var PoTreeViewItemComponent = /** @class */ (function () {
        function PoTreeViewItemComponent(treeViewService) {
            this.treeViewService = treeViewService;
        }
        Object.defineProperty(PoTreeViewItemComponent.prototype, "hasSubItems", {
            get: function () {
                return !!(this.item.subItems && this.item.subItems.length);
            },
            enumerable: true,
            configurable: true
        });
        PoTreeViewItemComponent.prototype.onClick = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.item.expanded = !this.item.expanded;
            this.treeViewService.emitExpandedEvent(__assign({}, this.item));
        };
        PoTreeViewItemComponent.prototype.onSelect = function (selectedItem) {
            this.treeViewService.emitSelectedEvent(__assign({}, selectedItem));
        };
        PoTreeViewItemComponent.prototype.trackByFunction = function (index) {
            return index;
        };
        PoTreeViewItemComponent.ctorParameters = function () { return [
            { type: PoTreeViewService }
        ]; };
        __decorate([
            core.Input('p-item'),
            __metadata("design:type", Object)
        ], PoTreeViewItemComponent.prototype, "item", void 0);
        __decorate([
            core.Input('p-selectable'),
            __metadata("design:type", Boolean)
        ], PoTreeViewItemComponent.prototype, "selectable", void 0);
        PoTreeViewItemComponent = __decorate([
            core.Component({
                selector: 'po-tree-view-item',
                template: "<li class=\"po-tree-view-item\">\n  <po-tree-view-item-header\n    [p-item]=\"item\"\n    [p-selectable]=\"selectable\"\n    (p-expanded)=\"onClick($event)\"\n    (p-selected)=\"onSelect(item)\"\n  >\n  </po-tree-view-item-header>\n\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\n    <po-tree-view-item\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\n      [p-item]=\"subItem\"\n      [p-selectable]=\"selectable\"\n    >\n    </po-tree-view-item>\n  </ul>\n</li>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                animations: [
                    animations.trigger('toggleBody', [
                        animations.state('collapsed', animations.style({
                            'overflow-y': 'hidden',
                            visibility: 'hidden',
                            opacity: 0,
                            height: '0'
                        })),
                        animations.transition('expanded => collapsed', [
                            animations.style({ height: '*' }),
                            animations.animate(100, animations.style({ opacity: 0 })),
                            animations.animate(200, animations.style({ height: 0 }))
                        ]),
                        animations.transition('collapsed => expanded', [
                            animations.style({ height: '0' }),
                            animations.animate(100, animations.style({ opacity: 1 })),
                            animations.animate(200, animations.style({ height: '*' }))
                        ])
                    ])
                ]
            }),
            __metadata("design:paramtypes", [PoTreeViewService])
        ], PoTreeViewItemComponent);
        return PoTreeViewItemComponent;
    }());

    var PoTreeViewItemHeaderComponent = /** @class */ (function () {
        function PoTreeViewItemHeaderComponent() {
            this.selectable = false;
            this.expanded = new core.EventEmitter();
            this.selected = new core.EventEmitter();
        }
        Object.defineProperty(PoTreeViewItemHeaderComponent.prototype, "hasSubItems", {
            get: function () {
                return !!(this.item.subItems && this.item.subItems.length);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.ViewChild('inputCheckbox'),
            __metadata("design:type", Object)
        ], PoTreeViewItemHeaderComponent.prototype, "inputCheckbox", void 0);
        __decorate([
            core.Input('p-item'),
            __metadata("design:type", Object)
        ], PoTreeViewItemHeaderComponent.prototype, "item", void 0);
        __decorate([
            core.Input('p-selectable'),
            __metadata("design:type", Boolean)
        ], PoTreeViewItemHeaderComponent.prototype, "selectable", void 0);
        __decorate([
            core.Output('p-expanded'),
            __metadata("design:type", Object)
        ], PoTreeViewItemHeaderComponent.prototype, "expanded", void 0);
        __decorate([
            core.Output('p-selected'),
            __metadata("design:type", Object)
        ], PoTreeViewItemHeaderComponent.prototype, "selected", void 0);
        PoTreeViewItemHeaderComponent = __decorate([
            core.Component({
                selector: 'po-tree-view-item-header',
                template: "<div class=\"po-tree-view-item-header\">\n  <button *ngIf=\"hasSubItems\" class=\"po-tree-view-item-header-button\" (click)=\"expanded.emit($event)\">\n    <span\n      class=\"po-icon po-icon-arrow-down po-tree-view-item-header-button-icon\"\n      [class.po-tree-view-item-header-button-icon-transform]=\"item.expanded\"\n    >\n    </span>\n  </button>\n\n  <ng-container *ngIf=\"selectable; then checkboxTemplate; else labelTemplate\"></ng-container>\n</div>\n\n<ng-template #labelTemplate>\n  <span class=\"po-tree-view-item-header-label\" [class.po-tree-view-item-header-padding]=\"!hasSubItems\">\n    {{ item.label }}\n  </span>\n</ng-template>\n\n<ng-template #checkboxTemplate>\n  <po-checkbox\n    class=\"po-tree-view-item-header-checkbox\"\n    [class.po-tree-view-item-header-padding]=\"!hasSubItems\"\n    [p-label]=\"item.label\"\n    [(ngModel)]=\"item.selected\"\n    (p-change)=\"selected.emit(item)\"\n  >\n  </po-checkbox>\n</ng-template>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], PoTreeViewItemHeaderComponent);
        return PoTreeViewItemHeaderComponent;
    }());

    /**
     * @description
     *
     * Módulo do componente `po-tree-view`.
     *
     * > Para o correto funcionamento do componente `po-tree-view`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var PoTreeViewModule = /** @class */ (function () {
        function PoTreeViewModule() {
        }
        PoTreeViewModule = __decorate([
            core.NgModule({
                declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent],
                exports: [PoTreeViewComponent],
                imports: [common.CommonModule, forms.FormsModule, PoContainerModule, PoFieldModule]
            })
        ], PoTreeViewModule);
        return PoTreeViewModule;
    }());

    /**
     *
     * @description
     *
     * O componente `po-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
     * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
     *
     * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
     * para ajuda, como também possibilita ser utilizado com ou sem sombra.
     *
     * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
     * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
     */
    var PoWidgetBaseComponent = /** @class */ (function () {
        function PoWidgetBaseComponent() {
            this._disabled = false;
            this._noShadow = false;
            this._primary = false;
            this.containerHeight = 'auto';
            /** Ação que será executada quando o usuário clicar sobre a área total do `po-widget`. */
            this.click = new core.EventEmitter();
            /** Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada. */
            this.onDisabled = new core.EventEmitter();
            /** Função que será chamada na primeira ação. */
            this.primaryAction = new core.EventEmitter();
            /** Função que será chamada na segunda ação. */
            this.secondaryAction = new core.EventEmitter();
            /** Função chamada ao clicar no ícone de configuração */
            this.setting = new core.EventEmitter();
            /** Função que será chamada ao clicar no título. */
            this.titleAction = new core.EventEmitter();
        }
        Object.defineProperty(PoWidgetBaseComponent.prototype, "background", {
            get: function () {
                return this._background;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplicação de imagem de fundo.
             * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
             * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
             *
             */
            set: function (value) {
                this._background = value && typeof value === 'string' ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todas as ações do componente.
             *
             * @default `false`
             */
            set: function (value) {
                this._disabled = convertToBoolean(value);
                this.onDisabled.emit(this.disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "height", {
            get: function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `po-widget`.
             * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
             * `p-setting`, `p-help` e `p-title`.
             * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
             */
            set: function (value) {
                this._height = parseInt(value, 10);
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "help", {
            get: function () {
                return this._help;
            },
            /**
             * @optional
             *
             * @description
             *
             * Link de ajuda
             */
            set: function (value) {
                this._help = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "noShadow", {
            get: function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a sombra do `po-widget`.
             *
             * @default `true`
             */
            set: function (value) {
                this._noShadow = value === '' ? true : convertToBoolean(value);
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "primary", {
            get: function () {
                return this._primary;
            },
            /**
             * @optional
             *
             * @description
             *
             * Opção para que o `po-widget` fique em destaque.
             *
             * @default `false`
             */
            set: function (value) {
                this._primary = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "primaryLabel", {
            get: function () {
                return this._primaryLabel;
            },
            /**
             * @optional
             *
             * @description
             *
             * Descrição da primeira ação.
             *
             * @default `false`
             */
            set: function (value) {
                this._primaryLabel = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoWidgetBaseComponent.prototype, "title", {
            get: function () {
                return this._title;
            },
            /**
             * @optional
             *
             * @description
             *
             * Título do `po-widget`.
             *
             * @default `false`
             */
            set: function (value) {
                this._title = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('p-background'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoWidgetBaseComponent.prototype, "background", null);
        __decorate([
            core.Input('p-disabled'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoWidgetBaseComponent.prototype, "disabled", null);
        __decorate([
            core.Input('p-height'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], PoWidgetBaseComponent.prototype, "height", null);
        __decorate([
            core.Input('p-help'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoWidgetBaseComponent.prototype, "help", null);
        __decorate([
            core.Input('p-no-shadow'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoWidgetBaseComponent.prototype, "noShadow", null);
        __decorate([
            core.Input('p-primary'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PoWidgetBaseComponent.prototype, "primary", null);
        __decorate([
            core.Input('p-primary-label'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoWidgetBaseComponent.prototype, "primaryLabel", null);
        __decorate([
            core.Input('p-secondary-label'),
            __metadata("design:type", String)
        ], PoWidgetBaseComponent.prototype, "secondaryLabel", void 0);
        __decorate([
            core.Input('p-title'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], PoWidgetBaseComponent.prototype, "title", null);
        __decorate([
            core.Output('p-click'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "click", void 0);
        __decorate([
            core.Output('p-on-disabled'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "onDisabled", void 0);
        __decorate([
            core.Output('p-primary-action'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "primaryAction", void 0);
        __decorate([
            core.Output('p-secondary-action'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "secondaryAction", void 0);
        __decorate([
            core.Output('p-setting'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "setting", void 0);
        __decorate([
            core.Output('p-title-action'),
            __metadata("design:type", core.EventEmitter)
        ], PoWidgetBaseComponent.prototype, "titleAction", void 0);
        PoWidgetBaseComponent = __decorate([
            core.Directive()
        ], PoWidgetBaseComponent);
        return PoWidgetBaseComponent;
    }());

    /**
     * @docsExtends PoWidgetBaseComponent
     *
     * @example
     *
     * <example name="po-widget-basic" title="PO Widget Basic">
     *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.html"> </file>
     *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-labs" title="PO Widget Labs">
     *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.html"> </file>
     *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-finance-dashboard" title="PO Widget - Finance dashboard">
     *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.html"> </file>
     *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.ts"> </file>
     * </example>
     *
     * <example name="po-widget-card" title="PO Widget - Card">
     *  <file name="sample-po-widget-card/sample-po-widget-card.component.html"> </file>
     *  <file name="sample-po-widget-card/sample-po-widget-card.component.ts"> </file>
     * </example>
     *
     */
    var PoWidgetComponent = /** @class */ (function (_super) {
        __extends(PoWidgetComponent, _super);
        function PoWidgetComponent(viewRef) {
            return _super.call(this) || this;
        }
        Object.defineProperty(PoWidgetComponent.prototype, "showTitleAction", {
            get: function () {
                return !!this.titleAction.observers[0];
            },
            enumerable: true,
            configurable: true
        });
        PoWidgetComponent.prototype.ngOnInit = function () {
            this.setHeight(this.height);
        };
        PoWidgetComponent.prototype.hasTitleHelpOrSetting = function () {
            return !!this.title || !!this.help || !!this.setting.observers[0];
        };
        PoWidgetComponent.prototype.onClick = function (event) {
            if (!this.disabled) {
                this.click.emit(event);
            }
        };
        PoWidgetComponent.prototype.openHelp = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                window.open(this.help, '_blank');
            }
        };
        PoWidgetComponent.prototype.runPrimaryAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.primaryAction.emit();
            }
        };
        PoWidgetComponent.prototype.runSecondaryAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.secondaryAction.emit();
            }
        };
        PoWidgetComponent.prototype.runTitleAction = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.titleAction.emit();
            }
        };
        PoWidgetComponent.prototype.setHeight = function (height) {
            if (height) {
                var bodyHeight = height;
                var hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
                var footerBorder = 1;
                var footerHeight = 40;
                var settingHeight = 37;
                var shadowHeight = 2;
                var titleHeight = 50;
                if (this.noShadow) {
                    bodyHeight -= shadowHeight;
                }
                if (hasSettingOrHelp && !this.title) {
                    bodyHeight -= settingHeight;
                }
                if (this.title) {
                    bodyHeight -= titleHeight;
                }
                if (this.primaryLabel) {
                    bodyHeight -= footerHeight + footerBorder;
                }
                this.containerHeight = bodyHeight + "px";
            }
            else {
                this.containerHeight = "auto";
            }
        };
        PoWidgetComponent.prototype.settingOutput = function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.setting.emit();
            }
        };
        PoWidgetComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        PoWidgetComponent = __decorate([
            core.Component({
                selector: 'po-widget',
                template: "<div\n  [class.po-clickable]=\"click.observers.length\"\n  [class.po-widget]=\"!primary\"\n  [class.po-widget-disabled]=\"disabled\"\n  [class.po-widget-primary]=\"primary\"\n  [class.po-widget-no-shadow]=\"noShadow\"\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\n  (click)=\"onClick($event)\"\n>\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"po-widget-header\">\n    <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"po-widget-title-action\" (click)=\"runTitleAction($event)\">\n      {{ title }}\n    </span>\n    <ng-template #noTitleAction>{{ title }}</ng-template>\n\n    <div *ngIf=\"setting.observers[0] || help\" class=\"po-pull-right\">\n      <span\n        id=\"settingAction\"\n        *ngIf=\"setting.observers[0]\"\n        class=\"po-clickable po-icon po-icon-settings\"\n        (click)=\"settingOutput($event)\"\n      >\n      </span>\n      <span id=\"helpLink\" *ngIf=\"help\" class=\"po-clickable po-icon po-icon-help\" (click)=\"openHelp($event)\"> </span>\n    </div>\n  </div>\n\n  <po-container p-no-border [p-height]=\"containerHeight\">\n    <div class=\"po-widget-body\">\n      <ng-content></ng-content>\n    </div>\n  </po-container>\n\n  <div *ngIf=\"primaryLabel\" class=\"po-widget-footer\">\n    <div class=\"po-widget-xl\" *ngIf=\"!secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"secondaryAct\" (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a>\n    </div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef])
        ], PoWidgetComponent);
        return PoWidgetComponent;
    }(PoWidgetBaseComponent));

    /**
     * @description
     *
     * Módulo do componente po-widget
     */
    var PoWidgetModule = /** @class */ (function () {
        function PoWidgetModule() {
        }
        PoWidgetModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoContainerModule],
                exports: [PoWidgetComponent],
                declarations: [PoWidgetComponent]
            })
        ], PoWidgetModule);
        return PoWidgetModule;
    }());

    var PoComponentsModule = /** @class */ (function () {
        function PoComponentsModule() {
        }
        PoComponentsModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [
                    PoAccordionModule,
                    PoAvatarModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoButtonGroupModule,
                    PoCalendarModule,
                    PoChartModule,
                    PoContainerModule,
                    PoDisclaimerGroupModule,
                    PoDisclaimerModule,
                    PoDividerModule,
                    PoDropdownModule,
                    PoDynamicModule,
                    PoFieldModule,
                    PoGridModule,
                    PoInfoModule,
                    PoListViewModule,
                    PoLoadingModule,
                    PoMenuModule,
                    PoMenuPanelModule,
                    PoModalModule,
                    PoNavbarModule,
                    PoPageModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoProgressModule,
                    PoSlideModule,
                    PoStepperModule,
                    PoTableModule,
                    PoTabsModule,
                    PoTagModule,
                    PoToolbarModule,
                    PoTreeViewModule,
                    PoWidgetModule
                ],
                exports: [
                    PoAccordionModule,
                    PoAvatarModule,
                    PoBreadcrumbModule,
                    PoButtonModule,
                    PoButtonGroupModule,
                    PoCalendarModule,
                    PoChartModule,
                    PoContainerModule,
                    PoDisclaimerGroupModule,
                    PoDisclaimerModule,
                    PoDividerModule,
                    PoDropdownModule,
                    PoDynamicModule,
                    PoFieldModule,
                    PoGridModule,
                    PoInfoModule,
                    PoListViewModule,
                    PoLoadingModule,
                    PoMenuModule,
                    PoMenuPanelModule,
                    PoModalModule,
                    PoNavbarModule,
                    PoPageModule,
                    PoPopoverModule,
                    PoPopupModule,
                    PoProgressModule,
                    PoSlideModule,
                    PoStepperModule,
                    PoTableModule,
                    PoTabsModule,
                    PoTagModule,
                    PoToolbarModule,
                    PoTreeViewModule,
                    PoWidgetModule
                ],
                providers: [],
                bootstrap: []
            })
        ], PoComponentsModule);
        return PoComponentsModule;
    }());

    var PoDirectivesModule = /** @class */ (function () {
        function PoDirectivesModule() {
        }
        PoDirectivesModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [PoTooltipModule],
                exports: [PoTooltipModule],
                providers: [],
                bootstrap: []
            })
        ], PoDirectivesModule);
        return PoDirectivesModule;
    }());

    var PoGuardsModule = /** @class */ (function () {
        function PoGuardsModule() {
        }
        PoGuardsModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [],
                exports: [],
                providers: [],
                bootstrap: []
            })
        ], PoGuardsModule);
        return PoGuardsModule;
    }());

    var poHttpInterceptorDetailLiteralsDefault = {
        en: {
            closeButton: 'Close',
            details: 'Details',
            detail: 'Detail',
            error: 'Error',
            warning: 'Warning',
            info: 'Information',
            success: 'Success'
        },
        es: {
            closeButton: 'Cerrar',
            details: 'Detalles',
            detail: 'Detalle',
            error: 'Error',
            warning: 'Advertencia',
            info: 'Informacion',
            success: 'Éxito'
        },
        pt: {
            closeButton: 'Fechar',
            details: 'Detalhes',
            detail: 'Detalhe',
            error: 'Erro',
            warning: 'Aviso',
            info: 'Informação',
            success: 'Sucesso'
        },
        ru: {
            closeButton: 'близко',
            details: 'Детали',
            detail: 'деталь',
            error: 'ошибка',
            warning: 'предупреждение',
            info: 'информация',
            success: 'Yспех'
        }
    };

    var colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para a modal de detalhes exibida pelo interceptor
     */
    var PoHttpInterceptorDetailComponent = /** @class */ (function () {
        function PoHttpInterceptorDetailComponent() {
            var _this = this;
            this.closed = new core.EventEmitter();
            this.details = [];
            this.language = getShortBrowserLanguage();
            this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
            this.primaryAction = {
                action: function () { return _this.close(); },
                label: this.literals.closeButton
            };
        }
        Object.defineProperty(PoHttpInterceptorDetailComponent.prototype, "detail", {
            set: function (details) {
                if (details && details.length) {
                    this.details = this.filterByValidDetails(details);
                }
                this.title = this.formatTitle(this.details);
            },
            enumerable: true,
            configurable: true
        });
        PoHttpInterceptorDetailComponent.prototype.close = function () {
            this.modal.close();
            this.closed.emit();
        };
        PoHttpInterceptorDetailComponent.prototype.formatDetailItemTitle = function (detail) {
            return detail.code ? detail.code + " - " + detail.message : detail.message;
        };
        PoHttpInterceptorDetailComponent.prototype.open = function () {
            this.modal.open();
        };
        PoHttpInterceptorDetailComponent.prototype.typeColor = function (type) {
            return colors[type];
        };
        PoHttpInterceptorDetailComponent.prototype.typeValue = function (type) {
            return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
        };
        PoHttpInterceptorDetailComponent.prototype.addValidDetail = function (newDetails, detail) {
            return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
        };
        PoHttpInterceptorDetailComponent.prototype.getValidDetailProperties = function (_a) {
            var code = _a.code, message = _a.message, detailedMessage = _a.detailedMessage, type = _a.type;
            return { code: code, message: message, detailedMessage: detailedMessage, type: type };
        };
        PoHttpInterceptorDetailComponent.prototype.filterByValidDetails = function (details) {
            var _this = this;
            return details.reduce(function (newDetails, detail) { return _this.addValidDetail(newDetails, detail); }, []);
        };
        PoHttpInterceptorDetailComponent.prototype.formatTitle = function (details) {
            return details.length > 1 ? this.literals.details + " (" + details.length + ")" : this.literals.detail;
        };
        __decorate([
            core.ViewChild(PoModalComponent, { static: true }),
            __metadata("design:type", PoModalComponent)
        ], PoHttpInterceptorDetailComponent.prototype, "modal", void 0);
        PoHttpInterceptorDetailComponent = __decorate([
            core.Component({
                selector: 'po-http-interceptor-detail',
                template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n          <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n        </div>\n\n        <div class=\"po-row\">\n          <p>{{ detail.detailedMessage }}</p>\n        </div>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n"
            })
        ], PoHttpInterceptorDetailComponent);
        return PoHttpInterceptorDetailComponent;
    }());

    // DEPRECATED 4.x.x
    var NO_ERROR_HEADER_PARAM = 'X-PO-No-Error';
    var NO_MESSAGE_HEADER_PARAM = 'X-PO-No-Message';
    /**
     * @description
     *
     * O *interceptor* tem a finalidade de exibir notificações com mensagens na tela, baseado nas respostas das requisições HTTP.
     *
     * Pode ser utilizado para dar feedback das ações do usuário como, por exemplo: erro de autorização, mensagens de regras de negócio,
     * atualizações de registros, erro quando o servidor estiver indisponível e entre outros.
     *
     * ## Configuração
     *
     * Para o correto funcionamento do interceptor `po-http-interceptor`, deve ser importado o `BrowserAnimationsModule` no
     * módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
     * import { PoModule } from '@po-ui/ng-components';
     * ...
     *
     * @NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     PoModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
     *
     * ```
     * import { HttpClient } from '@angular/common/http';
     *
     * ...
     *
     * @Injectable()
     * export class UserService {
     *
     *   constructor(private http: HttpClient) { }
     *
     *   getUsers() {
     *     return this.http.get('/api/users');
     *   }
     *
     *   ...
     *
     * }
     * ```
     *
     * ## Como usar
     *
     * Para exibir as noticações é necessário informar a mensagem no retorno da requisição. A estrutura da mensagem
     * é feita com base no status da resposta, conforme será apresentado nos próximos tópicos.
     *
     * ### Estrutura das mensagens
     *
     * #### Mensagens de sucesso `2xx`
     *
     * Para exibir mensagens ao retornar uma lista ou um item, deve-se incluir a propriedade `_messages` no objeto de retorno.
     * Por exemplo:
     * ```
     * {
     *   "_messages": [
     *     {
     *       "type": "success" || "warning" || "error" || "information" (será exibido a `tag` apenas se esta propriedade possuir valor),
     *       "code": "título ou código da mensagem",
     *       "message": "texto da mensagem",
     *       "detailedMessage": "detalhamento da mensagem"
     *     }
     *   ]
     * }
     * ```
     *
     * #### Mensagens de erro `4xx` ou `5xx`
     *
     * Ao retornar erro, o objeto não necessita ter `_messages`, deve-se retornar o objeto diretamente:
     *
     * ```
     * {
     *    "code": "título ou código da mensagem",
     *    "message": "texto da mensagem",
     *    "detailedMessage": "detalhamento da mensagem"
     * }
     * ```
     *
     * Também é possível informar as seguintes propriedades:
     *
     * - `helpUrl`: link para a documentação do erro;
     *    - Caso for informado, será exibido uma ação de "Ajuda" na notificação, para isso não deverá ter a propriedade `detailedMessage`.
     * - `details`: Uma lista de objetos de mensagem (recursiva) com mais detalhes sobre a mensagem principal.
     *
     * > Veja o [Guia de implementação de APIs](guides/api) para mais detalhes sobre a estrutura das mensagens.
     *
     * ### Cabeçalho
     *
     * É possível dispensar a notificação para o usuário utilizando no cabeçalho da requisição os parâmetros listados abaixo com o valor
     * igual a `true`:
     *
     * - `X-PO-No-Message`: Não exibe notificações de erro e/ou sucesso.
     *
     * - **Depreciado** `X-PO-No-Error`: não mostra notificações de erro com códigos `4xx` e `5xx`.
     *
     * ```
     * ...
     *  const headers = { 'X-PO-No-Message': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     *
     * > Após a validação no *interceptor*, os parâmetros serão removidos do cabeçalho da requisição.
     *
     */
    var PoHttpInterceptorBaseService = /** @class */ (function () {
        function PoHttpInterceptorBaseService(componentInjector, notification) {
            this.componentInjector = componentInjector;
            this.notification = notification;
            this.notificationTypes = ['success', 'warning', 'error', 'information'];
            this.httpInterceptorDetailComponent = undefined;
        }
        PoHttpInterceptorBaseService.prototype.intercept = function (request, next) {
            var _this = this;
            var cloneRequest = request.clone();
            request = request && this.hasParameters(request) ? this.cloneRequestWithoutParameters(request) : request;
            return next.handle(request).pipe(operators.tap(function (response) {
                if (response instanceof http.HttpResponse) {
                    _this.processResponse(response, cloneRequest);
                }
            }, function (error) {
                _this.processErrorResponse(error, cloneRequest);
            }));
        };
        PoHttpInterceptorBaseService.prototype.processResponse = function (response, request) {
            var _this = this;
            var hasNoMessageParam = this.hasNoMessageParam(request);
            if (!hasNoMessageParam && response.body && response.body._messages) {
                var messages = response.body._messages;
                if (messages instanceof Array) {
                    messages.forEach(function (message) {
                        _this.showNotification(message);
                    });
                }
                else {
                    this.showNotification(messages);
                }
            }
        };
        PoHttpInterceptorBaseService.prototype.processErrorResponse = function (response, request) {
            var errorResponse = response.status !== 0
                ? response.error
                : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
            var hasNoErrorParam = this.hasNoErrorParam(request);
            var hasNoMessageParam = this.hasNoMessageParam(request);
            if (errorResponse && errorResponse.message && !hasNoErrorParam && !hasNoMessageParam) {
                this.showNotification(__assign(__assign({}, errorResponse), { type: 'error' }));
            }
        };
        PoHttpInterceptorBaseService.prototype.cloneRequestWithoutParameters = function (request) {
            var headers = request.headers.delete(NO_ERROR_HEADER_PARAM).delete(NO_MESSAGE_HEADER_PARAM);
            return request.clone({ headers: headers });
        };
        PoHttpInterceptorBaseService.prototype.createModal = function (responseMessage) {
            var _this = this;
            var details = responseMessage.details ? __spread([responseMessage], responseMessage.details) : [responseMessage];
            this.httpInterceptorDetailComponent = this.componentInjector.createComponentInApplication(PoHttpInterceptorDetailComponent);
            this.httpInterceptorDetailComponent.instance.detail = details;
            this.httpInterceptorDetailComponent.instance.closed.subscribe(function () { return _this.destroyModal(); });
            this.httpInterceptorDetailComponent.instance.open();
        };
        PoHttpInterceptorBaseService.prototype.destroyModal = function () {
            if (this.httpInterceptorDetailComponent) {
                this.componentInjector.destroyComponentInApplication(this.httpInterceptorDetailComponent);
                this.httpInterceptorDetailComponent = undefined;
            }
        };
        PoHttpInterceptorBaseService.prototype.hasMessage = function (responseMessage) {
            var hasMessageProperties = responseMessage.message;
            return responseMessage && hasMessageProperties;
        };
        PoHttpInterceptorBaseService.prototype.hasNoErrorParam = function (request) {
            var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
            return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
        };
        PoHttpInterceptorBaseService.prototype.hasNoMessageParam = function (request) {
            var noMessageParam = request && request.headers.get(NO_MESSAGE_HEADER_PARAM);
            return noMessageParam && noMessageParam.toString().toLocaleLowerCase() === 'true';
        };
        PoHttpInterceptorBaseService.prototype.hasParameters = function (request) {
            return request.headers.has(NO_ERROR_HEADER_PARAM) || request.headers.has(NO_MESSAGE_HEADER_PARAM);
        };
        PoHttpInterceptorBaseService.prototype.showNotification = function (response) {
            if (!this.hasMessage(response)) {
                return;
            }
            var typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
            var notificationAction = this.generateNotificationAction(response);
            this.notification[typeNotification]({
                message: response.message,
                actionLabel: notificationAction.label,
                action: notificationAction.action
            });
        };
        PoHttpInterceptorBaseService.prototype.generateDetailModal = function (responseMessage) {
            var _this = this;
            return function () {
                if (!_this.httpInterceptorDetailComponent) {
                    _this.createModal(responseMessage);
                }
            };
        };
        PoHttpInterceptorBaseService.prototype.generateNotificationAction = function (responseMessage) {
            var notificationAction;
            var notificationLabel;
            if (responseMessage.helpUrl && !(responseMessage.detailedMessage || responseMessage.details)) {
                notificationLabel = 'Ajuda';
                notificationAction = this.generateUrlHelpFunction(responseMessage.helpUrl);
            }
            else if (responseMessage.detailedMessage || responseMessage.details) {
                notificationLabel = 'Detalhes';
                notificationAction = this.generateDetailModal(responseMessage);
            }
            return { label: notificationLabel, action: notificationAction };
        };
        PoHttpInterceptorBaseService.prototype.generateUrlHelpFunction = function (helpUrl) {
            return function () {
                window.open(helpUrl, '_blank');
            };
        };
        return PoHttpInterceptorBaseService;
    }());

    /**
     * @docsExtends PoHttpInterceptorBaseService
     *
     * @example
     * <example name='po-http-interceptor-labs' title='PO Http Interceptor Labs'>
     *  <file name='sample-po-http-interceptor-labs.component.ts'> </file>
     *  <file name='sample-po-http-interceptor-labs.component.html'> </file>
     * </example>
     */
    var PoHttpInterceptorService = /** @class */ (function (_super) {
        __extends(PoHttpInterceptorService, _super);
        function PoHttpInterceptorService(notification, componentInjector) {
            return _super.call(this, componentInjector, notification) || this;
        }
        PoHttpInterceptorService.ctorParameters = function () { return [
            { type: PoNotificationService },
            { type: PoComponentInjectorService }
        ]; };
        PoHttpInterceptorService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PoNotificationService, PoComponentInjectorService])
        ], PoHttpInterceptorService);
        return PoHttpInterceptorService;
    }(PoHttpInterceptorBaseService));

    var PoHttpInterceptorModule = /** @class */ (function () {
        function PoHttpInterceptorModule() {
        }
        PoHttpInterceptorModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule],
                declarations: [PoHttpInterceptorDetailComponent],
                providers: [
                    PoHttpInterceptorService,
                    PoNotificationService,
                    {
                        provide: http.HTTP_INTERCEPTORS,
                        useClass: PoHttpInterceptorService,
                        multi: true
                    }
                ]
            })
        ], PoHttpInterceptorModule);
        return PoHttpInterceptorModule;
    }());

    /**
     * @docsPrivate
     *
     * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `PoHttpRequestInterceptorService`
     * gerenciando o seu estado.
     */
    var PoHttpRequesControltService = /** @class */ (function () {
        function PoHttpRequesControltService() {
            this.controlHttpRequest = new rxjs.Subject();
        }
        PoHttpRequesControltService.prototype.getControlHttpRequest = function () {
            return this.controlHttpRequest.asObservable();
        };
        PoHttpRequesControltService.prototype.send = function (value) {
            if (value === void 0) { value = 0; }
            this.controlHttpRequest.next(value);
        };
        PoHttpRequesControltService = __decorate([
            core.Injectable()
        ], PoHttpRequesControltService);
        return PoHttpRequesControltService;
    }());

    var noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
    var screenLock = 'X-PO-Screen-Lock';
    /**
     * @description
     *
     * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
     *
     * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
     * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
     * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
     * será retornado a quantidade de requisições pendentes.
     *
     * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
     * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
     *
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-PO-Screen-Lock': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
     *
     * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     *
     * Segue abaixo um exemplo de uso:
     *
     * ```
     * import { HttpClient } from '@angular/common/http';
     *
     * ...
     *
     * @Injectable()
     * export class CustomersService {
     *
     *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
     *  pendingRequests: number = 0;
     *  subscription: Subscription;
     *
     *  constructor(
     *    private http: HttpClient,
     *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
     *
     *  ngOnDestroy(): void {
     *    this.subscription.unsubscribe();
     *  }
     *
     *  ngOnInit(): void {
     *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
     *      this.pendingRequests = data;
     *    });
     *  }
     *
     *  getCustomers() {
     *    return this.http.get(`/customers/1`, { headers: headers });
     *  }
     *
     *  ...
     *
     * }
     * ```
     *
     * @example
     * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
     *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
     *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
     * </example>
     */
    var PoHttpRequestInterceptorService = /** @class */ (function () {
        function PoHttpRequestInterceptorService(controlHttpRequest, poComponentInjector) {
            this.controlHttpRequest = controlHttpRequest;
            this.poComponentInjector = poComponentInjector;
            this.loadingOverlayComponent = undefined;
            this.pendingRequests = 0;
            this.overlayRequests = 0;
        }
        PoHttpRequestInterceptorService.prototype.intercept = function (request, next) {
            var _this = this;
            var requestClone = request.clone();
            request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
            this.setCountPendingRequests(true, requestClone);
            this.setCountOverlayRequests(true, requestClone);
            return next.handle(request).pipe(operators.tap(function (response) {
                if (response instanceof http.HttpResponse) {
                    _this.setCountPendingRequests(false, requestClone);
                    _this.setCountOverlayRequests(false, requestClone);
                }
            }), operators.catchError(function (error) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
                return rxjs.throwError(error);
            }));
        };
        PoHttpRequestInterceptorService.prototype.getCountPendingRequests = function () {
            return this.controlHttpRequest.getControlHttpRequest();
        };
        PoHttpRequestInterceptorService.prototype.buildLoading = function () {
            if (!this.loadingOverlayComponent) {
                this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
                this.loadingOverlayComponent.instance.screenLock = true;
                this.loadingOverlayComponent.instance.changeDetector.detectChanges();
            }
        };
        PoHttpRequestInterceptorService.prototype.destroyLoading = function () {
            if (this.loadingOverlayComponent) {
                this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
                this.loadingOverlayComponent = undefined;
            }
        };
        PoHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = function (headersParams, request) {
            var isRequestClone = false;
            headersParams.forEach(function (headerParam) {
                if (request.headers.has(headerParam)) {
                    request.headers.delete(headerParam);
                    isRequestClone = true;
                }
            });
            return isRequestClone ? request.clone({ headers: request.headers }) : request;
        };
        PoHttpRequestInterceptorService.prototype.setCountPendingRequests = function (isIncrement, request) {
            var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
            var headerParam = request.headers.get(noCountPendingRequests);
            if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
                return;
            }
            this.pendingRequests += isIncrement ? 1 : -1;
            this.controlHttpRequest.send(this.pendingRequests);
        };
        PoHttpRequestInterceptorService.prototype.setCountOverlayRequests = function (isIncrement, request) {
            var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
            if (hasOverlayRequestHeaderParam) {
                var headerParam = request.headers.get(screenLock);
                if (headerParam.toString().toLowerCase() === 'false') {
                    return;
                }
                this.overlayRequests += isIncrement ? 1 : -1;
                this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
            }
        };
        PoHttpRequestInterceptorService.ctorParameters = function () { return [
            { type: PoHttpRequesControltService },
            { type: PoComponentInjectorService }
        ]; };
        PoHttpRequestInterceptorService.ɵprov = core.ɵɵdefineInjectable({ factory: function PoHttpRequestInterceptorService_Factory() { return new PoHttpRequestInterceptorService(core.ɵɵinject(PoHttpRequesControltService), core.ɵɵinject(PoComponentInjectorService)); }, token: PoHttpRequestInterceptorService, providedIn: "root" });
        PoHttpRequestInterceptorService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [PoHttpRequesControltService,
                PoComponentInjectorService])
        ], PoHttpRequestInterceptorService);
        return PoHttpRequestInterceptorService;
    }());

    var PoHttpRequestModule = /** @class */ (function () {
        function PoHttpRequestModule() {
        }
        PoHttpRequestModule = __decorate([
            core.NgModule({
                imports: [PoLoadingModule],
                providers: [
                    PoHttpRequesControltService,
                    PoHttpRequestInterceptorService,
                    PoComponentInjectorService,
                    {
                        provide: http.HTTP_INTERCEPTORS,
                        useClass: PoHttpRequestInterceptorService,
                        multi: true
                    }
                ]
            })
        ], PoHttpRequestModule);
        return PoHttpRequestModule;
    }());

    var PoInterceptorsModule = /** @class */ (function () {
        function PoInterceptorsModule() {
        }
        PoInterceptorsModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [PoHttpInterceptorModule, PoHttpRequestModule],
                exports: [PoHttpInterceptorModule, PoHttpRequestModule],
                providers: [],
                bootstrap: []
            })
        ], PoInterceptorsModule);
        return PoInterceptorsModule;
    }());

    var PoPipesModule = /** @class */ (function () {
        function PoPipesModule() {
        }
        PoPipesModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [PoTimeModule],
                exports: [PoTimeModule],
                providers: [],
                bootstrap: []
            })
        ], PoPipesModule);
        return PoPipesModule;
    }());

    var PoModule = /** @class */ (function () {
        function PoModule() {
        }
        PoModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [
                    PoComponentsModule,
                    PoDirectivesModule,
                    PoGuardsModule,
                    PoInterceptorsModule,
                    PoPipesModule,
                    PoServicesModule
                ],
                exports: [
                    PoComponentsModule,
                    PoDirectivesModule,
                    PoInterceptorsModule,
                    PoGuardsModule,
                    PoPipesModule,
                    PoServicesModule
                ],
                providers: [PoNotificationService],
                bootstrap: []
            })
        ], PoModule);
        return PoModule;
    }());

    var I18N_CONFIG = new core.InjectionToken('I18N_CONFIG');

    /**
     * @description
     *
     * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
     *
     * > Antes da utilização do serviço, é necessário realizar a
     * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
     *
     * **Utilização do serviço `PoI18nService`:**
     *
     * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
     * dependência no construtor:
     * ```
     *  import { PoI18nService } from '@po-ui/ng-components';
     *  ...
     *  constructor(private poI18nService: PoI18nService) { }
     *  ...
     * ```
     *
     * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
     * método `getLiterals()`.
     *
     * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
     * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
     * todas as literais do contexto definido com padrão, no idioma definido como padrão.
     *
     * Exemplos de requisição:
     * ```
     * literals = {};
     * literalsEn = {};
     * literalsCrm = {};
     *
     * constructor(private poI18nService: PoI18nService) {
     *   poI18nService.getLiterals()
     *     .subscribe((literals) => {
     *       this.literals = literals;
     *     });
     *
     *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
     *     .subscribe((literals) => {
     *       this.literalsCrm = literals;
     *     });
     *
     *   poI18nService.getLiterals({language: 'en-us'})
     *     .subscribe((literals) => {
     *       this.literalsEn = literals;
     *     });
     * }
     * ```
     *
     * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
     * seguinte código:
     *
     * <pre ngNonBindable>
     * {{ literals?.add }}
     * {{ literals?.remove }}
     * </pre>
     *
     * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
     * É possível informar propriedades do componente como `name` e `nickname` ou
     * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
     *
     * <pre ngNonBindable>
     * {{ literals?.people | poI18n:[120] }}
     * {{ literals?.greeting | poI18n:[name, nickname] }}
     * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
     * </pre>
     *
     * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
     *
     * ### Teste unitário
     *
     * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
     *
     * ```
     * import { async, TestBed } from '@angular/core/testing';
     * import { HttpClientTestingModule } from '@angular/common/http/testing';
     *
     * import { PoI18nModule } from '@po-ui/ng-components';
     *
     * import { AppComponent } from './app.component';
     *
     * describe('AppComponent', () => {
     *   const anotherPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const generalPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const config = {
     *     default: {
     *       language: 'pt-BR',
     *       context: 'general',
     *       cache: false
     *     },
     *     contexts: {
     *       general: {
     *         'pt-br': generalPT
     *       },
     *       another: {
     *         'pt-br': anotherPT
     *       }
     *     }
     *   };
     *
     *   beforeEach(async(() => {
     *     TestBed.configureTestingModule({
     *       declarations: [
     *         AppComponent
     *       ],
     *       imports: [
     *         HttpClientTestingModule,
     *         PoI18nModule.config(config)
     *       ]
     *     }).compileComponents();
     *   }));
     *
     *   it('should create the app', async(() => {
     *     const fixture = TestBed.createComponent(AppComponent);
     *     const app = fixture.debugElement.componentInstance;
     *
     *     expect(app).toBeTruthy();
     *   }));
     *
     * });
     * ```
     */
    var PoI18nBaseService = /** @class */ (function () {
        function PoI18nBaseService(config, http, languageService) {
            this.config = config;
            this.http = http;
            this.languageService = languageService;
            this.varI18n = {};
            this.useCache = false;
            this.servicesContext = {};
            this.setConfig(config);
        }
        /**
         * <a id="get-language"></a>
         * Método que retorna o idioma padrão ativo.
         *
         * A busca deste idioma pelo método será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
         *
         *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
         * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * @returns {string} sigla do idioma padrão.
         */
        PoI18nBaseService.prototype.getLanguage = function () {
            return this.languageService.getLanguage();
        };
        /**
         * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
         * Por exemplo: "pt" ou "es".
         *
         * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
         *
         * @returns {string} sigla do idioma padrão.
         */
        PoI18nBaseService.prototype.getShortLanguage = function () {
            return this.languageService.getShortLanguage();
        };
        /**
         * <a id="setLanguage"></a>
         * Método para alterar o idioma padrão do módulo do i18n.
         *
         * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
         * serviço do `i18n` para buscar as literais no idioma padrão.
         *
         * @param {string} language Sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         *
         * @param {boolean} reload Indica se a página atual poderá ser recarregada após a alteração do idioma.
         *
         * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
         * buscar novamente as literais no novo idioma configurado.
         */
        PoI18nBaseService.prototype.setLanguage = function (language, reload) {
            if (!isLanguage(language)) {
                return;
            }
            this.languageService.setLanguage(language);
            if (reload) {
                reloadCurrentPage();
            }
        };
        PoI18nBaseService.prototype.setConfig = function (config) {
            // Seta as configurações padrões definidas no importação do módulo
            if (config['default']) {
                this.languageService.setLanguageDefault(config['default']['language']);
                this.contextDefault = config['default']['context'] ? config['default']['context'] : '';
                this.useCache = config['default']['cache'] ? config['default']['cache'] : false;
            }
            // Carrega a lista dos contextos e as contantes informadas
            if (config['contexts']) {
                this.setVarI18n(config['contexts']);
                // Se nenhum contexto foi definido como padrão,
                // então define o primeiro contexto
                if (!this.contextDefault) {
                    for (var context in config['contexts']) {
                        if (this.config['contexts'].hasOwnProperty(context)) {
                            this.contextDefault = context;
                            break;
                        }
                    }
                }
            }
        };
        PoI18nBaseService.prototype.getLiterals = function (options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
            var context = options['context'] ? options['context'] : this.contextDefault;
            var literals = options['literals'] ? options['literals'] : [];
            return new rxjs.Observable(function (observer) {
                if (_this.servicesContext[context]) {
                    // Faz o processo de busca de um contexto que contém serviço
                    _this.getLiteralsFromContextService(language, context, literals, observer);
                }
                else {
                    // Faz o processo de busca de um contexto que utiliza constante
                    _this.getLiteralsFromContextConstant(language, context, literals, observer);
                }
            });
        };
        // Processo de busca de um contexto que contém serviço.
        //    1 - Procura na variável I18n deste serviço
        //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
        //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
        //    4 - Se nenhuma literal for encontrada, então busca em pt-br
        PoI18nBaseService.prototype.getLiteralsFromContextService = function (language, context, literals, observer, translations, languageAlternative) {
            if (translations === void 0) { translations = {}; }
            if (languageAlternative === void 0) { languageAlternative = null; }
            // Idioma usado para tentar buscar as literais faltantes
            var languageSearch = languageAlternative ? languageAlternative : language;
            translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // realiza a busca no localStorage e em seguida no serviço
            this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
        };
        // Procura no local storage e em seguida no serviço
        // Caso não encontre nem no serviço, recomeça a busca em pt-br
        PoI18nBaseService.prototype.getLiteralsLocalStorageAndCache = function (language, context, literals, observer, translations, languageAlternative) {
            var _this = this;
            if (languageAlternative === void 0) { languageAlternative = null; }
            var languageSearch = languageAlternative ? languageAlternative : language;
            var translationTemp;
            // Verifica se usa cache
            if (this.useCache) {
                translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
                if (this.countObject(translationTemp) > 0) {
                    this.updateVarI18n(language, context, translationTemp);
                    translations = this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
            }
            // Busca do Serviço
            this.getHttpService(this.servicesContext[context], languageSearch, literals).subscribe(function (response) {
                if (response) {
                    _this.updateLocalStorage(language, context, response);
                    _this.updateVarI18n(language, context, response);
                    translationTemp = _this.searchInVarI18n(language, context, literals);
                    translations = _this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
                // Se não encontrou todas as literais pesquisadas no idioma
                // Então refaz o processo procurando em português
                if (literals.length > _this.countObject(translations)) {
                    if (languageAlternative === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = _this.completeFaultLiterals(language, context, literals, translations);
                        _this.updateLocalStorage(language, context, translations);
                        _this.updateVarI18n(language, context, translations);
                        observer.next(translations);
                    }
                    else {
                        _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                    }
                }
            });
        };
        // Procura pela lista de literais
        // Se não encontrar todas, procura em pt-br
        PoI18nBaseService.prototype.getLiteralsFromContextConstant = function (language, context, literals, observer, translations) {
            if (translations === void 0) { translations = {}; }
            translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // Se foi pesquisado por literais
            if (literals.length > 0) {
                // Se não encontrou todas as literais pesquisadas no idioma, procura em português
                if (literals.length > this.countObject(translations)) {
                    if (language === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = this.completeFaultLiterals(language, context, literals, translations);
                        observer.next(translations);
                    }
                    else {
                        this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                    }
                }
            }
            else {
                // Se não encontrar nenhuma literal, procura em português
                if (this.countObject(translations) === 0 && language !== 'pt-br') {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
                // caso não informar literais e não houver tradução
                observer.next(translations);
                observer.complete();
            }
        };
        // Busca pelas literais no local storage
        PoI18nBaseService.prototype.searchInLocalStorage = function (language, context, literals) {
            var translations = {};
            if (literals.length > 0) {
                for (var i = 0; i < literals.length; i++) {
                    var literal = literals[i];
                    var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                    if (translation) {
                        translations[literal] = translation;
                    }
                }
            }
            return translations;
        };
        // Busca pelas literais na variável do serviço
        PoI18nBaseService.prototype.searchInVarI18n = function (language, context, literals) {
            var translations = {};
            if (this.varI18n[language] && this.varI18n[language][context]) {
                var content = this.varI18n[language][context];
                if (literals.length > 0) {
                    // Busca as literais desejadas
                    for (var i = 0; i < literals.length; i++) {
                        var literal = literals[i];
                        if (content.hasOwnProperty(literal)) {
                            translations[literal] = content[literal];
                        }
                    }
                }
                else {
                    // Atribui todas as literais
                    translations = __assign({}, content);
                }
            }
            return translations;
        };
        // Atualiza o local storage
        PoI18nBaseService.prototype.updateLocalStorage = function (language, context, data) {
            var e_1, _a;
            if (this.useCache) {
                try {
                    for (var _b = __values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var literal = _c.value;
                        localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        // Atualiza a variável local com as literais com os objetos passados na configuração
        PoI18nBaseService.prototype.setVarI18n = function (contexts) {
            var e_2, _a, e_3, _b;
            try {
                // Percorre os contextos
                for (var _c = __values(Object.keys(contexts)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var context = _d.value;
                    var contextContent = contexts[context];
                    try {
                        // Percorre os idiomas dentro do contexto
                        for (var _e = (e_3 = void 0, __values(Object.keys(contextContent))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var language = _f.value;
                            var languageContent = contextContent[language];
                            if (language === 'url') {
                                this.servicesContext[context] = languageContent;
                            }
                            else {
                                this.updateVarI18n(language, context, languageContent);
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        // Atualiza a variável local com as literais idioma e contexto
        PoI18nBaseService.prototype.updateVarI18n = function (language, context, data) {
            var _a;
            language = language.toLowerCase();
            if (!this.varI18n[language]) {
                this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
            }
            if (!this.varI18n[language][context]) {
                this.varI18n[language][context] = {};
            }
            // Cria ou atualiza o contexto dentro do storage
            this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
        };
        PoI18nBaseService.prototype.getHttpService = function (url, language, literals) {
            var param = '?language=' + language;
            if (literals.length > 0) {
                param += '&literals=' + literals.join();
            }
            // Remove a barra final do endereço
            url = url.replace(/\/$/, '');
            return this.http.get("" + url + param);
        };
        // Completa com o nome da literais, as que não foram encontradas
        PoI18nBaseService.prototype.completeFaultLiterals = function (language, context, literals, translations) {
            for (var i = 0; i < literals.length; i++) {
                var literal = literals[i];
                if (!translations[literal]) {
                    translations[literal] = literal;
                }
            }
            return translations;
        };
        // Conta os atributos do objeto
        PoI18nBaseService.prototype.countObject = function (obj) {
            return Object.keys(obj).length;
        };
        // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
        PoI18nBaseService.prototype.mergeObject = function (objPermanent, obj) {
            return __assign(__assign({}, obj), objPermanent);
        };
        PoI18nBaseService = __decorate([
            __param(0, core.Inject(I18N_CONFIG)),
            __param(1, core.Inject(http.HttpClient)),
            __metadata("design:paramtypes", [Object, http.HttpClient,
                PoLanguageService])
        ], PoI18nBaseService);
        return PoI18nBaseService;
    }());

    /**
     * @docsExtends PoI18nBaseService
     */
    var PoI18nService = /** @class */ (function (_super) {
        __extends(PoI18nService, _super);
        function PoI18nService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PoI18nService = __decorate([
            core.Injectable()
        ], PoI18nService);
        return PoI18nService;
    }(PoI18nBaseService));
    // Função usada para retornar instância para o módulo po-i18n.module
    function returnPoI18nService(config, http, languageService) {
        return new PoI18nService(config, http, languageService);
    }

    /**
     * @description
     *
     * Módulo do serviço `PoI18nService` para controle de idiomas com PO.
     *
     * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado
     * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
     * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.
     *
     * <a id="i18n-config"></a>
     * **Exemplo de configuração do módulo do i18n:**
     * ```
     * import { PoI18nConfig } from '@po-ui/ng-components';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: PoI18nConfig = {
     *   default: {
     *     language: 'pt-BR',
     *     context: 'general',
     *     cache: true
     *   },
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt,
     *       'en-US': generalEn
     *     },
     *     hcm: {
     *       url: 'http://10.1.1.1/api/translations/hcm/'
     *     }
     *   }
     * };
     *
     * @NgModule({
     *   declarations: [],
     *   imports: [
     *     PoModule,
     *     PoI18nModule.config(i18nConfig)
     *   ],
     *   bootstrap: [AppComponent]
     * })
     * ```
     *
     * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
     * de um objeto. Exemplo:
     *
     * Arquivo general-pt.ts
     * ```
     * export const generalPt = {
     *  add: 'Adicionar',
     *  greeting: 'Prazer, {0} {1}',
     *  people: '{0} Pessoas,
     *  remove: 'Remover'
     * }
     * ```
     *
     * Arquivo general-en.ts
     * ```
     * export const generalEn = {
     *  add: 'Add',
     *  greeting: 'Nice to meet you, {0} {1}',
     *  people: '{0} People,
     *  remove: 'Remove'
     * }
     * ```
     *
     * **Exemplo de configuração de contextos usando constantes externas:**
     * ```
     * import { PoI18nConfig } from '@po-ui/ng-components';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: PoI18nConfig = {
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt, // constantes em arquivos separados
     *       'en-US': generalEn // constantes em arquivos separados
     *     },
     *     crm: {
     *       url: 'http://10.0.0.1:3000/api/translations/crm'
     *     }
     *   },
     *   default: {}
     * }
     * ```
     *
     * **Exemplo de configuração de um contexto utilizando serviço:**
     *
     * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
     * específica do contexto, como nos exemplos abaixo:
     *
     *  - http://10.0.0.1:3000/api/translations/crm
     *  - http://10.0.0.1:3000/api/translations/general
     *
     * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
     * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
     * suportadas pelo PO (`pt-br`, `en-us` ou `es-es`).
     * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
     * serviço deve retornar todas as literais do idioma.
     *
     * Exemplos de requisição:
     *
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
     *
     * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
     *
     * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
     * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):
     *
     * **Exemplo de padrões definidos:**
     * ```
     * const i18nConfig: PoI18nConfig = {
     *   contexts: {
     *     general: { }
     *   },
     *   default: {
     *    language: 'pt-BR',
     *    context: 'general',
     *    cache: true
     *   }
     * }
     * ```
     *
     * **Importante:**
     *
     * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
     * preferencialmente no módulo `AppModule`.
     *
     * **i18n com *Lazy loading***
     *
     * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
     * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:
     *
     * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
     * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
     * toda a aplicação;
     * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
     * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`
     * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
     */
    var PoI18nModule = /** @class */ (function () {
        function PoI18nModule() {
        }
        PoI18nModule_1 = PoI18nModule;
        PoI18nModule.config = function (config) {
            return {
                ngModule: PoI18nModule_1,
                providers: [
                    {
                        provide: I18N_CONFIG,
                        useValue: config
                    },
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: initializeLanguageDefault,
                        multi: true,
                        deps: [I18N_CONFIG, PoLanguageService]
                    },
                    {
                        provide: PoI18nService,
                        useFactory: returnPoI18nService,
                        deps: [I18N_CONFIG, http.HttpClient, PoLanguageService]
                    }
                ]
            };
        };
        var PoI18nModule_1;
        PoI18nModule = PoI18nModule_1 = __decorate([
            core.NgModule({
                imports: [http.HttpClientModule, PoLanguageModule]
            })
        ], PoI18nModule);
        return PoI18nModule;
    }());
    function initializeLanguageDefault(config, languageService) {
        // tslint:disable-next-line:prefer-immediate-return
        var setDefaultLanguage = function () {
            if (config.default.language) {
                languageService.setLanguageDefault(config.default.language);
            }
        };
        return setDefaultLanguage;
    }

    exports.PO_CONTROL_POSITIONS = PO_CONTROL_POSITIONS;
    exports.PoAccordionComponent = PoAccordionComponent;
    exports.PoAccordionItemComponent = PoAccordionItemComponent;
    exports.PoAccordionModule = PoAccordionModule;
    exports.PoAvatarComponent = PoAvatarComponent;
    exports.PoAvatarModule = PoAvatarModule;
    exports.PoBreadcrumbComponent = PoBreadcrumbComponent;
    exports.PoBreadcrumbModule = PoBreadcrumbModule;
    exports.PoButtonComponent = PoButtonComponent;
    exports.PoButtonGroupComponent = PoButtonGroupComponent;
    exports.PoButtonGroupModule = PoButtonGroupModule;
    exports.PoButtonModule = PoButtonModule;
    exports.PoCalendarComponent = PoCalendarComponent;
    exports.PoCalendarModule = PoCalendarModule;
    exports.PoChartComponent = PoChartComponent;
    exports.PoChartModule = PoChartModule;
    exports.PoCheckboxComponent = PoCheckboxComponent;
    exports.PoCheckboxGroupComponent = PoCheckboxGroupComponent;
    exports.PoCheckboxGroupModule = PoCheckboxGroupModule;
    exports.PoCleanComponent = PoCleanComponent;
    exports.PoColorPaletteModule = PoColorPaletteModule;
    exports.PoColorPaletteService = PoColorPaletteService;
    exports.PoComboComponent = PoComboComponent;
    exports.PoComboOptionTemplateDirective = PoComboOptionTemplateDirective;
    exports.PoComponentInjectorModule = PoComponentInjectorModule;
    exports.PoComponentInjectorService = PoComponentInjectorService;
    exports.PoComponentsModule = PoComponentsModule;
    exports.PoContainerComponent = PoContainerComponent;
    exports.PoContainerModule = PoContainerModule;
    exports.PoControlPositionModule = PoControlPositionModule;
    exports.PoDateService = PoDateService;
    exports.PoDateTimeModule = PoDateTimeModule;
    exports.PoDatepickerComponent = PoDatepickerComponent;
    exports.PoDatepickerRangeComponent = PoDatepickerRangeComponent;
    exports.PoDecimalComponent = PoDecimalComponent;
    exports.PoDialogComponent = PoDialogComponent;
    exports.PoDialogModule = PoDialogModule;
    exports.PoDialogService = PoDialogService;
    exports.PoDirectivesModule = PoDirectivesModule;
    exports.PoDisclaimerComponent = PoDisclaimerComponent;
    exports.PoDisclaimerGroupComponent = PoDisclaimerGroupComponent;
    exports.PoDisclaimerGroupModule = PoDisclaimerGroupModule;
    exports.PoDisclaimerModule = PoDisclaimerModule;
    exports.PoDividerComponent = PoDividerComponent;
    exports.PoDividerModule = PoDividerModule;
    exports.PoDropdownComponent = PoDropdownComponent;
    exports.PoDropdownModule = PoDropdownModule;
    exports.PoDynamicFormComponent = PoDynamicFormComponent;
    exports.PoDynamicModule = PoDynamicModule;
    exports.PoDynamicViewComponent = PoDynamicViewComponent;
    exports.PoEmailComponent = PoEmailComponent;
    exports.PoFieldModule = PoFieldModule;
    exports.PoGridComponent = PoGridComponent;
    exports.PoGridModule = PoGridModule;
    exports.PoGuardsModule = PoGuardsModule;
    exports.PoHttpInterceptorModule = PoHttpInterceptorModule;
    exports.PoHttpInterceptorService = PoHttpInterceptorService;
    exports.PoHttpRequestInterceptorService = PoHttpRequestInterceptorService;
    exports.PoHttpRequestModule = PoHttpRequestModule;
    exports.PoI18nModule = PoI18nModule;
    exports.PoI18nPipe = PoI18nPipe;
    exports.PoI18nService = PoI18nService;
    exports.PoInfoComponent = PoInfoComponent;
    exports.PoInfoModule = PoInfoModule;
    exports.PoInputComponent = PoInputComponent;
    exports.PoInterceptorsModule = PoInterceptorsModule;
    exports.PoLanguageModule = PoLanguageModule;
    exports.PoLanguageService = PoLanguageService;
    exports.PoListViewComponent = PoListViewComponent;
    exports.PoListViewContentTemplateDirective = PoListViewContentTemplateDirective;
    exports.PoListViewDetailTemplateDirective = PoListViewDetailTemplateDirective;
    exports.PoListViewModule = PoListViewModule;
    exports.PoLoadingComponent = PoLoadingComponent;
    exports.PoLoadingIconComponent = PoLoadingIconComponent;
    exports.PoLoadingModule = PoLoadingModule;
    exports.PoLoadingOverlayComponent = PoLoadingOverlayComponent;
    exports.PoLoginComponent = PoLoginComponent;
    exports.PoLookupComponent = PoLookupComponent;
    exports.PoLookupModalComponent = PoLookupModalComponent;
    exports.PoMenuComponent = PoMenuComponent;
    exports.PoMenuHeaderTemplateDirective = PoMenuHeaderTemplateDirective;
    exports.PoMenuModule = PoMenuModule;
    exports.PoMenuPanelComponent = PoMenuPanelComponent;
    exports.PoMenuPanelModule = PoMenuPanelModule;
    exports.PoModalComponent = PoModalComponent;
    exports.PoModalModule = PoModalModule;
    exports.PoModule = PoModule;
    exports.PoMultiselectComponent = PoMultiselectComponent;
    exports.PoNavbarComponent = PoNavbarComponent;
    exports.PoNavbarModule = PoNavbarModule;
    exports.PoNotificationModule = PoNotificationModule;
    exports.PoNotificationService = PoNotificationService;
    exports.PoNumberComponent = PoNumberComponent;
    exports.PoPageDefaultComponent = PoPageDefaultComponent;
    exports.PoPageDetailComponent = PoPageDetailComponent;
    exports.PoPageEditComponent = PoPageEditComponent;
    exports.PoPageListComponent = PoPageListComponent;
    exports.PoPageModule = PoPageModule;
    exports.PoPasswordComponent = PoPasswordComponent;
    exports.PoPipesModule = PoPipesModule;
    exports.PoPopoverComponent = PoPopoverComponent;
    exports.PoPopoverModule = PoPopoverModule;
    exports.PoPopupComponent = PoPopupComponent;
    exports.PoPopupModule = PoPopupModule;
    exports.PoProgressComponent = PoProgressComponent;
    exports.PoProgressModule = PoProgressModule;
    exports.PoRadioGroupComponent = PoRadioGroupComponent;
    exports.PoRichTextComponent = PoRichTextComponent;
    exports.PoSelectComponent = PoSelectComponent;
    exports.PoSelectOptionTemplateDirective = PoSelectOptionTemplateDirective;
    exports.PoServicesModule = PoServicesModule;
    exports.PoSlideComponent = PoSlideComponent;
    exports.PoSlideContentTemplateDirective = PoSlideContentTemplateDirective;
    exports.PoSlideModule = PoSlideModule;
    exports.PoStepComponent = PoStepComponent;
    exports.PoStepperComponent = PoStepperComponent;
    exports.PoStepperModule = PoStepperModule;
    exports.PoSwitchComponent = PoSwitchComponent;
    exports.PoTabComponent = PoTabComponent;
    exports.PoTableComponent = PoTableComponent;
    exports.PoTableModule = PoTableModule;
    exports.PoTableRowTemplateDirective = PoTableRowTemplateDirective;
    exports.PoTabsComponent = PoTabsComponent;
    exports.PoTabsModule = PoTabsModule;
    exports.PoTagComponent = PoTagComponent;
    exports.PoTagModule = PoTagModule;
    exports.PoTextareaComponent = PoTextareaComponent;
    exports.PoTimeModule = PoTimeModule;
    exports.PoTimePipe = PoTimePipe;
    exports.PoToolbarComponent = PoToolbarComponent;
    exports.PoToolbarModule = PoToolbarModule;
    exports.PoTooltipDirective = PoTooltipDirective;
    exports.PoTooltipModule = PoTooltipModule;
    exports.PoTreeViewComponent = PoTreeViewComponent;
    exports.PoTreeViewModule = PoTreeViewModule;
    exports.PoUploadComponent = PoUploadComponent;
    exports.PoUrlComponent = PoUrlComponent;
    exports.PoWidgetComponent = PoWidgetComponent;
    exports.PoWidgetModule = PoWidgetModule;
    exports.initializeLanguageDefault = initializeLanguageDefault;
    exports.poDialogAlertLiteralsDefault = poDialogAlertLiteralsDefault;
    exports.poDialogConfirmLiteralsDefault = poDialogConfirmLiteralsDefault;
    exports.returnPoI18nService = returnPoI18nService;
    exports.ɵa = PoAccordionBaseComponent;
    exports.ɵb = PoAccordionService;
    exports.ɵba = PoChartGaugeTextContentComponent;
    exports.ɵbb = PoChartPieComponent;
    exports.ɵbc = PoChartLegendComponent;
    exports.ɵbd = PoContainerBaseComponent;
    exports.ɵbe = PoDisclaimerBaseComponent;
    exports.ɵbf = PoDisclaimerGroupBaseComponent;
    exports.ɵbg = PoDisclaimerRemoveComponent;
    exports.ɵbh = PoDividerBaseComponent;
    exports.ɵbi = PoPopupBaseComponent;
    exports.ɵbj = PoDropdownBaseComponent;
    exports.ɵbk = PoInfoBaseComponent;
    exports.ɵbl = PoFieldContainerModule;
    exports.ɵbm = PoFieldContainerBottomComponent;
    exports.ɵbn = PoFieldContainerComponent;
    exports.ɵbo = PoCheckboxGroupBaseComponent;
    exports.ɵbp = InputBoolean;
    exports.ɵbq = PoModalBaseComponent;
    exports.ɵbr = PoModalService;
    exports.ɵbs = PoProgressBaseComponent;
    exports.ɵbt = PoProgressBarComponent;
    exports.ɵbu = PoI18nBasePipe;
    exports.ɵbv = PoDialogBaseService;
    exports.ɵbw = PoToasterComponent;
    exports.ɵbx = PoToasterBaseComponent;
    exports.ɵby = PoPopoverBaseComponent;
    exports.ɵbz = PoTableBaseComponent;
    exports.ɵc = PoAccordionItemBodyComponent;
    exports.ɵca = PoTableColumnIconComponent;
    exports.ɵcb = PoTableColumnLabelComponent;
    exports.ɵcc = PoTableColumnLinkComponent;
    exports.ɵcd = PoTableColumnManagerComponent;
    exports.ɵce = PoTableDetailComponent;
    exports.ɵcf = PoTableIconComponent;
    exports.ɵcg = PoTableShowSubtitleComponent;
    exports.ɵch = PoTableSubtitleCircleComponent;
    exports.ɵci = PoTableSubtitleFooterComponent;
    exports.ɵcj = PoCheckboxBaseComponent;
    exports.ɵck = PoCleanBaseComponent;
    exports.ɵcl = PoComboBaseComponent;
    exports.ɵcm = PoComboFilterService;
    exports.ɵcn = PoInputBaseComponent;
    exports.ɵco = PoDatepickerBaseComponent;
    exports.ɵcp = PoDatepickerRangeBaseComponent;
    exports.ɵcq = PoInputGeneric;
    exports.ɵcr = PoLookupBaseComponent;
    exports.ɵcs = PoLookupFilterService;
    exports.ɵct = PoLookupModalService;
    exports.ɵcu = PoLookupModalBaseComponent;
    exports.ɵcv = PoMultiselectBaseComponent;
    exports.ɵcw = PoNumberBaseComponent;
    exports.ɵcx = PoRadioGroupBaseComponent;
    exports.ɵcy = PoRichTextBaseComponent;
    exports.ɵcz = PoRichTextBodyComponent;
    exports.ɵd = PoAccordionItemHeaderComponent;
    exports.ɵda = PoSelectBaseComponent;
    exports.ɵdb = PoSwitchBaseComponent;
    exports.ɵdc = PoTextareaBaseComponent;
    exports.ɵdd = PoUploadBaseComponent;
    exports.ɵde = PoUploadService;
    exports.ɵdf = PoUploadBaseService;
    exports.ɵdg = PoUploadDragDropComponent;
    exports.ɵdh = PoUploadDragDropAreaComponent;
    exports.ɵdi = PoNotificationBaseService;
    exports.ɵdj = PoCalendarComponent$1;
    exports.ɵdk = PoCalendarService$1;
    exports.ɵdl = PoCalendarLangService$1;
    exports.ɵdm = PoMultiselectDropdownComponent;
    exports.ɵdn = PoMultiselectItemComponent;
    exports.ɵdo = PoMultiselectSearchComponent;
    exports.ɵdp = PoRichTextModalComponent;
    exports.ɵdq = PoRichTextToolbarComponent;
    exports.ɵdr = PoUploadDragDropDirective;
    exports.ɵds = PoUploadDragDropAreaOverlayComponent;
    exports.ɵdt = PoUploadFileRestrictionsComponent;
    exports.ɵdu = PoTagBaseComponent;
    exports.ɵdv = PoDynamicFormBaseComponent;
    exports.ɵdw = PoDynamicFormLoadService;
    exports.ɵdx = PoDynamicFormOperation;
    exports.ɵdy = PoDynamicFormValidationService;
    exports.ɵdz = PoDynamicFormFieldsComponent;
    exports.ɵe = PoAvatarBaseComponent;
    exports.ɵea = PoDynamicFormFieldsBaseComponent;
    exports.ɵeb = PoDynamicViewBaseComponent;
    exports.ɵec = PoDynamicViewService;
    exports.ɵed = PoGridCellActionComponent;
    exports.ɵee = PoGridCellComponent;
    exports.ɵef = PoGridHeadComponent;
    exports.ɵeg = PoListViewBaseComponent;
    exports.ɵeh = PoBadgeModule;
    exports.ɵei = PoBadgeComponent;
    exports.ɵej = PoBadgeBaseComponent;
    exports.ɵek = PoMenuBaseComponent;
    exports.ɵel = PoMenuService;
    exports.ɵem = PoMenuItemsService;
    exports.ɵen = PoMenuFilterComponent;
    exports.ɵeo = PoMenuItemComponent;
    exports.ɵep = PoMenuPanelBaseComponent;
    exports.ɵeq = PoMenuPanelItemsService;
    exports.ɵer = PoMenuPanelItemComponent;
    exports.ɵes = PoNavbarActionsModule;
    exports.ɵet = PoNavbarActionComponent;
    exports.ɵeu = PoNavbarActionPopupComponent;
    exports.ɵev = PoNavbarActionsComponent;
    exports.ɵew = PoNavbarItemsModule;
    exports.ɵex = PoNavbarItemComponent;
    exports.ɵey = PoNavbarItemsComponent;
    exports.ɵez = PoNavbarItemNavigationModule;
    exports.ɵf = PoBreadcrumbBaseComponent;
    exports.ɵfa = PoNavbarItemNavigationComponent;
    exports.ɵfb = PoNavbarItemNavigationIconComponent;
    exports.ɵfc = PoNavbarBaseComponent;
    exports.ɵfd = PoNavbarLogoComponent;
    exports.ɵfe = PoPageComponent;
    exports.ɵff = PoPageBaseComponent;
    exports.ɵfg = PoPageContentComponent;
    exports.ɵfh = PoPageContentBaseComponent;
    exports.ɵfi = PoPageDefaultBaseComponent;
    exports.ɵfj = PoPageDetailBaseComponent;
    exports.ɵfk = PoPageEditBaseComponent;
    exports.ɵfl = PoPageHeaderComponent;
    exports.ɵfm = PoPageHeaderBaseComponent;
    exports.ɵfn = PoPageListBaseComponent;
    exports.ɵfo = PoSlideCirclesComponent;
    exports.ɵfp = PoSlideBaseComponent;
    exports.ɵfq = PoSlideItemComponent;
    exports.ɵfr = PoSlideControlComponent;
    exports.ɵfs = PoStepperCircleComponent;
    exports.ɵft = PoStepperBaseComponent;
    exports.ɵfu = PoStepperLabelComponent;
    exports.ɵfv = PoStepperStepComponent;
    exports.ɵfw = PoTabButtonComponent;
    exports.ɵfx = PoTabBaseComponent;
    exports.ɵfy = PoTabDropdownComponent;
    exports.ɵfz = PoTabsBaseComponent;
    exports.ɵg = PoBreadcrumbDropdownComponent;
    exports.ɵga = PoToolbarActionsComponent;
    exports.ɵgb = PoToolbarBaseComponent;
    exports.ɵgc = PoToolbarNotificationComponent;
    exports.ɵgd = PoToolbarProfileComponent;
    exports.ɵge = PoTreeViewBaseComponent;
    exports.ɵgf = PoTreeViewService;
    exports.ɵgg = PoTreeViewItemComponent;
    exports.ɵgh = PoTreeViewItemHeaderComponent;
    exports.ɵgi = PoWidgetBaseComponent;
    exports.ɵgj = PoHttpInterceptorDetailComponent;
    exports.ɵgk = PoHttpInterceptorBaseService;
    exports.ɵgl = PoHttpRequesControltService;
    exports.ɵgm = PoI18nBaseService;
    exports.ɵgn = I18N_CONFIG;
    exports.ɵh = PoBreadcrumbFavoriteComponent;
    exports.ɵi = PoBreadcrumbFavoriteService;
    exports.ɵj = PoBreadcrumbItemComponent;
    exports.ɵk = PoLoadingBaseComponent;
    exports.ɵl = PoLoadingOverlayBaseComponent;
    exports.ɵm = PoButtonBaseComponent;
    exports.ɵn = PoTooltipBaseDirective;
    exports.ɵo = PoTooltipControlPositionService;
    exports.ɵp = PoControlPositionService;
    exports.ɵq = PoButtonGroupBaseComponent;
    exports.ɵr = PoCalendarBaseComponent;
    exports.ɵs = PoDateService;
    exports.ɵt = PoCalendarLangService;
    exports.ɵu = PoCalendarService;
    exports.ɵv = PoChartBaseComponent;
    exports.ɵw = PoChartDonutComponent;
    exports.ɵx = PoChartCircular;
    exports.ɵy = PoChartDynamicTypeComponent;
    exports.ɵz = PoChartGaugeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=po-ui-ng-components.umd.js.map
