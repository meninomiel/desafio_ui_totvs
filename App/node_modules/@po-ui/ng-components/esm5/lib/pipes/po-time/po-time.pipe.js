import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
 */
var PoTimePipe = /** @class */ (function () {
    function PoTimePipe() {
    }
    PoTimePipe.prototype.transform = function (time, format) {
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    PoTimePipe.prototype.addDotMiliseconds = function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    PoTimePipe.prototype.formatValue = function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            var hour = time.substring(0, 2);
            var minutes = time.substring(3, 5);
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    PoTimePipe.prototype.getFormatMiliseconds = function (amountOfF) {
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    PoTimePipe = __decorate([
        Pipe({
            name: 'po_time'
        })
    ], PoTimePipe);
    return PoTimePipe;
}());
export { PoTimePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGltZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvcG8tdGltZS9wby10aW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1Qzs7Ozs7O0dBTUc7QUFJSDtJQUFBO0lBZ0RBLENBQUM7SUEvQ0MsOEJBQVMsR0FBVCxVQUFVLElBQVksRUFBRSxNQUFlO1FBQ3JDLElBQU0sU0FBUyxHQUFHLG9FQUFvRSxDQUFDO1FBRXZGLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BELElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpGLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDeEYsSUFBTSxpQkFBaUIsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFdkUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxzQ0FBaUIsR0FBekIsVUFBMEIsV0FBbUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUU7WUFDNUIsV0FBVyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU8sZ0NBQVcsR0FBbkIsVUFBb0IsSUFBWSxFQUFFLE1BQWMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM5RixJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7WUFDbEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFckMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBSSxpQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUU5RCxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVPLHlDQUFvQixHQUE1QixVQUE2QixTQUFpQjtRQUM1QyxJQUFJLGlCQUFpQixHQUFXLEVBQUUsQ0FBQztRQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLGlCQUFpQixJQUFJLEdBQUcsQ0FBQztTQUMxQjtRQUVELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQS9DVSxVQUFVO1FBSHRCLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7T0FDVyxVQUFVLENBZ0R0QjtJQUFELGlCQUFDO0NBQUEsQUFoREQsSUFnREM7U0FoRFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQaXBlIHJlc3BvbnPDoXZlbCBwb3IgYXByZXNlbnRhciB1bSBob3LDoXJpbyBiYXNlYWRvIG5vIGZvcm1hdG8gZGUgZW50cmFkYSBkZWZpbmlkbyBuYSBBUEkgZG8gUE8gVUkuXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ3BvX3RpbWUnXG59KVxuZXhwb3J0IGNsYXNzIFBvVGltZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBob3VyUmVnZXggPSAvXigoWzAtMV1bMC05XSl8KDJbMC0zXSkpOlswLTVdWzAtOV06WzAtNV1bMC05XVtcXC5dPyhbMC05XXsxLDZ9KT8kL2c7XG5cbiAgICBpZiAoaXNUeXBlb2YodGltZSwgJ3N0cmluZycpICYmIGhvdXJSZWdleC50ZXN0KHRpbWUpKSB7XG4gICAgICBjb25zdCBhbW91bnRPZkYgPSBmb3JtYXQgPyBmb3JtYXQubGFzdEluZGV4T2YoJ2YnKSAtIGZvcm1hdC5pbmRleE9mKCdmJykgKyAxIDogMDtcblxuICAgICAgY29uc3QgbWlsaXNlY29uZHMgPSB0aGlzLmFkZERvdE1pbGlzZWNvbmRzKHRpbWUuc3Vic3RyaW5nKDksIDkgKyBhbW91bnRPZkYpLCBhbW91bnRPZkYpO1xuICAgICAgY29uc3QgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9IHRoaXMuZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VmFsdWUodGltZSwgZm9ybWF0LCBmb3JtYXRNaWxpc2Vjb25kcywgbWlsaXNlY29uZHMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRG90TWlsaXNlY29uZHMobWlsaXNlY29uZHM6IHN0cmluZywgYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChtaWxpc2Vjb25kcyAmJiBhbW91bnRPZkYpIHtcbiAgICAgIG1pbGlzZWNvbmRzID0gJy4nICsgbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBtaWxpc2Vjb25kcztcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VmFsdWUodGltZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZywgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZywgbWlsaXNlY29uZHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRpbWUgJiYgZm9ybWF0KSB7XG4gICAgICBjb25zdCBob3VyID0gdGltZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjb25zdCBtaW51dGVzID0gdGltZS5zdWJzdHJpbmcoMywgNSk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gdGltZS5zdWJzdHJpbmcoNiwgOCk7XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdISCcsIGhvdXIpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ21tJywgbWludXRlcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnc3MnLCBzZWNvbmRzKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGAuJHtmb3JtYXRNaWxpc2Vjb25kc31gLCBtaWxpc2Vjb25kcyk7XG5cbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBmb3JtYXRNaWxpc2Vjb25kczogc3RyaW5nID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mRjsgaSsrKSB7XG4gICAgICBmb3JtYXRNaWxpc2Vjb25kcyArPSAnZic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1pbGlzZWNvbmRzO1xuICB9XG59XG4iXX0=