import { __assign, __decorate, __metadata } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../utils/util';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
export var poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
export var poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
var PoDialogComponent = /** @class */ (function () {
    function PoDialogComponent() {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    PoDialogComponent.prototype.ngOnDestroy = function () {
        this.closeSubscription.unsubscribe();
    };
    PoDialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.closeSubscription = this.poModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
    };
    // Fecha o poModal
    PoDialogComponent.prototype.close = function () {
        this.poModal.close();
        this.destroy();
    };
    PoDialogComponent.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o poModal
    PoDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    PoDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    };
    PoDialogComponent.prototype.setDialogLiterals = function (dialogOptions, dialogType) {
        var alertLiterals = poDialogAlertLiteralsDefault;
        var confirmLiterals = poDialogConfirmLiteralsDefault;
        var literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = __assign(__assign(__assign({}, alertLiterals[poLocaleDefault]), alertLiterals[browserLanguage()]), literals);
        }
        else {
            this.literalsConfirm = __assign(__assign(__assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[browserLanguage()]), literals);
        }
    };
    __decorate([
        ViewChild(PoModalComponent, { static: true }),
        __metadata("design:type", PoModalComponent)
    ], PoDialogComponent.prototype, "poModal", void 0);
    PoDialogComponent = __decorate([
        Component({
            template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
        })
    ], PoDialogComponent);
    return PoDialogComponent;
}());
export { PoDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWRpYWxvZy9wby1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQyxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUtwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFaEYsTUFBTSxDQUFDLElBQU0sNEJBQTRCLEdBQUc7SUFDMUMsRUFBRSxFQUF5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7SUFDdkMsRUFBRSxFQUF5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7SUFDdkMsRUFBRSxFQUF5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7SUFDdkMsRUFBRSxFQUF5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLDhCQUE4QixHQUFHO0lBQzVDLEVBQUUsRUFBMkIsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7SUFDckUsRUFBRSxFQUEyQixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTtJQUN6RSxFQUFFLEVBQTJCLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFO0lBQ3pFLEVBQUUsRUFBMkIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUU7Q0FDNUUsQ0FBQztBQUVGOzs7Ozs7R0FNRztBQUtIO0lBQUE7UUFVRSw0QkFB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QVksQ0FBQyxLQUFLLEVBQUU7WUFDckMsSUFBSSxDQUFDLGFBQWEsa0NBQVEsYUFBYSxDQUFDLGVBQWUsQ0FBQyxHQUFLLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFLLFFBQVEsQ0FBRSxDQUFDO1NBQzlHO2FBQU07WUFDTCxJQUFJLENBQUMsZUFBZSxrQ0FDZixlQUFlLENBQUMsZUFBZSxDQUFDLEdBQ2hDLGVBQWUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUNsQyxRQUFRLENBQ1osQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQW5IOEM7UUFBOUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2tDQUFVLGdCQUFnQjtzREFBQztJQUY5RCxpQkFBaUI7UUFIN0IsU0FBUyxDQUFDO1lBQ1Qsd0pBQXlDO1NBQzFDLENBQUM7T0FDVyxpQkFBaUIsQ0FzSDdCO0lBQUQsd0JBQUM7Q0FBQSxBQXRIRCxJQXNIQztTQXRIWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9EaWFsb2dBbGVydExpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWRpYWxvZy1hbGVydC1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaWFsb2dBbGVydE9wdGlvbnMsIFBvRGlhbG9nQ29uZmlybU9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tZGlhbG9nLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0RpYWxvZ0NvbmZpcm1MaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1kaWFsb2ctY29uZmlybS1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaWFsb2dUeXBlIH0gZnJvbSAnLi9wby1kaWFsb2cuZW51bSc7XG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wby1tb2RhbC9wby1tb2RhbC1hY3Rpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3BvLW1vZGFsL3BvLW1vZGFsLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBwb0RpYWxvZ0FsZXJ0TGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFBvRGlhbG9nQWxlcnRMaXRlcmFscz57IG9rOiAnT2snIH0sXG4gIGVzOiA8UG9EaWFsb2dBbGVydExpdGVyYWxzPnsgb2s6ICdPaycgfSxcbiAgcHQ6IDxQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM+eyBvazogJ09rJyB9LFxuICBydTogPFBvRGlhbG9nQWxlcnRMaXRlcmFscz57IG9rOiAn0J7QuicgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBvRGlhbG9nQ29uZmlybUxpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0RpYWxvZ0NvbmZpcm1MaXRlcmFscz57IGNhbmNlbDogJ0NhbmNlbCcsIGNvbmZpcm06ICdDb25maXJtJyB9LFxuICBlczogPFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzPnsgY2FuY2VsOiAnQ2FuY2VsYXInLCBjb25maXJtOiAnQ29uZmlybWFyJyB9LFxuICBwdDogPFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzPnsgY2FuY2VsOiAnQ2FuY2VsYXInLCBjb25maXJtOiAnQ29uZmlybWFyJyB9LFxuICBydTogPFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzPnsgY2FuY2VsOiAn0L7RgtC80LXQvdC40YLRjCcsIGNvbmZpcm06ICfQv9C+0LTRgtCy0LXRgNC00LjRgtGMJyB9XG59O1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcXVlIHNlcnZlIGNvbW8gY29udGFpbmVyIGRvIHBvLWRpYWxvZy5zZXJ2aWNlXG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9wby1kaWFsb2cuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvRGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xuICAvLyBWaWV3Q2hpbGQgcGFyYSBvIHVzbyBkbyBwby1tb2RhbC5jb21wb25lbnRcbiAgQFZpZXdDaGlsZChQb01vZGFsQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBwb01vZGFsOiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIC8vIFRpdGxlIGRvIHBvTW9kYWxcbiAgdGl0bGU6IHN0cmluZztcblxuICAvLyBNZXNzYWdlIGRvIHBvTW9kYWxcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8vIE9iamV0byBwcmltYXJ5IGRvIHBvTW9kYWxcbiAgcHJpbWFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHsgbGFiZWw6ICdvaycsIGFjdGlvbjogKCkgPT4ge30gfTtcblxuICAvLyBPYmpldG8gc2Vjb25kYXJ5IGRvIHBvTW9kYWxcbiAgc2Vjb25kYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uO1xuXG4gIC8vIExpdGVyYWlzIHVzYWRhcyBub3MgYm90w6NvIGRlIGFsZXJ0YSBkbyBwb01vZGFsXG4gIGxpdGVyYWxzQWxlcnQ6IFBvRGlhbG9nQWxlcnRMaXRlcmFscztcblxuICAvLyBMaXRlcmFpcyB1c2FkYXMgbm9zIGJvdMO1ZXMgZGUgY29uZmlybWHDp8OjbyBkbyBwb01vZGFsXG4gIGxpdGVyYWxzQ29uZmlybTogUG9EaWFsb2dDb25maXJtTGl0ZXJhbHM7XG5cbiAgLy8gQXRyaWJ1dG8gcGFyYSBhcm1hemVuYXIgYSByZWZlcmVuY2lhIGRvIGNvbXBvbmVudGUgY3JpYWRvIHZpYSBzZXJ2acOnby5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxQb0RpYWxvZ0NvbXBvbmVudD47XG4gIHByaXZhdGUgY2xvc2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsb3NlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNsb3NlU3Vic2NyaXB0aW9uID0gdGhpcy5wb01vZGFsLm9uWENsb3NlZC5zdWJzY3JpYmUoY2xvc2UgPT4gdGhpcy5kZXN0cm95KCkpO1xuICB9XG5cbiAgLy8gRmVjaGEgbyBwb01vZGFsXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMucG9Nb2RhbC5jbG9zZSgpO1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICAvLyBJbnNlcmUgb3MgdmFsb3JlcyByZWNlYmlkb3MgZGUgdGhpcy5vcGVuIHBhcmEgbyBwb01vZGFsXG4gIGNvbmZpZ0RpYWxvZyhwcmltYXJ5TGFiZWw/LCBwcmltYXJ5QWN0aW9uPywgc2Vjb25kYXJ5TGFiZWw/LCBzZWNvbmRhcnlBY3Rpb24/KSB7XG4gICAgdGhpcy5wcmltYXJ5QWN0aW9uID0ge1xuICAgICAgbGFiZWw6IHByaW1hcnlMYWJlbCxcbiAgICAgIGFjdGlvbjogKCkgPT4ge1xuICAgICAgICBpZiAocHJpbWFyeUFjdGlvbikge1xuICAgICAgICAgIHByaW1hcnlBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzZWNvbmRhcnlMYWJlbCkge1xuICAgICAgdGhpcy5zZWNvbmRhcnlBY3Rpb24gPSB7XG4gICAgICAgIGxhYmVsOiBzZWNvbmRhcnlMYWJlbCxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKHNlY29uZGFyeUFjdGlvbikge1xuICAgICAgICAgICAgc2Vjb25kYXJ5QWN0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBJbnNlcmUgb3MgdmFsb3JlcyByZWNlYmlkb3MgZGUgcG8tZGlhbG9nLnNlcnZpY2UgZGUgYWNvcmRvIGNvbSBvIHRpcG8gZGUgZGnDoWxhZ28gc29saWNpdGFkb1xuICBvcGVuKFxuICAgIGRpYWxvZ09wdGlvbnM6IFBvRGlhbG9nQ29uZmlybU9wdGlvbnMgfCBQb0RpYWxvZ0FsZXJ0T3B0aW9ucyxcbiAgICBkaWFsb2dUeXBlOiBQb0RpYWxvZ1R5cGUsXG4gICAgY29tcG9uZW50UmVmPzogQ29tcG9uZW50UmVmPFBvRGlhbG9nQ29tcG9uZW50PlxuICApOiB2b2lkIHtcbiAgICB0aGlzLnRpdGxlID0gZGlhbG9nT3B0aW9ucy50aXRsZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBkaWFsb2dPcHRpb25zLm1lc3NhZ2U7XG5cbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IGNvbXBvbmVudFJlZjtcblxuICAgIHRoaXMuc2V0RGlhbG9nTGl0ZXJhbHMoZGlhbG9nT3B0aW9ucywgZGlhbG9nVHlwZSk7XG5cbiAgICBzd2l0Y2ggKGRpYWxvZ1R5cGUpIHtcbiAgICAgIGNhc2UgUG9EaWFsb2dUeXBlLkNvbmZpcm06IHtcbiAgICAgICAgdGhpcy5jb25maWdEaWFsb2coXG4gICAgICAgICAgdGhpcy5saXRlcmFsc0NvbmZpcm0uY29uZmlybSxcbiAgICAgICAgICAoPFBvRGlhbG9nQ29uZmlybU9wdGlvbnM+ZGlhbG9nT3B0aW9ucykuY29uZmlybSxcbiAgICAgICAgICB0aGlzLmxpdGVyYWxzQ29uZmlybS5jYW5jZWwsXG4gICAgICAgICAgKDxQb0RpYWxvZ0NvbmZpcm1PcHRpb25zPmRpYWxvZ09wdGlvbnMpLmNhbmNlbFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUG9EaWFsb2dUeXBlLkFsZXJ0OiB7XG4gICAgICAgIHRoaXMuY29uZmlnRGlhbG9nKHRoaXMubGl0ZXJhbHNBbGVydC5vaywgKDxQb0RpYWxvZ0FsZXJ0T3B0aW9ucz5kaWFsb2dPcHRpb25zKS5vayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucG9Nb2RhbC5vcGVuKCk7XG4gIH1cblxuICBwcml2YXRlIHNldERpYWxvZ0xpdGVyYWxzKGRpYWxvZ09wdGlvbnM6IFBvRGlhbG9nQ29uZmlybU9wdGlvbnMgfCBQb0RpYWxvZ0FsZXJ0T3B0aW9ucywgZGlhbG9nVHlwZTogUG9EaWFsb2dUeXBlKSB7XG4gICAgY29uc3QgYWxlcnRMaXRlcmFscyA9IHBvRGlhbG9nQWxlcnRMaXRlcmFsc0RlZmF1bHQ7XG4gICAgY29uc3QgY29uZmlybUxpdGVyYWxzID0gcG9EaWFsb2dDb25maXJtTGl0ZXJhbHNEZWZhdWx0O1xuICAgIGNvbnN0IGxpdGVyYWxzID0gZGlhbG9nT3B0aW9ucy5saXRlcmFscztcblxuICAgIGlmIChkaWFsb2dUeXBlID09PSBQb0RpYWxvZ1R5cGUuQWxlcnQpIHtcbiAgICAgIHRoaXMubGl0ZXJhbHNBbGVydCA9IHsgLi4uYWxlcnRMaXRlcmFsc1twb0xvY2FsZURlZmF1bHRdLCAuLi5hbGVydExpdGVyYWxzW2Jyb3dzZXJMYW5ndWFnZSgpXSwgLi4ubGl0ZXJhbHMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5saXRlcmFsc0NvbmZpcm0gPSB7XG4gICAgICAgIC4uLmNvbmZpcm1MaXRlcmFsc1twb0xvY2FsZURlZmF1bHRdLFxuICAgICAgICAuLi5jb25maXJtTGl0ZXJhbHNbYnJvd3Nlckxhbmd1YWdlKCldLFxuICAgICAgICAuLi5saXRlcmFsc1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==