import { __values } from "tslib";
/**
 * @description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
var PoI18nBasePipe = /** @class */ (function () {
    function PoI18nBasePipe() {
    }
    PoI18nBasePipe.prototype.transform = function (value, args) {
        var e_1, _a;
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var arg = args_1_1.value;
                value = value.replace(/(\{\w*\})+/, arg);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return value;
    };
    return PoI18nBasePipe;
}());
export { PoI18nBasePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taTE4bi1iYXNlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1pMThuL3BvLWkxOG4tYmFzZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0g7SUFBQTtJQWdCQSxDQUFDO0lBZkMsa0NBQVMsR0FBVCxVQUFVLEtBQWEsRUFBRSxJQUFTOztRQUNoQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNmOztZQUVELEtBQWtCLElBQUEsU0FBQSxTQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtnQkFBbkIsSUFBTSxHQUFHLGlCQUFBO2dCQUNaLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQzthQUMxQzs7Ozs7Ozs7O1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBaEJELElBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gcGlwZSBwby1pMThuIMOpIHJlc3BvbnPDoXZlbCBwb3IgdHJhdGFyIGxpdGVyYWlzIHBhcsOibWV0cml6YWRhcywgZGFuZG8gbWFpcyBmbGV4aWJpbGlkYWRlIGFzIGxpdGVyYWlzIGRlIHRyYWR1w6fDo28uXG4gKiBPIG7Dum1lcm8gZGUgcGFyw6JtZXRyb3MgaW5zZXJpZG9zIG5hcyBsaXRlcmFpcyBkZXZlIGNvaW5jaWRpciBjb20gYSBxdWFudGlhIGRlIHBhcsOibWV0cm9zIHBhc3NhZG9zIHBvciBwYXLDom1ldHJvLFxuICogb3MgcGFyw6JtZXRyb3Mgc2Vyw6NvIHN1YnN0aXR1aWRvcyBkZSBhY29yZG8gY29tIGEgb3JkZW0gaW5mb3JtYWRhLlxuICpcbiAqIFBhcmEgaW5zZXJpciB1bSBwYXLDom1ldHJvIGVtIHVtYSBsaXRlcmFsLCBvIG1lc21vIGRldmVyw6Egc2VyIGluc2VyaWRvIGVudHJlIGNoYXZlcyBkZW50cm8gZGEgbGl0ZXJhbCBlIHBvc2ljaW9uYWRvXG4gKiBkZSBhY29yZG8gY29tbyBkZXZlIHNlciBleGliaWRvIGFww7NzIGEgc3VhIHRyYW5zZm9ybWHDp8Ojby5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IGkxOG5QVCA9IHtcbiAqICAgcGFnaW5hdGlvbjogJ1DDoWdpbmEgezF9IGRlIHsyfSBww6FnaW5hcy4nLFxuICogICB0b3RhbFBhZ2VzOiAnVG90YWwgZGUge3RvdGFsUGFnZXN9IGVuY29udHJhZGFzLidcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiDDiSBwb3Nzw612ZWwgcGFzc2FyIHVtIHZhbG9yIG91IHVtIGFycmF5IGRlIHZhbG9yZXMgcGFyYSBvIHBpcGUsIGNhc28gc2VqYSBwYXNzYWRvIHVtIGFycmF5LCBvcyB2YWxvcmVzIGRldmVtIG9iZWRlY2VyIGEgb3JkZW1cbiAqIGluZm9ybWFkYSBuYSBsaXRlcmFsLlxuICpcbiAqIGBgYFxuICoge3sgaTE4blBULnBhZ2luYXRpb24gfCBwb0kxOG46WzEsMTBdIH19XG4gKiB7eyBpMThuUFQudG90YWxQYWdlcyB8IHBvSTE4bjoxMCB9fVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBQb0kxOG5CYXNlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgYXJnczogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgaWYgKCEoYXJncyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgYXJncyA9IFthcmdzXTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyhcXHtcXHcqXFx9KSsvLCBhcmcpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuIl19