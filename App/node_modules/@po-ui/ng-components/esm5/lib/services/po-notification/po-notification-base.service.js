import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterType } from './po-toaster/po-toaster-type.enum';
/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "PoNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 */
var PoNotificationBaseService = /** @class */ (function () {
    function PoNotificationBaseService() {
        // Array responsável por guardar a instância de po-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de po-toaster's inferiores.
        this.stackBottom = [];
        // Duração da notificação ativa.
        this.defaultDuration = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    PoNotificationBaseService.prototype.success = function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    PoNotificationBaseService.prototype.warning = function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    PoNotificationBaseService.prototype.error = function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    PoNotificationBaseService.prototype.information = function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    };
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 10 segundos.
     *
     * @param {number} defaultDuration Duração em milisegundos
     */
    PoNotificationBaseService.prototype.setDefaultDuration = function (defaultDuration) {
        this.defaultDuration = defaultDuration;
    };
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
     */
    PoNotificationBaseService.prototype.buildToaster = function (notification, type) {
        var _this = this;
        var index = 0;
        var orientation;
        if (notification.orientation === undefined ||
            notification.orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        var toaster = {
            componentRef: undefined,
            message: notification.message || notification,
            type: type,
            orientation: orientation,
            action: notification.action,
            actionLabel: notification.actionLabel,
            position: index,
            duration: notification.duration || this.defaultDuration
        };
        if (notification.action) {
            toaster.action = function (param) {
                notification.action();
                _this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    };
    return PoNotificationBaseService;
}());
export { PoNotificationBaseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLW5vdGlmaWNhdGlvbi9wby1ub3RpZmljYXRpb24tYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVsRTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNIO0lBQUE7UUFDRSx3RUFBd0U7UUFDeEUsYUFBUSxHQUE2QixFQUFFLENBQUM7UUFFeEMsd0VBQXdFO1FBQ3hFLGdCQUFXLEdBQTZCLEVBQUUsQ0FBQztRQUUzQyxnQ0FBZ0M7UUFDeEIsb0JBQWUsR0FBRyxLQUFLLENBQUM7SUE4R2xDLENBQUM7SUE1R0M7Ozs7T0FJRztJQUNJLDJDQUFPLEdBQWQsVUFBZSxZQUFxQztRQUNsRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksMkNBQU8sR0FBZCxVQUFlLFlBQXFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx5Q0FBSyxHQUFaLFVBQWEsWUFBcUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLCtDQUFXLEdBQWxCLFVBQW1CLFlBQXFDO1FBQ3RELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLHNEQUFrQixHQUF6QixVQUEwQixlQUF1QjtRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ssZ0RBQVksR0FBcEIsVUFBcUIsWUFBcUMsRUFBRSxJQUFtQjtRQUEvRSxpQkFrQ0M7UUFqQ0MsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxXQUFXLENBQUM7UUFFaEIsSUFDbUIsWUFBYSxDQUFDLFdBQVcsS0FBSyxTQUFTO1lBQ3ZDLFlBQWEsQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsTUFBTSxFQUMxRTtZQUNBLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztZQUNoQyxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO1NBQzNDO2FBQU07WUFDTCxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDN0IsV0FBVyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztTQUN4QztRQUVELElBQU0sT0FBTyxHQUFjO1lBQ3pCLFlBQVksRUFBRSxTQUFTO1lBQ3ZCLE9BQU8sRUFBbUIsWUFBYSxDQUFDLE9BQU8sSUFBWSxZQUFZO1lBQ3ZFLElBQUksRUFBRSxJQUFJO1lBQ1YsV0FBVyxFQUFFLFdBQVc7WUFDeEIsTUFBTSxFQUFtQixZQUFhLENBQUMsTUFBTTtZQUM3QyxXQUFXLEVBQW1CLFlBQWEsQ0FBQyxXQUFXO1lBQ3ZELFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFtQixZQUFhLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlO1NBQzFFLENBQUM7UUFFRixJQUFxQixZQUFhLENBQUMsTUFBTSxFQUFFO1lBQ3pDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBQyxLQUFVO2dCQUNULFlBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDeEMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDO1NBQ0g7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBb0JILGdDQUFDO0FBQUQsQ0FBQyxBQXRIRCxJQXNIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb05vdGlmaWNhdGlvbiB9IGZyb20gJy4vcG8tbm90aWZpY2F0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXIgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Ub2FzdGVyT3JpZW50YXRpb24gfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci1vcmllbnRhdGlvbi5lbnVtJztcbmltcG9ydCB7IFBvVG9hc3RlclR5cGUgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci10eXBlLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgZW1pdGlyIGFzIG5vdGlmaWNhw6fDtWVzIGVtIHVtYSBww6FnaW5hLiBTw6NvIGRpc3BvbmliaWxpemFkb3Mgb3MgbcOpdG9kb3MgZGU6XG4gKlxuICogLSBzdWNjZXNzLFxuICogLSB3YXJuaW5nLFxuICogLSBlcnJvcixcbiAqIC0gaW5mb3JtYXRpb24uXG4gKlxuICogQ2FkYSB1bSBkZXN0ZXMgbcOpdG9kb3MgcmVjZWJlIGNvbW8gcGFyw6JtZXRybyBvIG9iamV0byBcIlBvTm90aWZpY2F0aW9uXCIgcXVlIGNvbnTDqW0gb3MgZGFkb3MgZGEgbWVuc2FnZW0gZSBvXG4gKiBvYmpldG8gVmlld0NvbnRhaW5lclJlZiBxdWUgw6kgYSByZXByZXNlbnRhw6fDo28gZG8gY29udGFpbmVyIGRvIGNvbXBvbmVudGUgb25kZSBzZXLDoSBjcmlhZGEgYSBub3RpZmljYcOnw6NvLlxuICpcbiAqIEVzdGFzIG5vdGlmaWNhw6fDtWVzIHNlcsOjbyBleGliaWRhcyBkdXJhbnRlIDEwIHNlZ3VuZG9zIHBvciBwYWRyw6NvLCBwb2RlbmRvIHNlciBhbHRlcmFkYSBjb25mb3JtZSBuZWNlc3NpZGFkZS5cbiAqIEFww7NzIGVzdGUgdGVtcG8gYSBtZXNtYSDDqSByZW1vdmlkYSBhdXRvbWF0aWNhbWVudGUuXG4gKlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB7XG4gIC8vIEFycmF5IHJlc3BvbnPDoXZlbCBwb3IgZ3VhcmRhciBhIGluc3TDom5jaWEgZGUgcG8tdG9hc3RlcidzIHN1cGVyaW9yZXMuXG4gIHN0YWNrVG9wOiBBcnJheTxDb21wb25lbnRSZWY8YW55Pj4gPSBbXTtcblxuICAvLyBBcnJheSByZXNwb25zw6F2ZWwgcG9yIGd1YXJkYXIgYSBpbnN0w6JuY2lhIGRlIHBvLXRvYXN0ZXIncyBpbmZlcmlvcmVzLlxuICBzdGFja0JvdHRvbTogQXJyYXk8Q29tcG9uZW50UmVmPGFueT4+ID0gW107XG5cbiAgLy8gRHVyYcOnw6NvIGRhIG5vdGlmaWNhw6fDo28gYXRpdmEuXG4gIHByaXZhdGUgZGVmYXVsdER1cmF0aW9uID0gMTAwMDA7XG5cbiAgLyoqXG4gICAqIEVtaXRlIHVtYSBub3RpZmljYcOnw6NvIGRlIHN1Y2Vzc28uXG4gICAqXG4gICAqIEBwYXJhbSB7UG9Ob3RpZmljYXRpb24gfCBzdHJpbmd9IG5vdGlmaWNhdGlvbiBPYmpldG8gY29tIG9zIGRhZG9zIGRhIG5vdGlmaWNhw6fDo28gb3Ugc29tZW50ZSBhIHN0cmluZyBjb20gYSBtZW5zYWdlbSBkYSBub3RpZmljYcOnw6NvLlxuICAgKi9cbiAgcHVibGljIHN1Y2Nlc3Mobm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvbiB8IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlVG9hc3Rlcih0aGlzLmJ1aWxkVG9hc3Rlcihub3RpZmljYXRpb24sIFBvVG9hc3RlclR5cGUuU3VjY2VzcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRlIHVtYSBub3RpZmljYcOnw6NvIGRlIGF0ZW7Dp8Ojby5cbiAgICpcbiAgICogQHBhcmFtIHtQb05vdGlmaWNhdGlvbiB8IHN0cmluZ30gbm90aWZpY2F0aW9uIE9iamV0byBjb20gb3MgZGFkb3MgZGEgbm90aWZpY2HDp8OjbyBvdSBzb21lbnRlIGEgc3RyaW5nIGNvbSBhIG1lbnNhZ2VtIGRhIG5vdGlmaWNhw6fDo29cbiAgICovXG4gIHB1YmxpYyB3YXJuaW5nKG5vdGlmaWNhdGlvbjogUG9Ob3RpZmljYXRpb24gfCBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVRvYXN0ZXIodGhpcy5idWlsZFRvYXN0ZXIobm90aWZpY2F0aW9uLCBQb1RvYXN0ZXJUeXBlLldhcm5pbmcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0ZSB1bWEgbm90aWZpY2HDp8OjbyBkZSBlcnJvLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvTm90aWZpY2F0aW9uIHwgc3RyaW5nfSBub3RpZmljYXRpb24gT2JqZXRvIGNvbSBvcyBkYWRvcyBkYSBub3RpZmljYcOnw6NvIG91IHNvbWVudGUgYSBzdHJpbmcgY29tIGEgbWVuc2FnZW0gZGEgbm90aWZpY2HDp8Ojb1xuICAgKi9cbiAgcHVibGljIGVycm9yKG5vdGlmaWNhdGlvbjogUG9Ob3RpZmljYXRpb24gfCBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVRvYXN0ZXIodGhpcy5idWlsZFRvYXN0ZXIobm90aWZpY2F0aW9uLCBQb1RvYXN0ZXJUeXBlLkVycm9yKSk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdGUgdW1hIG5vdGlmaWNhw6fDo28gZGUgaW5mb3JtYcOnw6NvLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvTm90aWZpY2F0aW9uIHwgc3RyaW5nfSBub3RpZmljYXRpb24gT2JqZXRvIGNvbSBvcyBkYWRvcyBkYSBub3RpZmljYcOnw6NvIG91IHNvbWVudGUgYSBzdHJpbmcgY29tIGEgbWVuc2FnZW0gZGEgbm90aWZpY2HDp8Ojb1xuICAgKi9cbiAgcHVibGljIGluZm9ybWF0aW9uKG5vdGlmaWNhdGlvbjogUG9Ob3RpZmljYXRpb24gfCBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVRvYXN0ZXIodGhpcy5idWlsZFRvYXN0ZXIobm90aWZpY2F0aW9uLCBQb1RvYXN0ZXJUeXBlLkluZm9ybWF0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIGVtIG1pbGlzc2VndW5kb3MgYSBkdXJhw6fDo28gcGFkcsOjbyBwYXJhIGFzIG5vdGlmaWNhw6fDtWVzLlxuICAgKlxuICAgKiA+IFBhZHLDo28gMTAgc2VndW5kb3MuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWZhdWx0RHVyYXRpb24gRHVyYcOnw6NvIGVtIG1pbGlzZWd1bmRvc1xuICAgKi9cbiAgcHVibGljIHNldERlZmF1bHREdXJhdGlvbihkZWZhdWx0RHVyYXRpb246IG51bWJlcikge1xuICAgIHRoaXMuZGVmYXVsdER1cmF0aW9uID0gZGVmYXVsdER1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkb2NzUHJpdmF0ZVxuICAgKlxuICAgKiBDcmlhIHVtIG9iamV0byBkbyB0aXBvIFBvVG9hc3RlciBkZSBhY29yZG8gbyB0aXBvLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvTm90aWZpY2F0aW9uIHwgc3RyaW5nfSBub3RpZmljYXRpb24gT2JqZXRvIFBvTm90aWZpY2F0aW9uIGNvbSBvcyBkYWRvcyBkYSBub3RpZmljYcOnw6NvXG4gICAqL1xuICBwcml2YXRlIGJ1aWxkVG9hc3Rlcihub3RpZmljYXRpb246IFBvTm90aWZpY2F0aW9uIHwgc3RyaW5nLCB0eXBlOiBQb1RvYXN0ZXJUeXBlKTogUG9Ub2FzdGVyIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBvcmllbnRhdGlvbjtcblxuICAgIGlmIChcbiAgICAgICg8UG9Ob3RpZmljYXRpb24+bm90aWZpY2F0aW9uKS5vcmllbnRhdGlvbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLkJvdHRvbVxuICAgICkge1xuICAgICAgaW5kZXggPSB0aGlzLnN0YWNrQm90dG9tLmxlbmd0aDtcbiAgICAgIG9yaWVudGF0aW9uID0gUG9Ub2FzdGVyT3JpZW50YXRpb24uQm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHRoaXMuc3RhY2tUb3AubGVuZ3RoO1xuICAgICAgb3JpZW50YXRpb24gPSBQb1RvYXN0ZXJPcmllbnRhdGlvbi5Ub3A7XG4gICAgfVxuXG4gICAgY29uc3QgdG9hc3RlcjogUG9Ub2FzdGVyID0ge1xuICAgICAgY29tcG9uZW50UmVmOiB1bmRlZmluZWQsXG4gICAgICBtZXNzYWdlOiAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikubWVzc2FnZSB8fCA8c3RyaW5nPm5vdGlmaWNhdGlvbixcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBhY3Rpb246ICg8UG9Ob3RpZmljYXRpb24+bm90aWZpY2F0aW9uKS5hY3Rpb24sXG4gICAgICBhY3Rpb25MYWJlbDogKDxQb05vdGlmaWNhdGlvbj5ub3RpZmljYXRpb24pLmFjdGlvbkxhYmVsLFxuICAgICAgcG9zaXRpb246IGluZGV4LFxuICAgICAgZHVyYXRpb246ICg8UG9Ob3RpZmljYXRpb24+bm90aWZpY2F0aW9uKS5kdXJhdGlvbiB8fCB0aGlzLmRlZmF1bHREdXJhdGlvblxuICAgIH07XG5cbiAgICBpZiAoKDxQb05vdGlmaWNhdGlvbj5ub3RpZmljYXRpb24pLmFjdGlvbikge1xuICAgICAgdG9hc3Rlci5hY3Rpb24gPSAocGFyYW06IGFueSkgPT4ge1xuICAgICAgICAoPFBvTm90aWZpY2F0aW9uPm5vdGlmaWNhdGlvbikuYWN0aW9uKCk7XG4gICAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIocGFyYW0uY29tcG9uZW50UmVmKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvYXN0ZXI7XG4gIH1cblxuICAvKipcbiAgICogQGRvY3NQcml2YXRlXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBjcmlhciBvIHBvLXRvYXN0ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7UG9Ub2FzdGVyfSB0b2FzdGVyIE9iamV0byBjb250ZW5kbyBhcyBpbmZvcm1hw6fDtWVzIGRvIHRvYXN0ZXIuXG4gICAqL1xuICBhYnN0cmFjdCBjcmVhdGVUb2FzdGVyKHRvYXN0ZXI6IFBvVG9hc3Rlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBkb2NzUHJpdmF0ZVxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgZGVzdHJ1aXIgbyBwby10b2FzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudFJlZn0gdG9hc3RlciBOw7ptZXJvIGRhIHBvc2nDp8OjbyBvdSBpbnN0YW5jaWEgZG8gdG9hc3RlciBhIHNlciBkZXN0cnXDrWRvLlxuICAgKiBAcGFyYW0ge1BvVG9hc3Rlck9yaWVudGF0aW9ufSBvcmllbnRhdGlvbiBPcmllbnRhw6fDo28gZG8gUG9Ub2FzdGVyOiBUb3Agb3UgQm90dG9tXG4gICAqL1xuICBhYnN0cmFjdCBkZXN0cm95VG9hc3Rlcih0b2FzdGVyOiBDb21wb25lbnRSZWY8YW55Pik6IHZvaWQ7XG59XG4iXX0=