import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { PoComponentInjectorService } from './../po-component-injector/po-component-injector.service';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-component-injector/po-component-injector.service";
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
var PoNotificationService = /** @class */ (function (_super) {
    __extends(PoNotificationService, _super);
    function PoNotificationService(poComponentInjector) {
        var _this = _super.call(this) || this;
        _this.poComponentInjector = poComponentInjector;
        return _this;
    }
    PoNotificationService.prototype.createToaster = function (toaster) {
        var _this = this;
        var componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === PoToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, toaster.duration);
        }
    };
    PoNotificationService.prototype.destroyToaster = function (toaster) {
        var stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.poComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    PoNotificationService.prototype.observableOnClose = function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe(function () {
            _this.destroyToaster(componentRef);
        });
    };
    PoNotificationService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    PoNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(i0.ɵɵinject(i1.PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
    PoNotificationService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [PoComponentInjectorService])
    ], PoNotificationService);
    return PoNotificationService;
}(PoNotificationBaseService));
export { PoNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1ub3RpZmljYXRpb24vcG8tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7QUFFdkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFLSDtJQUEyQyx5Q0FBeUI7SUFDbEUsK0JBQW9CLG1CQUErQztRQUFuRSxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIseUJBQW1CLEdBQW5CLG1CQUFtQixDQUE0Qjs7SUFFbkUsQ0FBQztJQUVELDZDQUFhLEdBQWIsVUFBYyxPQUFrQjtRQUFoQyxpQkFxQkM7UUFwQkMsSUFBTSxZQUFZLEdBQXNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWxILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2hDLFVBQVUsQ0FBQztnQkFDVCxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3BDLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQsOENBQWMsR0FBZCxVQUFlLE9BQVk7UUFDekIsSUFBSSxLQUFLLENBQUM7UUFFVixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtZQUM3RCxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2QjthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDMUI7UUFFRCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFTyxpREFBaUIsR0FBekIsVUFBMEIsWUFBaUI7UUFBM0MsaUJBSUM7UUFIQyxZQUFZLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztZQUNoRCxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBbER3QywwQkFBMEI7OztJQUR4RCxxQkFBcUI7UUFIakMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQzt5Q0FFeUMsMEJBQTBCO09BRHhELHFCQUFxQixDQW9EakM7Z0NBcEZEO0NBb0ZDLEFBcERELENBQTJDLHlCQUF5QixHQW9EbkU7U0FwRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi8uLi9wby1jb21wb25lbnQtaW5qZWN0b3IvcG8tY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB9IGZyb20gJy4vcG8tbm90aWZpY2F0aW9uLWJhc2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXIgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Ub2FzdGVyT3JpZW50YXRpb24gfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci1vcmllbnRhdGlvbi5lbnVtJztcbmltcG9ydCB7IFBvVG9hc3RlckNvbXBvbmVudCB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvTm90aWZpY2F0aW9uQmFzZVNlcnZpY2VcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1ub3RpZmljYXRpb24tYmFzaWNcIiB0aXRsZT1cIlBPIE5vdGlmaWNhdGlvbiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbm90aWZpY2F0aW9uLWxhYnNcIiB0aXRsZT1cIlBPIE5vdGlmaWNhdGlvbiBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW5vdGlmaWNhdGlvbi1zYWxlc1wiIHRpdGxlPVwiUE8gTm90aWZpY2F0aW9uIC0gU2FsZXNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Ob3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcG9Db21wb25lbnRJbmplY3RvcjogUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY3JlYXRlVG9hc3Rlcih0b2FzdGVyOiBQb1RvYXN0ZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9Ub2FzdGVyQ29tcG9uZW50KTtcblxuICAgIHRvYXN0ZXIuY29tcG9uZW50UmVmID0gY29tcG9uZW50UmVmO1xuXG4gICAgY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UuY29uZmlnVG9hc3Rlcih0b2FzdGVyKTtcblxuICAgIGlmICh0b2FzdGVyLm9yaWVudGF0aW9uID09PSBQb1RvYXN0ZXJPcmllbnRhdGlvbi5Ub3ApIHtcbiAgICAgIHRoaXMuc3RhY2tUb3AucHVzaChjb21wb25lbnRSZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrQm90dG9tLnB1c2goY29tcG9uZW50UmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZik7XG5cbiAgICBpZiAodG9hc3Rlci5hY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICAgIH0sIHRvYXN0ZXIuZHVyYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lUb2FzdGVyKHRvYXN0ZXI6IGFueSk6IHZvaWQge1xuICAgIGxldCBzdGFjaztcblxuICAgIGlmICh0b2FzdGVyLmluc3RhbmNlLm9yaWVudGF0aW9uID09PSBQb1RvYXN0ZXJPcmllbnRhdGlvbi5Ub3ApIHtcbiAgICAgIHN0YWNrID0gdGhpcy5zdGFja1RvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrQm90dG9tO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gc3RhY2suaW5kZXhPZih0b2FzdGVyKTtcbiAgICBzdGFjay5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmRlc3Ryb3lDb21wb25lbnRJbkFwcGxpY2F0aW9uKHRvYXN0ZXIpO1xuXG4gICAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHN0YWNrLmxlbmd0aDsgY291bnQrKykge1xuICAgICAgc3RhY2tbY291bnRdLmluc3RhbmNlLmNoYW5nZVBvc2l0aW9uKGNvdW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZjogYW55KSB7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9ic2VydmFibGVPbkNsb3NlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKGNvbXBvbmVudFJlZik7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==