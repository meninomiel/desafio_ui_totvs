import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { PoToasterBaseComponent } from './po-toaster-base.component';
import { PoToasterType } from './po-toaster-type.enum';
import { PoToasterOrientation } from './po-toaster-orientation.enum';
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
var PoToasterComponent = /** @class */ (function (_super) {
    __extends(PoToasterComponent, _super);
    function PoToasterComponent(changeDetector, elementeRef) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        _this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        _this.observableOnClose = new Subject();
        /* Mostra ou oculta o Toaster */
        _this.showToaster = true;
        /* Posição do Toaster*/
        _this.toasterPosition = 'po-toaster-bottom';
        return _this;
    }
    /* Muda a posição do Toaster na tela*/
    PoToasterComponent.prototype.changePosition = function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + 44 * position + position * 6;
        if (this.orientation === PoToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    };
    /* Fecha o componente Toaster */
    PoToasterComponent.prototype.close = function () {
        this.showToaster = false;
        this.observableOnClose.next(true);
    };
    /* Configura o Toaster com os atributos passados para ele */
    PoToasterComponent.prototype.configToaster = function (poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel ? poToaster.actionLabel : 'Fechar';
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'po-icon-close';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'po-icon-info';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'po-icon-ok';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'po-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    };
    PoToasterComponent.prototype.getShowToaster = function () {
        return this.showToaster;
    };
    PoToasterComponent.prototype.getIcon = function () {
        return this.icon;
    };
    PoToasterComponent.prototype.getToasterPosition = function () {
        return this.toasterPosition;
    };
    PoToasterComponent.prototype.getToasterType = function () {
        return this.toasterType;
    };
    /* Chama a função passada pelo atributo `action` */
    PoToasterComponent.prototype.poToasterAction = function () {
        this.action(this);
    };
    PoToasterComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('toaster'),
        __metadata("design:type", ElementRef)
    ], PoToasterComponent.prototype, "toaster", void 0);
    PoToasterComponent = __decorate([
        Component({
            selector: 'po-toaster',
            template: "<div\n  #toaster\n  *ngIf=\"getShowToaster()\"\n  class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\"\n  (click)=\"close()\"\n>\n  <div class=\"po-toaster-message\"><span class=\"po-icon {{ getIcon() }}\"></span> {{ message }}</div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"poToasterAction()\" class=\"po-toaster-action\">\n    {{ actionLabel }}\n  </div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], PoToasterComponent);
    return PoToasterComponent;
}(PoToasterBaseComponent));
export { PoToasterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9hc3Rlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1ub3RpZmljYXRpb24vcG8tdG9hc3Rlci9wby10b2FzdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXJFOzs7O0dBSUc7QUFLSDtJQUF3QyxzQ0FBc0I7SUFpQjVELDRCQUFtQixjQUFpQyxFQUFVLFdBQXdCO1FBQXRGLFlBQ0UsaUJBQU8sU0FDUjtRQUZrQixvQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFBVSxpQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQWR0RiwyREFBMkQ7UUFDbkQsWUFBTSxHQUFXLEVBQUUsQ0FBQztRQUM1QixrREFBa0Q7UUFDMUMsdUJBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUMvQyxnQ0FBZ0M7UUFDeEIsaUJBQVcsR0FBWSxJQUFJLENBQUM7UUFDcEMsdUJBQXVCO1FBQ2YscUJBQWUsR0FBVyxtQkFBbUIsQ0FBQzs7SUFTdEQsQ0FBQztJQUVELHNDQUFzQztJQUN0QywyQ0FBYyxHQUFkLFVBQWUsUUFBZ0I7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcs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QWMsR0FBZDtRQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsbURBQW1EO0lBQ25ELDRDQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLENBQUM7O2dCQXZGa0MsaUJBQWlCO2dCQUF3QixVQUFVOztJQUZoRTtRQUFyQixTQUFTLENBQUMsU0FBUyxDQUFDO2tDQUFVLFVBQVU7dURBQUM7SUFmL0Isa0JBQWtCO1FBSjlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxZQUFZO1lBQ3RCLG1hQUEwQztTQUMzQyxDQUFDO3lDQWtCbUMsaUJBQWlCLEVBQXdCLFVBQVU7T0FqQjNFLGtCQUFrQixDQXlHOUI7SUFBRCx5QkFBQztDQUFBLEFBekdELENBQXdDLHNCQUFzQixHQXlHN0Q7U0F6R1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9Ub2FzdGVyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdG9hc3Rlci1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1RvYXN0ZXIgfSBmcm9tICcuL3BvLXRvYXN0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVG9hc3RlclR5cGUgfSBmcm9tICcuL3BvLXRvYXN0ZXItdHlwZS5lbnVtJztcbmltcG9ydCB7IFBvVG9hc3Rlck9yaWVudGF0aW9uIH0gZnJvbSAnLi9wby10b2FzdGVyLW9yaWVudGF0aW9uLmVudW0nO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkb2NzRXh0ZW5kcyBQb1RvYXN0ZXJCYXNlQ29tcG9uZW50XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRvYXN0ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdG9hc3Rlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Ub2FzdGVyQ29tcG9uZW50IGV4dGVuZHMgUG9Ub2FzdGVyQmFzZUNvbXBvbmVudCB7XG4gIC8qIMONY29uZSBkbyBUb2FzdGVyICovXG4gIHByaXZhdGUgaWNvbjogc3RyaW5nO1xuICAvKiBNYXJnZW0gZG8gVG9hc3RlciByZWZlcsOqbnRlIMOgIHN1YSBvcmllbnRhw6fDo28gZSBwb3Npw6fDo28qL1xuICBwcml2YXRlIG1hcmdpbjogbnVtYmVyID0gMjA7XG4gIC8qIE9ic2VydmFibGUgcGFyYSBtb25pdG9yYXIgbyBDbG9zZSB0byBUb2FzdGVyICovXG4gIHByaXZhdGUgb2JzZXJ2YWJsZU9uQ2xvc2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIC8qIE1vc3RyYSBvdSBvY3VsdGEgbyBUb2FzdGVyICovXG4gIHByaXZhdGUgc2hvd1RvYXN0ZXI6IGJvb2xlYW4gPSB0cnVlO1xuICAvKiBQb3Npw6fDo28gZG8gVG9hc3RlciovXG4gIHByaXZhdGUgdG9hc3RlclBvc2l0aW9uOiBzdHJpbmcgPSAncG8tdG9hc3Rlci1ib3R0b20nO1xuICAvKiBUaXBvIGRvIFRvYXN0ZXIgKi9cbiAgcHJpdmF0ZSB0b2FzdGVyVHlwZTogc3RyaW5nO1xuXG4gIC8qIENvbXBvbmVudGUgdG9hc3RlciAqL1xuICBAVmlld0NoaWxkKCd0b2FzdGVyJykgdG9hc3RlcjogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGVsZW1lbnRlUmVmPzogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKiBNdWRhIGEgcG9zacOnw6NvIGRvIFRvYXN0ZXIgbmEgdGVsYSovXG4gIGNoYW5nZVBvc2l0aW9uKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnRlUmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICd0YWJsZSc7XG5cbiAgICB0aGlzLm1hcmdpbiA9IDYgKyA0NCAqIHBvc2l0aW9uICsgcG9zaXRpb24gKiA2O1xuXG4gICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgdGhpcy50b2FzdGVyLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gdGhpcy5tYXJnaW4gKyAncHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRvYXN0ZXIubmF0aXZlRWxlbWVudC5zdHlsZS5ib3R0b20gPSB0aGlzLm1hcmdpbiArICdweCc7XG4gICAgfVxuICB9XG5cbiAgLyogRmVjaGEgbyBjb21wb25lbnRlIFRvYXN0ZXIgKi9cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93VG9hc3RlciA9IGZhbHNlO1xuICAgIHRoaXMub2JzZXJ2YWJsZU9uQ2xvc2UubmV4dCh0cnVlKTtcbiAgfVxuXG4gIC8qIENvbmZpZ3VyYSBvIFRvYXN0ZXIgY29tIG9zIGF0cmlidXRvcyBwYXNzYWRvcyBwYXJhIGVsZSAqL1xuICBjb25maWdUb2FzdGVyKHBvVG9hc3RlcjogUG9Ub2FzdGVyKSB7XG4gICAgdGhpcy50eXBlID0gcG9Ub2FzdGVyLnR5cGU7XG4gICAgdGhpcy5tZXNzYWdlID0gcG9Ub2FzdGVyLm1lc3NhZ2U7XG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IHBvVG9hc3Rlci5vcmllbnRhdGlvbjtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9Ub2FzdGVyLnBvc2l0aW9uO1xuICAgIHRoaXMuYWN0aW9uID0gcG9Ub2FzdGVyLmFjdGlvbjtcbiAgICB0aGlzLmFjdGlvbkxhYmVsID0gcG9Ub2FzdGVyLmFjdGlvbkxhYmVsID8gcG9Ub2FzdGVyLmFjdGlvbkxhYmVsIDogJ0ZlY2hhcic7XG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSBwb1RvYXN0ZXIuY29tcG9uZW50UmVmO1xuXG4gICAgLyogTXVkYSBhIG9yaWVudGHDp8OjbyBkbyBUb2FzdGVyICovXG4gICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgdGhpcy50b2FzdGVyUG9zaXRpb24gPSAncG8tdG9hc3Rlci10b3AnO1xuICAgIH1cblxuICAgIC8qIE11ZGEgYSBwb3Npw6fDo28gZG8gVG9hc3RlciAqL1xuICAgIHRoaXMuY2hhbmdlUG9zaXRpb24odGhpcy5wb3NpdGlvbik7XG5cbiAgICAvKiBTd2l0Y2ggcGFyYSBvIHRpcG8gZGUgVG9hc3RlciAqL1xuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICBjYXNlIFBvVG9hc3RlclR5cGUuRXJyb3I6IHtcbiAgICAgICAgdGhpcy50b2FzdGVyVHlwZSA9ICdwby10b2FzdGVyLWVycm9yJztcbiAgICAgICAgdGhpcy5pY29uID0gJ3BvLWljb24tY2xvc2UnO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUG9Ub2FzdGVyVHlwZS5JbmZvcm1hdGlvbjoge1xuICAgICAgICB0aGlzLnRvYXN0ZXJUeXBlID0gJ3BvLXRvYXN0ZXItaW5mbyc7XG4gICAgICAgIHRoaXMuaWNvbiA9ICdwby1pY29uLWluZm8nO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUG9Ub2FzdGVyVHlwZS5TdWNjZXNzOiB7XG4gICAgICAgIHRoaXMudG9hc3RlclR5cGUgPSAncG8tdG9hc3Rlci1zdWNjZXNzJztcbiAgICAgICAgdGhpcy5pY29uID0gJ3BvLWljb24tb2snO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUG9Ub2FzdGVyVHlwZS5XYXJuaW5nOiB7XG4gICAgICAgIHRoaXMudG9hc3RlclR5cGUgPSAncG8tdG9hc3Rlci13YXJuaW5nJztcbiAgICAgICAgdGhpcy5pY29uID0gJ3BvLWljb24td2FybmluZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgZ2V0U2hvd1RvYXN0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvd1RvYXN0ZXI7XG4gIH1cblxuICBnZXRJY29uKCkge1xuICAgIHJldHVybiB0aGlzLmljb247XG4gIH1cblxuICBnZXRUb2FzdGVyUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9hc3RlclBvc2l0aW9uO1xuICB9XG5cbiAgZ2V0VG9hc3RlclR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9hc3RlclR5cGU7XG4gIH1cblxuICAvKiBDaGFtYSBhIGZ1bsOnw6NvIHBhc3NhZGEgcGVsbyBhdHJpYnV0byBgYWN0aW9uYCAqL1xuICBwb1RvYXN0ZXJBY3Rpb24oKTogdm9pZCB7XG4gICAgdGhpcy5hY3Rpb24odGhpcyk7XG4gIH1cbn1cbiJdfQ==