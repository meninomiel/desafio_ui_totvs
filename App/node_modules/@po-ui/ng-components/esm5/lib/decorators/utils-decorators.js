/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    var target = decoratorProperties.target, property = decoratorProperties.property;
    var emptyFunction = function () { };
    var lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    var target = decoratorProperties.target, property = decoratorProperties.property, originalDescriptor = decoratorProperties.originalDescriptor;
    var privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    var privatePropName = "$$__" + propertyName;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn("The prop \"" + privatePropName + "\" is already exist, it will be overrided by " + decoratorName + " decorator.");
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RlY29yYXRvcnMvdXRpbHMtZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFVixJQUFBLG1DQUFNLEVBQUUsdUNBQVEsQ0FBeUI7SUFDakQsSUFBTSxhQUFhLEdBQUcsY0FBTyxDQUFDLENBQUM7SUFDL0IsSUFBTSxzQkFBc0IsR0FBb0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQztJQUV2RixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUU7UUFDM0MsS0FBSyxFQUFFO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFVixJQUFBLG1DQUFNLEVBQUUsdUNBQVEsRUFBRSwyREFBa0IsQ0FBeUI7SUFDckUsSUFBTSxtQkFBbUIsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRW5GLE9BQU87UUFDTCxHQUFHLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDO1FBQ3BELEdBQUcsRUFBRSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixDQUFDO0tBQy9ELENBQUM7QUFDSixDQUFDO0FBQ0QsU0FBUyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsUUFBa0IsRUFBRSxtQkFBMkI7SUFDakYsT0FBTyxVQUFVLEtBQUs7UUFDcEIsSUFBSSxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7WUFDaEQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsa0JBQWdELEVBQUUsZUFBdUI7SUFDdkYsT0FBTztRQUNMLE9BQU8sa0JBQWtCLElBQUksa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE1BQVcsRUFBRSxZQUFvQixFQUFFLGFBQXFCO0lBQzVGLElBQU0sZUFBZSxHQUFHLFNBQU8sWUFBYyxDQUFDO0lBRTlDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBRTtRQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFhLGVBQWUscURBQStDLGFBQWEsZ0JBQWEsQ0FBQyxDQUFDO0tBQ3JIO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxFQUFFO1FBQzdDLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1kZWNvcmF0b3IuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBGdW7Dp8OjbyB1dGlsaXphZGEgcGVsYSBmw6FicmljYSBkZSBkZWNvcmFkb3JlcyBwYXJhIHZhbGlkYXIgdW1hIHByb3ByaWVkYWRlIGRlIHVtYSBjbGFzc2UgZHVyYW50ZVxuICogbyBjaWNsbyBkZSB2aWRhIGRvIEFuZ3VsYXIuXG4gKlxuICogQHBhcmFtIGRlY29yYXRvclByb3BlcnRpZXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBQb1Byb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLlxuICogQHBhcmFtIGxpZmVjeWNsZU5hbWUgY2xpY28gZGUgdmlkYSBxdWUgc2UgZGVzZWphIGV4ZWN1dGFyIGNvbSBhIHZhbGlkYcOnw6NvLlxuICogQHBhcmFtIGNhbGxiYWNrIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcGFyYSB2YWxpZGFkYXIgYSBwcm9wcmllZGFkZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlPbkxpZmVDeWNsZShcbiAgZGVjb3JhdG9yUHJvcGVydGllczogUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UsXG4gIGxpZmVjeWNsZU5hbWU6IHN0cmluZyxcbiAgY2FsbGJhY2s6IEZ1bmN0aW9uXG4pIHtcbiAgY29uc3QgeyB0YXJnZXQsIHByb3BlcnR5IH0gPSBkZWNvcmF0b3JQcm9wZXJ0aWVzO1xuICBjb25zdCBlbXB0eUZ1bmN0aW9uID0gKCkgPT4ge307XG4gIGNvbnN0IGxpZmVjeWNsZUZ1bmN0aW9uQ2xvbmU6IEZ1bmN0aW9uIHwgbnVsbCA9IHRhcmdldFtsaWZlY3ljbGVOYW1lXSB8fCBlbXB0eUZ1bmN0aW9uO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGxpZmVjeWNsZU5hbWUsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBwcm9wZXJ0eSwgdGFyZ2V0KTtcbiAgICAgIGxpZmVjeWNsZUZ1bmN0aW9uQ2xvbmUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEZ1bsOnw6NvIHV0aWxpemFkYSBwZWxhIGbDoWJyaWNhIGRlIGRlY29yYWRvcmVzIHBhcmEgYWx0ZXJhci9tYW5pcHVsYXIgbyB2YWxvciBkZSB1bWEgcHJvcHJpZWRhZGUuXG4gKlxuICogPiBFc3RlIGRlY29yYXRvciBpcsOhIGNyaWFyIG9zIG3DqXRvZG9zIGdldCBlIHNldCBpbnRlcm5hbWVudGUuIFBvcnRhbnRvLFxuICogw6kgaW1wb3J0YW50ZSAqKm7Do28qKiBjcmlhciBub21lcyBwcml2YWRvcyBwYXJhIGFzIHByb3ByaWVkYWRlcyB1dGlsaXphbmRvXG4gKiBgJCRfX25vbWVEYVByb3ByaWVkYWRlYCBhbyB1dGlsaXphciBlc3RlIGRlY29yYXRvciwgcG9pcyBlbGEgc2Vyw6Egc29icmVzY3JpdGEgcGVsYSBwcm9wcmllZGFkZSBwcml2YWRhXG4gKiBjcmlhZGEgcGVsbyBkZWNvcmF0b3IuXG4gKlxuICogQHBhcmFtIGRlY29yYXRvclByb3BlcnRpZXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBQb1Byb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLlxuICogQHBhcmFtIGRlY29yYXRvck5hbWUgbm9tZSBkbyBkZWNvcmF0b3JcbiAqIEBwYXJhbSBjYWxsYmFjayBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgYWx0ZXJhciBvIHZhbG9yIGRhIHByb3ByaWVkYWRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VWYWx1ZUJ5Q2FsbGJhY2soXG4gIGRlY29yYXRvclByb3BlcnRpZXM6IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLFxuICBkZWNvcmF0b3JOYW1lOiBzdHJpbmcsXG4gIGNhbGxiYWNrOiBGdW5jdGlvblxuKSB7XG4gIGNvbnN0IHsgdGFyZ2V0LCBwcm9wZXJ0eSwgb3JpZ2luYWxEZXNjcmlwdG9yIH0gPSBkZWNvcmF0b3JQcm9wZXJ0aWVzO1xuICBjb25zdCBwcml2YXRlUHJvcGVydHlOYW1lID0gY3JlYXRlUHJpdmF0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvck5hbWUpO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBnZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBwcml2YXRlUHJvcGVydHlOYW1lKSxcbiAgICBzZXQ6IHNldHRlcihvcmlnaW5hbERlc2NyaXB0b3IsIGNhbGxiYWNrLCBwcml2YXRlUHJvcGVydHlOYW1lKVxuICB9O1xufVxuZnVuY3Rpb24gc2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBwcml2YXRlUHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSk6IHZvaWQge1xuICAgIGlmIChvcmlnaW5hbERlc2NyaXB0b3IgJiYgb3JpZ2luYWxEZXNjcmlwdG9yLnNldCkge1xuICAgICAgb3JpZ2luYWxEZXNjcmlwdG9yLnNldC5iaW5kKHRoaXMpKGNhbGxiYWNrKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgdGhpc1twcml2YXRlUHJvcGVydHlOYW1lXSA9IGNhbGxiYWNrKHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiwgcHJpdmF0ZVByb3BOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5nZXQgPyBvcmlnaW5hbERlc2NyaXB0b3IuZ2V0LmJpbmQodGhpcykoKSA6IHRoaXNbcHJpdmF0ZVByb3BOYW1lXTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByaXZhdGVQcm9wZXJ0eSh0YXJnZXQ6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIGRlY29yYXRvck5hbWU6IHN0cmluZykge1xuICBjb25zdCBwcml2YXRlUHJvcE5hbWUgPSBgJCRfXyR7cHJvcGVydHlOYW1lfWA7XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSkpIHtcbiAgICBjb25zb2xlLndhcm4oYFRoZSBwcm9wIFwiJHtwcml2YXRlUHJvcE5hbWV9XCIgaXMgYWxyZWFkeSBleGlzdCwgaXQgd2lsbCBiZSBvdmVycmlkZWQgYnkgJHtkZWNvcmF0b3JOYW1lfSBkZWNvcmF0b3IuYCk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcml2YXRlUHJvcE5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSk7XG5cbiAgcmV0dXJuIHByaXZhdGVQcm9wTmFtZTtcbn1cbiJdfQ==