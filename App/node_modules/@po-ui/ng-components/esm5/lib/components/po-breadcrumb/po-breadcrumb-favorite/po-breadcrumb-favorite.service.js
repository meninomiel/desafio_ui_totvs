import { __decorate, __metadata } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var PoBreadcrumbFavoriteService = /** @class */ (function () {
    function PoBreadcrumbFavoriteService(http) {
        this.http = http;
    }
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: function () {
            return this._bodyParams;
        },
        enumerable: true,
        configurable: true
    });
    PoBreadcrumbFavoriteService.prototype.configService = function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    PoBreadcrumbFavoriteService.prototype.sendStatusFavorite = function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    PoBreadcrumbFavoriteService.prototype.getFavorite = function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    PoBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoBreadcrumbFavoriteService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoBreadcrumbFavoriteService);
    return PoBreadcrumbFavoriteService;
}());
export { PoBreadcrumbFavoriteService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQzs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUg7SUFZRSxxQ0FBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFHLENBQUM7SUFSeEMsc0JBQUksNENBQUc7YUFBUDtZQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLG1EQUFVO2FBQWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUFJRCxtREFBYSxHQUFiLFVBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVELHdEQUFrQixHQUFsQixVQUFtQixNQUFNO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELGlEQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7O2dCQWxCeUIsVUFBVTs7SUFaekIsMkJBQTJCO1FBRHZDLFVBQVUsRUFBRTt5Q0FhZSxVQUFVO09BWnpCLDJCQUEyQixDQStCdkM7SUFBRCxrQ0FBQztDQUFBLEFBL0JELElBK0JDO1NBL0JZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyB1dGlsaXphZG8gcGFyYSBmYXZvcml0YXIvZGVzZmF2b3JpdGFyIHVtYSB1cmwgbm8gY29tcG9uZW50ZSBwby1icmVhZGNydW1iLlxuICogQSBBUEkgZGV2ZSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZyB9LiBFbSBhbWJvcyBvcyBtw6l0b2RvcywgR0VUIGUgUE9TVCBlc3RlXG4gKiBvYmpldG8gZGV2ZSBzZXIgcmV0b3JuYWRvLlxuICogQW8gYWx0ZXJhciBvIHN0YXR1cyBkZSBmYXZvcml0bywgYSBBUEkgZGV2ZSByZXRvcm5hciBvIG9iamV0byBhY2ltYSwgY29tIG8gbm92byBzdGF0dXMgYXR1YWxpemFkby5cbiAqIE5vIG3DqXRvZG8gUE9TVCwgZXhpc3RlIGEgcG9zc2liaWxpZGFkZSBkZSBzZXIgZW52aWFkbyBwYXLDom1ldHJvcyBqdW50byBjb20gYSByZXF1aXNpw6fDo28uIE5lc3RlIGNhc28sIG8gb2JqZXRvIGVudmlhZG9cbiAqIHBhcmEgYSBBUEkgdGVyw6EgbyBmb3JtYXRvOiB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZywgcGFyYW1zOiB7fSB9LCBvbmRlIHBhcmFtcyDDqSBvIG9iamV0byBxdWUgcG9kZSBzZXIgZW52aWFkb1xuICoganVudG8gY29tIGEgcmVxdWlzacOnw6NvLlxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQnJlYWRjcnVtYkZhdm9yaXRlU2VydmljZSB7XG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuICBwcml2YXRlIF9ib2R5UGFyYW1zOiBvYmplY3Q7XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBnZXQgYm9keVBhcmFtcygpOiBvYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9ib2R5UGFyYW1zO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGNvbmZpZ1NlcnZpY2UodXJsLCBwYXJhbXMsIGl0ZW0pIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5fYm9keVBhcmFtcyA9IHtcbiAgICAgIGlzRmF2b3JpdGU6IGZhbHNlLFxuICAgICAgdXJsOiBpdGVtLmxpbmssXG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH07XG4gIH1cblxuICBzZW5kU3RhdHVzRmF2b3JpdGUoc3RhdHVzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLmJvZHlQYXJhbXNbJ2lzRmF2b3JpdGUnXSA9IHN0YXR1cztcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy51cmwsIHRoaXMuYm9keVBhcmFtcyk7XG4gIH1cblxuICBnZXRGYXZvcml0ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMudXJsLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBwYXJhbXM6IHsgdXJsOiB0aGlzLmJvZHlQYXJhbXNbJ3VybCddIH0gfSk7XG4gIH1cbn1cbiJdfQ==