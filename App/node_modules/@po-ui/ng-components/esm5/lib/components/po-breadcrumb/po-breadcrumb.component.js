import { __decorate, __extends, __metadata } from "tslib";
import { AfterViewInit, Component, DoCheck, ElementRef, IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var PoBreadcrumbComponent = /** @class */ (function (_super) {
    __extends(PoBreadcrumbComponent, _super);
    function PoBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = function (event) {
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    PoBreadcrumbComponent.prototype.ngAfterViewInit = function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    PoBreadcrumbComponent.prototype.ngDoCheck = function () {
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    PoBreadcrumbComponent.prototype.ngOnDestroy = function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    PoBreadcrumbComponent.prototype.toggleDropdown = function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    PoBreadcrumbComponent.prototype.checkClickOutElement = function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    PoBreadcrumbComponent.prototype.checkChangeOnItems = function () {
        if (this.differ) {
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    PoBreadcrumbComponent.prototype.calcBreadcrumb = function () {
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    PoBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = function () {
        return this.favoriteService
            ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
            : 0;
    };
    PoBreadcrumbComponent.prototype.getBreadcrumbWidth = function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    PoBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = function () {
        var breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
            .reduce(function (a, b) { return a + b; }, 16);
    };
    PoBreadcrumbComponent.prototype.enableBreadcrumbResponsive = function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    PoBreadcrumbComponent.prototype.disableBreadcrumbResponsive = function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    PoBreadcrumbComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            if (_this.calculatedElement &&
                !_this.hiddenWithoutResize &&
                _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }, 50);
    };
    PoBreadcrumbComponent.prototype.initBreadcrumbSize = function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    PoBreadcrumbComponent.prototype.initializeClickoutListener = function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    PoBreadcrumbComponent.prototype.initializeResizeListener = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    PoBreadcrumbComponent.prototype.removeClickoutListener = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    PoBreadcrumbComponent.prototype.removeResizeListener = function () {
        this.resizeListener();
    };
    PoBreadcrumbComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        ViewChild('breadcrumb', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoBreadcrumbComponent.prototype, "breadcrumbElement", void 0);
    __decorate([
        ViewChild('dropdownIcon', { read: ElementRef }),
        __metadata("design:type", ElementRef)
    ], PoBreadcrumbComponent.prototype, "dropdownIcon", void 0);
    PoBreadcrumbComponent = __decorate([
        Component({
            selector: 'po-breadcrumb',
            template: "<div class=\"po-breadcrumb\" #breadcrumb>\n  <ul class=\"po-breadcrumb-items\">\n    <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"po-breadcrumb-item po-clickable\" (click)=\"toggleDropdown()\">\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView; let itemIndex = index\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === itemsView.length - 1\"\n      >\n      </po-breadcrumb-item>\n    </div>\n  </ul>\n\n  <po-breadcrumb-favorite\n    *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\"\n  >\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\" [p-items]=\"dropdownItems\"> </po-breadcrumb-dropdown>\n</div>\n"
        }),
        __metadata("design:paramtypes", [IterableDiffers, ElementRef, Renderer2])
    ], PoBreadcrumbComponent);
    return PoBreadcrumbComponent;
}(PoBreadcrumbBaseComponent));
export { PoBreadcrumbComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsU0FBUyxFQUNULE9BQU8sRUFDUCxVQUFVLEVBQ1YsZUFBZSxFQUNmLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzNFOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBS0g7SUFBMkMseUNBQXlCO0lBZWxFLCtCQUFZLE9BQXdCLEVBQVUsT0FBbUIsRUFBUyxRQUFtQjtRQUE3RixZQUNFLGlCQUFPLFNBRVI7UUFINkMsYUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFTLGNBQVEsR0FBUixRQUFRLENBQVc7UUFkN0Ysa0JBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsd0JBQWtCLEdBQVksS0FBSyxDQUFDO1FBRzVCLDRCQUFzQixHQUFXLENBQUMsQ0FBQztRQUNuQyx1QkFBaUIsR0FBRyxLQUFLLENBQUM7UUFFMUIseUJBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQzVCLGlCQUFXLEdBQUcsS0FBSyxDQUFDO1FBNENwQiwwQkFBb0IsR0FBRyxVQUFDLEtBQWlCO1lBQy9DLElBQU0sc0JBQXNCLEdBQUcsS0FBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFbkYsSUFBSSxzQkFBc0IsRUFBRTtnQkFDMUIsS0FBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQzFCLEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDO1FBM0NBLEtBQUksQ0FB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U0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsNC9CQUE2QztTQUM5QyxDQUFDO3lDQWdCcUIsZUFBZSxFQUFtQixVQUFVLEVBQW1CLFNBQVM7T0FmbEYscUJBQXFCLENBK0pqQztJQUFELDRCQUFDO0NBQUEsQUEvSkQsQ0FBMkMseUJBQXlCLEdBK0puRTtTQS9KWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIERvQ2hlY2ssXG4gIEVsZW1lbnRSZWYsXG4gIEl0ZXJhYmxlRGlmZmVycyxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0JyZWFkY3J1bWJJdGVtIH0gZnJvbSAnLi9wby1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWJyZWFkY3J1bWItYmFzaWNcIiB0aXRsZT1cIlBPIEJyZWFkY3J1bWIgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJyZWFkY3J1bWItYmFzaWMvc2FtcGxlLXBvLWJyZWFkY3J1bWItYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1iYXNpYy9zYW1wbGUtcG8tYnJlYWRjcnVtYi1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1icmVhZGNydW1iLWxhYnNcIiB0aXRsZT1cIlBPIEJyZWFkY3J1bWIgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzL3NhbXBsZS1wby1icmVhZGNydW1iLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzL3NhbXBsZS1wby1icmVhZGNydW1iLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tYnJlYWRjcnVtYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJDb21wb25lbnQgZXh0ZW5kcyBQb0JyZWFkY3J1bWJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25EZXN0cm95IHtcbiAgc2hvd0Ryb3Bkb3duOiBib29sZWFuID0gZmFsc2U7XG4gIHNob3dEcm9wZG93blRvZ2dsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBkcm9wZG93bkl0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPjtcblxuICBwcml2YXRlIF9icmVhZGNydW1iSXRlbXNMZW5naHQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgY2FsY3VsYXRlZEVsZW1lbnQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkaWZmZXI7XG4gIHByaXZhdGUgaGlkZGVuV2l0aG91dFJlc2l6ZSA9IGZhbHNlO1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgdGltZW91dFJlc2l6ZTtcblxuICBAVmlld0NoaWxkKCdicmVhZGNydW1iJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgYnJlYWRjcnVtYkVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2Ryb3Bkb3duSWNvbicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkcm9wZG93bkljb246IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHB1YmxpYyByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRpZmZlciA9IGRpZmZlcnMuZmluZChbXSkuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5pbml0aWFsaXplUmVzaXplTGlzdGVuZXIoKTtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICBjb25zdCBicmVhZGNydW1iV2lkdGggPSB0aGlzLmJyZWFkY3J1bWJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICAvLyBQZXJtaXRlIHF1ZSBvcyBkaXNjbGFpbWVycyBzZWphbSBjYWxjdWxhZG9zIG5hIHByaW1laXJhIHZleiBxdWUgbyBjb21wb25lbnRlIHRvcm5hLXNlIHZpc8OtdmVsLFxuICAgIC8vIGV2aXRhbmRvIGNvbSBpc3NvLCBwcm9ibGVtYXMgY29tIFRhYnMgb3UgRGl2cyBxdWUgaW5pY2llbSBlc2NvbmRpZGFzLlxuICAgIGlmIChicmVhZGNydW1iV2lkdGggJiYgIXRoaXMuY2FsY3VsYXRlZEVsZW1lbnQgJiYgdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0QnJlYWRjcnVtYlNpemUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oaWRkZW5XaXRob3V0UmVzaXplKSB7XG4gICAgICB0aGlzLmRlYm91bmNlUmVzaXplKCk7XG4gICAgICB0aGlzLmhpZGRlbldpdGhvdXRSZXNpemUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrQ2hhbmdlT25JdGVtcygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVDbGlja291dExpc3RlbmVyKCk7XG4gICAgdGhpcy5yZW1vdmVSZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbiAgdG9nZ2xlRHJvcGRvd24oKSB7XG4gICAgdGhpcy5zaG93RHJvcGRvd24gPSAhdGhpcy5zaG93RHJvcGRvd247XG4gICAgdGhpcy5pbml0aWFsaXplQ2xpY2tvdXRMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSB3YXNDbGlja2Vkb25Ecm9wZG93biA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IGNsaWNrZWRPdXRJY29uRHJvcGRvd24gPSB0aGlzLmNoZWNrQ2xpY2tPdXRFbGVtZW50KGV2ZW50LCB0aGlzLmRyb3Bkb3duSWNvbik7XG5cbiAgICBpZiAoY2xpY2tlZE91dEljb25Ecm9wZG93bikge1xuICAgICAgdGhpcy5zaG93RHJvcGRvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMucmVtb3ZlQ2xpY2tvdXRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGNoZWNrQ2xpY2tPdXRFbGVtZW50KGV2ZW50LCBlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgJiYgIWVsZW1lbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0NoYW5nZU9uSXRlbXMoKSB7XG4gICAgaWYgKHRoaXMuZGlmZmVyKSB7XG4gICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLml0ZW1zKTtcbiAgICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuY2FsY0JyZWFkY3J1bWJJdGVtc1dpZHRoKCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZEVsZW1lbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNhbGNCcmVhZGNydW1iKCkge1xuICAgIGNvbnN0IGJyZWFkY3J1bWJGYXZvcml0ZSA9IHRoaXMuZ2V0QnJlYWRjcnVtYkZhdm9yaXRlV2lkdGgoKTtcbiAgICBjb25zdCBicmVhZGNydW1iID0gdGhpcy5nZXRCcmVhZGNydW1iV2lkdGgoYnJlYWRjcnVtYkZhdm9yaXRlKTtcblxuICAgIGlmIChicmVhZGNydW1iIDw9IHRoaXMuX2JyZWFkY3J1bWJJdGVtc0xlbmdodCkge1xuICAgICAgdGhpcy5lbmFibGVCcmVhZGNydW1iUmVzcG9uc2l2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGVCcmVhZGNydW1iUmVzcG9uc2l2ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0QnJlYWRjcnVtYkZhdm9yaXRlV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmF2b3JpdGVTZXJ2aWNlXG4gICAgICA/IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wby1icmVhZGNydW1iLWZhdm9yaXRlJykub2Zmc2V0V2lkdGggKyAyMFxuICAgICAgOiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRCcmVhZGNydW1iV2lkdGgoYnJlYWRjcnVtYkZhdm9yaXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wby1icmVhZGNydW1iJykub2Zmc2V0V2lkdGggLSBicmVhZGNydW1iRmF2b3JpdGU7XG4gIH1cblxuICBwcml2YXRlIGNhbGNCcmVhZGNydW1iSXRlbXNXaWR0aCgpIHtcbiAgICBjb25zdCBicmVhZGNydW1iSXRlbSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAnLnBvLWJyZWFkY3J1bWItaXRlbSwgLnBvLWJyZWFkY3J1bWItaXRlbS11bmNsaWNrYWJsZSdcbiAgICApO1xuXG4gICAgdGhpcy5fYnJlYWRjcnVtYkl0ZW1zTGVuZ2h0ID0gQXJyYXkuZnJvbShicmVhZGNydW1iSXRlbSlcbiAgICAgIC5tYXAoYnJlYWRjcnVtYiA9PiBicmVhZGNydW1iWydvZmZzZXRXaWR0aCddKVxuICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDE2KTtcbiAgfVxuXG4gIHByaXZhdGUgZW5hYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmUoKSB7XG4gICAgdGhpcy5zaG93RHJvcGRvd25Ub2dnbGUgPSB0cnVlO1xuICAgIHRoaXMuaXRlbXNWaWV3ID0gdGhpcy5pdGVtcy5zbGljZSgtMik7XG4gICAgdGhpcy5kcm9wZG93bkl0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwLCAtMikucmV2ZXJzZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNhYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmUoKSB7XG4gICAgdGhpcy5zaG93RHJvcGRvd25Ub2dnbGUgPSBmYWxzZTtcbiAgICB0aGlzLml0ZW1zVmlldyA9IFtdLmNvbmNhdCh0aGlzLml0ZW1zKTtcbiAgICB0aGlzLnNob3dEcm9wZG93biA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWJvdW5jZVJlc2l6ZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVzaXplKTtcbiAgICB0aGlzLnRpbWVvdXRSZXNpemUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVkRWxlbWVudCAmJlxuICAgICAgICAhdGhpcy5oaWRkZW5XaXRob3V0UmVzaXplICYmXG4gICAgICAgIHRoaXMuYnJlYWRjcnVtYkVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA9PT0gMFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuV2l0aG91dFJlc2l6ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhbGNCcmVhZGNydW1iKCk7XG4gICAgICB9XG4gICAgfSwgNTApO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0QnJlYWRjcnVtYlNpemUoKSB7XG4gICAgdGhpcy5jYWxjQnJlYWRjcnVtYkl0ZW1zV2lkdGgoKTtcbiAgICB0aGlzLmNhbGNCcmVhZGNydW1iKCk7XG4gICAgdGhpcy5jYWxjdWxhdGVkRWxlbWVudCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVDbGlja291dExpc3RlbmVyKCkge1xuICAgIHRoaXMuY2xpY2tvdXRMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCdkb2N1bWVudCcsICdjbGljaycsIHRoaXMud2FzQ2xpY2tlZG9uRHJvcGRvd24pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplUmVzaXplTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmRlYm91bmNlUmVzaXplKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUNsaWNrb3V0TGlzdGVuZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xpY2tvdXRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5jbGlja291dExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVSZXNpemVMaXN0ZW5lcigpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyKCk7XG4gIH1cbn1cbiJdfQ==