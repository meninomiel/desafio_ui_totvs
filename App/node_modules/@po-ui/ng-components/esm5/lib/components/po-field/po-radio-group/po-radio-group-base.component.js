import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
var poRadioGroupColumnsDefaultLength = 6;
var poRadioGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 */
var PoRadioGroupBaseComponent = /** @class */ (function () {
    function PoRadioGroupBaseComponent() {
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Evento ao alterar valor do campo. */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * @default `2`
         */
        set: function (value) {
            var columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
         */
        set: function (value) {
            this._options = value;
            removeDuplicatedOptions(this.options);
        },
        enumerable: true,
        configurable: true
    });
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    PoRadioGroupBaseComponent.prototype.changeValue = function (changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    };
    PoRadioGroupBaseComponent.prototype.registerOnChange = function (fn) {
        this.onChangePropagate = fn;
    };
    PoRadioGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
    PoRadioGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoRadioGroupBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    };
    PoRadioGroupBaseComponent.prototype.writeValue = function (modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        var element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    };
    PoRadioGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    PoRadioGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
        var gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    };
    PoRadioGroupBaseComponent.prototype.validateModel = function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoRadioGroupBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-columns'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoRadioGroupBaseComponent.prototype, "columns", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoRadioGroupBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoRadioGroupBaseComponent.prototype, "required", null);
    __decorate([
        Input('p-options'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoRadioGroupBaseComponent.prototype, "options", null);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoRadioGroupBaseComponent.prototype, "optional", void 0);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoRadioGroupBaseComponent.prototype, "change", void 0);
    PoRadioGroupBaseComponent = __decorate([
        Directive()
    ], PoRadioGroupBaseComponent);
    return PoRadioGroupBaseComponent;
}());
export { PoRadioGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,