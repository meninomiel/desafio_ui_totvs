import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
/**
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
var PoSwitchBaseComponent = /** @class */ (function () {
    function PoSwitchBaseComponent() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica o foco no elemento ao ser iniciado.
         *  > Caso mais de um elemento seja configurado com essa propriedade,
         * o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * @default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * @default `false`
         */
        this.labelOff = 'false';
        /**
         * @optional
         *
         * @description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = PoSwitchLabelPosition.Right;
        /** Evento disparado ao alterar valor do campo. */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOn", {
        set: function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOff", {
        set: function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelPosition", {
        set: function (position) {
            this.labelPosition = position in PoSwitchLabelPosition ? parseInt(position, 10) : PoSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    PoSwitchBaseComponent.prototype.changeValue = function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    };
    PoSwitchBaseComponent.prototype.eventClick = function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    PoSwitchBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    PoSwitchBaseComponent.prototype.registerOnTouched = function (fn) { };
    PoSwitchBaseComponent.prototype.writeValue = function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoSwitchBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoSwitchBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoSwitchBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoSwitchBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-label-on'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoSwitchBaseComponent.prototype, "setLabelOn", null);
    __decorate([
        Input('p-label-off'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoSwitchBaseComponent.prototype, "setLabelOff", null);
    __decorate([
        Input('p-label-position'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoSwitchBaseComponent.prototype, "setLabelPosition", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoSwitchBaseComponent.prototype, "disabled", null);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoSwitchBaseComponent.prototype, "change", void 0);
    __decorate([
        Output('ngModelChange'),
        __metadata("design:type", EventEmitter)
    ], PoSwitchBaseComponent.prototype, "ngModelChange", void 0);
    PoSwitchBaseComponent = __decorate([
        Directive()
    ], PoSwitchBaseComponent);
    return PoSwitchBaseComponent;
}());
export { PoSwitchBaseComponent };
//# sourceMappingURL=data:application/json;base64,