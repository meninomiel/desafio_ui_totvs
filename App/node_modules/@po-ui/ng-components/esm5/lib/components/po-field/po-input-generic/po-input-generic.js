import { __decorate, __extends, __metadata } from "tslib";
import { AfterViewInit, ElementRef, HostListener, ViewChild, Directive } from '@angular/core';
import { PoInputBaseComponent } from '../po-input/po-input-base.component';
/* tslint:disable:directive-class-suffix */
var PoInputGeneric = /** @class */ (function (_super) {
    __extends(PoInputGeneric, _super);
    function PoInputGeneric(el) {
        var _this = _super.call(this) || this;
        _this.type = 'text';
        _this.el = el;
        return _this;
    }
    Object.defineProperty(PoInputGeneric.prototype, "autocomplete", {
        get: function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    PoInputGeneric.prototype.ngAfterViewInit = function () {
        this.afterViewInit();
    };
    PoInputGeneric.prototype.afterViewInit = function () {
        this.verifyAutoFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    };
    PoInputGeneric.prototype.focus = function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    PoInputGeneric.prototype.setPaddingInput = function () {
        var _this = this;
        setTimeout(function () {
            var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        });
    };
    PoInputGeneric.prototype.verifyAutoFocus = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoInputGeneric.prototype.onKeydown = function (e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    };
    PoInputGeneric.prototype.onKeyup = function (e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    };
    PoInputGeneric.prototype.eventOnInput = function (e) {
        var value = '';
        if (!this.mask) {
            value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
        }
        else {
            this.objMask.blur(e);
            this.inputEl.nativeElement.value = this.objMask.valueToInput;
            value = this.objMask.valueToModel;
        }
        this.callOnChange(value);
    };
    PoInputGeneric.prototype.validMaxLength = function (maxlength, value) {
        return (maxlength || maxlength === 0) && value.length > maxlength
            ? value.toString().substring(0, maxlength)
            : value;
    };
    PoInputGeneric.prototype.eventOnFocus = function (e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    PoInputGeneric.prototype.eventOnBlur = function (e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    };
    PoInputGeneric.prototype.controlChangeEmitter = function () {
        var _this = this;
        var elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(function () {
                _this.change.emit(elementValue);
            }, 200);
        }
    };
    PoInputGeneric.prototype.eventOnClick = function (e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    };
    PoInputGeneric.prototype.hasInvalidClass = function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    PoInputGeneric.prototype.getErrorPattern = function () {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    };
    PoInputGeneric.prototype.validateClassesForPattern = function () {
        var value = this.getScreenValue();
        var element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    };
    PoInputGeneric.prototype.verifyPattern = function (pattern, value) {
        return new RegExp(pattern).test(value);
    };
    PoInputGeneric.prototype.clear = function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    PoInputGeneric.prototype.writeValueModel = function (value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    };
    PoInputGeneric.prototype.getScreenValue = function () {
        var screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
        if (this.type === 'number') {
            var parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    };
    PoInputGeneric.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('inp', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoInputGeneric.prototype, "inputEl", void 0);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PoInputGeneric.prototype, "onKeydown", null);
    __decorate([
        HostListener('keyup', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PoInputGeneric.prototype, "onKeyup", null);
    PoInputGeneric = __decorate([
        Directive(),
        __metadata("design:paramtypes", [ElementRef])
    ], PoInputGeneric);
    return PoInputGeneric;
}(PoInputBaseComponent));
export { PoInputGeneric };
//# sourceMappingURL=data:application/json;base64,