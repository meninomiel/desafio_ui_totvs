import { __assign, __decorate, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
var poRichTextDefaultColor = '#000000';
var PoRichTextToolbarComponent = /** @class */ (function () {
    function PoRichTextToolbarComponent(languageService) {
        var _this = this;
        this.languageService = languageService;
        this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: this.literals.insertLink + " (Ctrl + K)",
                action: function () { return _this.modal.emit(PoRichTextModalType.Link); }
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: function () { return _this.modal.emit(PoRichTextModalType.Image); }
            }
        ];
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
    }
    Object.defineProperty(PoRichTextToolbarComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        set: function (value) {
            this._readonly = value;
            this.toggleDisableButtons(this._readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextToolbarComponent.prototype, "isInternetExplorer", {
        get: function () {
            return isIE();
        },
        enumerable: true,
        configurable: true
    });
    PoRichTextToolbarComponent.prototype.ngAfterViewInit = function () {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    };
    PoRichTextToolbarComponent.prototype.changeTextColor = function (value) {
        var command = 'foreColor';
        this.command.emit({ command: command, value: value });
    };
    PoRichTextToolbarComponent.prototype.setButtonsStates = function (obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
            this.formatButtons.forEach(function (button) { return (button.selected = obj.commands.includes(button.command)); });
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    };
    PoRichTextToolbarComponent.prototype.shortcutTrigger = function () {
        this.modal.emit(PoRichTextModalType.Link);
    };
    PoRichTextToolbarComponent.prototype.emitAlignCommand = function (command) {
        var index = this.alignButtons.findIndex(function (btn) { return btn.command === command; });
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    };
    PoRichTextToolbarComponent.prototype.emitCommand = function (command) {
        this.command.emit(command);
    };
    PoRichTextToolbarComponent.prototype.removeButtonFocus = function () {
        var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(function (button) { return button.setAttribute('tabindex', '-1'); });
    };
    PoRichTextToolbarComponent.prototype.setColorInColorPicker = function (color) {
        this.colorPickerInput.nativeElement.value = color;
    };
    PoRichTextToolbarComponent.prototype.toggleDisableButtons = function (state) {
        this.alignButtons.forEach(function (button) { return (button.disabled = state); });
        this.formatButtons.forEach(function (button) { return (button.disabled = state); });
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    };
    PoRichTextToolbarComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    __decorate([
        ViewChild('colorPickerInput', { read: ElementRef }),
        __metadata("design:type", ElementRef)
    ], PoRichTextToolbarComponent.prototype, "colorPickerInput", void 0);
    __decorate([
        ViewChild('toolbarElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoRichTextToolbarComponent.prototype, "toolbarElement", void 0);
    __decorate([
        Input('p-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoRichTextToolbarComponent.prototype, "readonly", null);
    __decorate([
        Output('p-command'),
        __metadata("design:type", Object)
    ], PoRichTextToolbarComponent.prototype, "command", void 0);
    __decorate([
        Output('p-modal'),
        __metadata("design:type", Object)
    ], PoRichTextToolbarComponent.prototype, "modal", void 0);
    PoRichTextToolbarComponent = __decorate([
        Component({
            selector: 'po-rich-text-toolbar',
            template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [PoLanguageService])
    ], PoRichTextToolbarComponent);
    return PoRichTextToolbarComponent;
}());
export { PoRichTextToolbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yaWNoLXRleHQvcG8tcmljaC10ZXh0LXRvb2xiYXIvcG8tcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUd6RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUc1RSxJQUFNLHNCQUFzQixHQUFHLFNBQVMsQ0FBQztBQU16QztJQXVHRSxvQ0FBb0IsZUFBa0M7UUFBdEQsaUJBQTBEO1FBQXRDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQXBHN0MsYUFBUSxnQkFDWix5QkFBeUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFDckU7UUFFRixpQkFBWSxHQUE0QztZQUN0RDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsSUFBSSxFQUFFLG9CQUFvQjtnQkFDMUIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQztnQkFDdkQsUUFBUSxFQUFFLElBQUk7YUFDZjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixJQUFJLEVBQUUsc0JBQXNCO2dCQUM1QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDO2FBQzFEO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLGNBQWM7Z0JBQ3ZCLElBQUksRUFBRSxxQkFBcUI7Z0JBQzNCLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUs7Z0JBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUM7YUFDekQ7WUFDRDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsSUFBSSxFQUFFLHVCQUF1QjtnQkFDN0IsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTztnQkFDOUIsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQzthQUN4RDtTQUNGLENBQUM7UUFFRixrQkFBYSxHQUE0QztZQUN2RDtnQkFDRSxPQUFPLEVBQUUsTUFBTTtnQkFDZixJQUFJLEVBQUUsbUJBQW1CO2dCQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUMzQixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQzthQUM1QztZQUNEO2dCQUNFLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixJQUFJLEVBQUUscUJBQXFCO2dCQUMzQixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzthQUM5QztZQUNEO2dCQUNFLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixJQUFJLEVBQUUsd0JBQXdCO2dCQUM5QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTO2dCQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQzthQUNqRDtTQUNGLENBQUM7UUFFRixnQkFBVyxHQUE0QztZQUNyRDtnQkFDRSxPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixJQUFJLEVBQUUsY0FBYztnQkFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYTtnQkFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQzthQUMzRDtTQUNGLENBQUM7UUFFRixnQkFBVyxHQUE0QztZQUNyRDtnQkFDRSxPQUFPLEVBQUUsWUFBWTtnQkFDckIsSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLE9BQU8sRUFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsZ0JBQWE7Z0JBQ2pELE1BQU0sRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQXpDLENBQXlDO2FBQ3hEO1NBQ0YsQ0FBQztRQUVGLGlCQUFZLEdBQTZCO1lBQ3ZDO2dCQUNFLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7Z0JBQ2xDLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLE1BQU0sRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQTFDLENBQTBDO2FBQ3pEO1NBQ0YsQ0FBQztRQWVtQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQStDLENBQUM7UUFFNUUsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFNTSxDQUFDO0lBakJyQyxzQkFBSSxnREFBUTthQUtqQztZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO2FBUG9CLFVBQWEsS0FBYztZQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBVUQsc0JBQUksMERBQWtCO2FBQXRCO1lBQ0UsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQUlELG9EQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsb0RBQWUsR0FBZixVQUFnQixLQUFLO1FBQ25CLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQscURBQWdCLEdBQWhCLFVBQWlCLEdBQWtEO1FBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUF6RCxDQUF5RCxDQUFDLENBQUM7WUFDL0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQXpELENBQXlELENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xGLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEYsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUM7SUFFRCxvREFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLHFEQUFnQixHQUF4QixVQUF5QixPQUFlO1FBQ3RDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUUxRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUMzQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTyxnREFBVyxHQUFuQixVQUFvQixPQUFlO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTyxzREFBaUIsR0FBekI7UUFDRSxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3RSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU8sMERBQXFCLEdBQTdCLFVBQThCLEtBQWE7UUFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3BELENBQUM7SUFFTyx5REFBb0IsR0FBNUIsVUFBNkIsS0FBYztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsRUFBekIsQ0FBeUIsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEMsQ0FBQzs7Z0JBekRvQyxpQkFBaUI7O0lBckJEO1FBQXBELFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztrQ0FBbUIsVUFBVTt3RUFBQztJQUVuQztRQUE5QyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQWlCLFVBQVU7c0VBQUM7SUFFckQ7UUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7OzhEQUduQjtJQU1vQjtRQUFwQixNQUFNLENBQUMsV0FBVyxDQUFDOzsrREFBMkU7SUFFNUU7UUFBbEIsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7NkRBQWlDO0lBakd4QywwQkFBMEI7UUFKdEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxzNUNBQW9EO1NBQ3JELENBQUM7eUNBd0dxQyxpQkFBaUI7T0F2RzNDLDBCQUEwQixDQWlLdEM7SUFBRCxpQ0FBQztDQUFBLEFBaktELElBaUtDO1NBaktZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNJRSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUG9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi8uLi8uLi9wby1idXR0b24tZ3JvdXAnO1xuaW1wb3J0IHsgcG9SaWNoVGV4dExpdGVyYWxzRGVmYXVsdCB9IGZyb20gJy4uL3BvLXJpY2gtdGV4dC1saXRlcmFscyc7XG5pbXBvcnQgeyBQb1JpY2hUZXh0TW9kYWxUeXBlIH0gZnJvbSAnLi4vZW51bXMvcG8tcmljaC10ZXh0LW1vZGFsLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBQb1JpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tcmljaC10ZXh0LXRvb2xiYXItYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcblxuY29uc3QgcG9SaWNoVGV4dERlZmF1bHRDb2xvciA9ICcjMDAwMDAwJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcmljaC10ZXh0LXRvb2xiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUmljaFRleHRUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByaXZhdGUgX3JlYWRvbmx5OiBib29sZWFuO1xuXG4gIHJlYWRvbmx5IGxpdGVyYWxzID0ge1xuICAgIC4uLnBvUmljaFRleHRMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpXVxuICB9O1xuXG4gIGFsaWduQnV0dG9uczogQXJyYXk8UG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+ID0gW1xuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdqdXN0aWZ5bGVmdCcsXG4gICAgICBpY29uOiAncG8taWNvbi1hbGlnbi1sZWZ0JyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMubGVmdCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0QWxpZ25Db21tYW5kLmJpbmQodGhpcywgJ2p1c3RpZnlsZWZ0JyksXG4gICAgICBzZWxlY3RlZDogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ2p1c3RpZnljZW50ZXInLFxuICAgICAgaWNvbjogJ3BvLWljb24tYWxpZ24tY2VudGVyJyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMuY2VudGVyLFxuICAgICAgYWN0aW9uOiB0aGlzLmVtaXRBbGlnbkNvbW1hbmQuYmluZCh0aGlzLCAnanVzdGlmeWNlbnRlcicpXG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAnanVzdGlmeXJpZ2h0JyxcbiAgICAgIGljb246ICdwby1pY29uLWFsaWduLXJpZ2h0JyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMucmlnaHQsXG4gICAgICBhY3Rpb246IHRoaXMuZW1pdEFsaWduQ29tbWFuZC5iaW5kKHRoaXMsICdqdXN0aWZ5cmlnaHQnKVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ2p1c3RpZnlmdWxsJyxcbiAgICAgIGljb246ICdwby1pY29uLWFsaWduLWp1c3RpZnknLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5qdXN0aWZ5LFxuICAgICAgYWN0aW9uOiB0aGlzLmVtaXRBbGlnbkNvbW1hbmQuYmluZCh0aGlzLCAnanVzdGlmeWZ1bGwnKVxuICAgIH1cbiAgXTtcblxuICBmb3JtYXRCdXR0b25zOiBBcnJheTxQb1JpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbT4gPSBbXG4gICAge1xuICAgICAgY29tbWFuZDogJ2JvbGQnLFxuICAgICAgaWNvbjogJ3BvLWljb24tdGV4dC1ib2xkJyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMuYm9sZCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0Q29tbWFuZC5iaW5kKHRoaXMsICdib2xkJylcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdpdGFsaWMnLFxuICAgICAgaWNvbjogJ3BvLWljb24tdGV4dC1pdGFsaWMnLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5pdGFsaWMsXG4gICAgICBhY3Rpb246IHRoaXMuZW1pdENvbW1hbmQuYmluZCh0aGlzLCAnaXRhbGljJylcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICd1bmRlcmxpbmUnLFxuICAgICAgaWNvbjogJ3BvLWljb24tdGV4dC11bmRlcmxpbmUnLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy51bmRlcmxpbmUsXG4gICAgICBhY3Rpb246IHRoaXMuZW1pdENvbW1hbmQuYmluZCh0aGlzLCAndW5kZXJsaW5lJylcbiAgICB9XG4gIF07XG5cbiAgbGlzdEJ1dHRvbnM6IEFycmF5PFBvUmljaFRleHRUb29sYmFyQnV0dG9uR3JvdXBJdGVtPiA9IFtcbiAgICB7XG4gICAgICBjb21tYW5kOiAnaW5zZXJ0VW5vcmRlcmVkTGlzdCcsXG4gICAgICBpY29uOiAncG8taWNvbi1saXN0JyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMudW5vcmRlcmVkTGlzdCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0Q29tbWFuZC5iaW5kKHRoaXMsICdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgICB9XG4gIF07XG5cbiAgbGlua0J1dHRvbnM6IEFycmF5PFBvUmljaFRleHRUb29sYmFyQnV0dG9uR3JvdXBJdGVtPiA9IFtcbiAgICB7XG4gICAgICBjb21tYW5kOiAnQ3JlYXRlbGluaycsXG4gICAgICBpY29uOiAncG8taWNvbi1saW5rJyxcbiAgICAgIHRvb2x0aXA6IGAke3RoaXMubGl0ZXJhbHMuaW5zZXJ0TGlua30gKEN0cmwgKyBLKWAsXG4gICAgICBhY3Rpb246ICgpID0+IHRoaXMubW9kYWwuZW1pdChQb1JpY2hUZXh0TW9kYWxUeXBlLkxpbmspXG4gICAgfVxuICBdO1xuXG4gIG1lZGlhQnV0dG9uczogQXJyYXk8UG9CdXR0b25Hcm91cEl0ZW0+ID0gW1xuICAgIHtcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMuaW5zZXJ0SW1hZ2UsXG4gICAgICBpY29uOiAncG8taWNvbi1waWN0dXJlJyxcbiAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5tb2RhbC5lbWl0KFBvUmljaFRleHRNb2RhbFR5cGUuSW1hZ2UpXG4gICAgfVxuICBdO1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbG9yUGlja2VySW5wdXQnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgY29sb3JQaWNrZXJJbnB1dDogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKCd0b29sYmFyRWxlbWVudCcsIHsgc3RhdGljOiB0cnVlIH0pIHRvb2xiYXJFbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgncC1yZWFkb25seScpIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3JlYWRvbmx5ID0gdmFsdWU7XG4gICAgdGhpcy50b2dnbGVEaXNhYmxlQnV0dG9ucyh0aGlzLl9yZWFkb25seSk7XG4gIH1cblxuICBnZXQgcmVhZG9ubHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRvbmx5O1xuICB9XG5cbiAgQE91dHB1dCgncC1jb21tYW5kJykgY29tbWFuZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgeyBjb21tYW5kOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4oKTtcblxuICBAT3V0cHV0KCdwLW1vZGFsJykgbW9kYWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBnZXQgaXNJbnRlcm5ldEV4cGxvcmVyKCkge1xuICAgIHJldHVybiBpc0lFKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucmVtb3ZlQnV0dG9uRm9jdXMoKTtcbiAgICB0aGlzLnNldENvbG9ySW5Db2xvclBpY2tlcihwb1JpY2hUZXh0RGVmYXVsdENvbG9yKTtcbiAgfVxuXG4gIGNoYW5nZVRleHRDb2xvcih2YWx1ZSkge1xuICAgIGNvbnN0IGNvbW1hbmQgPSAnZm9yZUNvbG9yJztcblxuICAgIHRoaXMuY29tbWFuZC5lbWl0KHsgY29tbWFuZCwgdmFsdWUgfSk7XG4gIH1cblxuICBzZXRCdXR0b25zU3RhdGVzKG9iajogeyBjb21tYW5kczogQXJyYXk8c3RyaW5nPjsgaGV4Q29sb3I6IHN0cmluZyB9KSB7XG4gICAgaWYgKCF0aGlzLnJlYWRvbmx5KSB7XG4gICAgICB0aGlzLmFsaWduQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiAoYnV0dG9uLnNlbGVjdGVkID0gb2JqLmNvbW1hbmRzLmluY2x1ZGVzKGJ1dHRvbi5jb21tYW5kKSkpO1xuICAgICAgdGhpcy5mb3JtYXRCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24uc2VsZWN0ZWQgPSBvYmouY29tbWFuZHMuaW5jbHVkZXMoYnV0dG9uLmNvbW1hbmQpKSk7XG4gICAgICB0aGlzLmxpc3RCdXR0b25zWzBdLnNlbGVjdGVkID0gb2JqLmNvbW1hbmRzLmluY2x1ZGVzKHRoaXMubGlzdEJ1dHRvbnNbMF0uY29tbWFuZCk7XG4gICAgICB0aGlzLmxpbmtCdXR0b25zWzBdLnNlbGVjdGVkID0gb2JqLmNvbW1hbmRzLmluY2x1ZGVzKHRoaXMubGlua0J1dHRvbnNbMF0uY29tbWFuZCk7XG4gICAgICB0aGlzLnNldENvbG9ySW5Db2xvclBpY2tlcihvYmouaGV4Q29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIHNob3J0Y3V0VHJpZ2dlcigpIHtcbiAgICB0aGlzLm1vZGFsLmVtaXQoUG9SaWNoVGV4dE1vZGFsVHlwZS5MaW5rKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdEFsaWduQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuYWxpZ25CdXR0b25zLmZpbmRJbmRleChidG4gPT4gYnRuLmNvbW1hbmQgPT09IGNvbW1hbmQpO1xuXG4gICAgaWYgKHRoaXMuYWxpZ25CdXR0b25zW2luZGV4XS5zZWxlY3RlZCkge1xuICAgICAgdGhpcy5hbGlnbkJ1dHRvbnNbaW5kZXhdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5jb21tYW5kLmVtaXQoY29tbWFuZCk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgIHRoaXMuY29tbWFuZC5lbWl0KGNvbW1hbmQpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVCdXR0b25Gb2N1cygpIHtcbiAgICBjb25zdCBidXR0b25zID0gdGhpcy50b29sYmFyRWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Q29sb3JJbkNvbG9yUGlja2VyKGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNvbG9yUGlja2VySW5wdXQubmF0aXZlRWxlbWVudC52YWx1ZSA9IGNvbG9yO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVEaXNhYmxlQnV0dG9ucyhzdGF0ZTogYm9vbGVhbikge1xuICAgIHRoaXMuYWxpZ25CdXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24uZGlzYWJsZWQgPSBzdGF0ZSkpO1xuICAgIHRoaXMuZm9ybWF0QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiAoYnV0dG9uLmRpc2FibGVkID0gc3RhdGUpKTtcbiAgICB0aGlzLmxpc3RCdXR0b25zWzBdLmRpc2FibGVkID0gc3RhdGU7XG4gICAgdGhpcy5saW5rQnV0dG9uc1swXS5kaXNhYmxlZCA9IHN0YXRlO1xuICAgIHRoaXMubWVkaWFCdXR0b25zWzBdLmRpc2FibGVkID0gc3RhdGU7XG4gIH1cbn1cbiJdfQ==