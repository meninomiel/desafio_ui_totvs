import { __assign, __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt, uuid } from './../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
var poCheckboxGroupColumnsDefaultLength = 6;
var poCheckboxGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
var PoCheckboxGroupBaseComponent = /** @class */ (function () {
    function PoCheckboxGroupBaseComponent() {
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = poCheckboxGroupColumnsDefaultLength;
        this._columns = poCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        /** Evento disparado ao alterar valor do campo */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
         *
         * @default `2`
         *
         */
        set: function (value) {
            var columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todos os itens do checkbox.
         *
         * @default `false`
         */
        set: function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "indeterminate", {
        get: function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * @default `false`
         */
        set: function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        /**
         * @optional
         *
         * @description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
         */
        set: function (value) {
            this._options = Array.isArray(value) ? value : [];
            this.removeDuplicatedOptions();
            this.setCheckboxGroupOptionsView(this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    PoCheckboxGroupBaseComponent.prototype.changeValue = function () {
        var value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    };
    PoCheckboxGroupBaseComponent.prototype.checkIndeterminate = function () {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    };
    PoCheckboxGroupBaseComponent.prototype.checkOption = function (value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    };
    PoCheckboxGroupBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    PoCheckboxGroupBaseComponent.prototype.registerOnTouched = function (fn) { };
    PoCheckboxGroupBaseComponent.prototype.writeValue = function (optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    };
    PoCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoCheckboxGroupBaseComponent.prototype.validate = function (abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
            this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false
                }
            };
        }
    };
    PoCheckboxGroupBaseComponent.prototype.validateModel = function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    PoCheckboxGroupBaseComponent.prototype.checkColumnsRange = function (columns, maxColumns) {
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    PoCheckboxGroupBaseComponent.prototype.checkOptionModel = function (optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    };
    PoCheckboxGroupBaseComponent.prototype.generateCheckOptions = function (optionsModel) {
        var _this = this;
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach(function (option) {
                _this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach(function (option) {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                _this.checkedOptions = optionsModel;
            });
        }
    };
    PoCheckboxGroupBaseComponent.prototype.getGridSystemColumns = function (columns, maxColumns) {
        var gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    };
    PoCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = function () {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return Object.values(this.checkedOptions).every(function (value) { return value === false; });
        }
        return false;
    };
    PoCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = function () {
        var _this = this;
        this.options.forEach(function (option, index) {
            var duplicatedIndex = _this.options.findIndex(function (optionFind) { return optionFind.value === option.value; }) === index;
            if (!duplicatedIndex) {
                _this.options.splice(_this.options.indexOf(option), 1);
            }
        });
    };
    PoCheckboxGroupBaseComponent.prototype.setCheckboxGroupOptionsView = function (optionsList) {
        this.checkboxGroupOptionsView = optionsList.map(function (option) {
            return __assign(__assign({}, option), { id: uuid() });
        });
    };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoCheckboxGroupBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoCheckboxGroupBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-columns'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoCheckboxGroupBaseComponent.prototype, "columns", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoCheckboxGroupBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoCheckboxGroupBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-indeterminate'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoCheckboxGroupBaseComponent.prototype, "indeterminate", null);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoCheckboxGroupBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoCheckboxGroupBaseComponent.prototype, "optional", void 0);
    __decorate([
        Input('p-options'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoCheckboxGroupBaseComponent.prototype, "options", null);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoCheckboxGroupBaseComponent.prototype, "required", null);
    __decorate([
        Output('ngModelChange'),
        __metadata("design:type", EventEmitter)
    ], PoCheckboxGroupBaseComponent.prototype, "ngModelChange", void 0);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoCheckboxGroupBaseComponent.prototype, "change", void 0);
    PoCheckboxGroupBaseComponent = __decorate([
        Directive()
    ], PoCheckboxGroupBaseComponent);
    return PoCheckboxGroupBaseComponent;
}());
export { PoCheckboxGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,