import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
var PoCalendarService = /** @class */ (function () {
    function PoCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    PoCalendarService.prototype.weekStartDate = function (date) {
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    PoCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        var weeks = [];
        var week = [];
        var i = 0;
        var date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    };
    PoCalendarService.prototype.monthDays = function (year, month) {
        var getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    PoCalendarService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], PoCalendarService);
    return PoCalendarService;
}());
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tZGF0ZXBpY2tlci9wby1jYWxlbmRhci9wby1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRzNEO0lBR0U7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLGFBQWE7SUFDdEMsQ0FBQztJQUVELHlDQUFhLEdBQWIsVUFBYyxJQUFTO1FBQ3JCLElBQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDL0MsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsc0NBQVUsR0FBVixVQUFXLElBQVMsRUFBRSxLQUFVLEVBQUUsWUFBd0IsRUFBRSxhQUF5QjtRQUFuRCw2QkFBQSxFQUFBLG1CQUF3QjtRQUFFLDhCQUFBLEVBQUEsb0JBQXlCO1FBQ25GLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUUsRUFBRTtZQUN4RCxNQUFNLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsSUFBTSxLQUFLLEdBQWUsRUFBRSxDQUFDO1FBQzdCLElBQUksSUFBSSxHQUFlLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxHQUFHO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNYLFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHFDQUFTLEdBQVQsVUFBVSxJQUFTLEVBQUUsS0FBVTtRQUM3QixJQUFNLFlBQVksR0FBRyxVQUFVLElBQVM7WUFDdEMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBNUNVLGlCQUFpQjtRQUQ3QixVQUFVLEVBQUU7O09BQ0EsaUJBQWlCLENBNkM3QjtJQUFELHdCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E3Q1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBzZXRZZWFyRnJvbTBUbzEwMCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhclNlcnZpY2Uge1xuICBmaXJzdFdlZWtEYXk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZpcnN0V2Vla0RheSA9IDA7IC8vIDAgPSBzdW5kYXlcbiAgfVxuXG4gIHdlZWtTdGFydERhdGUoZGF0ZTogYW55KSB7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIHdoaWxlIChzdGFydERhdGUuZ2V0RGF5KCkgIT09IHRoaXMuZmlyc3RXZWVrRGF5KSB7XG4gICAgICBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBzdGFydERhdGU7XG4gIH1cblxuICBtb250aERhdGVzKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5Rm9ybWF0dGVyOiBhbnkgPSBudWxsLCB3ZWVrRm9ybWF0dGVyOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBtb250aCAhPT0gJ251bWJlcicgfHwgbW9udGggPCAwIHx8IG1vbnRoID4gMTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdtb250aCBtdXN0IGJlIGEgbnVtYmVyIChKYW4gaXMgMCknKTtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWVrczogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCB3ZWVrOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuICAgIGRhdGUgPSB0aGlzLndlZWtTdGFydERhdGUoZGF0ZSk7XG5cbiAgICBkbyB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHdlZWsucHVzaChkYXlGb3JtYXR0ZXIgPyBkYXlGb3JtYXR0ZXIoZGF0ZSkgOiBkYXRlKTtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICB3ZWVrcy5wdXNoKHdlZWtGb3JtYXR0ZXIgPyB3ZWVrRm9ybWF0dGVyKHdlZWspIDogd2Vlayk7XG4gICAgICB3ZWVrID0gW107XG4gICAgfSB3aGlsZSAoZGF0ZS5nZXRNb250aCgpIDw9IG1vbnRoICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0geWVhcik7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgbW9udGhEYXlzKHllYXI6IGFueSwgbW9udGg6IGFueSkge1xuICAgIGNvbnN0IGdldERheU9yWmVybyA9IGZ1bmN0aW9uIChkYXRlOiBhbnkpIHtcbiAgICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoID8gZGF0ZSA6IDA7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5tb250aERhdGVzKHllYXIsIG1vbnRoLCBnZXREYXlPclplcm8pO1xuICB9XG59XG4iXX0=