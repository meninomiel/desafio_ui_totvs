import { __decorate, __metadata } from "tslib";
import { Injectable, EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupModalComponent } from '../po-lookup-modal/po-lookup-modal.component';
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
var PoLookupModalService = /** @class */ (function () {
    function PoLookupModalService(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     */
    PoLookupModalService.prototype.openModal = function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe(function ($event) {
            _this.selectValue($event);
        });
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    PoLookupModalService.prototype.selectValue = function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    PoLookupModalService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    PoLookupModalService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [PoComponentInjectorService])
    ], PoLookupModalService);
    return PoLookupModalService;
}());
export { PoLookupModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBSXRILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXRGOzs7O0dBSUc7QUFFSDtJQUtFLDhCQUFvQixtQkFBK0M7UUFBL0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE0QjtRQUozRCxpQkFBWSxHQUFzQixJQUFJLENBQUM7UUFFL0MscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFUSxDQUFDO0lBRXZFOzs7Ozs7OztPQVFHO0lBQ0gsd0NBQVMsR0FBVCxVQUFVLE1BTVQ7UUFORCxpQkFvQkM7UUFiUyxJQUFBLHdCQUFPLEVBQUUsd0JBQU8sRUFBRSxrQ0FBWSxFQUFFLG9CQUFLLEVBQUUsMEJBQVEsQ0FBWTtRQUVuRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUMvQyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsc0VBQXNFO0lBQ3RFLDBDQUFXLEdBQVgsVUFBWSxLQUFLO1FBQ2YsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOztnQkF2Q3dDLDBCQUEwQjs7SUFMeEQsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTt5Q0FNOEIsMEJBQTBCO09BTHhELG9CQUFvQixDQTZDaEM7SUFBRCwyQkFBQztDQUFBLEFBN0NELElBNkNDO1NBN0NZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbG9va3VwLW1vZGFsL3BvLWxvb2t1cC1tb2RhbC5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBQbyBMb29rdXAgTW9kYWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cE1vZGFsU2VydmljZSB7XG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PiA9IG51bGw7XG5cbiAgc2VsZWN0VmFsdWVFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgYWJyaXIgYSBtb2RhbCBkZSBidXNjYSBkYXMgaW5mb3JtYcOnw7Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHNlcnZpY2Uge1BvTG9va3VwRmlsdGVyfSBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIHJlYWxpemFyIGEgYnVzY2Egbm8gc2VydmnDp28gZG9zIGRhZG9zLlxuICAgKiBAcGFyYW0gY29sdW1ucyB7QXJyYXk8UG9Mb29rdXBDb2x1bW4+fSBEZWZpbmnDp8OjbyBkYXMgY29sdW5hcyBuYSBtb2RhbCBkZSBidXNjYS5cbiAgICogQHBhcmFtIGZpbHRlclBhcmFtcyB7YW55fSBWYWxvciBxdWUgc2Vyw6EgcmVwYXNzYWRvIGFvcyBtw6l0b2RvcyBkbyBzZXJ2acOnbyBwYXJhIGF1eGlsaWFyIG5vIGZpbHRybyBkb3MgZGFkb3MuXG4gICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBEZWZpbmnDp8OjbyBkbyB0w610dWxvIGRhIG1vZGFsLlxuICAgKiBAcGFyYW0gbGl0ZXJhbHMge1BvTG9va3VwTGl0ZXJhbHN9IExpdGVyYWlzIHV0aWxpemFkYXMgbm8gY29tcG9uZW50ZS5cbiAgICovXG4gIG9wZW5Nb2RhbChwYXJhbXM6IHtcbiAgICBzZXJ2aWNlOiBQb0xvb2t1cEZpbHRlcjtcbiAgICBjb2x1bW5zOiBBcnJheTxQb0xvb2t1cENvbHVtbj47XG4gICAgZmlsdGVyUGFyYW1zOiBhbnk7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBsaXRlcmFsczogUG9Mb29rdXBMaXRlcmFscztcbiAgfSk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2VydmljZSwgY29sdW1ucywgZmlsdGVyUGFyYW1zLCB0aXRsZSwgbGl0ZXJhbHMgfSA9IHBhcmFtcztcblxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9Mb29rdXBNb2RhbENvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb2x1bW5zID0gY29sdW1ucztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJTZXJ2aWNlID0gc2VydmljZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJQYXJhbXMgPSBmaWx0ZXJQYXJhbXM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubGl0ZXJhbHMgPSBsaXRlcmFscztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5tb2RlbC5zdWJzY3JpYmUoJGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWUoJGV2ZW50KTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2Uub3Blbk1vZGFsKCk7XG4gIH1cblxuICAvLyBFc3RlIG1ldG9kbyDDqSBjaGFtYWRvIHF1YW5kbyDDqSBzZWxlY2lvbmFkbyB1bSBpdGVtIG5hIGxvb2t1cCBtb2RhbC5cbiAgc2VsZWN0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWVFdmVudC5lbWl0KHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICB9XG59XG4iXX0=