import { __assign, __decorate, __metadata, __read, __spread, __values } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, convertToBoolean, isTypeof, poLocaleDefault, validValue } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
var PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
var PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
var PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
export var poComboLiteralsDefault = {
    en: {
        noData: 'No data found'
    },
    es: {
        noData: 'Datos no encontrados'
    },
    pt: {
        noData: 'Nenhum dado encontrado'
    },
    ru: {
        noData: 'Данные не найдены'
    }
};
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 */
var PoComboBaseComponent = /** @class */ (function () {
    function PoComboBaseComponent() {
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = PoComboFilterMode.startsWith;
        this._options = [];
        this._required = false;
        this._sort = false;
        this.cacheStaticOptions = [];
        this.comboOptionsList = [];
        this.cacheOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.previousSearchValue = '';
        this.visibleOptions = [];
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Mensagem apresentada enquanto o campo estiver vazio. */
        this.placeholder = '';
        /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoComboBaseComponent.prototype, "debounceTime", {
        get: function () {
            return this._debounceTime;
        },
        /**
         * @optional
         *
         * @description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`p-filter-service`).
         *
         * @default `400`
         */
        set: function (value) {
            var parsedValue = parseInt(value, 10);
            this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "disabledInitFilter", {
        get: function () {
            return this._disabledInitFilter;
        },
        /**
         * @optional
         *
         * @description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * @default `false`
         *
         */
        set: function (value) {
            this._disabledInitFilter = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "fieldValue", {
        get: function () {
            return this._fieldValue;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * @default `value`
         */
        set: function (value) {
            this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldValue = this._fieldValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "fieldLabel", {
        get: function () {
            return this._fieldLabel;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * @default `label`
         */
        set: function (value) {
            this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldLabel = this._fieldLabel;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterMinlength", {
        get: function () {
            return this._filterMinlength;
        },
        /**
         * @optional
         *
         * @description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * @default `0`
         */
        set: function (value) {
            var parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
            this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "changeOnEnter", {
        get: function () {
            return this._changeOnEnter;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * @default `false`
         */
        set: function (changeOnEnter) {
            this._changeOnEnter = convertToBoolean(changeOnEnter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "sort", {
        get: function () {
            return this._sort;
        },
        /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
        set: function (sort) {
            this._sort = convertToBoolean(sort);
            this.comboListDefinitions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        /**
         * Nesta propriedade define a lista de opções do `po-combo`.
         *
         * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
         * - Utilize `PoComboOption` para lista de opções simples.
         * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
         *
         * **Importante:**
         * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
         * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
         * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
         */
        set: function (options) {
            this._options = Array.isArray(options) ? options : [];
            this.comboListDefinitions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterMode", {
        get: function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
         *
         * @default `startsWith`
         */
        set: function (filterMode) {
            this._filterMode = filterMode in PoComboFilterMode ? filterMode : PoComboFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = PoComboFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = PoComboFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = PoComboFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterParams", {
        get: function () {
            return this._filterParams;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
         *
         * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
         */
        set: function (filterParams) {
            this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poComboLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-combo`.
         *
         * Para utilizar basta passar a literal que deseja customizar:
         *
         * ```
         *  const customLiterals: PoComboLiterals = {
         *    noData: 'Nenhum valor'
         *  };
         * ```
         *
         * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-combo
         *   [p-literals]="customLiterals">
         * </po-combo>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poComboLiteralsDefault[poLocaleDefault]), poComboLiteralsDefault[browserLanguage()]), value);
            }
            else {
                this._literals = poComboLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "isOptionGroupList", {
        get: function () {
            return this._options.length && this._options[0].hasOwnProperty('options');
        },
        enumerable: true,
        configurable: true
    });
    PoComboBaseComponent.prototype.ngOnInit = function () {
        this.updateComboList();
    };
    PoComboBaseComponent.prototype.onInitService = function () {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    };
    PoComboBaseComponent.prototype.setService = function (service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties(service, this.fieldLabel, this.fieldValue);
            }
        }
    };
    PoComboBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
        switch (filterMode) {
            case PoComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoComboFilterMode.contains:
                return this.contains(search, option);
            case PoComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    PoComboBaseComponent.prototype.startsWith = function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    PoComboBaseComponent.prototype.contains = function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    PoComboBaseComponent.prototype.endsWith = function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    PoComboBaseComponent.prototype.getOptionFromValue = function (value, options) {
        var _this = this;
        return options ? options.find(function (option) { return _this.isEqual(option.value, value); }) : null;
    };
    PoComboBaseComponent.prototype.getOptionFromLabel = function (label, options) {
        if (options) {
            return options.find(function (option) {
                return option.label.toString().toLowerCase() === label.toString().toLowerCase();
            });
        }
        else {
            return null;
        }
    };
    PoComboBaseComponent.prototype.updateSelectedValue = function (option, isUpdateModel, isWriteValue) {
        if (isUpdateModel === void 0) { isUpdateModel = true; }
        if (isWriteValue === void 0) { isWriteValue = false; }
        var optionLabel = (option && option.label) || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            var optionValue = (option && option.value) || undefined;
            this.updateModel(optionValue, isWriteValue);
        }
    };
    PoComboBaseComponent.prototype.callModelChange = function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    PoComboBaseComponent.prototype.isEqual = function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    PoComboBaseComponent.prototype.searchForLabel = function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            var newOptions_1 = [];
            var addedOptionsGroupTitle_1 = false;
            var optionsGroupTitle_1;
            options.forEach(function (option) {
                if ('options' in option) {
                    addedOptionsGroupTitle_1 = false;
                    return (optionsGroupTitle_1 = option);
                }
                if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                    if (_this.isOptionGroupList && !addedOptionsGroupTitle_1) {
                        newOptions_1.push(optionsGroupTitle_1);
                        addedOptionsGroupTitle_1 = true;
                    }
                    newOptions_1.push(option);
                }
            });
            this.selectedView = newOptions_1[this.isOptionGroupList ? 1 : 0];
            this.updateComboList(newOptions_1);
        }
        else {
            this.updateComboList();
        }
    };
    PoComboBaseComponent.prototype.updateComboList = function (options) {
        var copyOptions = options || __spread(this.comboOptionsList);
        var newOptions = !options && this.selectedValue ? [__assign({}, this.selectedOption)] : copyOptions;
        if (newOptions.length) {
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = copyOptions.find(function (option) { return option.value !== undefined; });
            }
        }
    };
    PoComboBaseComponent.prototype.getNextOption = function (value, options, reverse) {
        var e_1, _a;
        if (reverse === void 0) { reverse = false; }
        var optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
        var optionFound = null;
        var found = false;
        try {
            for (var optionsList_1 = __values(optionsList), optionsList_1_1 = optionsList_1.next(); !optionsList_1_1.done; optionsList_1_1 = optionsList_1.next()) {
                var option = optionsList_1_1.value;
                if (option.value && !optionFound) {
                    optionFound = option;
                }
                if (option.value && found) {
                    return option;
                }
                if (this.isEqual(option.value, value)) {
                    found = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (optionsList_1_1 && !optionsList_1_1.done && (_a = optionsList_1.return)) _a.call(optionsList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return optionFound;
    };
    PoComboBaseComponent.prototype.getIndexSelectedView = function () {
        for (var i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    };
    PoComboBaseComponent.prototype.compareObjects = function (obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    };
    PoComboBaseComponent.prototype.verifyValidOption = function () {
        var inputValue = this.getInputValue();
        var optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
            return;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    };
    // Recebe as alterações do model
    PoComboBaseComponent.prototype.writeValue = function (value) {
        if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
            var option = this.getOptionFromValue(value, this.comboOptionsList);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        else {
            this.updateSelectedValue(null, true, true);
            this.updateComboList();
        }
    };
    PoComboBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    PoComboBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    PoComboBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoComboBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    };
    PoComboBaseComponent.prototype.configAfterSetFilterService = function (service) {
        if (service) {
            this.comboOptionsList = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.comboOptionsList = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    };
    PoComboBaseComponent.prototype.unsubscribeKeyupObservable = function () {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    };
    PoComboBaseComponent.prototype.validateModel = function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    PoComboBaseComponent.prototype.comboListDefinitions = function () {
        this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
        this.cacheStaticOptions = this.comboOptionsList;
        this.updateComboList();
    };
    PoComboBaseComponent.prototype.compareOptions = function (optionA, optionB) {
        var labelA = optionA.label.toString().toLowerCase();
        var labelB = optionB.label.toString().toLowerCase();
        return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
    };
    PoComboBaseComponent.prototype.hasDuplicatedOption = function (options, currentOption, accumulatedGroupOptions) {
        return (options.some(function (option) { return option.label === currentOption; }) ||
            (accumulatedGroupOptions && accumulatedGroupOptions.some(function (option) { return option.label === currentOption; })));
    };
    PoComboBaseComponent.prototype.listingComboOptions = function (comboOptions) {
        var comboOptionsList = comboOptions.concat();
        var verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
        this.sortOptions(verifiedComboOptionsList);
        if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
            return this.verifyComboOptionsGroup(verifiedComboOptionsList);
        }
        return verifiedComboOptionsList;
    };
    PoComboBaseComponent.prototype.sortOptions = function (comboOptionsList) {
        if (comboOptionsList.length > 0 && this.sort) {
            return comboOptionsList.sort(this.compareOptions);
        }
    };
    PoComboBaseComponent.prototype.validateValue = function (currentOption, verifyingOptionsGroup) {
        var label = currentOption.label, options = currentOption.options, value = currentOption.value;
        if (this.isOptionGroupList) {
            return ((validValue(label) && options && options.length > 0) || (verifyingOptionsGroup === true && validValue(value)));
        }
        return validValue(value) && !options;
    };
    PoComboBaseComponent.prototype.verifyComboOptions = function (comboOptions, verifyingOptionsGroup, accumulatedGroupOptions) {
        var _this = this;
        return comboOptions.reduce(function (accumulatedOptions, currentOption) {
            if (!_this.verifyIfHasLabel(currentOption) ||
                _this.hasDuplicatedOption(accumulatedOptions, currentOption.label, accumulatedGroupOptions) ||
                !_this.validateValue(currentOption, verifyingOptionsGroup)) {
                return accumulatedOptions;
            }
            accumulatedOptions.push(currentOption);
            return accumulatedOptions;
        }, []);
    };
    PoComboBaseComponent.prototype.verifyComboOptionsGroup = function (comboOptionsList) {
        var _this = this;
        return comboOptionsList.reduce(function (accumulatedGroupOptions, currentOption) {
            var options = currentOption.options, label = currentOption.label;
            var verifiedComboOptionsGroupList = _this.verifyComboOptions(options, true, accumulatedGroupOptions);
            if (verifiedComboOptionsGroupList.length > 0) {
                _this.sortOptions(verifiedComboOptionsGroupList);
                accumulatedGroupOptions.push.apply(accumulatedGroupOptions, __spread([{ label: label, options: true }], verifiedComboOptionsGroupList));
            }
            return accumulatedGroupOptions;
        }, []);
    };
    PoComboBaseComponent.prototype.verifyIfHasLabel = function (currentOption) {
        var label = currentOption.label, options = currentOption.options, value = currentOption.value;
        if ((this.isOptionGroupList && options && !label) || (!label && !value) || (!this.isOptionGroupList && options)) {
            return false;
        }
        if (!currentOption.label) {
            currentOption.label = currentOption.value.toString();
            return true;
        }
        return true;
    };
    PoComboBaseComponent.prototype.updateInternalVariables = function (option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    };
    PoComboBaseComponent.prototype.updateModel = function (value, fromWriteValue) {
        if (fromWriteValue === void 0) { fromWriteValue = false; }
        if (value !== this.selectedValue) {
            if (!fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(value);
        }
        this.selectedValue = value;
    };
    PoComboBaseComponent.prototype.updateSelectedValueWithOldOption = function () {
        var oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoComboBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoComboBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoComboBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-placeholder'),
        __metadata("design:type", String)
    ], PoComboBaseComponent.prototype, "placeholder", void 0);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoComboBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-filter-service'),
        __metadata("design:type", Object)
    ], PoComboBaseComponent.prototype, "filterService", void 0);
    __decorate([
        Input('p-debounce-time'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoComboBaseComponent.prototype, "debounceTime", null);
    __decorate([
        Input('p-disabled-init-filter'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoComboBaseComponent.prototype, "disabledInitFilter", null);
    __decorate([
        Input('p-field-value'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoComboBaseComponent.prototype, "fieldValue", null);
    __decorate([
        Input('p-field-label'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoComboBaseComponent.prototype, "fieldLabel", null);
    __decorate([
        Input('p-filter-minlength'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoComboBaseComponent.prototype, "filterMinlength", null);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoComboBaseComponent.prototype, "required", null);
    __decorate([
        Input('p-change-on-enter'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoComboBaseComponent.prototype, "changeOnEnter", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoComboBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-icon'),
        __metadata("design:type", String)
    ], PoComboBaseComponent.prototype, "icon", void 0);
    __decorate([
        Input('p-sort'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoComboBaseComponent.prototype, "sort", null);
    __decorate([
        Input('p-options'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoComboBaseComponent.prototype, "options", null);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoComboBaseComponent.prototype, "optional", void 0);
    __decorate([
        Input('p-filter-mode'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoComboBaseComponent.prototype, "filterMode", null);
    __decorate([
        Input('p-filter-params'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoComboBaseComponent.prototype, "filterParams", null);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoComboBaseComponent.prototype, "literals", null);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoComboBaseComponent.prototype, "change", void 0);
    __decorate([
        Output('ngModelChange'),
        __metadata("design:type", EventEmitter)
    ], PoComboBaseComponent.prototype, "ngModelChange", void 0);
    PoComboBaseComponent = __decorate([
        Directive()
    ], PoComboBaseComponent);
    return PoComboBaseComponent;
}());
export { PoComboBaseComponent };
//# sourceMappingURL=data:application/json;base64,