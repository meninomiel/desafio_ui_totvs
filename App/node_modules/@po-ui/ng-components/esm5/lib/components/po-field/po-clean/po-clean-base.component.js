import { __decorate, __metadata } from "tslib";
import { ElementRef, EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
var PoCleanBaseComponent = /** @class */ (function () {
    function PoCleanBaseComponent() {
        /** Valor que será atribuído ao campo quando for clicado no po-clean. */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    PoCleanBaseComponent.prototype.clear = function () {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    };
    PoCleanBaseComponent.prototype.showIcon = function () {
        return (this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly());
    };
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    PoCleanBaseComponent.prototype.hasCleanAttr = function () {
        return this.parentComponent.clean;
    };
    // Este método verifica se o componente pai está desabilitado.
    PoCleanBaseComponent.prototype.isDisabled = function () {
        return this.parentComponent.disabled;
    };
    // Este método verifica se o componente pai está somente leitura.
    PoCleanBaseComponent.prototype.isReadonly = function () {
        return this.parentComponent.readonly;
    };
    __decorate([
        Input('p-element-ref'),
        __metadata("design:type", ElementRef)
    ], PoCleanBaseComponent.prototype, "inputRef", void 0);
    __decorate([
        Input('p-default-value'),
        __metadata("design:type", String)
    ], PoCleanBaseComponent.prototype, "defaultValue", void 0);
    __decorate([
        Output('p-change-event'),
        __metadata("design:type", EventEmitter)
    ], PoCleanBaseComponent.prototype, "changeEvent", void 0);
    PoCleanBaseComponent = __decorate([
        Directive()
    ], PoCleanBaseComponent);
    return PoCleanBaseComponent;
}());
export { PoCleanBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNsZWFuL3BvLWNsZWFuLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRjs7Ozs7OztHQU9HO0FBRUg7SUFBQTtRQUlFLHdFQUF3RTtRQUM5QyxpQkFBWSxHQUFZLEVBQUUsQ0FBQztRQUVyRDs7OztXQUlHO1FBQ3VCLGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFPLENBQUM7SUFrQ3RGLENBQUM7SUE5QkMsb0NBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsdUNBQVEsR0FBUjtRQUNFLE9BQU8sQ0FDTCxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQzlHLENBQUM7SUFDSixDQUFDO0lBRUQsMEZBQTBGO0lBQzFGLHlDQUF5QztJQUNqQywyQ0FBWSxHQUFwQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVELDhEQUE4RDtJQUN0RCx5Q0FBVSxHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQUVELGlFQUFpRTtJQUN6RCx5Q0FBVSxHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQXZDdUI7UUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQztrQ0FBVyxVQUFVOzBEQUFDO0lBR25CO1FBQXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzs7OERBQTRCO0lBTzNCO1FBQXpCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztrQ0FBZSxZQUFZOzZEQUFnQztJQVpoRSxvQkFBb0I7UUFEekMsU0FBUyxFQUFFO09BQ1Usb0JBQW9CLENBOEN6QztJQUFELDJCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0E5Q3FCLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIMOpIGRlIHVzbyBpbnRlcm5vIHV0aWxpemFkbyBwb3IgY29tcG9uZW50ZXMgZGUgZW50cmFkYSBkZSBkYWRvcyBjb20gbyBvYmpldGl2byBkZSByZXNldGFyIGFzIGluZm9ybWHDp8O1ZXMgZG8gbW9kZWwuXG4gKlxuICogUG9yIHBhZHLDo28gbGltcGEgbyB2YWxvciBkbyBjYW1wbyBlIGV4ZWN1dGEgbyBtw6l0b2RvIG9uQ2hhbmdlUHJvcGFnYXRlLCBjYXNvIHRlbmhhIGEgbmVjZXNzaWRhZGUgZGUgdHJhdGFyIGEgZnVuw6fDo28gZGUgbGltcGFyIG8gY2FtcG8sXG4gKiBkZXZlIGltcGxlbWVudGFyIGEgaW50ZXJmYWNlIFBvQ2xlYW4uXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2xlYW5CYXNlQ29tcG9uZW50IHtcbiAgLyoqIE5lc3RhIHByb3ByaWVkYWRlIGRldmUtc2UgaW5mb3JtYXIgbyBlbGVtZW50UmVmIGRvIGNhbXBvIGRlIGVudHJhZGEgcXVlIHV0aWxpemFyw6EgbyBwby1jbGVhbi4gKi9cbiAgQElucHV0KCdwLWVsZW1lbnQtcmVmJykgaW5wdXRSZWY6IEVsZW1lbnRSZWY7XG5cbiAgLyoqIFZhbG9yIHF1ZSBzZXLDoSBhdHJpYnXDrWRvIGFvIGNhbXBvIHF1YW5kbyBmb3IgY2xpY2FkbyBubyBwby1jbGVhbi4gKi9cbiAgQElucHV0KCdwLWRlZmF1bHQtdmFsdWUnKSBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBxdWFuZG8gZXhlY3V0YWRhIGHDp8OjbyBkbyBwby1jbGVhbi5cbiAgICogRXN0ZSBldmVudG8gZGV2ZSBzZXIgdXNhZG8gcGFyYSBhdmlzYXIgcGFyYSBvIGNvbXBvbmVudGUgcXVlIGVzdMOhIHVzYW5kbyBvIHBvLWNsZWFuLCBxdWUgbyBib3TDo28gZm9pIGRpc3BhcmFkbyxcbiAgICogZSBwcm92YXZlbG1lbnRlIHNlcsOhIHByZWNpc28gZW1pdGlyIG8gZXZlbnRvIHBhcmEgYXR1YWxpemFyIG8gbW9kZWwuXG4gICAqL1xuICBAT3V0cHV0KCdwLWNoYW5nZS1ldmVudCcpIGNoYW5nZUV2ZW50PzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwcm90ZWN0ZWQgcGFyZW50Q29tcG9uZW50OiBhbnk7XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB0aGlzLmNoYW5nZUV2ZW50LmVtaXQodGhpcy5kZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgc2hvd0ljb24oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlICE9PSB0aGlzLmdldElucHV0VmFsdWUoKSAmJiB0aGlzLmhhc0NsZWFuQXR0cigpICYmICF0aGlzLmlzRGlzYWJsZWQoKSAmJiAhdGhpcy5pc1JlYWRvbmx5KClcbiAgICApO1xuICB9XG5cbiAgLy8gRXN0ZSBtw6l0b2RvIHZlcmlmaWNhIHNlIG8gY29tcG9uZW50ZSBwYWkgcG9zc3VpIGEgcHJvcHJpZWRhZGUgY2xlYW4gZGlmZXJlbnRlIGRlIHZhemlvLFxuICAvLyBvdSBzZWphLCBzZSBvIHBvLWNsZWFuIGRldmUgc2VyIHVzYWRvLlxuICBwcml2YXRlIGhhc0NsZWFuQXR0cigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRDb21wb25lbnQuY2xlYW47XG4gIH1cblxuICAvLyBFc3RlIG3DqXRvZG8gdmVyaWZpY2Egc2UgbyBjb21wb25lbnRlIHBhaSBlc3TDoSBkZXNhYmlsaXRhZG8uXG4gIHByaXZhdGUgaXNEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRDb21wb25lbnQuZGlzYWJsZWQ7XG4gIH1cblxuICAvLyBFc3RlIG3DqXRvZG8gdmVyaWZpY2Egc2UgbyBjb21wb25lbnRlIHBhaSBlc3TDoSBzb21lbnRlIGxlaXR1cmEuXG4gIHByaXZhdGUgaXNSZWFkb25seSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRDb21wb25lbnQucmVhZG9ubHk7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRJbnB1dFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIGFic3RyYWN0IGdldElucHV0VmFsdWUoKTogc3RyaW5nO1xufVxuIl19