import { __assign, __decorate, __metadata } from "tslib";
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
var PoComboFilterService = /** @class */ (function () {
    function PoComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(PoComboFilterService.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    PoComboFilterService.prototype.getFilteredData = function (param, filterParams) {
        var _this = this;
        var value = param.value;
        var filterParamsValidated = validateObjectType(filterParams);
        var params = __assign(__assign({}, filterParamsValidated), { filter: value });
        return this.http
            .get("" + this.url, { responseType: 'json', params: params })
            .pipe(map(function (response) { return _this.parseToArrayComboOption(response.items); }));
    };
    PoComboFilterService.prototype.getObjectByValue = function (value, filterParams) {
        var _this = this;
        var filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(this.url + "/" + value, { params: filterParamsValidated })
            .pipe(map(function (item) { return _this.parseToComboOption(item); }));
    };
    PoComboFilterService.prototype.configProperties = function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    PoComboFilterService.prototype.parseToArrayComboOption = function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map(function (item) {
                return _this.parseToComboOption(item);
            });
        }
        return [];
    };
    PoComboFilterService.prototype.parseToComboOption = function (item) {
        if (item && item[this.fieldValue]) {
            var label = item[this.fieldLabel];
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    PoComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoComboFilterService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoComboFilterService);
    return PoComboFilterService;
}());
export { PoComboFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNvbWJvL3BvLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpEOzs7Ozs7R0FNRztBQUVIO0lBVUUsOEJBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFQcEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUM3QixlQUFVLEdBQVcsT0FBTyxDQUFDO0lBTVUsQ0FBQztJQUp4QyxzQkFBSSxxQ0FBRzthQUFQO1lBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBSUQsOENBQWUsR0FBZixVQUFnQixLQUFVLEVBQUUsWUFBa0I7UUFBOUMsaUJBU0M7UUFSQyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0QsSUFBTSxNQUFNLHlCQUFRLHFCQUFxQixLQUFFLE1BQU0sRUFBRSxLQUFLLEdBQUUsQ0FBQztRQUUzRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEdBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQzVELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxRQUFvQixJQUFLLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVELCtDQUFnQixHQUFoQixVQUFpQixLQUFzQixFQUFFLFlBQWtCO1FBQTNELGlCQU1DO1FBTEMsSUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUvRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFJLElBQUksQ0FBQyxHQUFHLFNBQUksS0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUM7YUFDOUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELCtDQUFnQixHQUFoQixVQUFpQixHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRU8sc0RBQXVCLEdBQS9CLFVBQWdDLEtBQWlCO1FBQWpELGlCQVFDO1FBUEMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtnQkFDbkIsT0FBTyxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVPLGlEQUFrQixHQUExQixVQUEyQixJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBDLE9BQU8sRUFBRSxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Z0JBNUN5QixVQUFVOztJQVZ6QixvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO3lDQVdlLFVBQVU7T0FWekIsb0JBQW9CLENBdURoQztJQUFELDJCQUFDO0NBQUEsQUF2REQsSUF1REM7U0F2RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBQb0NvbWJvRmlsdGVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Db21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUmVzcG9uc2UgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcmVzcG9uc2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IHZhbGlkYXRlT2JqZWN0VHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHBhZHLDo28gdXRpbGl6YWRvIHBhcmEgZmlsdHJhciBvcyBkYWRvcyBkbyBjb21wb25lbnRlIHBvLWNvbWJvLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9Db21ib0ZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0NvbWJvRmlsdGVyIHtcbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XG5cbiAgZmllbGRMYWJlbDogc3RyaW5nID0gJ2xhYmVsJztcbiAgZmllbGRWYWx1ZTogc3RyaW5nID0gJ3ZhbHVlJztcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge31cblxuICBnZXRGaWx0ZXJlZERhdGEocGFyYW06IGFueSwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxQb0NvbWJvT3B0aW9uPj4ge1xuICAgIGNvbnN0IHZhbHVlID0gcGFyYW0udmFsdWU7XG4gICAgY29uc3QgZmlsdGVyUGFyYW1zVmFsaWRhdGVkID0gdmFsaWRhdGVPYmplY3RUeXBlKGZpbHRlclBhcmFtcyk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSB7IC4uLmZpbHRlclBhcmFtc1ZhbGlkYXRlZCwgZmlsdGVyOiB2YWx1ZSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldChgJHt0aGlzLnVybH1gLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBwYXJhbXM6IHBhcmFtcyB9KVxuICAgICAgLnBpcGUobWFwKChyZXNwb25zZTogUG9SZXNwb25zZSkgPT4gdGhpcy5wYXJzZVRvQXJyYXlDb21ib09wdGlvbihyZXNwb25zZS5pdGVtcykpKTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZyB8IG51bWJlciwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxQb0NvbWJvT3B0aW9uPiB7XG4gICAgY29uc3QgZmlsdGVyUGFyYW1zVmFsaWRhdGVkID0gdmFsaWRhdGVPYmplY3RUeXBlKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWAsIHsgcGFyYW1zOiBmaWx0ZXJQYXJhbXNWYWxpZGF0ZWQgfSlcbiAgICAgIC5waXBlKG1hcChpdGVtID0+IHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pKSk7XG4gIH1cblxuICBjb25maWdQcm9wZXJ0aWVzKHVybDogc3RyaW5nLCBmaWVsZExhYmVsOiBzdHJpbmcsIGZpZWxkVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLmZpZWxkTGFiZWwgPSBmaWVsZExhYmVsO1xuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9BcnJheUNvbWJvT3B0aW9uKGl0ZW1zOiBBcnJheTxhbnk+KTogQXJyYXk8UG9Db21ib09wdGlvbj4ge1xuICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9Db21ib09wdGlvbihpdGVtOiBhbnkpOiBQb0NvbWJvT3B0aW9uIHtcbiAgICBpZiAoaXRlbSAmJiBpdGVtW3RoaXMuZmllbGRWYWx1ZV0pIHtcbiAgICAgIGNvbnN0IGxhYmVsID0gaXRlbVt0aGlzLmZpZWxkTGFiZWxdO1xuICAgICAgY29uc3QgdmFsdWUgPSBpdGVtW3RoaXMuZmllbGRWYWx1ZV07XG5cbiAgICAgIHJldHVybiB7IGxhYmVsLCB2YWx1ZSB9O1xuICAgIH1cbiAgfVxufVxuIl19