import { __decorate, __extends, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, DoCheck, ElementRef, forwardRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { isMobile } from './../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoMultiselectBaseComponent } from './po-multiselect-base.component';
var poMultiselectContainerOffset = 8;
var poMultiselectContainerPositionDefault = 'bottom';
/* istanbul ignore next */
var providers = [
    PoControlPositionService,
    {
        provide: NG_VALUE_ACCESSOR,
        // tslint:disable-next-line
        useExisting: forwardRef(function () { return PoMultiselectComponent; }),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // tslint:disable-next-line
        useExisting: forwardRef(function () { return PoMultiselectComponent; }),
        multi: true
    }
];
/**
 * @docsExtends PoMultiselectBaseComponent
 *
 * @example
 *
 * <example name="po-multiselect-basic" title="PO Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="PO Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 */
var PoMultiselectComponent = /** @class */ (function (_super) {
    __extends(PoMultiselectComponent, _super);
    function PoMultiselectComponent(renderer, changeDetector, controlPosition, el) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.el = el;
        _this.disclaimerOffset = 0;
        _this.dropdownIcon = 'po-icon-arrow-down';
        _this.dropdownOpen = false;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.isCalculateVisibleItems = true;
        _this.onScroll = function () {
            _this.adjustContainerPosition();
        };
        return _this;
    }
    PoMultiselectComponent.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    };
    PoMultiselectComponent.prototype.ngDoCheck = function () {
        var inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
            return;
        }
    };
    PoMultiselectComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    PoMultiselectComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    };
    PoMultiselectComponent.prototype.getInputWidth = function () {
        return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
    };
    PoMultiselectComponent.prototype.getDisclaimersWidth = function () {
        var disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(function (disclaimer) { return disclaimer['offsetWidth']; });
    };
    PoMultiselectComponent.prototype.calculateVisibleItems = function () {
        var disclaimersWidth = this.getDisclaimersWidth();
        var inputWidth = this.getInputWidth();
        var extraDisclaimerSize = 38;
        var disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            var sum = 0;
            var i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    var label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
    };
    PoMultiselectComponent.prototype.updateVisibleItems = function () {
        this.visibleDisclaimers = [].concat(this.selectedOptions);
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    };
    PoMultiselectComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.calculateVisibleItems();
        }, 200);
    };
    PoMultiselectComponent.prototype.onKeyDown = function (event) {
        if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.tab) {
            this.controlDropdownVisibility(false);
            return;
        }
    };
    PoMultiselectComponent.prototype.toggleDropdownVisibility = function () {
        if (this.disabled) {
            return;
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    };
    PoMultiselectComponent.prototype.openDropdown = function (toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    };
    PoMultiselectComponent.prototype.controlDropdownVisibility = function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    PoMultiselectComponent.prototype.scrollToSelectedOptions = function () {
        var _this = this;
        if (this.selectedOptions && this.selectedOptions.length) {
            var index = this.options.findIndex(function (option) { return option.value === _this.selectedOptions[0].value; });
            this.dropdown.scrollTo(index);
        }
    };
    PoMultiselectComponent.prototype.setVisibleOptionsDropdown = function (options) {
        this.visibleOptionsDropdown = options;
    };
    PoMultiselectComponent.prototype.changeSearch = function (event) {
        var _this = this;
        event && event.value
            ? this.searchByLabel(event.value, this.options, this.filterMode)
            : this.setVisibleOptionsDropdown(this.options);
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout(function () { return _this.adjustContainerPosition(); });
    };
    PoMultiselectComponent.prototype.getPlaceholder = function () {
        return this.placeholder && !this.visibleDisclaimers.length ? this.placeholder : '';
    };
    PoMultiselectComponent.prototype.closeDisclaimer = function (value) {
        var index = this.selectedOptions.findIndex(function (option) { return option.value === value; });
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    };
    PoMultiselectComponent.prototype.wasClickedOnToggle = function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target) &&
            !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
            this.dropdownOpen) {
            this.controlDropdownVisibility(false);
        }
    };
    PoMultiselectComponent.prototype.adjustContainerPosition = function () {
        this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
    };
    PoMultiselectComponent.prototype.close = function () {
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    };
    PoMultiselectComponent.prototype.initializeListeners = function () {
        var _this = this;
        this.clickOutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.updateVisibleItems();
            isMobile() ? _this.adjustContainerPosition() : _this.close();
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    PoMultiselectComponent.prototype.open = function () {
        this.dropdownIcon = 'po-icon-arrow-up';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    };
    PoMultiselectComponent.prototype.removeListeners = function () {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    PoMultiselectComponent.prototype.setPositionDropdown = function () {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    PoMultiselectComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('dropdownElement', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoMultiselectComponent.prototype, "dropdownElement", void 0);
    __decorate([
        ViewChild('dropdownElement', { static: true }),
        __metadata("design:type", Object)
    ], PoMultiselectComponent.prototype, "dropdown", void 0);
    __decorate([
        ViewChild('disclaimerContainer', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoMultiselectComponent.prototype, "disclaimerContainerElement", void 0);
    __decorate([
        ViewChild('iconElement', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoMultiselectComponent.prototype, "iconElement", void 0);
    __decorate([
        ViewChild('inputElement', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoMultiselectComponent.prototype, "inputElement", void 0);
    PoMultiselectComponent = __decorate([
        Component({
            selector: 'po-multiselect',
            template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\" [class.po-multiselect-show]=\"dropdownOpen\">\n    <input\n      #inputElement\n      class=\"po-input po-input-icon-right po-clickable\"\n      readonly\n      type=\"text\"\n      [value]=\"getPlaceholder()\"\n      [disabled]=\"disabled\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconElement\n        class=\"po-icon po-field-icon {{ dropdownIcon }}\"\n        [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        (click)=\"toggleDropdownVisibility()\"\n      >\n      </span>\n    </div>\n\n    <div #disclaimerContainer class=\"po-multiselect-field\" [class.po-multiselect-field-disabled]=\"disabled\">\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n    </div>\n  </div>\n\n  <po-multiselect-dropdown\n    #dropdownElement\n    [p-hide-search]=\"hideSearch\"\n    [p-literals]=\"literals\"\n    [p-options]=\"visibleOptionsDropdown\"\n    [p-selected-values]=\"getValuesFromOptions(selectedOptions)\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\n  >\n  </po-multiselect-dropdown>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
            providers: providers
        }),
        __metadata("design:paramtypes", [Renderer2,
            ChangeDetectorRef,
            PoControlPositionService,
            ElementRef])
    ], PoMultiselectComponent);
    return PoMultiselectComponent;
}(PoMultiselectBaseComponent));
export { PoMultiselectComponent };
//# sourceMappingURL=data:application/json;base64,