import { __assign, __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
import { InputBoolean } from '../../../decorators';
export var poMultiselectLiteralsDefault = {
    en: {
        noData: 'No data found',
        placeholderSearch: 'Search'
    },
    es: {
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    },
    pt: {
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    },
    ru: {
        noData: 'Данные не найдены',
        placeholderSearch: 'искать'
    }
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 */
var PoMultiselectBaseComponent = /** @class */ (function () {
    function PoMultiselectBaseComponent() {
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Mensagem apresentada enquanto o campo estiver vazio. */
        this.placeholder = '';
        /**
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        this.placeholderSearch = '';
        /** Pode ser informada uma função que será disparada quando houver alterações no ngModel. */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poMultiselectLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-multiselect
         *   [p-literals]="customLiterals">
         * </po-po-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poMultiselectLiteralsDefault[poLocaleDefault]), poMultiselectLiteralsDefault[browserLanguage()]), value);
            }
            else {
                this._literals = poMultiselectLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * @default `false`
         */
        set: function (required) {
            this._required = required === '' ? true : convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel();
            this.updateVisibleItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "hideSearch", {
        get: function () {
            return this._hideSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
         *
         * @default `false`
         */
        set: function (hideSearch) {
            this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        /**
         * @description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         *
         * > Para atualizar a lista de opções do `po-multiselect` dinamicamente deve-se utilizar dados imutáveis.
         * Exemplo de adição de um novo item com spread:
         * ```
         * this.options = [...this.options, { label: 'Example', value: 'example' }];
         * ```
         */
        set: function (options) {
            this._options = options;
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "sort", {
        get: function () {
            return this._sort;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * @default `false`
         */
        set: function (sort) {
            this._sort = sort === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterMode", {
        get: function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: PoMultiselectFilterMode
         *
         * @default `startsWith`
         */
        set: function (filterMode) {
            this._filterMode = filterMode in PoMultiselectFilterMode ? filterMode : PoMultiselectFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = PoMultiselectFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = PoMultiselectFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = PoMultiselectFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    PoMultiselectBaseComponent.prototype.ngOnInit = function () {
        this.updateList(this.options);
    };
    PoMultiselectBaseComponent.prototype.validAndSortOptions = function () {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    };
    PoMultiselectBaseComponent.prototype.setUndefinedLabels = function (options) {
        options.forEach(function (option) {
            if (!option['label']) {
                option.label = option.value;
            }
        });
    };
    PoMultiselectBaseComponent.prototype.updateList = function (options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    };
    PoMultiselectBaseComponent.prototype.callOnChange = function (selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    };
    PoMultiselectBaseComponent.prototype.eventChange = function (selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    };
    PoMultiselectBaseComponent.prototype.getValuesFromOptions = function (selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map(function (option) { return option.value; }) : [];
    };
    PoMultiselectBaseComponent.prototype.getLabelByValue = function (value) {
        var index = this.options.findIndex(function (option) { return option.value === value; });
        return this.options[index].label;
    };
    PoMultiselectBaseComponent.prototype.changeItems = function (selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    };
    PoMultiselectBaseComponent.prototype.searchByLabel = function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            var newOptions_1 = [];
            options.forEach(function (option) {
                if (option.label && _this.compareMethod(search, option, filterMode)) {
                    newOptions_1.push(option);
                }
            });
            this.visibleOptionsDropdown = newOptions_1;
        }
    };
    PoMultiselectBaseComponent.prototype.compareMethod = function (search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    PoMultiselectBaseComponent.prototype.startsWith = function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    PoMultiselectBaseComponent.prototype.contains = function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    PoMultiselectBaseComponent.prototype.endsWith = function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    PoMultiselectBaseComponent.prototype.validate = function (c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return null;
    };
    PoMultiselectBaseComponent.prototype.updateSelectedOptions = function (values) {
        var _this = this;
        this.selectedOptions = [];
        values.forEach(function (value) {
            _this.options.forEach(function (option) {
                if (option.value === value) {
                    _this.selectedOptions.push(option);
                }
            });
        });
        this.updateVisibleItems();
    };
    PoMultiselectBaseComponent.prototype.writeValue = function (values) {
        values = values || [];
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    };
    PoMultiselectBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    PoMultiselectBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    PoMultiselectBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoMultiselectBaseComponent.prototype.validateModel = function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoMultiselectBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoMultiselectBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoMultiselectBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoMultiselectBaseComponent.prototype, "literals", null);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoMultiselectBaseComponent.prototype, "optional", void 0);
    __decorate([
        Input('p-placeholder'),
        __metadata("design:type", String)
    ], PoMultiselectBaseComponent.prototype, "placeholder", void 0);
    __decorate([
        Input('p-placeholder-search'),
        __metadata("design:type", String)
    ], PoMultiselectBaseComponent.prototype, "placeholderSearch", void 0);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoMultiselectBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoMultiselectBaseComponent.prototype, "required", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoMultiselectBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-hide-search'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoMultiselectBaseComponent.prototype, "hideSearch", null);
    __decorate([
        Input('p-options'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoMultiselectBaseComponent.prototype, "options", null);
    __decorate([
        Input('p-sort'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoMultiselectBaseComponent.prototype, "sort", null);
    __decorate([
        Input('p-filter-mode'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoMultiselectBaseComponent.prototype, "filterMode", null);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoMultiselectBaseComponent.prototype, "change", void 0);
    PoMultiselectBaseComponent = __decorate([
        Directive()
    ], PoMultiselectBaseComponent);
    return PoMultiselectBaseComponent;
}());
export { PoMultiselectBaseComponent };
//# sourceMappingURL=data:application/json;base64,