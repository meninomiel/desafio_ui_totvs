import { __decorate, __extends, __metadata } from "tslib";
import { AfterViewInit, Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { convertToInt } from '../../../utils/util';
import { PoInputBaseComponent } from '../po-input/po-input-base.component';
var poDecimalDefaultDecimalsLength = 2;
var poDecimalDefaultThousandMaxlength = 13;
var poDecimalMaxDecimalsLength = 15;
var poDecimalTotalLengthLimit = 16;
/**
 *
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * <br>
 * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:
 *  + Aceita apenas números;
 *  + Utiliza ',' como separador de decimal;
 *  + Utiliza '.' para separação de milhar;
 *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * > **Importante:**
 * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,
 * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.
 * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.
 *
 * @example
 *
 * <example name="po-decimal-basic" title="PO Decimal Basic">
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-labs" title="PO Decimal Labs">
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage" title="PO Decimal - Hourly Wage">
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage-reactive-form" title="PO Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
var PoDecimalComponent = /** @class */ (function (_super) {
    __extends(PoDecimalComponent, _super);
    function PoDecimalComponent(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this._decimalsLength = poDecimalDefaultDecimalsLength;
        _this._thousandMaxlength = poDecimalDefaultThousandMaxlength;
        _this.decimalSeparator = ',';
        _this.fireChange = false;
        _this.isKeyboardAndroid = false;
        _this.minusSign = '-';
        _this.oldDotsLength = null;
        _this.thousandSeparator = '.';
        _this.regex = {
            thousand: new RegExp('\\' + '.', 'g'),
            decimal: new RegExp('\\' + ',', 'g')
        };
        _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
        return _this;
    }
    PoDecimalComponent_1 = PoDecimalComponent;
    Object.defineProperty(PoDecimalComponent.prototype, "autocomplete", {
        get: function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDecimalComponent.prototype, "decimalsLength", {
        get: function () {
            return this._decimalsLength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade máxima de casas decimais.
         *
         * > **Importante:**
         * - O valor máximo permitido é 15;
         * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
         * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;
         * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).
         *
         * @default `2`
         */
        set: function (value) {
            var decimalsLength = convertToInt(value);
            decimalsLength = this.isValueBetweenAllowed(decimalsLength, poDecimalMaxDecimalsLength)
                ? decimalsLength
                : poDecimalDefaultDecimalsLength;
            if (this.isGreaterThanTotalLengthLimit(decimalsLength, this.thousandMaxlength)) {
                this.thousandMaxlength = poDecimalTotalLengthLimit - decimalsLength;
            }
            this._decimalsLength = decimalsLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDecimalComponent.prototype, "thousandMaxlength", {
        get: function () {
            return this._thousandMaxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade máxima de dígitos antes do separador decimal.
         *
         * > **Importante:**
         * - O valor máximo permitido é 13;
         * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
         * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.
         *
         * @default `13`
         */
        set: function (value) {
            var thousandMaxlength = convertToInt(value);
            if (this.decimalsLength > poDecimalDefaultDecimalsLength && !thousandMaxlength) {
                thousandMaxlength = poDecimalTotalLengthLimit - this.decimalsLength;
            }
            thousandMaxlength = this.isValueBetweenAllowed(thousandMaxlength, poDecimalDefaultThousandMaxlength)
                ? thousandMaxlength
                : poDecimalDefaultThousandMaxlength;
            if (this.isGreaterThanTotalLengthLimit(this.decimalsLength, thousandMaxlength)) {
                this.decimalsLength = poDecimalTotalLengthLimit - thousandMaxlength;
            }
            this._thousandMaxlength = thousandMaxlength;
        },
        enumerable: true,
        configurable: true
    });
    PoDecimalComponent.prototype.ngAfterViewInit = function () {
        this.verifyAutoFocus();
        this.setPaddingInput();
    };
    PoDecimalComponent.prototype.clear = function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    PoDecimalComponent.prototype.extraValidation = function (c) {
        return null;
    };
    PoDecimalComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    PoDecimalComponent.prototype.getScreenValue = function () {
        return this.inputEl ? this.inputEl.nativeElement.value : '';
    };
    PoDecimalComponent.prototype.hasInvalidClass = function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    };
    PoDecimalComponent.prototype.hasLetters = function (value) {
        if (value === void 0) { value = ''; }
        return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
    };
    PoDecimalComponent.prototype.isValidNumber = function (event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        var keyValue = String.fromCharCode(event.which);
        var validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && validKey;
    };
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    PoDecimalComponent.prototype.onBlur = function (event) {
        var value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
        }
        this.blur.emit();
        this.controlChangeEmitter();
    };
    PoDecimalComponent.prototype.onFocus = function (event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    PoDecimalComponent.prototype.onInput = function (event) {
        var selectionStart = event.target.selectionStart;
        var selectionEnd = event.target.selectionEnd;
        var modelValue;
        var viewValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        viewValue = this.formatMask(modelValue);
        // validação para não quebrar IE com placeholder definido e Input vazio
        if (viewValue) {
            this.setViewValue(viewValue);
            this.setCursorInput(event, selectionStart, selectionEnd);
        }
        this.callOnChange(this.formatToModelValue(modelValue));
    };
    PoDecimalComponent.prototype.onInputKeyboardAndroid = function (event) {
        var inputValue = event.target.value;
        var selectionStart = event.target.selectionStart;
        var hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            var position = selectionStart - 1;
            var key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    };
    PoDecimalComponent.prototype.onKeyPress = function (event) {
        this.isValidKey(event);
    };
    PoDecimalComponent.prototype.setPaddingInput = function () {
        var _this = this;
        setTimeout(function () {
            var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        });
    };
    PoDecimalComponent.prototype.writeValueModel = function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                var formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (value) {
            this.change.emit(value);
        }
    };
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    PoDecimalComponent.prototype.addZeroBefore = function (value) {
        var isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? "0" + value : value;
    };
    PoDecimalComponent.prototype.containsComma = function (value) {
        return value.includes(this.decimalSeparator);
    };
    PoDecimalComponent.prototype.containsMoreThanOneComma = function (value) {
        if (value === void 0) { value = ''; }
        var foundComma = value.match(/,/g);
        return !!(foundComma && foundComma.length > 1);
    };
    PoDecimalComponent.prototype.controlChangeEmitter = function () {
        var _this = this;
        var elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout(function () {
                _this.change.emit(elementValue);
            }, 200);
        }
    };
    PoDecimalComponent.prototype.formatMask = function (value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            var regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
            return value.toString().replace(regex, '$1.');
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    };
    PoDecimalComponent.prototype.formatToModelValue = function (value) {
        var formattedValue = this.replaceCommaToDot(value);
        var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    };
    PoDecimalComponent.prototype.formatToViewValue = function (value) {
        var formatedNumber;
        var numberValue;
        var valueBeforeDot;
        var valueAfterDot;
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        numberValue = Number(value).toFixed(this.decimalsLength);
        valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
        valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
        formatedNumber = this.formatMask(valueBeforeDot);
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return formatedNumber + this.decimalSeparator + valueAfterDot;
        }
    };
    PoDecimalComponent.prototype.formatValueWithoutThousandSeparator = function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.thousand, '');
    };
    PoDecimalComponent.prototype.getValueAfterSeparator = function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[1] || '';
    };
    PoDecimalComponent.prototype.getValueBeforeSeparator = function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[0] || '';
    };
    PoDecimalComponent.prototype.hasLessDot = function (value) {
        if (value) {
            var dots = value.match(this.regex.thousand);
            var dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    PoDecimalComponent.prototype.hasMoreDot = function (value) {
        if (value) {
            var dots = value.match(this.regex.thousand);
            var dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    PoDecimalComponent.prototype.hasMinusSignInvalidPosition = function (event) {
        var keyIsMinusSign = event.key === this.minusSign;
        var selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    };
    PoDecimalComponent.prototype.isInvalidKey = function (event, charCode) {
        var isInvalidNumber = !this.isValidNumber(event);
        return (this.verifyInsertComma(event) ||
            this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) ||
            this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) ||
            isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) ||
            this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode));
    };
    PoDecimalComponent.prototype.isGreaterThanTotalLengthLimit = function (decimalsMaxLength, thousandMaxlength) {
        return decimalsMaxLength + thousandMaxlength > poDecimalTotalLengthLimit;
    };
    PoDecimalComponent.prototype.isKeyDecimalSeparator = function (event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    };
    PoDecimalComponent.prototype.isPositionAfterDecimalSeparator = function (positionCursor, value) {
        var indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    };
    PoDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = function (target) {
        return target.selectionStart !== target.selectionEnd;
    };
    PoDecimalComponent.prototype.isValidKey = function (event, key) {
        var charCode = event.which || event.keyCode;
        var validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    };
    PoDecimalComponent.prototype.isValueBetweenAllowed = function (value, maxAllowed) {
        return value >= 0 && value <= maxAllowed;
    };
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    PoDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = function (charCode) {
        return charCode === 44 && this.decimalsLength === 0;
    };
    PoDecimalComponent.prototype.verifyAutoFocus = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoDecimalComponent.prototype.setInitialSelectionRange = function (target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    };
    PoDecimalComponent.prototype.replaceAt = function (value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    };
    PoDecimalComponent.prototype.replaceCommaToDot = function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.decimal, '.');
    };
    PoDecimalComponent.prototype.setCursorInput = function (event, selectionStart, selectionEnd) {
        var target = event.target;
        var viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === '0' + this.decimalSeparator) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    };
    PoDecimalComponent.prototype.setPositionValue = function (event) {
        var value = event.target.value;
        var position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    };
    PoDecimalComponent.prototype.setViewValue = function (value) {
        this.inputEl.nativeElement.value = value;
    };
    PoDecimalComponent.prototype.validateCursorPositionBeforeSeparator = function (event) {
        var target = event.target;
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event));
    };
    PoDecimalComponent.prototype.verifyThousandLength = function (event) {
        var target = event.target;
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value));
    };
    PoDecimalComponent.prototype.verifyInsertComma = function (e) {
        var hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    };
    PoDecimalComponent.prototype.verifyInsertMinusSign = function (event) {
        var value = event.target.value;
        var indexMinusSign = value.lastIndexOf(this.minusSign) !== -1;
        var positionMinusSign = value.lastIndexOf('-');
        var occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    };
    PoDecimalComponent.prototype.verifyValueAfterComma = function (event) {
        var value = event.target.value;
        var selectionStart = event.target.selectionStart;
        var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return (this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength);
    };
    var PoDecimalComponent_1;
    PoDecimalComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('inp', { read: ElementRef, static: true }),
        __metadata("design:type", ElementRef)
    ], PoDecimalComponent.prototype, "inputEl", void 0);
    __decorate([
        Input('p-decimals-length'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoDecimalComponent.prototype, "decimalsLength", null);
    __decorate([
        Input('p-thousand-maxlength'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoDecimalComponent.prototype, "thousandMaxlength", null);
    PoDecimalComponent = PoDecimalComponent_1 = __decorate([
        Component({
            selector: 'po-decimal',
            template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      type=\"text\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (input)=\"onInput($event)\"\n      (keypress)=\"onKeyPress($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom> </po-field-container-bottom>\n</po-field-container>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PoDecimalComponent_1; }),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return PoDecimalComponent_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], PoDecimalComponent);
    return PoDecimalComponent;
}(PoInputBaseComponent));
export { PoDecimalComponent };
//# sourceMappingURL=data:application/json;base64,