import { __assign, __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, convertToBoolean, isEquals, isIE, isMobile, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { PoUploadFile } from './po-upload-file';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
import { InputBoolean } from '../../../decorators';
export var poUploadLiteralsDefault = {
    en: {
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    },
    es: {
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    },
    pt: {
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    },
    ru: {
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        deleteFile: 'удалять',
        cancel: 'отменить',
        tryAgain: 'попробуйте еще раз',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }
};
var poUploadFormFieldDefault = 'files';
var poUploadMaxFileSize = 31457280; // 30MB
var poUploadMinFileSize = 0;
/**
 * @description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 */
var PoUploadBaseComponent = /** @class */ (function () {
    function PoUploadBaseComponent(uploadService) {
        this.uploadService = uploadService;
        this._dragDrop = false;
        this.extensionNotAllowed = 0;
        this.quantityNotAllowed = 0;
        this.sizeNotAllowed = 0;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Define o valor do atributo `name` do componente. */
        this.name = 'file';
        /**
         * @optional
         *
         * @description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * @default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoUploadBaseComponent.prototype, "directory", {
        get: function () {
            return this._directory;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
         *
         * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
         *
         * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
         *
         * @default `false`
         */
        set: function (value) {
            this._directory = convertToBoolean(value);
            this.canHandleDirectory = this._directory && !isIE() && !isMobile();
            this.setDirectoryAttribute(this.canHandleDirectory);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "dragDrop", {
        get: function () {
            return this._dragDrop;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
         * automaticamente.
         *
         * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
         *
         * @default `false`
         */
        set: function (value) {
            this._dragDrop = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideRestrictionsInfo", {
        get: function () {
            return this._hideRestrictionsInfo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta visualmente as informações de restrições para o upload.
         *
         * @default `false`
         */
        set: function (value) {
            this._hideRestrictionsInfo = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSelectButton", {
        get: function () {
            return this._hideSelectButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * @default `false`
         */
        set: function (value) {
            this._hideSelectButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSendButton", {
        get: function () {
            return this._hideSendButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * @default `false`
         */
        set: function (value) {
            this._hideSendButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    cancel: 'Desistir',
         *    deleteFile: 'Deletar',
         *  };
         *
         * Ou passando apenas as literais que deseja customizar:,
         *    selectFile: 'Buscar arquivo',
         * ```
         *    startSending: 'Enviar'
         *   tryAgain: 'Recomeçar',
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-upload
         *   [p-literals]="customLiterals">
         * </po-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[browserLanguage()]), value);
            }
            else {
                this._literals = poUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "fileRestrictions", {
        get: function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         */
        set: function (restrictions) {
            this._fileRestrictions = this.initRestrictions(restrictions);
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "formField", {
        get: function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
         *
         * @default `files`
         */
        set: function (value) {
            this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         */
        set: function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "isMultiple", {
        get: function () {
            return this.canHandleDirectory ? true : this._isMultiple;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se pode selecionar mais de um arquivo.
         *
         * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
         */
        set: function (value) {
            this._isMultiple = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    PoUploadBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    PoUploadBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    PoUploadBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoUploadBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    };
    PoUploadBaseComponent.prototype.writeValue = function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    PoUploadBaseComponent.prototype.isExceededFileLimit = function (currentFilesLength) {
        return (this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength);
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    PoUploadBaseComponent.prototype.parseFiles = function (files) {
        var poUploadFiles = this.currentFiles || [];
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            var file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    };
    PoUploadBaseComponent.prototype.validateModel = function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Verifica se o arquivo está de acordo com as restrições.
    PoUploadBaseComponent.prototype.checkRestrictions = function (file) {
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            var allowedExtensions = restrictions.allowedExtensions;
            var minFileSize = restrictions.minFileSize;
            var maxFileSize = restrictions.maxFileSize;
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    };
    PoUploadBaseComponent.prototype.existsFileSameName = function (file, files) {
        return files.some(function (currentFile) { return file.name === currentFile.name; });
    };
    PoUploadBaseComponent.prototype.getUploadService = function () {
        return this.uploadService;
    };
    PoUploadBaseComponent.prototype.insertFileInFiles = function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    PoUploadBaseComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        var isAllowed = allowedExtensions.some(function (ext) { return ext.toLowerCase() === extension; });
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    };
    PoUploadBaseComponent.prototype.setAllowedExtensions = function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    PoUploadBaseComponent.prototype.initRestrictions = function (restrictions) {
        if (!restrictions) {
            return;
        }
        var minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        var maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return __assign(__assign({}, restrictions), { maxFileSize: maxFileSize, minFileSize: minFileSize });
    };
    PoUploadBaseComponent.prototype.updateExistsFileInFiles = function (newFile, files) {
        var fileIndex = files.findIndex(function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded; });
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    PoUploadBaseComponent.ctorParameters = function () { return [
        { type: PoUploadService }
    ]; };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoUploadBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-directory'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "directory", null);
    __decorate([
        Input('p-drag-drop-height'),
        __metadata("design:type", Number)
    ], PoUploadBaseComponent.prototype, "dragDropHeight", void 0);
    __decorate([
        Input('p-drag-drop'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "dragDrop", null);
    __decorate([
        Input('p-hide-restrictions-info'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "hideRestrictionsInfo", null);
    __decorate([
        Input('p-hide-select-button'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "hideSelectButton", null);
    __decorate([
        Input('p-hide-send-button'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "hideSendButton", null);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoUploadBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoUploadBaseComponent.prototype, "literals", null);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoUploadBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-url'),
        __metadata("design:type", String)
    ], PoUploadBaseComponent.prototype, "url", void 0);
    __decorate([
        Input('p-restrictions'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoUploadBaseComponent.prototype, "fileRestrictions", null);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoUploadBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-form-field'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoUploadBaseComponent.prototype, "formField", null);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-auto-upload'),
        __metadata("design:type", Boolean)
    ], PoUploadBaseComponent.prototype, "autoUpload", void 0);
    __decorate([
        Input('p-multiple'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "isMultiple", null);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoUploadBaseComponent.prototype, "optional", void 0);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoUploadBaseComponent.prototype, "required", null);
    __decorate([
        Output('p-upload'),
        __metadata("design:type", EventEmitter)
    ], PoUploadBaseComponent.prototype, "onUpload", void 0);
    __decorate([
        Output('p-error'),
        __metadata("design:type", EventEmitter)
    ], PoUploadBaseComponent.prototype, "onError", void 0);
    __decorate([
        Output('p-success'),
        __metadata("design:type", EventEmitter)
    ], PoUploadBaseComponent.prototype, "onSuccess", void 0);
    __decorate([
        Output('ngModelChange'),
        __metadata("design:type", EventEmitter)
    ], PoUploadBaseComponent.prototype, "ngModelChange", void 0);
    PoUploadBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [PoUploadService])
    ], PoUploadBaseComponent);
    return PoUploadBaseComponent;
}());
export { PoUploadBaseComponent };
//# sourceMappingURL=data:application/json;base64,