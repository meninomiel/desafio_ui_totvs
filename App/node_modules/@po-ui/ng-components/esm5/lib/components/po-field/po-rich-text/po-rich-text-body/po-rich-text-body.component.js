import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isFirefox, isIE, isIEOrEdge, openExternalLink } from './../../../../utils/util';
import { PoKeyCodeEnum } from './../../../../enums/po-key-code.enum';
var poRichTextBodyCommands = [
    'bold',
    'italic',
    'underline',
    'justifyleft',
    'justifycenter',
    'justifyright',
    'justifyfull',
    'insertUnorderedList',
    'Createlink'
];
var PoRichTextBodyComponent = /** @class */ (function () {
    function PoRichTextBodyComponent() {
        this.change = new EventEmitter();
        this.commands = new EventEmitter();
        this.selectedLink = new EventEmitter();
        this.shortcutCommand = new EventEmitter();
        this.value = new EventEmitter();
        this.onAnchorClick = function (event) {
            var target = event.target, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
            var url;
            var elementLink;
            if (ctrlKey || metaKey) {
                if (event.path) {
                    event.path.forEach(function (element) {
                        if (element.nodeName === 'A') {
                            url = element.href;
                            elementLink = element;
                        }
                    });
                }
                else {
                    url = target.attributes.href.value;
                    elementLink = target;
                }
                openExternalLink(url);
                elementLink.classList.remove('po-clickable');
            }
        };
    }
    PoRichTextBodyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.bodyElement.nativeElement.designMode = 'on';
        // timeout necessário para setar o valor vindo do writeValue do componente principal.
        setTimeout(function () { return _this.updateValueWithModelValue(); });
    };
    PoRichTextBodyComponent.prototype.executeCommand = function (command) {
        this.bodyElement.nativeElement.focus();
        if (typeof command === 'object') {
            if (command.command === 'InsertHTML') {
                var linkCommand = command.command, urlLink = command.value.urlLink, urlLinkText = command.value.urlLinkText;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    };
    PoRichTextBodyComponent.prototype.linkEditing = function (event) {
        this.isLinkEditing = !!event;
    };
    PoRichTextBodyComponent.prototype.onBlur = function () {
        var _this = this;
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(function () {
                _this.change.emit(_this.modelValue);
            }, 200);
        }
    };
    PoRichTextBodyComponent.prototype.focus = function () {
        this.bodyElement.nativeElement.focus();
    };
    PoRichTextBodyComponent.prototype.onClick = function () {
        this.emitSelectionCommands();
    };
    PoRichTextBodyComponent.prototype.onFocus = function () {
        this.valueBeforeChange = this.modelValue;
    };
    PoRichTextBodyComponent.prototype.onKeyDown = function (event) {
        var keyK = event.keyCode === PoKeyCodeEnum.keyK;
        var isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
        if (isLinkShortcut) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
        this.toggleCursorOnLink(event, 'add');
    };
    PoRichTextBodyComponent.prototype.onKeyUp = function (event) {
        this.toggleCursorOnLink(event, 'remove');
        this.removeBrElement();
        this.updateModel();
        this.emitSelectionCommands();
    };
    PoRichTextBodyComponent.prototype.onPaste = function () {
        this.addClickListenerOnAnchorElements();
        this.update();
    };
    PoRichTextBodyComponent.prototype.update = function () {
        var _this = this;
        setTimeout(function () { return _this.updateModel(); });
        setTimeout(function () {
            _this.removeBrElement();
            _this.updateModel();
            _this.emitSelectionCommands();
        });
    };
    PoRichTextBodyComponent.prototype.addClickListenerOnAnchorElements = function () {
        var _this = this;
        this.bodyElement.nativeElement.querySelectorAll('a').forEach(function (element) {
            element.addEventListener('click', _this.onAnchorClick);
        });
    };
    PoRichTextBodyComponent.prototype.emitSelectionCommands = function () {
        var commands = poRichTextBodyCommands.filter(function (command) { return document.queryCommandState(command); });
        var rgbColor = document.queryCommandValue('ForeColor');
        var hexColor;
        if (!isIE()) {
            hexColor = this.rgbToHex(rgbColor);
        }
        if (this.isCursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
        this.commands.emit({ commands: commands, hexColor: hexColor });
    };
    PoRichTextBodyComponent.prototype.getTextSelection = function () {
        var textSelection = document.getSelection();
        if (!textSelection) {
            return;
        }
        var focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
        var anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
        var node = focusNode || anchorNode;
        var tagName;
        if (node) {
            tagName = node['tagName'] || node['nodeName'];
            return {
                node: node,
                tagName: tagName
            };
        }
    };
    PoRichTextBodyComponent.prototype.handleCommandLink = function (linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
            var linkValue = isFirefox() && !this.isLinkEditing
                ? "&nbsp;" + this.makeLinkTag(urlLink, urlLinkText) + "&nbsp;"
                : this.makeLinkTag(urlLink, urlLinkText);
            document.execCommand(linkCommand, false, linkValue);
        }
        this.addClickListenerOnAnchorElements();
    };
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    PoRichTextBodyComponent.prototype.insertHtmlLinkElement = function (urlLink, urlLinkText) {
        var selection = document.getSelection();
        var selectionRange = selection.getRangeAt(0);
        var elementLink = document.createElement('a');
        var elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    };
    PoRichTextBodyComponent.prototype.isCursorPositionedInALink = function () {
        var textSelection = this.getTextSelection();
        this.linkElement = undefined;
        var isLink = false;
        if (textSelection && textSelection.node && textSelection.tagName === 'A') {
            this.linkElement = textSelection.node;
            isLink = true;
        }
        else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
            isLink = true;
        }
        else {
            isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
        }
        return isLink;
    };
    PoRichTextBodyComponent.prototype.isParentNodeAnchor = function (textSelection) {
        var element = textSelection.node;
        var isLink = false;
        while (element && (element.tagName !== null || element.nodeName !== null)) {
            if (element.tagName === 'A' || element.nodeName === 'A') {
                this.linkElement = element;
                isLink = true;
                return isLink;
            }
            element = element.parentElement || element.parentNode;
        }
        this.linkElement = undefined;
        return isLink;
    };
    PoRichTextBodyComponent.prototype.makeLinkTag = function (urlLink, urlLinkText) {
        return "<a class=\"po-rich-text-link\" href=\"" + urlLink + "\" target=\"_blank\">" + (urlLinkText || urlLink) + "</a>";
    };
    // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
    PoRichTextBodyComponent.prototype.removeBrElement = function () {
        var bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
    };
    PoRichTextBodyComponent.prototype.rgbToHex = function (rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        var sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        var r = (+rgb[0]).toString(16);
        var g = (+rgb[1]).toString(16);
        var b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    };
    PoRichTextBodyComponent.prototype.toggleCursorOnLink = function (event, action) {
        var selection = document.getSelection();
        var element = selection.focusNode ? selection.focusNode.parentNode : undefined;
        var isCtrl = event.key === 'Control';
        var isCommand = event.key === 'Meta';
        var isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
        if (element) {
            if (isOnCtrlLink) {
                element['classList'][action]('po-clickable');
            }
            else {
                var isClickable = element['classList'] && element['classList'].contains('po-clickable');
                if (isClickable) {
                    element['classList'].remove('po-clickable');
                }
            }
            this.updateModel();
        }
    };
    PoRichTextBodyComponent.prototype.updateModel = function () {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    };
    PoRichTextBodyComponent.prototype.updateValueWithModelValue = function () {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    };
    PoRichTextBodyComponent.prototype.verifyCursorPositionInFirefoxIEEdge = function () {
        var textSelection = document.getSelection();
        var nodeLink = textSelection.focusNode;
        var isLink = false;
        if (nodeLink && nodeLink.nodeName === 'A') {
            this.linkElement = nodeLink;
            isLink = true;
        }
        else {
            var range = textSelection.getRangeAt(0);
            var fragmentDocument = range.cloneContents();
            var element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
            this.linkElement = element && element.nodeName === 'A' ? element : undefined;
            isLink = !!this.linkElement;
        }
        return isLink;
    };
    __decorate([
        ViewChild('bodyElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoRichTextBodyComponent.prototype, "bodyElement", void 0);
    __decorate([
        Input('p-height'),
        __metadata("design:type", String)
    ], PoRichTextBodyComponent.prototype, "height", void 0);
    __decorate([
        Input('p-model-value'),
        __metadata("design:type", String)
    ], PoRichTextBodyComponent.prototype, "modelValue", void 0);
    __decorate([
        Input('p-placeholder'),
        __metadata("design:type", String)
    ], PoRichTextBodyComponent.prototype, "placeholder", void 0);
    __decorate([
        Input('p-readonly'),
        __metadata("design:type", String)
    ], PoRichTextBodyComponent.prototype, "readonly", void 0);
    __decorate([
        Output('p-change'),
        __metadata("design:type", Object)
    ], PoRichTextBodyComponent.prototype, "change", void 0);
    __decorate([
        Output('p-commands'),
        __metadata("design:type", Object)
    ], PoRichTextBodyComponent.prototype, "commands", void 0);
    __decorate([
        Output('p-selected-link'),
        __metadata("design:type", Object)
    ], PoRichTextBodyComponent.prototype, "selectedLink", void 0);
    __decorate([
        Output('p-shortcut-command'),
        __metadata("design:type", Object)
    ], PoRichTextBodyComponent.prototype, "shortcutCommand", void 0);
    __decorate([
        Output('p-value'),
        __metadata("design:type", Object)
    ], PoRichTextBodyComponent.prototype, "value", void 0);
    PoRichTextBodyComponent = __decorate([
        Component({
            selector: 'po-rich-text-body',
            template: "<div\n  #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  (paste)=\"onPaste()\"\n></div>\n"
        })
    ], PoRichTextBodyComponent);
    return PoRichTextBodyComponent;
}());
export { PoRichTextBodyComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yaWNoLXRleHQvcG8tcmljaC10ZXh0LWJvZHkvcG8tcmljaC10ZXh0LWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXJFLElBQU0sc0JBQXNCLEdBQUc7SUFDN0IsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsYUFBYTtJQUNiLGVBQWU7SUFDZixjQUFjO0lBQ2QsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQixZQUFZO0NBQ2IsQ0FBQztBQU1GO0lBQUE7UUFnQnNCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRS9CLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRTlCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVwQyxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFckQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUE0TTNDLGtCQUFhLEdBQUcsVUFBQSxLQUFLO1lBQ25CLElBQUEscUJBQU0sRUFBRSx1QkFBTyxFQUFFLHVCQUFPLENBQVc7WUFDM0MsSUFBSSxHQUFHLENBQUM7WUFDUixJQUFJLFdBQVcsQ0FBQztZQUVoQixJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7Z0JBQ3RCLElB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QixNQUFNLENBQUMsaUJBQWlCLENBQUM7O2lFQUF3QztJQUVwQztRQUE3QixNQUFNLENBQUMsb0JBQW9CLENBQUM7O29FQUEyQztJQUVyRDtRQUFsQixNQUFNLENBQUMsU0FBUyxDQUFDOzswREFBaUM7SUF4QnhDLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLHlZQUFpRDtTQUNsRCxDQUFDO09BQ1csdUJBQXVCLENBNlVuQztJQUFELDhCQUFDO0NBQUEsQUE3VUQsSUE2VUM7U0E3VVksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzRmlyZWZveCwgaXNJRSwgaXNJRU9yRWRnZSwgb3BlbkV4dGVybmFsTGluayB9IGZyb20gJy4vLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0tleUNvZGVFbnVtIH0gZnJvbSAnLi8uLi8uLi8uLi8uLi9lbnVtcy9wby1rZXktY29kZS5lbnVtJztcblxuY29uc3QgcG9SaWNoVGV4dEJvZHlDb21tYW5kcyA9IFtcbiAgJ2JvbGQnLFxuICAnaXRhbGljJyxcbiAgJ3VuZGVybGluZScsXG4gICdqdXN0aWZ5bGVmdCcsXG4gICdqdXN0aWZ5Y2VudGVyJyxcbiAgJ2p1c3RpZnlyaWdodCcsXG4gICdqdXN0aWZ5ZnVsbCcsXG4gICdpbnNlcnRVbm9yZGVyZWRMaXN0JyxcbiAgJ0NyZWF0ZWxpbmsnXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1yaWNoLXRleHQtYm9keScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1yaWNoLXRleHQtYm9keS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9SaWNoVGV4dEJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIGlzTGlua0VkaXRpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgbGlua0VsZW1lbnQ6IGFueTtcbiAgcHJpdmF0ZSB0aW1lb3V0Q2hhbmdlOiBhbnk7XG4gIHByaXZhdGUgdmFsdWVCZWZvcmVDaGFuZ2U6IGFueTtcblxuICBAVmlld0NoaWxkKCdib2R5RWxlbWVudCcsIHsgc3RhdGljOiB0cnVlIH0pIGJvZHlFbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgncC1oZWlnaHQnKSBoZWlnaHQ/OiBzdHJpbmc7XG5cbiAgQElucHV0KCdwLW1vZGVsLXZhbHVlJykgbW9kZWxWYWx1ZT86IHN0cmluZztcblxuICBASW5wdXQoJ3AtcGxhY2Vob2xkZXInKSBwbGFjZWhvbGRlcj86IHN0cmluZztcblxuICBASW5wdXQoJ3AtcmVhZG9ubHknKSByZWFkb25seT86IHN0cmluZztcblxuICBAT3V0cHV0KCdwLWNoYW5nZScpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3AtY29tbWFuZHMnKSBjb21tYW5kcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3Atc2VsZWN0ZWQtbGluaycpIHNlbGVjdGVkTGluayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3Atc2hvcnRjdXQtY29tbWFuZCcpIHNob3J0Y3V0Q29tbWFuZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3AtdmFsdWUnKSB2YWx1ZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5kZXNpZ25Nb2RlID0gJ29uJztcblxuICAgIC8vIHRpbWVvdXQgbmVjZXNzw6FyaW8gcGFyYSBzZXRhciBvIHZhbG9yIHZpbmRvIGRvIHdyaXRlVmFsdWUgZG8gY29tcG9uZW50ZSBwcmluY2lwYWwuXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVZhbHVlV2l0aE1vZGVsVmFsdWUoKSk7XG4gIH1cblxuICBleGVjdXRlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcgfCB7IGNvbW1hbmQ6IGFueTsgdmFsdWU6IHN0cmluZyB8IGFueSB9KSB7XG4gICAgdGhpcy5ib2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoY29tbWFuZC5jb21tYW5kID09PSAnSW5zZXJ0SFRNTCcpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGNvbW1hbmQ6IGxpbmtDb21tYW5kLFxuICAgICAgICAgIHZhbHVlOiB7IHVybExpbmsgfSxcbiAgICAgICAgICB2YWx1ZTogeyB1cmxMaW5rVGV4dCB9XG4gICAgICAgIH0gPSBjb21tYW5kO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZExpbmsobGlua0NvbW1hbmQsIHVybExpbmssIHVybExpbmtUZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKGNvbW1hbmQuY29tbWFuZCwgZmFsc2UsIGNvbW1hbmQudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIHRoaXMudmFsdWUuZW1pdCh0aGlzLm1vZGVsVmFsdWUpO1xuICB9XG5cbiAgbGlua0VkaXRpbmcoZXZlbnQpIHtcbiAgICB0aGlzLmlzTGlua0VkaXRpbmcgPSAhIWV2ZW50O1xuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIGlmICh0aGlzLm1vZGVsVmFsdWUgIT09IHRoaXMudmFsdWVCZWZvcmVDaGFuZ2UpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRDaGFuZ2UpO1xuICAgICAgdGhpcy50aW1lb3V0Q2hhbmdlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5tb2RlbFZhbHVlKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5ib2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMuZW1pdFNlbGVjdGlvbkNvbW1hbmRzKCk7XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMudmFsdWVCZWZvcmVDaGFuZ2UgPSB0aGlzLm1vZGVsVmFsdWU7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQpIHtcbiAgICBjb25zdCBrZXlLID0gZXZlbnQua2V5Q29kZSA9PT0gUG9LZXlDb2RlRW51bS5rZXlLO1xuICAgIGNvbnN0IGlzTGlua1Nob3J0Y3V0ID0gKGtleUsgJiYgZXZlbnQuY3RybEtleSkgfHwgKGtleUsgJiYgZXZlbnQubWV0YUtleSk7XG5cbiAgICBpZiAoaXNMaW5rU2hvcnRjdXQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNob3J0Y3V0Q29tbWFuZC5lbWl0KCk7XG4gICAgfVxuXG4gICAgdGhpcy50b2dnbGVDdXJzb3JPbkxpbmsoZXZlbnQsICdhZGQnKTtcbiAgfVxuXG4gIG9uS2V5VXAoZXZlbnQ6IGFueSkge1xuICAgIHRoaXMudG9nZ2xlQ3Vyc29yT25MaW5rKGV2ZW50LCAncmVtb3ZlJyk7XG5cbiAgICB0aGlzLnJlbW92ZUJyRWxlbWVudCgpO1xuICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgICB0aGlzLmVtaXRTZWxlY3Rpb25Db21tYW5kcygpO1xuICB9XG5cbiAgb25QYXN0ZSgpIHtcbiAgICB0aGlzLmFkZENsaWNrTGlzdGVuZXJPbkFuY2hvckVsZW1lbnRzKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlTW9kZWwoKSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlQnJFbGVtZW50KCk7XG4gICAgICB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gICAgICB0aGlzLmVtaXRTZWxlY3Rpb25Db21tYW5kcygpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRDbGlja0xpc3RlbmVyT25BbmNob3JFbGVtZW50cygpIHtcbiAgICB0aGlzLmJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkFuY2hvckNsaWNrKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdFNlbGVjdGlvbkNvbW1hbmRzKCkge1xuICAgIGNvbnN0IGNvbW1hbmRzID0gcG9SaWNoVGV4dEJvZHlDb21tYW5kcy5maWx0ZXIoY29tbWFuZCA9PiBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZShjb21tYW5kKSk7XG4gICAgY29uc3QgcmdiQ29sb3IgPSBkb2N1bWVudC5xdWVyeUNvbW1hbmRWYWx1ZSgnRm9yZUNvbG9yJyk7XG5cbiAgICBsZXQgaGV4Q29sb3I7XG4gICAgaWYgKCFpc0lFKCkpIHtcbiAgICAgIGhleENvbG9yID0gdGhpcy5yZ2JUb0hleChyZ2JDb2xvcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNDdXJzb3JQb3NpdGlvbmVkSW5BTGluaygpKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKCdDcmVhdGVsaW5rJyk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY3RlZExpbmsuZW1pdCh0aGlzLmxpbmtFbGVtZW50KTsgLy8gaW1wb3J0YW50ZSBmaWNhciBmb3JhIGRvIGlmIHBhcmEgZW1pdGlyIG1lc21vIHVuZGVmaW5lZC5cbiAgICB0aGlzLmNvbW1hbmRzLmVtaXQoeyBjb21tYW5kcywgaGV4Q29sb3IgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFRleHRTZWxlY3Rpb24oKSB7XG4gICAgY29uc3QgdGV4dFNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghdGV4dFNlbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb2N1c05vZGUgPSB0ZXh0U2VsZWN0aW9uLmZvY3VzTm9kZSA/IHRleHRTZWxlY3Rpb24uZm9jdXNOb2RlLnBhcmVudEVsZW1lbnQgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgYW5jaG9yTm9kZSA9IHRleHRTZWxlY3Rpb24uYW5jaG9yTm9kZSA/IHRleHRTZWxlY3Rpb24uYW5jaG9yTm9kZS5wYXJlbnROb2RlIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vZGUgPSBmb2N1c05vZGUgfHwgYW5jaG9yTm9kZTtcbiAgICBsZXQgdGFnTmFtZTtcblxuICAgIGlmIChub2RlKSB7XG4gICAgICB0YWdOYW1lID0gbm9kZVsndGFnTmFtZSddIHx8IG5vZGVbJ25vZGVOYW1lJ107XG4gICAgICByZXR1cm4ge1xuICAgICAgICBub2RlLFxuICAgICAgICB0YWdOYW1lXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ29tbWFuZExpbmsobGlua0NvbW1hbmQ6IHN0cmluZywgdXJsTGluazogc3RyaW5nLCB1cmxMaW5rVGV4dDogc3RyaW5nKSB7XG4gICAgaWYgKGlzSUUoKSkge1xuICAgICAgdGhpcy5pbnNlcnRIdG1sTGlua0VsZW1lbnQodXJsTGluaywgdXJsTGlua1RleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAnJm5ic3A7JyBuZWNlc3PDoXJpbyBwYXJhIG8gY3Vyc29yIG7Do28gZmljYXIgcHJlc28gZGVudHJvIGRvIGxpbmsgbm8gRmlyZWZveC5cbiAgICAgIGNvbnN0IGxpbmtWYWx1ZSA9XG4gICAgICAgIGlzRmlyZWZveCgpICYmICF0aGlzLmlzTGlua0VkaXRpbmdcbiAgICAgICAgICA/IGAmbmJzcDske3RoaXMubWFrZUxpbmtUYWcodXJsTGluaywgdXJsTGlua1RleHQpfSZuYnNwO2BcbiAgICAgICAgICA6IHRoaXMubWFrZUxpbmtUYWcodXJsTGluaywgdXJsTGlua1RleHQpO1xuXG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChsaW5rQ29tbWFuZCwgZmFsc2UsIGxpbmtWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDbGlja0xpc3RlbmVyT25BbmNob3JFbGVtZW50cygpO1xuICB9XG5cbiAgLy8gdHJhdGFtZW50byBlc3BlY8OtZmljbyBwYXJhIElFIHBvaXMgbsOjbyBzdXBvcnRhIG8gY29tYW5kbyAnaW5zZXJ0SFRNTCcuXG4gIHByaXZhdGUgaW5zZXJ0SHRtbExpbmtFbGVtZW50KHVybExpbms6IHN0cmluZywgdXJsTGlua1RleHQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIGNvbnN0IHNlbGVjdGlvblJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgY29uc3QgZWxlbWVudExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgY29uc3QgZWxlbWVudGxpbmtUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodXJsTGlua1RleHQpO1xuXG4gICAgZWxlbWVudExpbmsuYXBwZW5kQ2hpbGQoZWxlbWVudGxpbmtUZXh0KTtcbiAgICBlbGVtZW50TGluay5ocmVmID0gdXJsTGluaztcbiAgICBlbGVtZW50TGluay5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsICdfYmxhbmsnKTtcbiAgICBlbGVtZW50TGluay5jbGFzc0xpc3QuYWRkKCdwby1yaWNoLXRleHQtbGluaycpO1xuXG4gICAgc2VsZWN0aW9uUmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcbiAgICBzZWxlY3Rpb25SYW5nZS5pbnNlcnROb2RlKGVsZW1lbnRMaW5rKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDdXJzb3JQb3NpdGlvbmVkSW5BTGluaygpOiBib29sZWFuIHtcbiAgICBjb25zdCB0ZXh0U2VsZWN0aW9uID0gdGhpcy5nZXRUZXh0U2VsZWN0aW9uKCk7XG4gICAgdGhpcy5saW5rRWxlbWVudCA9IHVuZGVmaW5lZDtcblxuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcblxuICAgIGlmICh0ZXh0U2VsZWN0aW9uICYmIHRleHRTZWxlY3Rpb24ubm9kZSAmJiB0ZXh0U2VsZWN0aW9uLnRhZ05hbWUgPT09ICdBJykge1xuICAgICAgdGhpcy5saW5rRWxlbWVudCA9IHRleHRTZWxlY3Rpb24ubm9kZTtcbiAgICAgIGlzTGluayA9IHRydWU7XG4gICAgfSBlbHNlIGlmICgoaXNGaXJlZm94KCkgfHwgaXNJRU9yRWRnZSgpKSAmJiB0aGlzLnZlcmlmeUN1cnNvclBvc2l0aW9uSW5GaXJlZm94SUVFZGdlKCkpIHtcbiAgICAgIGlzTGluayA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzTGluayA9IHRleHRTZWxlY3Rpb24gPyB0aGlzLmlzUGFyZW50Tm9kZUFuY2hvcih0ZXh0U2VsZWN0aW9uKSA6IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaXNMaW5rO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1BhcmVudE5vZGVBbmNob3IodGV4dFNlbGVjdGlvbik6IGJvb2xlYW4ge1xuICAgIGxldCBlbGVtZW50ID0gdGV4dFNlbGVjdGlvbi5ub2RlO1xuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIChlbGVtZW50LnRhZ05hbWUgIT09IG51bGwgfHwgZWxlbWVudC5ub2RlTmFtZSAhPT0gbnVsbCkpIHtcbiAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdBJyB8fCBlbGVtZW50Lm5vZGVOYW1lID09PSAnQScpIHtcbiAgICAgICAgdGhpcy5saW5rRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGlzTGluayA9IHRydWU7XG4gICAgICAgIHJldHVybiBpc0xpbms7XG4gICAgICB9XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICB0aGlzLmxpbmtFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBpc0xpbms7XG4gIH1cblxuICBwcml2YXRlIG1ha2VMaW5rVGFnKHVybExpbms6IHN0cmluZywgdXJsTGlua1RleHQ6IHN0cmluZykge1xuICAgIHJldHVybiBgPGEgY2xhc3M9XCJwby1yaWNoLXRleHQtbGlua1wiIGhyZWY9XCIke3VybExpbmt9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHt1cmxMaW5rVGV4dCB8fCB1cmxMaW5rfTwvYT5gO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkFuY2hvckNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0LCBjdHJsS2V5LCBtZXRhS2V5IH0gPSBldmVudDtcbiAgICBsZXQgdXJsO1xuICAgIGxldCBlbGVtZW50TGluaztcblxuICAgIGlmIChjdHJsS2V5IHx8IG1ldGFLZXkpIHtcbiAgICAgIGlmIChldmVudC5wYXRoKSB7XG4gICAgICAgIGV2ZW50LnBhdGguZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0EnKSB7XG4gICAgICAgICAgICB1cmwgPSBlbGVtZW50LmhyZWY7XG4gICAgICAgICAgICBlbGVtZW50TGluayA9IGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9IHRhcmdldC5hdHRyaWJ1dGVzLmhyZWYudmFsdWU7XG4gICAgICAgIGVsZW1lbnRMaW5rID0gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgb3BlbkV4dGVybmFsTGluayh1cmwpO1xuICAgICAgZWxlbWVudExpbmsuY2xhc3NMaXN0LnJlbW92ZSgncG8tY2xpY2thYmxlJyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRyYXRhbWVudG8gbmVjZXNzw6FyaW8gcGFyYSBlbGltaW5hciBhIHRhZyA8YnI+IGNyaWFkYSBubyBmaXJlZm94IHF1YW5kbyBvIGJvZHkgZm9yIGxpbXBvLlxuICBwcml2YXRlIHJlbW92ZUJyRWxlbWVudCgpIHtcbiAgICBjb25zdCBib2R5RWxlbWVudCA9IHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudDtcblxuICAgIGlmICghYm9keUVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSAmJiBib2R5RWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBib2R5RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdicicpKSB7XG4gICAgICBib2R5RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdicicpLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmdiVG9IZXgocmdiKSB7XG4gICAgLy8gVHJhdGFtZW50byBuZWNlc3PDoXJpbyBwYXJhIGNvbnZlcnRlciBvIGPDs2RpZ28gcmdiIHBhcmEgaGV4YWRlY2ltYWwuXG4gICAgY29uc3Qgc2VwID0gcmdiLmluZGV4T2YoJywnKSA+IC0xID8gJywnIDogJyAnO1xuICAgIHJnYiA9IHJnYi5zdWJzdHIoNCkuc3BsaXQoJyknKVswXS5zcGxpdChzZXApO1xuXG4gICAgbGV0IHIgPSAoK3JnYlswXSkudG9TdHJpbmcoMTYpO1xuICAgIGxldCBnID0gKCtyZ2JbMV0pLnRvU3RyaW5nKDE2KTtcbiAgICBsZXQgYiA9ICgrcmdiWzJdKS50b1N0cmluZygxNik7XG5cbiAgICBpZiAoci5sZW5ndGggPT09IDEpIHtcbiAgICAgIHIgPSAnMCcgKyByO1xuICAgIH1cbiAgICBpZiAoZy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGcgPSAnMCcgKyBnO1xuICAgIH1cbiAgICBpZiAoYi5sZW5ndGggPT09IDEpIHtcbiAgICAgIGIgPSAnMCcgKyBiO1xuICAgIH1cblxuICAgIHJldHVybiAnIycgKyByICsgZyArIGI7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZUN1cnNvck9uTGluayhldmVudDogYW55LCBhY3Rpb246ICdhZGQnIHwgJ3JlbW92ZScpIHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICBjb25zdCBlbGVtZW50ID0gc2VsZWN0aW9uLmZvY3VzTm9kZSA/IHNlbGVjdGlvbi5mb2N1c05vZGUucGFyZW50Tm9kZSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBpc0N0cmwgPSBldmVudC5rZXkgPT09ICdDb250cm9sJztcbiAgICBjb25zdCBpc0NvbW1hbmQgPSBldmVudC5rZXkgPT09ICdNZXRhJztcbiAgICBjb25zdCBpc09uQ3RybExpbmsgPSB0aGlzLmlzQ3Vyc29yUG9zaXRpb25lZEluQUxpbmsoKSAmJiAoaXNDdHJsIHx8IGlzQ29tbWFuZCk7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgaWYgKGlzT25DdHJsTGluaykge1xuICAgICAgICBlbGVtZW50WydjbGFzc0xpc3QnXVthY3Rpb25dKCdwby1jbGlja2FibGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2thYmxlID0gZWxlbWVudFsnY2xhc3NMaXN0J10gJiYgZWxlbWVudFsnY2xhc3NMaXN0J10uY29udGFpbnMoJ3BvLWNsaWNrYWJsZScpO1xuXG4gICAgICAgIGlmIChpc0NsaWNrYWJsZSkge1xuICAgICAgICAgIGVsZW1lbnRbJ2NsYXNzTGlzdCddLnJlbW92ZSgncG8tY2xpY2thYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU1vZGVsKCkge1xuICAgIHRoaXMubW9kZWxWYWx1ZSA9IHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5pbm5lckhUTUw7XG5cbiAgICB0aGlzLnZhbHVlLmVtaXQodGhpcy5tb2RlbFZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVmFsdWVXaXRoTW9kZWxWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5tb2RlbFZhbHVlKSB7XG4gICAgICB0aGlzLmJvZHlFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgdGhpcy5tb2RlbFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeUN1cnNvclBvc2l0aW9uSW5GaXJlZm94SUVFZGdlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHRleHRTZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICBjb25zdCBub2RlTGluayA9IHRleHRTZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcblxuICAgIGlmIChub2RlTGluayAmJiBub2RlTGluay5ub2RlTmFtZSA9PT0gJ0EnKSB7XG4gICAgICB0aGlzLmxpbmtFbGVtZW50ID0gbm9kZUxpbms7XG4gICAgICBpc0xpbmsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByYW5nZSA9IHRleHRTZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgIGNvbnN0IGZyYWdtZW50RG9jdW1lbnQgPSByYW5nZS5jbG9uZUNvbnRlbnRzKCk7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZnJhZ21lbnREb2N1bWVudC5jaGlsZE5vZGVzWzBdIHx8IGZyYWdtZW50RG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG5cbiAgICAgIHRoaXMubGlua0VsZW1lbnQgPSBlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgPT09ICdBJyA/IGVsZW1lbnQgOiB1bmRlZmluZWQ7XG4gICAgICBpc0xpbmsgPSAhIXRoaXMubGlua0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTGluaztcbiAgfVxufVxuIl19