import { __assign, __awaiter, __decorate, __generator, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { convertImageToBase64, isExternalLink, isIE } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoModalComponent } from '../../../po-modal';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
import { PoUploadComponent } from '../../po-upload/po-upload.component';
var uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
var PoRichTextModalComponent = /** @class */ (function () {
    function PoRichTextModalComponent(languageService) {
        var _this = this;
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: function () {
                _this.modal.close();
                _this.command.emit();
                _this.retrieveCursorPosition();
                _this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: function () { return _this.insertElementRef(); }
        };
        this.modalLinkConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: function () { return (_this.isLinkEditing ? _this.toEditLink() : _this.toInsertLink(_this.urlLink, _this.urlLinkText)); }
        };
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
    }
    Object.defineProperty(PoRichTextModalComponent.prototype, "modalTitle", {
        get: function () {
            if (this.modalType === 'image') {
                return this.literals.insertImage;
            }
            return this.linkConfirmAction();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "isUploadValid", {
        get: function () {
            return !!(this.uploadModel && this.uploadModel.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "isUrlValid", {
        get: function () {
            return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "modalPrimaryAction", {
        get: function () {
            return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
        },
        enumerable: true,
        configurable: true
    });
    PoRichTextModalComponent.prototype.convertToBase64 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploadImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isUploadValid) return [3 /*break*/, 2];
                        uploadImage = this.uploadModel[0].rawFile;
                        return [4 /*yield*/, convertImageToBase64(uploadImage)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PoRichTextModalComponent.prototype.linkConfirmAction = function () {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    };
    PoRichTextModalComponent.prototype.emitCommand = function (value) {
        var command;
        if (value && this.modalType === PoRichTextModalType.Image) {
            command = 'insertImage';
            this.command.emit({ command: command, value: value });
        }
    };
    PoRichTextModalComponent.prototype.formModelValidate = function () {
        return (this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid);
    };
    PoRichTextModalComponent.prototype.insertElementRef = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploadImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.modalType === PoRichTextModalType.Image && !this.urlImage)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.convertToBase64()];
                    case 1:
                        uploadImage = _a.sent();
                        _a.label = 2;
                    case 2:
                        this.retrieveCursorPosition();
                        this.modal.close();
                        if (this.isUrlValid || this.isUploadValid) {
                            this.emitCommand(this.urlImage || uploadImage);
                        }
                        this.cleanUpFields();
                        return [2 /*return*/];
                }
            });
        });
    };
    PoRichTextModalComponent.prototype.openModal = function (type) {
        this.modalType = type;
        this.saveCursorPosition();
        if (this.modalType === PoRichTextModalType.Link) {
            this.prepareModalForLink();
            this.modalLinkConfirmAction.label = this.linkConfirmAction();
        }
        this.modal.open();
    };
    PoRichTextModalComponent.prototype.selectedLink = function (event) {
        this.isSelectedLink = !!event;
        this.linkElement = event;
    };
    PoRichTextModalComponent.prototype.checkIfIsEmpty = function (urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    };
    PoRichTextModalComponent.prototype.cleanUpFields = function () {
        this.urlImage = undefined;
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.uploadModel = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    };
    PoRichTextModalComponent.prototype.formReset = function (control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    };
    PoRichTextModalComponent.prototype.prepareModalForLink = function () {
        var _this = this;
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(function () {
            _this.formModelValidate();
        });
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    };
    PoRichTextModalComponent.prototype.restoreSelection = function () {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    };
    PoRichTextModalComponent.prototype.retrieveCursorPosition = function () {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    };
    PoRichTextModalComponent.prototype.saveCursorPosition = function () {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    };
    PoRichTextModalComponent.prototype.saveSelectionText = function () {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    };
    PoRichTextModalComponent.prototype.setLinkEditableForModal = function () {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    };
    PoRichTextModalComponent.prototype.toEditLink = function () {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    };
    PoRichTextModalComponent.prototype.toInsertLink = function (urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        var urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        var urlAsExternalLink = isExternalLink(urlLink) ? urlLink : "http://" + urlLink;
        var command = 'InsertHTML';
        var value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command: command, value: value });
        this.cleanUpFields();
    };
    PoRichTextModalComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    __decorate([
        ViewChild('modal', { static: true }),
        __metadata("design:type", PoModalComponent)
    ], PoRichTextModalComponent.prototype, "modal", void 0);
    __decorate([
        ViewChild('modalImageForm'),
        __metadata("design:type", NgForm)
    ], PoRichTextModalComponent.prototype, "modalImageForm", void 0);
    __decorate([
        ViewChild('upload', { static: true }),
        __metadata("design:type", PoUploadComponent)
    ], PoRichTextModalComponent.prototype, "upload", void 0);
    __decorate([
        ViewChild('modalImage', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoRichTextModalComponent.prototype, "modalImage", void 0);
    __decorate([
        ViewChild('modalLink', { static: true }),
        __metadata("design:type", PoModalComponent)
    ], PoRichTextModalComponent.prototype, "modalLink", void 0);
    __decorate([
        ViewChild('modalLinkForm'),
        __metadata("design:type", NgForm)
    ], PoRichTextModalComponent.prototype, "modalLinkForm", void 0);
    __decorate([
        Output('p-command'),
        __metadata("design:type", Object)
    ], PoRichTextModalComponent.prototype, "command", void 0);
    __decorate([
        Output('p-link-editing'),
        __metadata("design:type", Object)
    ], PoRichTextModalComponent.prototype, "linkEditing", void 0);
    PoRichTextModalComponent = __decorate([
        Component({
            selector: 'po-rich-text-modal',
            template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalPrimaryAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"modalTitle\"\n>\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\n</po-modal>\n\n<ng-template #modalImage>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #modalLink>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n"
        }),
        __metadata("design:paramtypes", [PoLanguageService])
    ], PoRichTextModalComponent);
    return PoRichTextModalComponent;
}());
export { PoRichTextModalComponent };
//# sourceMappingURL=data:application/json;base64,