import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../../utils/util';
import { maxlengpoailed, minlengpoailed, requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 */
var PoTextareaBaseComponent = /** @class */ (function () {
    function PoTextareaBaseComponent() {
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
        this.placeholder = '';
        /** Evento disparado ao sair do campo. */
        this.blur = new EventEmitter();
        /** Evento disparado ao entrar do campo. */
        this.enter = new EventEmitter();
        /** Evento disparado ao alterar valor e deixar o campo. */
        this.change = new EventEmitter();
        /** Evento disparado ao alterar valor do model. */
        this.changeModel = new EventEmitter();
    }
    Object.defineProperty(PoTextareaBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: function (readonly) {
            this._readonly = convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "minlength", {
        get: function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: function (minlength) {
            this._minlength = convertToInt(minlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "maxlength", {
        get: function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: function (maxlength) {
            this._maxlength = convertToInt(maxlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "rows", {
        get: function () {
            return this._rows;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade de linhas que serão exibidas.
         *
         * @default `3`
         */
        set: function (value) {
            this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    PoTextareaBaseComponent.prototype.callOnChange = function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    };
    PoTextareaBaseComponent.prototype.controlChangeModelEmitter = function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    PoTextareaBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangePropagate = func;
    };
    PoTextareaBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouched = func;
    };
    PoTextareaBaseComponent.prototype.registerOnValidatorChange = function (func) {
        this.validatorChange = func;
    };
    PoTextareaBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
    };
    // Função implementada do ControlValueAccessor
    PoTextareaBaseComponent.prototype.writeValue = function (value) {
        this.writeValueModel(value);
    };
    PoTextareaBaseComponent.prototype.validateModel = function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    __decorate([
        Input('p-auto-focus'), InputBoolean(),
        __metadata("design:type", Boolean)
    ], PoTextareaBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-label'),
        __metadata("design:type", String)
    ], PoTextareaBaseComponent.prototype, "label", void 0);
    __decorate([
        Input('p-help'),
        __metadata("design:type", String)
    ], PoTextareaBaseComponent.prototype, "help", void 0);
    __decorate([
        Input('p-placeholder'),
        __metadata("design:type", String)
    ], PoTextareaBaseComponent.prototype, "placeholder", void 0);
    __decorate([
        Input('name'),
        __metadata("design:type", String)
    ], PoTextareaBaseComponent.prototype, "name", void 0);
    __decorate([
        Input('p-disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTextareaBaseComponent.prototype, "disabled", null);
    __decorate([
        Input('p-optional'),
        __metadata("design:type", Boolean)
    ], PoTextareaBaseComponent.prototype, "optional", void 0);
    __decorate([
        Input('p-readonly'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTextareaBaseComponent.prototype, "readonly", null);
    __decorate([
        Input('p-required'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTextareaBaseComponent.prototype, "required", null);
    __decorate([
        Input('p-minlength'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoTextareaBaseComponent.prototype, "minlength", null);
    __decorate([
        Input('p-maxlength'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoTextareaBaseComponent.prototype, "maxlength", null);
    __decorate([
        Input('p-rows'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoTextareaBaseComponent.prototype, "rows", null);
    __decorate([
        Output('p-blur'),
        __metadata("design:type", EventEmitter)
    ], PoTextareaBaseComponent.prototype, "blur", void 0);
    __decorate([
        Output('p-enter'),
        __metadata("design:type", EventEmitter)
    ], PoTextareaBaseComponent.prototype, "enter", void 0);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoTextareaBaseComponent.prototype, "change", void 0);
    __decorate([
        Output('p-change-model'),
        __metadata("design:type", EventEmitter)
    ], PoTextareaBaseComponent.prototype, "changeModel", void 0);
    PoTextareaBaseComponent = __decorate([
        Directive()
    ], PoTextareaBaseComponent);
    return PoTextareaBaseComponent;
}());
export { PoTextareaBaseComponent };
//# sourceMappingURL=data:application/json;base64,