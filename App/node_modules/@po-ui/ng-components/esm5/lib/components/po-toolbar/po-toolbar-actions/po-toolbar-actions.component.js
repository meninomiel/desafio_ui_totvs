import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { isTypeof } from '../../../utils/util';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
var poToolbarActionsIconDefault = 'po-icon-more';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
var PoToolbarActionsComponent = /** @class */ (function () {
    function PoToolbarActionsComponent() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    Object.defineProperty(PoToolbarActionsComponent.prototype, "actionsIcon", {
        get: function () {
            return this._actionsIcon;
        },
        /** Define o ícone das ações. */
        set: function (icon) {
            this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('p-actions'),
        __metadata("design:type", Array)
    ], PoToolbarActionsComponent.prototype, "actions", void 0);
    __decorate([
        Input('p-actions-icon'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoToolbarActionsComponent.prototype, "actionsIcon", null);
    PoToolbarActionsComponent = __decorate([
        Component({
            selector: 'po-toolbar-actions',
            template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\n",
            providers: [PoControlPositionService]
        })
    ], PoToolbarActionsComponent);
    return PoToolbarActionsComponent;
}());
export { PoToolbarActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdG9vbGJhci9wby10b29sYmFyLWFjdGlvbnMvcG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBSTdHLElBQU0sMkJBQTJCLEdBQUcsY0FBYyxDQUFDO0FBRW5EOzs7Ozs7OztHQVFHO0FBTUg7SUFBQTtRQUNVLGlCQUFZLEdBQVksMkJBQTJCLENBQUM7SUFhOUQsQ0FBQztJQVAwQixzQkFBSSxrREFBVzthQUl4QztZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDO1FBUEQsZ0NBQWdDO2FBQ1AsVUFBZ0IsSUFBWTtZQUNuRCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7UUFDcEYsQ0FBQzs7O09BQUE7SUFMbUI7UUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQztrQ0FBVyxLQUFLOzhEQUFrQjtJQUc1QjtRQUF4QixLQUFLLENBQUMsZ0JBQWdCLENBQUM7OztnRUFFdkI7SUFUVSx5QkFBeUI7UUFMckMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG9CQUFvQjtZQUM5Qiw0UUFBa0Q7WUFDbEQsU0FBUyxFQUFFLENBQUMsd0JBQXdCLENBQUM7U0FDdEMsQ0FBQztPQUNXLHlCQUF5QixDQWNyQztJQUFELGdDQUFDO0NBQUEsQUFkRCxJQWNDO1NBZFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9Db250cm9sUG9zaXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb1Rvb2xiYXJBY3Rpb24gfSBmcm9tICcuLi9wby10b29sYmFyLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG5jb25zdCBwb1Rvb2xiYXJBY3Rpb25zSWNvbkRlZmF1bHQgPSAncG8taWNvbi1tb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAdXNlZEJ5IFBvVG9vbGJhckNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tdG9vbGJhci1hY3Rpb25zYCB0ZW0gY29tbyBvYmpldGl2byByZWNlYmVyIHVtYSBsaXN0YSBkZSBhw6fDtWVzIGUgdW0gw61jb25lIHF1ZSBwb2RlbSBzZXIgcGVyc29uYWxpemFkb3MuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRvb2xiYXItYWN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10b29sYmFyLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtQb0NvbnRyb2xQb3NpdGlvblNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFBvVG9vbGJhckFjdGlvbnNDb21wb25lbnQge1xuICBwcml2YXRlIF9hY3Rpb25zSWNvbj86IHN0cmluZyA9IHBvVG9vbGJhckFjdGlvbnNJY29uRGVmYXVsdDtcblxuICAvKiogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzLiAqL1xuICBASW5wdXQoJ3AtYWN0aW9ucycpIGFjdGlvbnM/OiBBcnJheTxQb1Rvb2xiYXJBY3Rpb24+O1xuXG4gIC8qKiBEZWZpbmUgbyDDrWNvbmUgZGFzIGHDp8O1ZXMuICovXG4gIEBJbnB1dCgncC1hY3Rpb25zLWljb24nKSBzZXQgYWN0aW9uc0ljb24oaWNvbjogc3RyaW5nKSB7XG4gICAgdGhpcy5fYWN0aW9uc0ljb24gPSBpc1R5cGVvZihpY29uLCAnc3RyaW5nJykgPyBpY29uIDogcG9Ub29sYmFyQWN0aW9uc0ljb25EZWZhdWx0O1xuICB9XG5cbiAgZ2V0IGFjdGlvbnNJY29uKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3Rpb25zSWNvbjtcbiAgfVxufVxuIl19