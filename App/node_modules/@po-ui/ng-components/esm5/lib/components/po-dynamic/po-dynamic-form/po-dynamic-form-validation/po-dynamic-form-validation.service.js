import { __assign, __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
var PoDynamicFormValidationService = /** @class */ (function (_super) {
    __extends(PoDynamicFormValidationService, _super);
    function PoDynamicFormValidationService(http) {
        return _super.call(this, http) || this;
    }
    PoDynamicFormValidationService.prototype.sendFieldChange = function (field, value) {
        var _this = this;
        var changedValue = { property: field.property, value: value };
        return this.execute(field.validate, changedValue).pipe(map(function (validateFields) { return _this.setFieldDefaultIfEmpty(validateFields); }));
    };
    PoDynamicFormValidationService.prototype.sendFormChange = function (validate, field, value) {
        var _this = this;
        var changedValue = { property: field.property, value: value };
        return this.execute(validate, changedValue).pipe(map(function (validateFields) { return _this.setFormDefaultIfEmpty(validateFields); }));
    };
    PoDynamicFormValidationService.prototype.updateFieldsForm = function (validatedFields, fields) {
        if (validatedFields === void 0) { validatedFields = []; }
        if (fields === void 0) { fields = []; }
        return __spread(validatedFields).reduce(function (updatedFields, validatedField) {
            var index = updatedFields.findIndex(function (field) { return field.property === validatedField.property; });
            var hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = __assign(__assign({}, fields[index]), validatedField);
            }
            return updatedFields;
        }, __spread(fields));
    };
    PoDynamicFormValidationService.prototype.setFieldDefaultIfEmpty = function (validateFields) {
        return (validateFields || {
            field: {}
        });
    };
    PoDynamicFormValidationService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoDynamicFormValidationService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoDynamicFormValidationService);
    return PoDynamicFormValidationService;
}(PoDynamicFormOperation));
export { PoDynamicFormValidationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBSWhHO0lBQW9ELGtEQUFzQjtJQUN4RSx3Q0FBWSxJQUFnQjtlQUMxQixrQkFBTSxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsd0RBQWUsR0FBZixVQUFnQixLQUF5QixFQUFFLEtBQVU7UUFBckQsaUJBTUM7UUFMQyxJQUFNLFlBQVksR0FBOEIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDcEQsR0FBRyxDQUFDLFVBQUEsY0FBYyxJQUFJLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxFQUEzQyxDQUEyQyxDQUFDLENBQ25FLENBQUM7SUFDSixDQUFDO0lBRUQsdURBQWMsR0FBZCxVQUNFLFFBQTJCLEVBQzNCLEtBQXlCLEVBQ3pCLEtBQVU7UUFIWixpQkFRQztRQUhDLElBQU0sWUFBWSxHQUE4QixFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsY0FBYyxJQUFJLE9BQUEsS0FBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxFQUExQyxDQUEwQyxDQUFDLENBQUMsQ0FBQztJQUN0SCxDQUFDO0lBRUQseURBQWdCLEdBQWhCLFVBQWlCLGVBQStDLEVBQUUsTUFBc0M7UUFBdkYsZ0NBQUEsRUFBQSxvQkFBK0M7UUFBRSx1QkFBQSxFQUFBLFdBQXNDO1FBQ3RHLE9BQU8sU0FBSSxlQUFlLEVBQUUsTUFBTSxDQUNoQyxVQUFDLGFBQWEsRUFBRSxjQUFjO1lBQzVCLElBQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsUUFBUSxLQUFLLGNBQWMsQ0FBQyxRQUFRLEVBQTFDLENBQTBDLENBQUMsQ0FBQztZQUMzRixJQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMseUJBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFLLGNBQWMsQ0FBRSxDQUFDO2FBQ2hFO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxXQUNHLE1BQU0sRUFDWCxDQUFDO0lBQ0osQ0FBQztJQUVPLCtEQUFzQixHQUE5QixVQUErQixjQUFtQjtRQUNoRCxPQUFPLENBQ0wsY0FBYyxJQUFJO1lBQ2hCLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBNUNpQixVQUFVOztJQURqQiw4QkFBOEI7UUFEMUMsVUFBVSxFQUFFO3lDQUVPLFVBQVU7T0FEakIsOEJBQThCLENBOEMxQztJQUFELHFDQUFDO0NBQUEsQUE5Q0QsQ0FBb0Qsc0JBQXNCLEdBOEN6RTtTQTlDWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZCB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLWNoYW5nZWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1PcGVyYXRpb24gfSBmcm9tICcuLi9wby1keW5hbWljLWZvcm0tb3BlcmF0aW9uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24nO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybVZhbGlkYXRpb24gfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGh0dHApO1xuICB9XG5cbiAgc2VuZEZpZWxkQ2hhbmdlKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCBjaGFuZ2VkVmFsdWU6IFBvRHluYW1pY0Zvcm1GaWVsZENoYW5nZWQgPSB7IHByb3BlcnR5OiBmaWVsZC5wcm9wZXJ0eSwgdmFsdWUgfTtcblxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoZmllbGQudmFsaWRhdGUsIGNoYW5nZWRWYWx1ZSkucGlwZShcbiAgICAgIG1hcCh2YWxpZGF0ZUZpZWxkcyA9PiB0aGlzLnNldEZpZWxkRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHMpKVxuICAgICk7XG4gIH1cblxuICBzZW5kRm9ybUNoYW5nZShcbiAgICB2YWxpZGF0ZTogRnVuY3Rpb24gfCBzdHJpbmcsXG4gICAgZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCxcbiAgICB2YWx1ZTogYW55XG4gICk6IE9ic2VydmFibGU8UG9EeW5hbWljRm9ybVZhbGlkYXRpb24+IHtcbiAgICBjb25zdCBjaGFuZ2VkVmFsdWU6IFBvRHluYW1pY0Zvcm1GaWVsZENoYW5nZWQgPSB7IHByb3BlcnR5OiBmaWVsZC5wcm9wZXJ0eSwgdmFsdWUgfTtcblxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUodmFsaWRhdGUsIGNoYW5nZWRWYWx1ZSkucGlwZShtYXAodmFsaWRhdGVGaWVsZHMgPT4gdGhpcy5zZXRGb3JtRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHMpKSk7XG4gIH1cblxuICB1cGRhdGVGaWVsZHNGb3JtKHZhbGlkYXRlZEZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdLCBmaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSkge1xuICAgIHJldHVybiBbLi4udmFsaWRhdGVkRmllbGRzXS5yZWR1Y2UoXG4gICAgICAodXBkYXRlZEZpZWxkcywgdmFsaWRhdGVkRmllbGQpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB1cGRhdGVkRmllbGRzLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5wcm9wZXJ0eSA9PT0gdmFsaWRhdGVkRmllbGQucHJvcGVydHkpO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eSA9IGluZGV4ID49IDA7XG5cbiAgICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XG4gICAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLnZhbGlkYXRlZEZpZWxkIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXBkYXRlZEZpZWxkcztcbiAgICAgIH0sXG4gICAgICBbLi4uZmllbGRzXVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldEZpZWxkRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHM6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbGlkYXRlRmllbGRzIHx8IHtcbiAgICAgICAgZmllbGQ6IHt9XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuIl19