import { __decorate, __extends, __metadata } from "tslib";
import { Component, ChangeDetectorRef, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { PoDynamicFormBaseComponent } from './po-dynamic-form-base.component';
import { PoDynamicFormLoadService } from './po-dynamic-form-load/po-dynamic-form-load.service';
import { PoDynamicFormValidationService } from './po-dynamic-form-validation/po-dynamic-form-validation.service';
/**
 * @docsExtends PoDynamicFormBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
 * </example>
 */
var PoDynamicFormComponent = /** @class */ (function (_super) {
    __extends(PoDynamicFormComponent, _super);
    function PoDynamicFormComponent(changes, loadService, validationService) {
        var _this = _super.call(this) || this;
        _this.changes = changes;
        _this.loadService = loadService;
        _this.validationService = validationService;
        return _this;
    }
    Object.defineProperty(PoDynamicFormComponent.prototype, "form", {
        get: function () {
            return this._form || {};
        },
        set: function (value) {
            var _this = this;
            // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(function () {
                _this._form = value;
                _this.emitForm();
            });
        },
        enumerable: true,
        configurable: true
    });
    PoDynamicFormComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    PoDynamicFormComponent.prototype.ngOnInit = function () {
        if (this.load) {
            this.loadDataOnInitialize();
        }
    };
    /**
     * Função que atribui foco ao campo desejado.
     *
     * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
     *
     * ``` html
     * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
     * ```
     *
     * ``` javascript
     * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
     *
     * fields: Array<PoDynamicFormField> = [
     *   { property: 'fieldOne' },
     *   { property: 'fieldTwo' }
     * ];
     *
     * fieldFocus() {
     *   this.dynamicForm.focus('fieldTwo');
     * }
     * ```
     *
     * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
     */
    PoDynamicFormComponent.prototype.focus = function (property) {
        this.fieldsComponent.focus(property);
    };
    PoDynamicFormComponent.prototype.validateForm = function (field) {
        var _this = this;
        var previousFocusElement = document.activeElement;
        this.disableForm(true);
        var errorOnValidation = function () { return _this.disableForm(false); };
        this.sendFormSubscription = this.validationService
            .sendFormChange(this.validate, field, this.value)
            .subscribe(this.applyFormValidation(previousFocusElement), errorOnValidation);
    };
    PoDynamicFormComponent.prototype.applyFormUpdatesOnLoad = function (previousFocusElement) {
        var _this = this;
        return function (dynamicFormData) {
            _this.updateModelOnLoad(dynamicFormData);
            _this.disableForm(false);
            _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    };
    PoDynamicFormComponent.prototype.applyFormValidation = function (previousFocusElement) {
        var _this = this;
        return function (dynamicFormData) {
            _this.updateModelWithValidation(dynamicFormData);
            _this.disableForm(false);
            _this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    };
    PoDynamicFormComponent.prototype.disableForm = function (value) {
        this.disabledForm = value;
        this.changes.detectChanges();
    };
    PoDynamicFormComponent.prototype.emitForm = function () {
        if (!this.groupForm && this.formOutput.observers.length) {
            this.formOutput.emit(this.form);
        }
    };
    PoDynamicFormComponent.prototype.loadDataOnInitialize = function () {
        var _this = this;
        var previousFocusElement = document.activeElement;
        this.disabledForm = true;
        var errorOnLoad = function () { return (_this.disabledForm = false); };
        this.onLoadSubscription = this.loadService
            .executeLoad(this.load, this.value)
            .subscribe(this.applyFormUpdatesOnLoad(previousFocusElement), errorOnLoad);
    };
    PoDynamicFormComponent.prototype.removeListeners = function () {
        if (this.onLoadSubscription) {
            this.onLoadSubscription.unsubscribe();
        }
        if (this.sendFormSubscription) {
            this.sendFormSubscription.unsubscribe();
        }
    };
    PoDynamicFormComponent.prototype.setFocusOnFieldByProperty = function (property, previousFocusElement) {
        var _this = this;
        if (property) {
            // precisa do timeout para que o valor seja atribuido no campo antes de setar o focus,
            // para nao disparar a mudança posteriormente. Situação ocorre quando retornar campo com valor e focus atribuido a ele.
            setTimeout(function () { return _this.focus(property); });
        }
        else {
            previousFocusElement['focus']();
        }
    };
    PoDynamicFormComponent.prototype.updateModelOnLoad = function (loadedFormData) {
        Object.assign(this.value, loadedFormData.value);
        this.fields = this.loadService.createAndUpdateFieldsForm(loadedFormData.fields, this.fields);
    };
    PoDynamicFormComponent.prototype.updateModelWithValidation = function (formData) {
        Object.assign(this.value, formData.value);
        this.fields = this.validationService.updateFieldsForm(formData.fields, this.fields);
    };
    PoDynamicFormComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: PoDynamicFormLoadService },
        { type: PoDynamicFormValidationService }
    ]; };
    __decorate([
        ViewChild('dynamicForm'),
        __metadata("design:type", NgForm),
        __metadata("design:paramtypes", [NgForm])
    ], PoDynamicFormComponent.prototype, "form", null);
    __decorate([
        ViewChild('fieldsComponent'),
        __metadata("design:type", Object)
    ], PoDynamicFormComponent.prototype, "fieldsComponent", void 0);
    PoDynamicFormComponent = __decorate([
        Component({
            selector: 'po-dynamic-form',
            template: "<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n  <po-dynamic-form-fields #fieldsComponent [p-auto-focus]=\"autoFocus\" [p-fields]=\"fields\" [p-value]=\"value\">\n  </po-dynamic-form-fields>\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n  <form #dynamicForm=\"ngForm\">\n    <po-dynamic-form-fields\n      #fieldsComponent\n      [(p-fields)]=\"fields\"\n      [p-auto-focus]=\"autoFocus\"\n      [p-disabled-form]=\"disabledForm\"\n      [p-validate]=\"validate\"\n      [p-value]=\"value\"\n      (p-form-validate)=\"validateForm($event)\"\n    >\n    </po-dynamic-form-fields>\n  </form>\n</ng-template>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            PoDynamicFormLoadService,
            PoDynamicFormValidationService])
    ], PoDynamicFormComponent);
    return PoDynamicFormComponent;
}(PoDynamicFormBaseComponent));
export { PoDynamicFormComponent };
//# sourceMappingURL=data:application/json;base64,