import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
var PoDynamicFormBaseComponent = /** @class */ (function () {
    function PoDynamicFormBaseComponent() {
        this._groupForm = false;
        /**
         * @optional
         *
         * @description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <po-dynamic-form #dynamicForm>
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
         *  </po-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <po-dynamic-form (p-form)="getForm($event)">
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
         *  </po-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new EventEmitter();
    }
    Object.defineProperty(PoDynamicFormBaseComponent.prototype, "groupForm", {
        get: function () {
            return this._groupForm;
        },
        /**
         * @optional
         *
         * @description
         * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
         * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
         *
         * ```html
         * <form #parentForm="ngForm">
         *
         *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
         * </form>
         * ```
         */
        set: function (value) {
            this._groupForm = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('p-auto-focus'),
        __metadata("design:type", String)
    ], PoDynamicFormBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-fields'),
        __metadata("design:type", Array)
    ], PoDynamicFormBaseComponent.prototype, "fields", void 0);
    __decorate([
        Input('p-value'),
        __metadata("design:type", Object)
    ], PoDynamicFormBaseComponent.prototype, "value", void 0);
    __decorate([
        Output('p-form'),
        __metadata("design:type", EventEmitter)
    ], PoDynamicFormBaseComponent.prototype, "formOutput", void 0);
    __decorate([
        Input('p-group-form'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoDynamicFormBaseComponent.prototype, "groupForm", null);
    __decorate([
        Input('p-load'),
        __metadata("design:type", Object)
    ], PoDynamicFormBaseComponent.prototype, "load", void 0);
    __decorate([
        Input('p-validate'),
        __metadata("design:type", Object)
    ], PoDynamicFormBaseComponent.prototype, "validate", void 0);
    PoDynamicFormBaseComponent = __decorate([
        Directive()
    ], PoDynamicFormBaseComponent);
    return PoDynamicFormBaseComponent;
}());
export { PoDynamicFormBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJdkQ7Ozs7Ozs7R0FPRztBQUVIO0lBQUE7UUFDVSxlQUFVLEdBQWEsS0FBSyxDQUFDO1FBcURyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBbURHO1FBQ2UsZUFBVSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBbUdsRixDQUFDO0lBakZ3QixzQkFBSSxpREFBUzthQUlwQztZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO1FBdEJEOzs7Ozs7Ozs7Ozs7Ozs7V0FlRzthQUNvQixVQUFjLEtBQWM7WUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBUSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7OztPQUFBO0lBcEhzQjtRQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOztpRUFBb0I7SUFnQ3ZCO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7a0NBQVMsS0FBSzs4REFBcUI7SUFVbkM7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7NkRBQVk7SUFzRFg7UUFBakIsTUFBTSxDQUFDLFFBQVEsQ0FBQztrQ0FBYSxZQUFZO2tFQUFzQztJQWtCekQ7UUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7OytEQUVyQjtJQXNDZ0I7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7NERBQTBCO0lBd0NyQjtRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOztnRUFBOEI7SUE1TXZDLDBCQUEwQjtRQUR0QyxTQUFTLEVBQUU7T0FDQywwQkFBMEIsQ0E2TXRDO0lBQUQsaUNBQUM7Q0FBQSxBQTdNRCxJQTZNQztTQTdNWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XG5cbi8qKlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBjcmlhw6fDo28gZGUgZm9ybXVsw6FyaW9zIGRpbsOibWljb3MgYSBwYXJ0aXIgZGUgdW1hIGxpc3RhIGRlIG9iamV0b3MuXG4gKlxuICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgdmVyaWZpY2FyIHNlIG8gZm9ybXVsw6FyaW8gZXN0w6EgdsOhbGlkbyBlIGluZm9ybWFyIHZhbG9yZXMgcGFyYSBhIGV4aWJpw6fDo28gZGUgaW5mb3JtYcOnw7Vlcy5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9EeW5hbWljRm9ybUJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF9ncm91cEZvcm0/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTm9tZSBkYSBwcm9wcmllZGFkZSwgYXRyaWJ1w61kYSBhbyBgUG9EeW5hbWljRm9ybUZpZWxkLnByb3BlcnR5YCwgcXVlIGluaWNpYXLDoSBvIGNhbXBvIGNvbSBmb2NvLlxuICAgKi9cbiAgQElucHV0KCdwLWF1dG8tZm9jdXMnKSBhdXRvRm9jdXM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb2xlw6fDo28gZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgYFBvRHluYW1pY0Zvcm1GaWVsZGAsIHBhcmEgZGVmaW5pw6fDo28gZG9zIGNhbXBvcyBxdWUgc2Vyw6NvIGNyaWFkb3NcbiAgICogZGluYW1pY2FtZW50ZS5cbiAgICpcbiAgICogPiBFeDogYFsgeyBwcm9wZXJ0eTogJ25hbWUnIH0gXWBcbiAgICpcbiAgICogUmVncmFzIGRlIHRpcGFnZW0gZSBjcmlhw6fDo28gZG9zIGNvbXBvbmVudGVzOlxuICAgKlxuICAgKiAtIENhc28gbyAqdHlwZSogaW5mb3JtYWRvIHNlamEgKmJvb2xlYW4qIG8gY29tcG9uZW50ZSBjcmlhZG8gc2Vyw6EgbyBgcG8tc3dpdGNoYC5cbiAgICogLSBDYXNvIG8gKnR5cGUqIGluZm9ybWFkbyBzZWphICpjdXJyZW5jeSogZSBuw6NvIHNlamEgaW5mb3JtYWRvIHVtICptYXNrKiBvdSAqcGF0dGVybiogbyBjb21wb25lbnRlIGNyaWFkbyBzZXLDoSBvIGBwby1kZWNpbWFsYCxcbiAgICogY2FzbyBzZWphIGluZm9ybWFkbyB1bSAqbWFzayogb3UgKnBhdHRlcm4qIG8gY29tcG9uZW50ZSBjcmlhZG8gc2Vyw6EgbyBgcG8taW5wdXRgLlxuICAgKiAtIENhc28gbyAqdHlwZSogaW5mb3JtYWRvIHNlamEgKm51bWJlciogZSBuw6NvIHNlamEgaW5mb3JtYWRvIHVtICptYXNrKiBvdSAqcGF0dGVybiogbyBjb21wb25lbnRlIGNyaWFkbyBzZXLDoSBvIGBwby1udW1iZXJgLCBjYXNvIHNlamFcbiAgICogaW5mb3JtYWRvIHVtICptYXNrKiBvdSAqcGF0dGVybiogbyBjb21wb25lbnRlIGNyaWFkbyBzZXLDoSBvIGBwby1pbnB1dGAuXG4gICAqIC0gQ2FzbyBhIGxpc3RhIHBvc3N1YSBhIHByb3ByaWVkYWRlIGBvcHRpb25zYCBlIGEgbWVzbWEgcG9zc3VhIGF0w6kgMyBpdGVucyBvIGNvbXBvbmVudGUgY3JpYWRvIHNlcsOhIG8gYHBvLXJhZGlvLWdyb3VwYFxuICAgKiBvdSBgcG8tY2hlY2tib3gtZ3JvdXBgIHNlIGluZm9ybWFyIGEgcHJvcHJpZWRhZGUgYG9wdGlvbnNNdWx0aWAuXG4gICAqIC0gQ2FzbyBhIG1lc21hIHBvc3N1YSAzIG91IG1haXMgaXRlbnMsIHNlcsOhIGNyaWFkbyBvIGNvbXBvbmVudGUgYHBvLXNlbGVjdGAgb3UsIGBwby1tdWx0aXNlbGVjdGAgc2UgYSBwcm9wcmllZGFkZSBgb3B0aW9uc011bHRpYFxuICAgKiBmb3IgdmVyZGFkZWlyYS5cbiAgICogLSBDYXNvIG8gKnR5cGUqIGluZm9ybWFkbyBzZWphICpkYXRlKiBvdSAqZGF0ZXRpbWUqIG8gY29tcG9uZW50ZSBjcmlhZG8gc2Vyw6EgbyBgcG8tZGF0ZXBpY2tlcmAuXG4gICAqIC0gQ2FzbyBzZWphIGluZm9ybWFkbyBhIHByb3ByaWVkYWRlIGBvcHRpb25zU2VydmljZWAgbyBjb21wb25lbnRlIGNyaWFkbyBzZXLDoSBvIGBwby1jb21ib2AuXG4gICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqdGltZSogbyBjb21wb25lbnRlIGNyaWFkbyBzZXLDoSB1bSBgcG8taW5wdXRgIHBvZGVuZG8gcmVjZWJlciB1bSAqbWFzayogcGFyYSBmb3JtYXRhclxuICAgKiBvIHZhbG9yIGV4aWJpZG8sIGNhc28gbsOjbyBzZWphIGluZm9ybWFkbyB1bSAqbWFzayogbyBjb21wb25lbnRlIHNlcsOhIGNyaWFkbyBjb20gYSBtw6FzY2FyYSAnOTk6OTknIHBvciBwYWRyw6NvLlxuICAgKiAtIENhc28gYSBsaXN0YSBwb3NzdWEgYSBwcm9wcmllZGFkZSBgcm93c2AgZSBlc3RhIHNlamEgZGVmaW5pZGEgY29tIHZhbG9yIG1haW9yIG91IGlndWFsIGEgMyBvIGNvbXBvbmVudGUgY3JpYWRvIHNlcsOhXG4gICAqIG8gYHBvLXRleHRhcmVhYCwgY2FzbyBvIHZhbG9yIGRhIHByb3ByaWVkYWRlIGByb3dzYCBzZWphIG1lbm9yIHF1ZSAzIG8gY29tcG9uZW50ZSBjcmlhZG8gc2Vyw6EgbyBgcG8taW5wdXRgLlxuICAgKiAtIENhc28gc2VqYSBpbmZvcm1hZGEgYSBwcm9wcmllZGFkZSBgc2VjcmV0YCBvIGNvbXBvbmVudGUgY3JpYWRvIHNlcsOhIG8gYHBvLXBhc3N3b3JkYC5cbiAgICogLSBDYXNvIG8gKnR5cGUqIGluZm9ybWFkbyBzZWphICpzdHJpbmcqIG8gY29tcG9uZW50ZSBjcmlhZG8gc2Vyw6EgbyBgcG8taW5wdXRgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgW11gXG4gICAqL1xuICBASW5wdXQoJ3AtZmllbGRzJykgZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+O1xuXG4gIC8qKlxuICAgKiBPYmpldG8gcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIHZhbG9yIHBhcmEgZXhpYmlyIGFzIGluZm9ybWHDp8O1ZXMsIHNlcsOhIHJlY3VwZXJhZG8gZSBwcmVlbmNoaWRvIGF0cmF2w6lzIGRvIGF0cmlidXRvICpwcm9wZXJ0eSpcbiAgICogZG9zIG9iamV0b3MgY29udGlkb3MgbmEgcHJvcHJpZGFkZSBgcC1maWVsZHNgLlxuICAgKlxuICAgKiBQb2RlIGluaWNpYXIgY29tIHZhbG9yIG91IGFwZW5hcyBjb20gdW0gb2JqZXRvIHZhemlvIHF1ZSBzZXLDoSBwcmVlbmNoaWRvIGNvbmZvcm1lIGRlc2NyaXRvIGFjaW1hLlxuICAgKlxuICAgKiA+IEV4OiBgeyBuYW1lOiAncG8nIH1gXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSB2YWx1ZTogYW55O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE5hIGluaWNpYWxpemHDp8OjbyBkbyBjb21wb25lbnRlIHNlcsOhIHJlcGFzc2FkbyBvIG9iamV0byBkZSBmb3JtdWzDoXJpbyB1dGlsaXphZG8gbm8gY29tcG9uZW50ZSxcbiAgICogcG9kZW5kbyBzZXIgdXRpbGl6YWRvIHBhcmEgdmFsaWRhw6fDtWVzIGUvb3UgZGV0ZWPDp8OjbyBkZSBtdWRhbsOnYSBkb3MgdmFsb3Jlcy5cbiAgICpcbiAgICogUG9ydGFudG8gZXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIHJlY3VwZXJhciBvIGZvcm11bMOhcmlvLFxuICAgKiBhdHJhdsOpcyBkZSAqdGVtcGxhdGUgcmVmZXJlbmNlKiBlIGF0cmF2w6lzIGRvICpvdXRwdXQqLCB2ZWphIG9zIGV4ZW1wbG9zIGFiYWl4bzpcbiAgICpcbiAgICogPiAqdGVtcGxhdGUgcmVmZXJlbmNlKlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqICA8cG8tZHluYW1pYy1mb3JtICNkeW5hbWljRm9ybT5cbiAgICogIDwvcG8tZHluYW1pYy1mb3JtPlxuICAgKlxuICAgKiAgPHBvLWJ1dHRvbiBwLWxhYmVsPVwiQWRpY2lvbmFyXCIgW3AtZGlzYWJsZWRdPVwiZHluYW1pY0Zvcm0/LmZvcm0uaW52YWxpZFwiPlxuICAgKiAgPC9wby1idXR0b24+XG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKiA+ICpPdXRwdXQqXG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogIC4uLlxuICAgKiAgPHBvLWR5bmFtaWMtZm9ybSAocC1mb3JtKT1cImdldEZvcm0oJGV2ZW50KVwiPlxuICAgKiAgPC9wby1keW5hbWljLWZvcm0+XG4gICAqXG4gICAqICA8cG8tYnV0dG9uIHAtbGFiZWw9XCJBZGljaW9uYXJcIiBbcC1kaXNhYmxlZF09XCJkeW5hbWljRm9ybT8uaW52YWxpZFwiPlxuICAgKiAgPC9wby1idXR0b24+XG4gICAqICAuLi5cbiAgICpcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYHRzXG4gICAqICAuLi5cbiAgICpcbiAgICogIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgKlxuICAgKiAgICBkeW5hbWljRm9ybTogTmdGb3JtO1xuICAgKlxuICAgKiAgICBnZXRGb3JtKGZvcm06IE5nRm9ybSkge1xuICAgKiAgICAgIHRoaXMuZHluYW1pY0Zvcm0gPSBmb3JtO1xuICAgKiAgICB9XG4gICAqXG4gICAqICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiA+IENhc28gYSBwcm9wcmllZGFkZSBgcC1ncm91cC1mb3JtYCBmb3IgdmVyZGFkZWlyYSBuw6NvIHNlcsOhIHJlcGFzc2FkbyBvIGZvcm11bMOhcmlvLCBwb2lzIG8gbWVzbW8gdXRpbGl6YXLDoVxuICAgKiBvIGZvcm11bMOhcmlvIHBhaS5cbiAgICovXG4gIEBPdXRwdXQoJ3AtZm9ybScpIGZvcm1PdXRwdXQ6IEV2ZW50RW1pdHRlcjxOZ0Zvcm0+ID0gbmV3IEV2ZW50RW1pdHRlcjxOZ0Zvcm0+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQW8gaW5mb3JtYXIgZXN0YSBwcm9wcmllZGFkZSwgbyBjb21wb25lbnRlIHBhc3NhcsOhIGEgdXRpbGl6YXIgbyBmb3JtdWzDoXJpbyBwYWkgcGFyYSBjcmlhciBvcyBgRm9ybUNvbnRyb2xgXG4gICAqIGUgY29tIGlzc28gw6kgcG9zc8OtdmVsIHJlY3VwZXJhciBvIHZhbG9yIGRvIGZvcm11bMOhcmlvIGUgc3VhcyB2YWxpZGHDp8O1ZXMgYSBwYXJ0aXIgZG8gZm9ybXVsw6FyaW8gcGFpLlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxmb3JtICNwYXJlbnRGb3JtPVwibmdGb3JtXCI+XG4gICAqXG4gICAqICAgPHBvLWR5bmFtaWMtZm9ybSBwLWdyb3VwLWZvcm0gW3AtZmllbGRzXT1cImZpZWxkc1wiPjwvcG8tZHluYW1pYy1mb3JtPlxuICAgKlxuICAgKiAgPHBvLWJ1dHRvbiBwLWxhYmVsPVwiQWRpY2lvbmFyXCIgW3AtZGlzYWJsZWRdPVwicGFyZW50Rm9ybS5pbnZhbGlkXCI+PC9wby1idXR0b24+XG4gICAqIDwvZm9ybT5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtZ3JvdXAtZm9ybScpIHNldCBncm91cEZvcm0odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9ncm91cEZvcm0gPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBncm91cEZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwRm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW7Dp8OjbyBvdSBzZXJ2acOnbyBxdWUgc2Vyw6EgZXhlY3V0YWRvIG5hIGluaWNpYWxpemHDp8OjbyBkbyBjb21wb25lbnRlLlxuICAgKlxuICAgKiBBIHByb3ByaWVkYWRlIGFjZWl0YSBvcyBzZWd1aW50ZXMgdGlwb3M6XG4gICAqIC0gYHN0cmluZ2A6ICpFbmRwb2ludCogdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgcmVxdWlzacOnw6NvIHZpYSBgUE9TVGAuXG4gICAqIC0gYGZ1bmN0aW9uYDogTcOpdG9kbyBxdWUgc2Vyw6EgZXhlY3V0YWRvLlxuICAgKlxuICAgKiBBbyBzZXIgZXhlY3V0YWRvLCBpcsOhIHJlY2ViZXIgY29tbyBwYXLDom1ldHJvIG8gb2JqZXRvIGluZm9ybWFkbyBubyBgcC12YWx1ZWAuXG4gICAqXG4gICAqIE8gcmV0b3JubyBkZXN0YSBmdW7Dp8OjbyBkZXZlIHNlciBkbyB0aXBvIFtQb0R5bmFtaWNGb3JtTG9hZF0oZG9jdW1lbnRhdGlvbi9wby1keW5hbWljLWZvcm0jcG8tZHluYW1pYy1mb3JtLWxvYWQpLFxuICAgKiBvbmRlIG8gdXN1w6FyaW8gcG9kZXLDoSBkZXRlcm1pbmFyIGFzIG5vdmFzIGF0dWFsaXphw6fDtWVzIGRvcyBjYW1wb3MsIHZhbG9yZXMgZSBkZXRlcm1pbmFyIG8gY2FtcG8gYSBzZXIgZm9jYWRvLlxuICAgKlxuICAgKiBQb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIG9uTG9hZEZpZWxkcygpOiBQb0R5bmFtaWNGb3JtTG9hZCB7XG4gICAqXG4gICAqICAgcmV0dXJuIHtcbiAgICogICAgIHZhbHVlOiB7IGNwZjogdW5kZWZpbmVkIH0sXG4gICAqICAgICBmaWVsZHM6IFtcbiAgICogICAgICAgeyBwcm9wZXJ0eTogJ2NwZicgfVxuICAgKiAgICAgXSxcbiAgICogICAgIGZvY3VzOiAnY3BmJ1xuICAgKiAgIH07XG4gICAqIH1cbiAgICpcbiAgICogYGBgXG4gICAqIFBhcmEgcmVmZXJlbmNpYXIgYSBzdWEgZnVuw6fDo28gdXRpbGl6ZSBhIHByb3ByaWVkYWRlIGBiaW5kYCwgcG9yIGV4ZW1wbG86XG4gICAqIGBgYFxuICAgKiAgW3AtbG9hZF09XCJvbkxvYWRGaWVsZHMuYmluZCh0aGlzKVwiXG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLWxvYWQnKSBsb2FkPzogc3RyaW5nIHwgRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIEZ1bsOnw6NvIG91IHNlcnZpw6dvIHBhcmEgdmFsaWRhciBhcyAqKm11ZGFuw6dhcyBkbyBmb3JtdWzDoXJpbyoqLlxuICAgKlxuICAgKiBBIHByb3ByaWVkYWRlIGFjZWl0YSBvcyBzZWd1aW50ZXMgdGlwb3M6XG4gICAqIC0gYHN0cmluZ2A6ICpFbmRwb2ludCogdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgcmVxdWlzacOnw6NvIHZpYSBgUE9TVGAuXG4gICAqIC0gYGZ1bmN0aW9uYDogTcOpdG9kbyBxdWUgc2Vyw6EgZXhlY3V0YWRvLlxuICAgKlxuICAgKiBBbyBzZXIgZXhlY3V0YWRvLCBpcsOhIHJlY2ViZXIgY29tbyBwYXLDom1ldHJvIHVtIG9iamV0byBjb20gbyBub21lIGRhIHByb3ByaWVkYWRlXG4gICAqIGFsdGVyYWRhIGUgbyBub3ZvIHZhbG9yLCBjb25mb3JtZSBhIGludGVyZmFjZSBgUG9EeW5hbWljRm9ybUZpZWxkQ2hhbmdlZGA6XG4gICAqXG4gICAqIGBgYFxuICAgKiB7IHByb3BlcnR5OiAncHJvcGVydHkgbmFtZScsIHZhbHVlOiAnbmV3IHZhbHVlJyB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBPIHJldG9ybm8gZGVzdGEgZnVuw6fDo28gZGV2ZSBzZXIgZG8gdGlwbyBbUG9EeW5hbWljRm9ybVZhbGlkYXRpb25dKGRvY3VtZW50YXRpb24vcG8tZHluYW1pYy1mb3JtI3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uKSxcbiAgICogb25kZSBvIHVzdcOhcmlvIHBvZGVyw6EgZGV0ZXJtaW5hciBhcyBub3ZhcyBhdHVhbGl6YcOnw7VlcyBkb3MgY2FtcG9zLlxuICAgKiBQb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIG9uQ2hhbmdlRmllbGRzKGNoYW5nZVZhbHVlKTogUG9EeW5hbWljRm9ybVZhbGlkYXRpb24ge1xuICAgKlxuICAgKiBpZiAoY2hhbmdlVmFsdWUucHJvcGVydHkgPT09ICdzdGF0ZScpIHtcbiAgICpcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgdmFsdWU6IHsgY2l0eTogdW5kZWZpbmVkIH0sXG4gICAqICAgICBmaWVsZHM6IFtcbiAgICogICAgICAgeyBwcm9wZXJ0eTogJ2NpdHknLCBvcHRpb25zOiB0aGlzLmdldENpdHkoY2hhbmdlVmFsdWUudmFsdWUuc3RhdGUpIH1cbiAgICogICAgIF0sXG4gICAqICAgICBmb2N1czogJ2NpdHknXG4gICAqICAgfTtcbiAgICogfVxuICAgKlxuICAgKiBgYGBcbiAgICogUGFyYSByZWZlcmVuY2lhciBhIHN1YSBmdW7Dp8OjbyB1dGlsaXplIGEgcHJvcHJpZWRhZGUgYGJpbmRgLCBwb3IgZXhlbXBsbzpcbiAgICogYGBgXG4gICAqICBbcC12YWxpZGF0ZV09XCJ0aGlzLm15RnVuY3Rpb24uYmluZCh0aGlzKVwiXG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLXZhbGlkYXRlJykgdmFsaWRhdGU/OiBzdHJpbmcgfCBGdW5jdGlvbjtcbn1cbiJdfQ==