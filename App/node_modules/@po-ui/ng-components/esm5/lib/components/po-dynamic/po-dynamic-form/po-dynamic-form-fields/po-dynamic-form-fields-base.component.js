import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { Input, EventEmitter, Output, Directive } from '@angular/core';
import { TitleCasePipe } from '@angular/common';
import { isTypeof } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
var PoDynamicFormFieldsBaseComponent = /** @class */ (function () {
    function PoDynamicFormFieldsBaseComponent(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
        this.fieldsChange = new EventEmitter();
        this.formValidate = new EventEmitter();
    }
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
        set: function (value) {
            this._fields = Array.isArray(value) ? __spread(value) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        // valor que será utilizado para iniciar valor no componente.
        set: function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    PoDynamicFormFieldsBaseComponent.prototype.compareTo = function (value, compareTo) {
        return value === compareTo;
    };
    // retorna um array com os objetos configurados e visiveis.
    PoDynamicFormFieldsBaseComponent.prototype.getVisibleFields = function () {
        var _this = this;
        var visibleFields = [];
        this.fields.forEach(function (field) {
            if (_this.existsProperty(visibleFields, field.property)) {
                _this.printError("\"po-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: PoDynamicFormField.");
                return;
            }
            if (!field['property']) {
                _this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(_this.createField(field));
            }
        });
        return visibleFields;
    };
    // converte um array em string para um array de objetos que contem label e value.
    PoDynamicFormFieldsBaseComponent.prototype.convertOptions = function (options) {
        var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
        if (everyOptionString) {
            return options.map(function (value) { return ({ label: value, value: value }); });
        }
        return options;
    };
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    PoDynamicFormFieldsBaseComponent.prototype.createField = function (field) {
        var control = this.getComponentControl(field);
        var options = !!field.options ? this.convertOptions(field.options) : undefined;
        var focus = this.hasFocus(field);
        var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign(__assign({ label: this.titleCasePipe.transform(field.property) }, field), { componentClass: componentClass,
            control: control,
            focus: focus,
            options: options });
    };
    PoDynamicFormFieldsBaseComponent.prototype.existsProperty = function (fields, property) {
        return fields.some(function (field) {
            return field.property === property;
        });
    };
    // recupera o componente de acordo com algumas regras do field.
    PoDynamicFormFieldsBaseComponent.prototype.getComponentControl = function (field) {
        if (field === void 0) { field = {}; }
        var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    };
    PoDynamicFormFieldsBaseComponent.prototype.hasFocus = function (field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCombo = function (field) {
        var optionsService = field.optionsService;
        return !!optionsService && isTypeof(optionsService, 'string');
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCurrencyType = function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isLookup = function (field) {
        var searchService = field.searchService;
        return !!searchService && isTypeof(searchService, 'string');
    };
    PoDynamicFormFieldsBaseComponent.prototype.isMultiselect = function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isNumberType = function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isPassword = function (field) {
        var secret = field.secret;
        return secret;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isRadioGroup = function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length <= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isSelect = function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length > 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isTextarea = function (field) {
        var rows = field.rows;
        return rows && rows >= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.printError = function (error) {
        console.error(error);
    };
    PoDynamicFormFieldsBaseComponent.ctorParameters = function () { return [
        { type: TitleCasePipe }
    ]; };
    __decorate([
        Input('p-auto-focus'),
        __metadata("design:type", String)
    ], PoDynamicFormFieldsBaseComponent.prototype, "autoFocus", void 0);
    __decorate([
        Input('p-fields'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoDynamicFormFieldsBaseComponent.prototype, "fields", null);
    __decorate([
        Output('p-fieldsChange'),
        __metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "fieldsChange", void 0);
    __decorate([
        Input('p-value'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoDynamicFormFieldsBaseComponent.prototype, "value", null);
    __decorate([
        Input('p-disabled-form'),
        __metadata("design:type", Boolean)
    ], PoDynamicFormFieldsBaseComponent.prototype, "disabledForm", void 0);
    __decorate([
        Input('p-validate'),
        __metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "validate", void 0);
    __decorate([
        Output('p-form-validate'),
        __metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "formValidate", void 0);
    PoDynamicFormFieldsBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [TitleCasePipe])
    ], PoDynamicFormFieldsBaseComponent);
    return PoDynamicFormFieldsBaseComponent;
}());
export { PoDynamicFormFieldsBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWZpZWxkcy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWZpZWxkcy9wby1keW5hbWljLWZvcm0tZmllbGRzLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBS3RFO0lBa0NFLDBDQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQWhDeEMsV0FBTSxHQUFTLEVBQUUsQ0FBQztRQUUxQixrQkFBYSxHQUFzQyxFQUFFLENBQUM7UUFhNUIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBZXRDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUVmLENBQUM7SUF6QmpDLHNCQUFJLG9EQUFNO2FBSTdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUFQRCxxR0FBcUc7YUFDbEYsVUFBVyxLQUFnQztZQUM1RCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hELENB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ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IGdldEdyaWRDb2x1bW5zQ2xhc3NlcywgaXNWaXNpYmxlRmllbGQgfSBmcm9tICcuLi8uLi9wby1keW5hbWljLnV0aWwnO1xuaW1wb3J0IHsgUG9EeW5hbWljRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vcG8tZHluYW1pYy1maWVsZC10eXBlLmVudW0nO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLWludGVybmFsLmludGVyZmFjZSc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY0Zvcm1GaWVsZHNCYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+O1xuICBwcml2YXRlIF92YWx1ZT86IGFueSA9IHt9O1xuXG4gIHZpc2libGVGaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZEludGVybmFsPiA9IFtdO1xuXG4gIEBJbnB1dCgncC1hdXRvLWZvY3VzJykgYXV0b0ZvY3VzPzogc3RyaW5nO1xuXG4gIC8vIGFycmF5IGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIFBvRHluYW1pY0Zvcm1GaWVsZCwgcXVlIHNlcsOjbyBleGliaWRvcyBubyBjb21wb25lbnRlLlxuICBASW5wdXQoJ3AtZmllbGRzJykgc2V0IGZpZWxkcyh2YWx1ZTogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPikge1xuICAgIHRoaXMuX2ZpZWxkcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLnZhbHVlXSA6IFtdO1xuICB9XG5cbiAgZ2V0IGZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgQE91dHB1dCgncC1maWVsZHNDaGFuZ2UnKSBmaWVsZHNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvLyB2YWxvciBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgaW5pY2lhciB2YWxvciBubyBjb21wb25lbnRlLlxuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IGFueSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWUgJiYgaXNUeXBlb2YodmFsdWUsICdvYmplY3QnKSA/IHZhbHVlIDoge307XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgQElucHV0KCdwLWRpc2FibGVkLWZvcm0nKSBkaXNhYmxlZEZvcm06IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLXZhbGlkYXRlJykgdmFsaWRhdGU/OiBzdHJpbmcgfCBGdW5jdGlvbjtcblxuICBAT3V0cHV0KCdwLWZvcm0tdmFsaWRhdGUnKSBmb3JtVmFsaWRhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRpdGxlQ2FzZVBpcGU6IFRpdGxlQ2FzZVBpcGUpIHt9XG5cbiAgY29tcGFyZVRvKHZhbHVlLCBjb21wYXJlVG8pIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGNvbXBhcmVUbztcbiAgfVxuXG4gIC8vIHJldG9ybmEgdW0gYXJyYXkgY29tIG9zIG9iamV0b3MgY29uZmlndXJhZG9zIGUgdmlzaXZlaXMuXG4gIHByb3RlY3RlZCBnZXRWaXNpYmxlRmllbGRzKCkge1xuICAgIGNvbnN0IHZpc2libGVGaWVsZHMgPSBbXTtcblxuICAgIHRoaXMuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKHRoaXMuZXhpc3RzUHJvcGVydHkodmlzaWJsZUZpZWxkcywgZmllbGQucHJvcGVydHkpKSB7XG4gICAgICAgIHRoaXMucHJpbnRFcnJvcihcbiAgICAgICAgICBgXCJwby1keW5hbWljLWZvcm1cIiBwcm9wZXJ0eSBcIiR7ZmllbGQucHJvcGVydHl9XCIgZXN0w6EgZHVwbGljYWRvLiBJbnRlcmZhY2U6IFBvRHluYW1pY0Zvcm1GaWVsZC5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWVsZFsncHJvcGVydHknXSkge1xuICAgICAgICB0aGlzLnByaW50RXJyb3IoJ1wicG8tZHluYW1pYy1mb3JtXCIgw4kgb2JyaWdhdMOzcmlvIHNlciBlc3BlY2lmaWNhZG8gdW0gcHJvcGVydHkuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVmlzaWJsZUZpZWxkKGZpZWxkKSkge1xuICAgICAgICB2aXNpYmxlRmllbGRzLnB1c2godGhpcy5jcmVhdGVGaWVsZChmaWVsZCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpc2libGVGaWVsZHM7XG4gIH1cblxuICAvLyBjb252ZXJ0ZSB1bSBhcnJheSBlbSBzdHJpbmcgcGFyYSB1bSBhcnJheSBkZSBvYmpldG9zIHF1ZSBjb250ZW0gbGFiZWwgZSB2YWx1ZS5cbiAgcHJpdmF0ZSBjb252ZXJ0T3B0aW9ucyhvcHRpb25zOiBBcnJheTxhbnk+KTogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBldmVyeU9wdGlvblN0cmluZyA9IG9wdGlvbnMuZXZlcnkob3B0aW9uID0+IHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKTtcblxuICAgIGlmIChldmVyeU9wdGlvblN0cmluZykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKHZhbHVlID0+ICh7IGxhYmVsOiB2YWx1ZSwgdmFsdWUgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgLy8gY3JpYSB1bSBub3ZvIG9iamV0byBjb20gYXMgY2xhc3NlcyBkZSBncmlkIHN5c3RlbSwgY29tIGNvbnRyb2wgKHRpcG8gZG8gY29tcG9uZW50ZSkgZSBsYWJlbCBkZWZhdWx0LlxuICBwcml2YXRlIGNyZWF0ZUZpZWxkKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpOiBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29tcG9uZW50Q29udHJvbChmaWVsZCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9ICEhZmllbGQub3B0aW9ucyA/IHRoaXMuY29udmVydE9wdGlvbnMoZmllbGQub3B0aW9ucykgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZm9jdXMgPSB0aGlzLmhhc0ZvY3VzKGZpZWxkKTtcblxuICAgIGNvbnN0IGNvbXBvbmVudENsYXNzID0gZ2V0R3JpZENvbHVtbnNDbGFzc2VzKFxuICAgICAgZmllbGQuZ3JpZFNtQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRNZENvbHVtbnMsXG4gICAgICBmaWVsZC5ncmlkTGdDb2x1bW5zLFxuICAgICAgZmllbGQuZ3JpZFhsQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRDb2x1bW5zXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogdGhpcy50aXRsZUNhc2VQaXBlLnRyYW5zZm9ybShmaWVsZC5wcm9wZXJ0eSksXG4gICAgICAuLi5maWVsZCxcbiAgICAgIGNvbXBvbmVudENsYXNzLFxuICAgICAgY29udHJvbCxcbiAgICAgIGZvY3VzLFxuICAgICAgb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGV4aXN0c1Byb3BlcnR5KGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiwgcHJvcGVydHk6IHN0cmluZykge1xuICAgIHJldHVybiBmaWVsZHMuc29tZShmaWVsZCA9PiB7XG4gICAgICByZXR1cm4gZmllbGQucHJvcGVydHkgPT09IHByb3BlcnR5O1xuICAgIH0pO1xuICB9XG5cbiAgLy8gcmVjdXBlcmEgbyBjb21wb25lbnRlIGRlIGFjb3JkbyBjb20gYWxndW1hcyByZWdyYXMgZG8gZmllbGQuXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50Q29udHJvbChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkID0gPGFueT57fSkge1xuICAgIGNvbnN0IHR5cGUgPSBmaWVsZCAmJiBmaWVsZC50eXBlID8gZmllbGQudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpIDogJ3N0cmluZyc7XG5cbiAgICBpZiAodGhpcy5pc051bWJlclR5cGUoZmllbGQsIHR5cGUpKSB7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQ3VycmVuY3lUeXBlKGZpZWxkLCB0eXBlKSkge1xuICAgICAgcmV0dXJuICdkZWNpbWFsJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNTZWxlY3QoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ3NlbGVjdCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUmFkaW9Hcm91cChmaWVsZCkpIHtcbiAgICAgIHJldHVybiAncmFkaW9Hcm91cCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQ2hlY2tib3hHcm91cChmaWVsZCkpIHtcbiAgICAgIHJldHVybiAnY2hlY2tib3hHcm91cCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTXVsdGlzZWxlY3QoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ211bHRpc2VsZWN0JztcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5Cb29sZWFuKSkge1xuICAgICAgcmV0dXJuICdzd2l0Y2gnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb21wYXJlVG8odHlwZSwgUG9EeW5hbWljRmllbGRUeXBlLkRhdGUpIHx8IHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5EYXRlVGltZSkpIHtcbiAgICAgIHJldHVybiAnZGF0ZXBpY2tlcic7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuVGltZSkpIHtcbiAgICAgIGZpZWxkLm1hc2sgPSBmaWVsZC5tYXNrIHx8ICc5OTo5OSc7XG5cbiAgICAgIHJldHVybiAnaW5wdXQnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0NvbWJvKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICdjb21ibyc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTG9va3VwKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICdsb29rdXAnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1RleHRhcmVhKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICd0ZXh0YXJlYSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUGFzc3dvcmQoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ3Bhc3N3b3JkJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ2lucHV0JztcbiAgfVxuXG4gIHByaXZhdGUgaGFzRm9jdXMoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIHJldHVybiAhIXRoaXMuYXV0b0ZvY3VzICYmIHRoaXMuYXV0b0ZvY3VzID09PSBmaWVsZC5wcm9wZXJ0eTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDaGVja2JveEdyb3VwKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNTZXJ2aWNlLCBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zU2VydmljZSAmJiBvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoIDw9IDM7XG4gIH1cblxuICBwcml2YXRlIGlzQ29tYm8oZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIGNvbnN0IHsgb3B0aW9uc1NlcnZpY2UgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICEhb3B0aW9uc1NlcnZpY2UgJiYgaXNUeXBlb2Yob3B0aW9uc1NlcnZpY2UsICdzdHJpbmcnKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDdXJyZW5jeVR5cGUoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdHlwZTogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBtYXNrLCBwYXR0ZXJuIH0gPSBmaWVsZDtcblxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuQ3VycmVuY3kpICYmICFtYXNrICYmICFwYXR0ZXJuO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0xvb2t1cChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XG4gICAgY29uc3QgeyBzZWFyY2hTZXJ2aWNlIH0gPSBmaWVsZDtcblxuICAgIHJldHVybiAhIXNlYXJjaFNlcnZpY2UgJiYgaXNUeXBlb2Yoc2VhcmNoU2VydmljZSwgJ3N0cmluZycpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc011bHRpc2VsZWN0KGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNTZXJ2aWNlLCBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zU2VydmljZSAmJiBvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMztcbiAgfVxuXG4gIHByaXZhdGUgaXNOdW1iZXJUeXBlKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQsIHR5cGU6IHN0cmluZykge1xuICAgIGNvbnN0IHsgbWFzaywgcGF0dGVybiB9ID0gZmllbGQ7XG5cbiAgICByZXR1cm4gdGhpcy5jb21wYXJlVG8odHlwZSwgUG9EeW5hbWljRmllbGRUeXBlLk51bWJlcikgJiYgIW1hc2sgJiYgIXBhdHRlcm47XG4gIH1cblxuICBwcml2YXRlIGlzUGFzc3dvcmQoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIGNvbnN0IHsgc2VjcmV0IH0gPSBmaWVsZDtcblxuICAgIHJldHVybiBzZWNyZXQ7XG4gIH1cblxuICBwcml2YXRlIGlzUmFkaW9Hcm91cChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XG4gICAgY29uc3QgeyBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoIDw9IDM7XG4gIH1cblxuICBwcml2YXRlIGlzU2VsZWN0KGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNNdWx0aSwgb3B0aW9ucyB9ID0gZmllbGQ7XG5cbiAgICByZXR1cm4gIW9wdGlvbnNNdWx0aSAmJiAhIW9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAzO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1RleHRhcmVhKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IHJvd3MgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuIHJvd3MgJiYgcm93cyA+PSAzO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmludEVycm9yKGVycm9yOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuIl19