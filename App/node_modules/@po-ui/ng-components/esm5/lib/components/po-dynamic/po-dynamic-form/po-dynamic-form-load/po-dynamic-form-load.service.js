import { __assign, __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
var PoDynamicFormLoadService = /** @class */ (function (_super) {
    __extends(PoDynamicFormLoadService, _super);
    function PoDynamicFormLoadService(http) {
        return _super.call(this, http) || this;
    }
    PoDynamicFormLoadService.prototype.createAndUpdateFieldsForm = function (loadedFields, fields) {
        if (loadedFields === void 0) { loadedFields = []; }
        if (fields === void 0) { fields = []; }
        return __spread(loadedFields).reduce(function (updatedFields, field) {
            var index = updatedFields.findIndex(function (updatedField) { return updatedField.property === field.property; });
            var hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = __assign(__assign({}, fields[index]), field);
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, __spread(fields));
    };
    PoDynamicFormLoadService.prototype.executeLoad = function (load, value) {
        var _this = this;
        return this.execute(load, value).pipe(map(function (loadedFormdData) { return _this.setFormDefaultIfEmpty(loadedFormdData); }));
    };
    PoDynamicFormLoadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoDynamicFormLoadService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoDynamicFormLoadService);
    return PoDynamicFormLoadService;
}(PoDynamicFormOperation));
export { PoDynamicFormLoadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWxvYWQvcG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBR2hHO0lBQThDLDRDQUFzQjtJQUNsRSxrQ0FBWSxJQUFnQjtlQUMxQixrQkFBTSxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsNERBQXlCLEdBQXpCLFVBQTBCLFlBQTRDLEVBQUUsTUFBc0M7UUFBcEYsNkJBQUEsRUFBQSxpQkFBNEM7UUFBRSx1QkFBQSxFQUFBLFdBQXNDO1FBQzVHLE9BQU8sU0FBSSxZQUFZLEVBQUUsTUFBTSxDQUM3QixVQUFDLGFBQWEsRUFBRSxLQUFLO1lBQ25CLElBQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBQSxZQUFZLElBQUksT0FBQSxZQUFZLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQXhDLENBQXdDLENBQUMsQ0FBQztZQUNoRyxJQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMseUJBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFLLEtBQUssQ0FBRSxDQUFDO2FBQ3ZEO2lCQUFNO2dCQUNMLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7WUFFRCxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLFdBQ0csTUFBTSxFQUNYLENBQUM7SUFDSixDQUFDO0lBRUQsOENBQVcsR0FBWCxVQUFZLElBQXVCLEVBQUUsS0FBVTtRQUEvQyxpQkFFQztRQURDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLGVBQWUsSUFBSSxPQUFBLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsRUFBM0MsQ0FBMkMsQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQzs7Z0JBeEJpQixVQUFVOztJQURqQix3QkFBd0I7UUFEcEMsVUFBVSxFQUFFO3lDQUVPLFVBQVU7T0FEakIsd0JBQXdCLENBMEJwQztJQUFELCtCQUFDO0NBQUEsQUExQkQsQ0FBOEMsc0JBQXNCLEdBMEJuRTtTQTFCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtTG9hZFNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGh0dHApO1xuICB9XG5cbiAgY3JlYXRlQW5kVXBkYXRlRmllbGRzRm9ybShsb2FkZWRGaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSwgZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10pIHtcbiAgICByZXR1cm4gWy4uLmxvYWRlZEZpZWxkc10ucmVkdWNlKFxuICAgICAgKHVwZGF0ZWRGaWVsZHMsIGZpZWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdXBkYXRlZEZpZWxkcy5maW5kSW5kZXgodXBkYXRlZEZpZWxkID0+IHVwZGF0ZWRGaWVsZC5wcm9wZXJ0eSA9PT0gZmllbGQucHJvcGVydHkpO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eSA9IGluZGV4ID49IDA7XG5cbiAgICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XG4gICAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLmZpZWxkIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlZEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xuICAgICAgfSxcbiAgICAgIFsuLi5maWVsZHNdXG4gICAgKTtcbiAgfVxuXG4gIGV4ZWN1dGVMb2FkKGxvYWQ6IEZ1bmN0aW9uIHwgc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShsb2FkLCB2YWx1ZSkucGlwZShtYXAobG9hZGVkRm9ybWREYXRhID0+IHRoaXMuc2V0Rm9ybURlZmF1bHRJZkVtcHR5KGxvYWRlZEZvcm1kRGF0YSkpKTtcbiAgfVxufVxuIl19