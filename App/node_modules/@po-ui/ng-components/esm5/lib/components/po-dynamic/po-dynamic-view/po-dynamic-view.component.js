import { __assign, __awaiter, __decorate, __extends, __generator, __metadata } from "tslib";
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';
import { PoDynamicViewBaseComponent } from './po-dynamic-view-base.component';
import { PoDynamicViewService } from './po-dynamic-view.service';
/**
 * @docsExtends PoDynamicViewBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
 * </example>
 */
var PoDynamicViewComponent = /** @class */ (function (_super) {
    __extends(PoDynamicViewComponent, _super);
    function PoDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) || this;
    }
    PoDynamicViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    PoDynamicViewComponent.prototype.ngOnInit = function () {
        if (this.load) {
            this.updateValuesAndFieldsOnLoad();
        }
    };
    PoDynamicViewComponent.prototype.getValuesAndFieldsFromLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var valueAndFieldsFromLoad;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof this.load === 'string')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dynamicViewService.onLoad(this.load, this.value)];
                    case 1:
                        valueAndFieldsFromLoad = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (typeof this.load === 'function') {
                            valueAndFieldsFromLoad = this.load();
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, valueAndFieldsFromLoad || {}];
                }
            });
        });
    };
    PoDynamicViewComponent.prototype.getVisibleFields = function () {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    };
    PoDynamicViewComponent.prototype.setFieldOnLoad = function (fieldOnLoad) {
        var index = this.fields.findIndex(function (field) { return field.property === fieldOnLoad.property; });
        if (index >= 0) {
            this.fields[index] = __assign(__assign({}, this.fields[index]), fieldOnLoad);
        }
        else {
            this.fields.push(__assign({}, fieldOnLoad));
        }
    };
    PoDynamicViewComponent.prototype.setFieldsOnLoad = function (fields) {
        var _this = this;
        if (fields) {
            fields.forEach(function (fieldOnLoad) {
                _this.setFieldOnLoad(fieldOnLoad);
            });
        }
    };
    PoDynamicViewComponent.prototype.setValueOnLoad = function (newValue) {
        Object.assign(this.value, newValue);
    };
    PoDynamicViewComponent.prototype.updateValuesAndFieldsOnLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, value, fields;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getValuesAndFieldsFromLoad()];
                    case 1:
                        _a = _b.sent(), value = _a.value, fields = _a.fields;
                        this.setValueOnLoad(value);
                        this.setFieldsOnLoad(fields);
                        this.visibleFields = this.getVisibleFields();
                        return [2 /*return*/];
                }
            });
        });
    };
    PoDynamicViewComponent.ctorParameters = function () { return [
        { type: CurrencyPipe },
        { type: DatePipe },
        { type: DecimalPipe },
        { type: PoTimePipe },
        { type: TitleCasePipe },
        { type: PoDynamicViewService }
    ]; };
    PoDynamicViewComponent = __decorate([
        Component({
            selector: 'po-dynamic-view',
            template: "<div class=\"po-dynamic-view po-row\" *ngIf=\"visibleFields.length\">\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\"> </ng-container>\n  </ng-template>\n</div>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"field.value\"> </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag\n    [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\"\n  >\n  </po-tag>\n</ng-template>\n"
        }),
        __metadata("design:paramtypes", [CurrencyPipe,
            DatePipe,
            DecimalPipe,
            PoTimePipe,
            TitleCasePipe,
            PoDynamicViewService])
    ], PoDynamicViewComponent);
    return PoDynamicViewComponent;
}(PoDynamicViewBaseComponent));
export { PoDynamicViewComponent };
//# sourceMappingURL=data:application/json;base64,