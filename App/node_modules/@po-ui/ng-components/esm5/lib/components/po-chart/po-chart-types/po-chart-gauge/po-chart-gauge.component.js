import { __assign, __decorate, __extends, __metadata, __read } from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, NgZone, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { PoChartCircular } from '../po-chart-circular/po-chart-circular';
import { poChartGaugeStartAngle } from '../po-chart-circular/po-chart-circular.constant';
import { PoChartGaugeTextContentComponent } from './po-chart-gauge-text-content/po-chart-gauge-text-content.component';
var PoChartGaugeComponent = /** @class */ (function (_super) {
    __extends(PoChartGaugeComponent, _super);
    /* istanbul ignore next */
    function PoChartGaugeComponent(changeDetection, componentFactoryResolver, el, ngZone, renderer) {
        var _this = _super.call(this, el, ngZone, renderer) || this;
        _this.changeDetection = changeDetection;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.chartItemStartAngle = poChartGaugeStartAngle;
        _this._series = [];
        return _this;
    }
    Object.defineProperty(PoChartGaugeComponent.prototype, "series", {
        get: function () {
            return this._series;
        },
        set: function (series) {
            this._series = this.getGaugeSerie(series);
        },
        enumerable: true,
        configurable: true
    });
    PoChartGaugeComponent.prototype.ngAfterViewInit = function () {
        this.drawBasePath();
        this.createComponent();
    };
    PoChartGaugeComponent.prototype.createComponent = function () {
        var factory = this.componentFactoryResolver.resolveComponentFactory(PoChartGaugeTextContentComponent);
        var componentRef = this.svgContainerRef.createComponent(factory);
        var instance = componentRef.instance;
        instance.serie = this.series.length && this.series[0];
        instance.gaugeWidth = this.getGaugeBaseWidth();
        this.resizeListenerSubscription(instance);
    };
    PoChartGaugeComponent.prototype.checkGaugeValueLimits = function (value) {
        if (value <= 0) {
            return 0;
        }
        else if (value >= 100) {
            return 100;
        }
        else {
            return value;
        }
    };
    PoChartGaugeComponent.prototype.drawBasePath = function () {
        var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        this.drawPath(basePath, this.chartItemStartAngle, 0);
    };
    PoChartGaugeComponent.prototype.getGaugeBaseWidth = function () {
        var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        if (basePath) {
            return basePath.getBoundingClientRect().width;
        }
    };
    PoChartGaugeComponent.prototype.getGaugeSerie = function (series) {
        if (series === void 0) { series = []; }
        var _a = __read(series, 1), serie = _a[0];
        if (serie && typeof serie === 'object') {
            return [
                __assign(__assign({}, serie), { color: this.colors[0], value: this.checkGaugeValueLimits(serie.value) })
            ];
        }
        return [];
    };
    PoChartGaugeComponent.prototype.resizeListenerSubscription = function (instance) {
        var _this = this;
        this.windowResizeEmitter.subscribe(function () {
            instance.gaugeWidth = _this.getGaugeBaseWidth();
            _this.changeDetection.detectChanges();
        });
    };
    PoChartGaugeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        ViewChild('svgContainer', { static: true, read: ViewContainerRef }),
        __metadata("design:type", ViewContainerRef)
    ], PoChartGaugeComponent.prototype, "svgContainerRef", void 0);
    PoChartGaugeComponent = __decorate([
        Component({
            selector: 'po-chart-gauge',
            template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            ComponentFactoryResolver,
            ElementRef,
            NgZone,
            Renderer2])
    ], PoChartGaugeComponent);
    return PoChartGaugeComponent;
}(PoChartCircular));
export { PoChartGaugeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDekYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0scUVBQXFFLENBQUM7QUFNdkg7SUFBMkMseUNBQWU7SUFleEQsMEJBQTBCO0lBQzFCLCtCQUNVLGVBQWtDLEVBQ2xDLHdCQUFrRCxFQUMxRCxFQUFjLEVBQ2QsTUFBYyxFQUNkLFFBQW1CO1FBTHJCLFlBT0Usa0JBQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsU0FDNUI7UUFQUyxxQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFDbEMsOEJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQWpCNUQseUJBQW1CLEdBQVcsc0JBQXNCLENBQUM7UUFFM0MsYUFBTyxHQUE2QixFQUFFLENBQUM7O0lBcUJqRCxDQUFDO0lBbkJELHNCQUFJLHlDQUFNO2FBSVY7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzthQU5ELFVBQVcsTUFBZ0M7WUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENB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QkFBd0I7WUFDdEQsVUFBVTtZQUNOLE1BQU07WUFDSixTQUFTO09BckJWLHFCQUFxQixDQXlGakM7SUFBRCw0QkFBQztDQUFBLEFBekZELENBQTJDLGVBQWUsR0F5RnpEO1NBekZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRWxlbWVudFJlZixcbiAgTmdab25lLFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9DaGFydENpcmN1bGFyIH0gZnJvbSAnLi4vcG8tY2hhcnQtY2lyY3VsYXIvcG8tY2hhcnQtY2lyY3VsYXInO1xuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9DaGFydEdhdWdlU3RhcnRBbmdsZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWNoYXJ0LWdhdWdlJyxcbiAgdGVtcGxhdGVVcmw6ICcuLi9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2hhcnRHYXVnZUNvbXBvbmVudCBleHRlbmRzIFBvQ2hhcnRDaXJjdWxhciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBjaGFydEl0ZW1TdGFydEFuZ2xlOiBudW1iZXIgPSBwb0NoYXJ0R2F1Z2VTdGFydEFuZ2xlO1xuXG4gIHByb3RlY3RlZCBfc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBbXTtcblxuICBzZXQgc2VyaWVzKHNlcmllczogQXJyYXk8UG9DaGFydEdhdWdlU2VyaWU+KSB7XG4gICAgdGhpcy5fc2VyaWVzID0gdGhpcy5nZXRHYXVnZVNlcmllKHNlcmllcyk7XG4gIH1cblxuICBnZXQgc2VyaWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJpZXM7XG4gIH1cblxuICBAVmlld0NoaWxkKCdzdmdDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSwgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSBzdmdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgbmdab25lOiBOZ1pvbmUsXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICBzdXBlcihlbCwgbmdab25lLCByZW5kZXJlcik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kcmF3QmFzZVBhdGgoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnQoKSB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50KTtcblxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuc3ZnQ29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcblxuICAgIGluc3RhbmNlLnNlcmllID0gdGhpcy5zZXJpZXMubGVuZ3RoICYmIHRoaXMuc2VyaWVzWzBdO1xuICAgIGluc3RhbmNlLmdhdWdlV2lkdGggPSB0aGlzLmdldEdhdWdlQmFzZVdpZHRoKCk7XG5cbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyU3Vic2NyaXB0aW9uKGluc3RhbmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tHYXVnZVZhbHVlTGltaXRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodmFsdWUgPD0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgIHJldHVybiAxMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRyYXdCYXNlUGF0aCgpIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG8tY2hhcnQtZ2F1Z2UtYmFzZS1wYXRoJyk7XG5cbiAgICB0aGlzLmRyYXdQYXRoKGJhc2VQYXRoLCB0aGlzLmNoYXJ0SXRlbVN0YXJ0QW5nbGUsIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHYXVnZUJhc2VXaWR0aCgpIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG8tY2hhcnQtZ2F1Z2UtYmFzZS1wYXRoJyk7XG5cbiAgICBpZiAoYmFzZVBhdGgpIHtcbiAgICAgIHJldHVybiBiYXNlUGF0aC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEdhdWdlU2VyaWUoc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBbXSkge1xuICAgIGNvbnN0IFtzZXJpZV0gPSBzZXJpZXM7XG5cbiAgICBpZiAoc2VyaWUgJiYgdHlwZW9mIHNlcmllID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIC4uLnNlcmllLFxuICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yc1swXSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5jaGVja0dhdWdlVmFsdWVMaW1pdHMoc2VyaWUudmFsdWUpXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNpemVMaXN0ZW5lclN1YnNjcmlwdGlvbihpbnN0YW5jZTogUG9DaGFydEdhdWdlVGV4dENvbnRlbnRDb21wb25lbnQpIHtcbiAgICB0aGlzLndpbmRvd1Jlc2l6ZUVtaXR0ZXIuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGluc3RhbmNlLmdhdWdlV2lkdGggPSB0aGlzLmdldEdhdWdlQmFzZVdpZHRoKCk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdGlvbi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==