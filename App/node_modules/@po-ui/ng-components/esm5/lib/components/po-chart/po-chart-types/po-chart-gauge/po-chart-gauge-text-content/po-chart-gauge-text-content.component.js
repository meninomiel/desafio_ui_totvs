import { __assign, __decorate, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
var PoChartGaugeTextContentComponent = /** @class */ (function () {
    function PoChartGaugeTextContentComponent(changeDetection) {
        this.changeDetection = changeDetection;
    }
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "gaugeWidth", {
        get: function () {
            return this._gaugeWidth;
        },
        set: function (value) {
            this._gaugeWidth = value;
            this.checkTextDescriptionSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "serie", {
        get: function () {
            return this._serie;
        },
        set: function (serie) {
            if (serie) {
                this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
                this._serie = __assign({}, serie);
            }
            else {
                this._serie = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieDescription", {
        get: function () {
            return this.serie && this.serie.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieValue", {
        get: function () {
            return this.serie && this.serie.value >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "maxDescriptionWidth", {
        get: function () {
            // Diferença contemplando a largura do path base e padding interno.
            var subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
            var descriptionWidth = this.gaugeWidth - subtractionArea;
            return { 'max-width': descriptionWidth + "px" };
        },
        enumerable: true,
        configurable: true
    });
    PoChartGaugeTextContentComponent.prototype.ngAfterViewInit = function () {
        this.checkTextDescriptionSize();
    };
    PoChartGaugeTextContentComponent.prototype.checkTextDescriptionSize = function () {
        var _this = this;
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(function () {
                _this.tooltip = _this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    };
    PoChartGaugeTextContentComponent.prototype.convertValueInPercentFormat = function (value) {
        var decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return decimalValue + "%";
    };
    PoChartGaugeTextContentComponent.prototype.isEllipsisActive = function () {
        var isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    };
    PoChartGaugeTextContentComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('p-gauge-width'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoChartGaugeTextContentComponent.prototype, "gaugeWidth", null);
    __decorate([
        Input('p-serie'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoChartGaugeTextContentComponent.prototype, "serie", null);
    __decorate([
        ViewChild('description', { read: ElementRef }),
        __metadata("design:type", ElementRef)
    ], PoChartGaugeTextContentComponent.prototype, "descriptionElement", void 0);
    PoChartGaugeTextContentComponent = __decorate([
        Component({
            selector: 'po-chart-gauge-text-content',
            template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\n    {{ serie?.description }}\n  </p>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], PoChartGaugeTextContentComponent);
    return PoChartGaugeTextContentComponent;
}());
export { PoChartGaugeTextContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50L3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFPNUY7SUFnQ0UsMENBQW9CLGVBQWtDO1FBQWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtJQUFHLENBQUM7SUF6QmxDLHNCQUFJLHdEQUFVO2FBTXRDO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7YUFSdUIsVUFBZSxLQUFhO1lBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBRXpCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBTWlCLHNCQUFJLG1EQUFLO2FBUzNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7YUFYaUIsVUFBVSxLQUF3QjtZQUNsRCxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDekUsSUFBSSxDQUFDLE1BQU0sZ0JBQVEsS0FBSyxDQUFFLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7YUFDekI7UUFDSCxDQUFDOzs7T0FBQTtJQVVELHNCQUFJLGlFQUFtQjthQUF2QjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUM5QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDJEQUFhO2FBQWpCO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGlFQUFtQjthQUF2QjtZQUNFLG1FQUFtRTtZQUNuRSxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLHNCQUFzQixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekUsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQztZQUUzRCxPQUFPLEVBQUUsV0FBVyxFQUFLLGdCQUFnQixPQUFJLEVBQUUsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQUVELDBEQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU8sbUVBQXdCLEdBQWhDO1FBQUEsaUJBUUM7UUFQQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQix5RUFBeUU7WUFDekUsVUFBVSxDQUFDO2dCQUNULEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDekMsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVPLHNFQUEyQixHQUFuQyxVQUFvQyxLQUFhO1FBQy9DLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hGLE9BQVUsWUFBWSxNQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVPLDJEQUFnQixHQUF4QjtRQUNFLElBQU0sZUFBZSxHQUNuQixJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUV4RyxPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM5RCxDQUFDOztnQkExQ29DLGlCQUFpQjs7SUF6QjlCO1FBQXZCLEtBQUssQ0FBQyxlQUFlLENBQUM7OztzRUFJdEI7SUFNaUI7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7O2lFQU9oQjtJQU0rQztRQUEvQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO2tDQUFxQixVQUFVO2dGQUFDO0lBOUJwRSxnQ0FBZ0M7UUFMNUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDZCQUE2QjtZQUN2Qyw0V0FBMkQ7WUFDM0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsQ0FBQzt5Q0FpQ3FDLGlCQUFpQjtPQWhDM0MsZ0NBQWdDLENBMkU1QztJQUFELHVDQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0EzRVksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnROdW1iZXJUb0RlY2ltYWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuLi9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IHBvQ2hhcnRHYXVnZVNlcmllV2lkdGggfSBmcm9tICcuLi8uLi9wby1jaGFydC1jaXJjdWxhci9wby1jaGFydC1jaXJjdWxhci5jb25zdGFudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0R2F1Z2VUZXh0Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBzZXJpZVZhbHVlQ29udmVydGVkOiBzdHJpbmc7XG4gIHRvb2x0aXA6IHN0cmluZztcblxuICBwcml2YXRlIF9nYXVnZVdpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX3NlcmllOiBQb0NoYXJ0R2F1Z2VTZXJpZTtcblxuICBASW5wdXQoJ3AtZ2F1Z2Utd2lkdGgnKSBzZXQgZ2F1Z2VXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZ2F1Z2VXaWR0aCA9IHZhbHVlO1xuXG4gICAgdGhpcy5jaGVja1RleHREZXNjcmlwdGlvblNpemUoKTtcbiAgfVxuXG4gIGdldCBnYXVnZVdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLl9nYXVnZVdpZHRoO1xuICB9XG5cbiAgQElucHV0KCdwLXNlcmllJykgc2V0IHNlcmllKHNlcmllOiBQb0NoYXJ0R2F1Z2VTZXJpZSkge1xuICAgIGlmIChzZXJpZSkge1xuICAgICAgdGhpcy5zZXJpZVZhbHVlQ29udmVydGVkID0gdGhpcy5jb252ZXJ0VmFsdWVJblBlcmNlbnRGb3JtYXQoc2VyaWUudmFsdWUpO1xuICAgICAgdGhpcy5fc2VyaWUgPSB7IC4uLnNlcmllIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NlcmllID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzZXJpZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VyaWU7XG4gIH1cblxuICBAVmlld0NoaWxkKCdkZXNjcmlwdGlvbicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkZXNjcmlwdGlvbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIGdldCBoYXNTZXJpZURlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNlcmllICYmIHRoaXMuc2VyaWUuZGVzY3JpcHRpb247XG4gIH1cblxuICBnZXQgaGFzU2VyaWVWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJpZSAmJiB0aGlzLnNlcmllLnZhbHVlID49IDA7XG4gIH1cblxuICBnZXQgbWF4RGVzY3JpcHRpb25XaWR0aCgpIHtcbiAgICAvLyBEaWZlcmVuw6dhIGNvbnRlbXBsYW5kbyBhIGxhcmd1cmEgZG8gcGF0aCBiYXNlIGUgcGFkZGluZyBpbnRlcm5vLlxuICAgIGNvbnN0IHN1YnRyYWN0aW9uQXJlYSA9IHRoaXMuZ2F1Z2VXaWR0aCAqIHBvQ2hhcnRHYXVnZVNlcmllV2lkdGggKiAyICogMjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbldpZHRoID0gdGhpcy5nYXVnZVdpZHRoIC0gc3VidHJhY3Rpb25BcmVhO1xuXG4gICAgcmV0dXJuIHsgJ21heC13aWR0aCc6IGAke2Rlc2NyaXB0aW9uV2lkdGh9cHhgIH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5jaGVja1RleHREZXNjcmlwdGlvblNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCkge1xuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkge1xuICAgICAgLy8gdG9vbHRpcCBuZWNlc3PDoXJpbyBwYXJhIGNvbnRvcm5hciBjb21wb3J0YW1lbnRvIGluZXNwZXJhZG8gZG8gdG9vbHRpcC5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmlzRWxsaXBzaXNBY3RpdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24uZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRlY2ltYWxWYWx1ZSA9IFN0cmluZyhjb252ZXJ0TnVtYmVyVG9EZWNpbWFsKHZhbHVlLCAxKSkucmVwbGFjZSgnLicsICcsJyk7XG4gICAgcmV0dXJuIGAke2RlY2ltYWxWYWx1ZX0lYDtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbGxpcHNpc0FjdGl2ZSgpIHtcbiAgICBjb25zdCBpc0V4Y2VlZGVkV2lkdGggPVxuICAgICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA8IHRoaXMuZGVzY3JpcHRpb25FbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGg7XG5cbiAgICByZXR1cm4gaXNFeGNlZWRlZFdpZHRoID8gdGhpcy5zZXJpZS5kZXNjcmlwdGlvbiA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19