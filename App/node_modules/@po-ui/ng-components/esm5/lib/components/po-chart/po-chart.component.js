import { __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, DoCheck, ElementRef, HostListener, IterableDiffers, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartColors } from './po-chart-colors.constant';
import { PoChartDonutComponent } from './po-chart-types/po-chart-donut/po-chart-donut.component';
import { PoChartGaugeComponent } from './po-chart-types/po-chart-gauge/po-chart-gauge.component';
import { PoChartPieComponent } from './po-chart-types/po-chart-pie/po-chart-pie.component';
import { PoChartType } from './enums/po-chart-type.enum';
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
var PoChartComponent = /** @class */ (function (_super) {
    __extends(PoChartComponent, _super);
    function PoChartComponent(changeDetector, componentFactoryResolver, differs) {
        var _a;
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.differs = differs;
        _this.calculatedElement = false;
        _this.initialized = false;
        _this.windowResizeListener = new Subject();
        _this.mappings = (_a = {},
            _a[PoChartType.Donut] = PoChartDonutComponent,
            _a[PoChartType.Gauge] = PoChartGaugeComponent,
            _a[PoChartType.Pie] = PoChartPieComponent,
            _a);
        _this.colors = [];
        _this.onResize = function () { return _this.windowResizeListener.next(); };
        _this.differ = _this.differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoChartComponent.prototype, "isChartGaugeType", {
        get: function () {
            return this.type === PoChartType.Gauge;
        },
        enumerable: true,
        configurable: true
    });
    PoChartComponent.prototype.ngAfterViewInit = function () {
        this.initialized = true;
    };
    PoChartComponent.prototype.ngDoCheck = function () {
        var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    };
    PoChartComponent.prototype.ngOnDestroy = function () {
        this.removeWindowResizeListener();
    };
    PoChartComponent.prototype.ngOnInit = function () {
        this.getSeriesColor();
    };
    PoChartComponent.prototype.rebuildComponent = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
    };
    PoChartComponent.prototype.chartLegendHeight = function (chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    };
    PoChartComponent.prototype.checkingForSerieChanges = function () {
        if (this.componentRef && this.differ) {
            var changeSeries = this.differ.diff(this.chartSeries);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    };
    PoChartComponent.prototype.createComponent = function () {
        var componentType = this.getComponentType(this.type);
        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        var instance = this.componentRef.instance;
        this.setChartProperties(instance);
        return instance;
    };
    PoChartComponent.prototype.dynamicComponentSetting = function () {
        var instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    };
    PoChartComponent.prototype.getComponentType = function (typeName) {
        return this.mappings[typeName];
    };
    PoChartComponent.prototype.getSeriesColor = function () {
        var colorsLength = PoChartColors.length - 1;
        if (!this.chartSeries) {
            return (this.colors = PoChartColors[colorsLength]);
        }
        if (this.type === PoChartType.Gauge) {
            return (this.colors = PoChartColors[0]);
        }
        var seriesLength = this.chartSeries.length - 1;
        if (seriesLength > colorsLength) {
            var colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            var quantityDuplicates = seriesLength / colorsLength;
            for (var i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return (this.colors = colors);
        }
        return (this.colors = PoChartColors[seriesLength]);
    };
    PoChartComponent.prototype.removeWindowResizeListener = function () {
        if (this.onResize) {
            this.onResize = function () { };
        }
    };
    PoChartComponent.prototype.setChartProperties = function (instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegendHeight(this.chartLegend);
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? __spread(this.colors) : [];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    };
    PoChartComponent.prototype.setClickSubscribe = function (instance) {
        var _this = this;
        instance.onSerieClick.subscribe(function (event) {
            _this.onSeriesClick(event);
        });
    };
    PoChartComponent.prototype.setHoverSubscribe = function (instance) {
        var _this = this;
        instance.onSerieHover.subscribe(function (event) {
            _this.onSeriesHover(event);
        });
    };
    PoChartComponent.prototype.setResizeListenerSubscribe = function (instance) {
        var _this = this;
        this.windowResizeListener.subscribe(function () {
            instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = _this.chartLegendHeight(_this.chartLegend);
            instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
        });
    };
    PoChartComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers }
    ]; };
    __decorate([
        ViewChild('chartContainer', { read: ViewContainerRef, static: true }),
        __metadata("design:type", ViewContainerRef)
    ], PoChartComponent.prototype, "chartContainer", void 0);
    __decorate([
        ViewChild('chartHeader', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoChartComponent.prototype, "chartHeader", void 0);
    __decorate([
        ViewChild('chartLegend', { read: ElementRef }),
        __metadata("design:type", ElementRef)
    ], PoChartComponent.prototype, "chartLegend", void 0);
    __decorate([
        ViewChild('chartWrapper', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoChartComponent.prototype, "chartWrapper", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Object)
    ], PoChartComponent.prototype, "onResize", void 0);
    PoChartComponent = __decorate([
        Component({
            selector: 'po-chart',
            template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"!isChartGaugeType\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-colors]=\"colors\" [p-series]=\"series\"> </po-chart-legend>\n</ng-template>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            ComponentFactoryResolver,
            IterableDiffers])
    ], PoChartComponent);
    return PoChartComponent;
}(PoChartBaseComponent));
export { PoChartComponent };
//# sourceMappingURL=data:application/json;base64,