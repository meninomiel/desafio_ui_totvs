import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { PoChartType } from './enums/po-chart-type.enum';
var poChartDefaultHeight = 400;
var poChartMinHeight = 200;
var poChartTypeDefault = PoChartType.Pie;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir o tipo de gráfico, uma altura e um título.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 * - Para exibir a intensidade de um único dado dê preferência ao tipo `gauge`.
 */
var PoChartBaseComponent = /** @class */ (function () {
    function PoChartBaseComponent() {
        this._type = poChartTypeDefault;
        this.poChartType = PoChartType;
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(PoChartBaseComponent.prototype, "height", {
        get: function () {
            return this._height || this.setDefaultHeight();
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * O valor padrão dos gráficos são:
         * - para o tipo *gauge*: `200px`;
         * - para os demais tipos: `400px`.
         *
         * > O valor mínimo aceito nesta propriedade é 200.
         *
         * @default `400px`
         */
        set: function (value) {
            var intValue = convertToInt(value);
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
            }
            else {
                height = this.setDefaultHeight();
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartBaseComponent.prototype, "series", {
        get: function () {
            return this._series;
        },
        /**
         * @description
         *
         * Define os elementos do gráfico que serão criados dinamicamente.
         *
         * > A coleção de objetos deve implementar alguma das interfaces abaixo:
         * - `PoDonutChartSeries`
         * - `PoPieChartSeries`
         * - `PoChartGaugeSerie`
         */
        set: function (value) {
            this._series = value || [];
            this.chartSeries = Array.isArray(this._series)
                ? __spread(this._series) : this.transformObjectToArrayObject(this._series);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartBaseComponent.prototype, "type", {
        get: function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo de gráfico.
         *
         * > Veja os valores válidos no *enum* `PoChartType`.
         *
         * @default `PoChartType.Pie`
         */
        set: function (value) {
            this._type = Object.values(PoChartType).includes(value) ? value : poChartTypeDefault;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    PoChartBaseComponent.prototype.onSeriesClick = function (event) {
        this.seriesClick.emit(event);
    };
    PoChartBaseComponent.prototype.onSeriesHover = function (event) {
        this.seriesHover.emit(event);
    };
    PoChartBaseComponent.prototype.setDefaultHeight = function () {
        return this.type === PoChartType.Gauge ? poChartMinHeight : poChartDefaultHeight;
    };
    PoChartBaseComponent.prototype.transformObjectToArrayObject = function (serie) {
        return typeof serie === 'object' && Object.keys(serie).length ? [__assign({}, serie)] : [];
    };
    __decorate([
        Input('p-height'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoChartBaseComponent.prototype, "height", null);
    __decorate([
        Input('p-series'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoChartBaseComponent.prototype, "series", null);
    __decorate([
        Input('p-title'),
        __metadata("design:type", String)
    ], PoChartBaseComponent.prototype, "title", void 0);
    __decorate([
        Input('p-type'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoChartBaseComponent.prototype, "type", null);
    __decorate([
        Output('p-series-click'),
        __metadata("design:type", Object)
    ], PoChartBaseComponent.prototype, "seriesClick", void 0);
    __decorate([
        Output('p-series-hover'),
        __metadata("design:type", Object)
    ], PoChartBaseComponent.prototype, "seriesHover", void 0);
    PoChartBaseComponent = __decorate([
        Directive()
    ], PoChartBaseComponent);
    return PoChartBaseComponent;
}());
export { PoChartBaseComponent };
//# sourceMappingURL=data:application/json;base64,