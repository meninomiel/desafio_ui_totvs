import { __decorate, __metadata } from "tslib";
import { ElementRef, ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
var Padding = 24;
/* tslint:disable:directive-class-suffix */
var PoChartDynamicTypeComponent = /** @class */ (function () {
    function PoChartDynamicTypeComponent() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    Object.defineProperty(PoChartDynamicTypeComponent.prototype, "isChartGaugeType", {
        get: function () {
            return this.type === PoChartType.Gauge;
        },
        enumerable: true,
        configurable: true
    });
    PoChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
        var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    };
    PoChartDynamicTypeComponent.prototype.calculateTotalValue = function () {
        this.totalValue =
            this.type === PoChartType.Gauge
                ? 100
                : this.series.reduce(function (previousValue, serie) { return previousValue + serie.value; }, 0);
    };
    __decorate([
        ViewChild('chartBody', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoChartDynamicTypeComponent.prototype, "chartBody", void 0);
    __decorate([
        ViewChild('svgContainer', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoChartDynamicTypeComponent.prototype, "svgContainer", void 0);
    PoChartDynamicTypeComponent = __decorate([
        Directive()
    ], PoChartDynamicTypeComponent);
    return PoChartDynamicTypeComponent;
}());
export { PoChartDynamicTypeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSTFELElBQU0sT0FBTyxHQUFXLEVBQUUsQ0FBQztBQUUzQiwyQ0FBMkM7QUFFM0M7SUFBQTtRQWFFLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLGlCQUFZLEdBQXVFLElBQUksT0FBTyxFQUFFLENBQUM7UUFDakcsaUJBQVksR0FBdUUsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNqRyxXQUFNLEdBQWUsRUFBRSxDQUFDO0lBOEIxQixDQUFDO0lBakJDLHNCQUFJLHlEQUFnQjthQUFwQjtZQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBRUQscUVBQStCLEdBQS9CLFVBQWdDLG1CQUEyQixFQUFFLGtCQUEwQixFQUFFLGtCQUEwQjtRQUNqSCxJQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUVuRyxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUMxRSxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQseURBQW1CLEdBQW5CO1FBQ0UsSUFBSSxDQUFDLFVBQVU7WUFDYixJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxLQUFLO2dCQUM3QixDQUFDLENBQUMsR0FBRztnQkFDTCxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxhQUFhLEVBQUUsS0FBSyxJQUFLLE9BQUEsYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQTNCLENBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQXBCeUM7UUFBekMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FBWSxVQUFVO2tFQUFDO0lBRW5CO1FBQTVDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQWUsVUFBVTtxRUFBQztJQTNCbEQsMkJBQTJCO1FBRGhELFNBQVMsRUFBRTtPQUNVLDJCQUEyQixDQThDaEQ7SUFBRCxrQ0FBQztDQUFBLEFBOUNELElBOENDO1NBOUNxQiwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVNlcmllIH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ2hhcnRUeXBlIH0gZnJvbSAnLi4vZW51bXMvcG8tY2hhcnQtdHlwZS5lbnVtJztcbmltcG9ydCB7IFBvRG9udXRDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtZG9udXQvcG8tY2hhcnQtZG9udXQtc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BpZUNoYXJ0U2VyaWVzIH0gZnJvbSAnLi9wby1jaGFydC1waWUvcG8tY2hhcnQtcGllLXNlcmllcy5pbnRlcmZhY2UnO1xuXG5jb25zdCBQYWRkaW5nOiBudW1iZXIgPSAyNDtcblxuLyogdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeCAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50IHtcbiAgcHJvdGVjdGVkIHdpbmRvd1Jlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICBwcm90ZWN0ZWQgd2luZG93U2Nyb2xsTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgY2VudGVyWDogbnVtYmVyO1xuICBjaGFydEVsZW1lbnRDYXRlZ29yeTogYW55O1xuICBjaGFydEVsZW1lbnREZXNjcmlwdGlvbjogYW55O1xuICBjaGFydEVsZW1lbnRWYWx1ZTogYW55O1xuICBjaGFydEhlYWRlcjogbnVtYmVyO1xuICBjaGFydExlZ2VuZDogbnVtYmVyO1xuICBjaGFydFdyYXBwZXI6IG51bWJlcjtcbiAgY29sb3JzOiBBcnJheTxzdHJpbmc+O1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgaW5uZXJSYWRpdXM6IG51bWJlciA9IDA7XG4gIG9uU2VyaWVDbGljazogU3ViamVjdDxQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzIHwgUG9DaGFydEdhdWdlU2VyaWU+ID0gbmV3IFN1YmplY3QoKTtcbiAgb25TZXJpZUhvdmVyOiBTdWJqZWN0PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXMgfCBQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBuZXcgU3ViamVjdCgpO1xuICBzZXJpZXM6IEFycmF5PGFueT4gPSBbXTtcbiAgc3ZnRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHN2Z0hlaWdodDogbnVtYmVyO1xuICB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgJiBFdmVudFRhcmdldDtcbiAgdG9vbHRpcEVsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xuICB0b29sdGlwVGV4dDogc3RyaW5nO1xuICB0b3RhbFZhbHVlOiBudW1iZXI7XG4gIHR5cGU6IFBvQ2hhcnRUeXBlO1xuXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0Qm9keScsIHsgc3RhdGljOiB0cnVlIH0pIGNoYXJ0Qm9keTogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKCdzdmdDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdmdDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgZ2V0IGlzQ2hhcnRHYXVnZVR5cGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gUG9DaGFydFR5cGUuR2F1Z2U7XG4gIH1cblxuICBjYWxjdWxhdGVTVkdDb250YWluZXJEaW1lbnNpb25zKGNoYXJ0V3JhcHBlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRIZWFkZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0TGVnZW5kRWxlbWVudDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA9IHRoaXMuaGVpZ2h0IC0gY2hhcnRIZWFkZXJFbGVtZW50IC0gY2hhcnRMZWdlbmRFbGVtZW50IC0gUGFkZGluZyAqIDI7XG5cbiAgICB0aGlzLnN2Z0hlaWdodCA9IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPD0gMCA/IDAgOiBzdmdDb250YWluZXJIZWlnaHRDYWxjO1xuICAgIHRoaXMuY2VudGVyWCA9IGNoYXJ0V3JhcHBlckVsZW1lbnQgLyAyO1xuICB9XG5cbiAgY2FsY3VsYXRlVG90YWxWYWx1ZSgpIHtcbiAgICB0aGlzLnRvdGFsVmFsdWUgPVxuICAgICAgdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZVxuICAgICAgICA/IDEwMFxuICAgICAgICA6IHRoaXMuc2VyaWVzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgc2VyaWUpID0+IHByZXZpb3VzVmFsdWUgKyBzZXJpZS52YWx1ZSwgMCk7XG4gIH1cbn1cbiJdfQ==