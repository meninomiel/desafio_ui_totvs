import { __assign, __extends, __rest } from "tslib";
import { Subject } from 'rxjs';
import { convertNumberToDecimal } from '../../../../utils/util';
import { poChartAngleStepInterval, poChartCompleteCircle, poChartDonutSerieWidth, poChartGaugeSerieWidth, poChartStartAngle } from './po-chart-circular.constant';
import { PoChartDynamicTypeComponent } from '../po-chart-dynamic-type.component';
import { PoChartType } from '../../enums/po-chart-type.enum';
import { PoSeriesTextBlack } from '../../po-chart-colors.constant';
var poChartBlackColor = '#000000';
var poChartWhiteColor = '#ffffff';
var PoChartCircular = /** @class */ (function (_super) {
    __extends(PoChartCircular, _super);
    function PoChartCircular(el, ngZone, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.ngZone = ngZone;
        _this.renderer = renderer;
        _this.chartItemStartAngle = poChartStartAngle;
        _this.windowResizeEmitter = new Subject();
        _this.chartItemsEndAngleList = [];
        _this.svgPathElementsList = [];
        _this.svgTextElementsList = [];
        return _this;
    }
    Object.defineProperty(PoChartCircular.prototype, "series", {
        get: function () {
            return this._series;
        },
        set: function (value) {
            this._series = this.getSeriesWithValue(value);
        },
        enumerable: true,
        configurable: true
    });
    PoChartCircular.prototype.ngOnDestroy = function () {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    };
    PoChartCircular.prototype.ngOnInit = function () {
        this.chartInitSetup();
        this.setEventListeners();
    };
    PoChartCircular.prototype.removeTooltip = function () {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        }
    };
    PoChartCircular.prototype.drawPath = function (path, chartItemStartAngle, chartItemEndAngle) {
        var largeArc = chartItemEndAngle - chartItemStartAngle > Math.PI;
        var sinAlpha = Math.sin(chartItemStartAngle);
        var cosAlpha = Math.cos(chartItemStartAngle);
        var sinBeta = Math.sin(chartItemEndAngle);
        var cosBeta = Math.cos(chartItemEndAngle);
        var startX = this.centerX + cosAlpha * this.centerX;
        var startY = this.centerX + sinAlpha * this.centerX;
        var endX = this.centerX + cosBeta * this.centerX;
        var endY = this.centerX + sinBeta * this.centerX;
        var startInnerX = this.centerX + cosAlpha * this.innerRadius;
        var startInnerY = this.centerX + sinAlpha * this.innerRadius;
        var endInnerX = this.centerX + cosBeta * this.innerRadius;
        var endInnerY = this.centerX + sinBeta * this.innerRadius;
        var halfGaugeCoordinates = [
            'M',
            startX,
            startY,
            'A',
            this.centerX,
            this.centerX,
            0,
            '0,1',
            endX,
            endY,
            'A',
            1,
            1,
            0,
            '0,1',
            endInnerX,
            endInnerY,
            'A',
            this.innerRadius,
            this.innerRadius,
            0,
            '0,0',
            startInnerX,
            startInnerY,
            'A',
            1,
            1,
            0,
            '0,1',
            startX,
            startY,
            'Z'
        ].join(' ');
        var pathCoordinates = [
            'M',
            startX,
            startY,
            'A',
            this.centerX,
            this.centerX,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            endInnerX,
            endInnerY,
            'A',
            this.innerRadius,
            this.innerRadius,
            0,
            largeArc ? '1,0' : '0,0',
            startInnerX,
            startInnerY,
            'Z'
        ].join(' ');
        return path.setAttribute('d', this.isChartGaugeType ? halfGaugeCoordinates : pathCoordinates);
    };
    PoChartCircular.prototype.getSeriesWithValue = function (series) {
        var _this = this;
        var newSeries = [];
        series.forEach(function (serie, index) {
            if (serie.value > 0) {
                newSeries.push(__assign(__assign({}, serie), { color: _this.colors[index] }));
            }
        });
        return newSeries;
    };
    PoChartCircular.prototype.animationSetup = function () {
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    };
    PoChartCircular.prototype.appendGaugeBackgroundPathElement = function (svgPathsWrapper) {
        var svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-chart-gauge-base-path');
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
    };
    PoChartCircular.prototype.calculateAngleRadians = function () {
        var _this = this;
        this.series.forEach(function (serie, index) { return (_this.chartItemsEndAngleList[index] = _this.calculateEndAngle(serie.value, _this.totalValue)); });
    };
    PoChartCircular.prototype.calculateCurrentEndAngle = function (angleCurrentPosition) {
        var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return this.chartItemStartAngle + this.chartItemEndAngle - poChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    };
    PoChartCircular.prototype.calculateEndAngle = function (value, totalValue) {
        var endAngle = (value / totalValue) * (Math.PI * 2);
        return this.isChartGaugeType ? endAngle / 2 : endAngle;
    };
    PoChartCircular.prototype.calculateSVGDimensions = function () {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.innerRadius = this.setInnerRadius(this.type);
    };
    PoChartCircular.prototype.changeTooltipPosition = function (event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
            this.showTooltip();
        }
        var tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
        this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
    };
    PoChartCircular.prototype.chartInitSetup = function () {
        this.calculateSVGDimensions();
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    };
    PoChartCircular.prototype.checkingIfScrollsWithPoPage = function () {
        var poPageContent = document.getElementsByClassName('po-page-content');
        return poPageContent.length ? poPageContent[0] : window;
    };
    PoChartCircular.prototype.createPath = function (serie, svgPathsWrapper) {
        var svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
        this.renderer.setAttribute(svgPath, 'fill', serie.color);
        this.setElementAttributes(svgPath, serie);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    };
    PoChartCircular.prototype.createPaths = function () {
        var _this = this;
        var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        if (this.isChartGaugeType) {
            this.appendGaugeBackgroundPathElement(svgPathsWrapper);
            // Tratamento para evitar que o path desenhe os arcos referentes ao border radius do path.
            if (this.isSerieValueEqualZero()) {
                return;
            }
        }
        this.series.forEach(function (serie) { return _this.createPath(serie, svgPathsWrapper); });
    };
    PoChartCircular.prototype.createText = function (serie) {
        var value = serie.value;
        var svgG = this.renderer.createElement('svg:g', 'svg');
        var svgText = this.renderer.createElement('svg:text', 'svg');
        var fontSize = this.getFontSize();
        var textColor = this.getTextColor(serie.color);
        svgText.textContent = this.getPercentValue(value, this.totalValue) + '%';
        this.renderer.setAttribute(svgText, 'class', 'po-path-item');
        this.renderer.setAttribute(svgText, 'fill', textColor);
        this.renderer.setAttribute(svgText, 'font-size', fontSize);
        this.renderer.setAttribute(svgText, 'fill-opacity', '0');
        this.setElementAttributes(svgText, serie);
        this.renderer.appendChild(svgG, svgText);
        this.renderer.appendChild(this.svgElement, svgG);
        this.svgTextElementsList.push(svgText);
    };
    PoChartCircular.prototype.createTexts = function () {
        var _this = this;
        if (this.type === PoChartType.Donut) {
            this.series.forEach(function (serie) { return _this.createText(serie); });
        }
    };
    PoChartCircular.prototype.createSVGElements = function () {
        var viewBoxHeight = this.isChartGaugeType
            ? this.centerX + this.centerX * poChartGaugeSerieWidth
            : this.chartWrapper;
        var preserveAspectRatio = this.isChartGaugeType ? 'xMidYMax' : 'xMidYMin';
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + viewBoxHeight);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', preserveAspectRatio + " meet");
        this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
        this.createTexts();
    };
    PoChartCircular.prototype.drawPathInit = function () {
        var _this = this;
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular(function () { return _this.drawSeries(); });
        }
    };
    PoChartCircular.prototype.drawSeries = function (currentSerieIndex, angleCurrentPosition) {
        if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
        if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
        var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += poChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    };
    PoChartCircular.prototype.emitEventOnEnter = function (event) {
        this.onSerieHover.next(event);
    };
    PoChartCircular.prototype.getFontSize = function () {
        var fontSizePorcent = 0.04;
        var fontSize = fontSizePorcent * this.chartWrapper;
        return fontSize.toFixed(0) + "px";
    };
    PoChartCircular.prototype.getPercentValue = function (value, totalValue) {
        var percentValue = (value / totalValue) * 100;
        var floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    };
    PoChartCircular.prototype.getTextColor = function (color) {
        if (PoSeriesTextBlack.includes(color)) {
            return poChartBlackColor;
        }
        return poChartWhiteColor;
    };
    PoChartCircular.prototype.getTooltipValue = function (value) {
        if (this.type === PoChartType.Pie) {
            return value.toString();
        }
        return this.getPercentValue(value, this.totalValue) + '%';
    };
    PoChartCircular.prototype.isSerieValueEqualZero = function () {
        return this.series.length && this.series[0].value === 0;
    };
    PoChartCircular.prototype.onMouseClick = function () {
        var serieOnClick;
        if (this.isChartGaugeType) {
            var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
            serieOnClick = serie;
        }
        else {
            serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        }
        this.onSerieClick.next(serieOnClick);
    };
    PoChartCircular.prototype.onMouseEnter = function (event) {
        var serieOnEnter;
        if (!this.isChartGaugeType) {
            this.tooltipElement = this.chartBody.nativeElement.querySelector('.po-chart-tooltip');
            this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
            this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
            this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
            this.showTooltip();
            this.changeTooltipPosition(event);
            serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        }
        else {
            var _a = this.series[0], color = _a.color, serie = __rest(_a, ["color"]);
            this.chartElementDescription = event.target.getAttributeNS(null, 'data-tooltip-category');
            serieOnEnter = serie;
        }
        this.emitEventOnEnter(serieOnEnter);
    };
    PoChartCircular.prototype.onWindowResize = function () {
        this.calculateSVGDimensions();
        this.renderer.setAttribute(this.svgElement, 'width', "" + this.centerX);
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        this.windowResizeEmitter.next();
    };
    PoChartCircular.prototype.removeWindowResizeListener = function () {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    };
    PoChartCircular.prototype.removeWindowScrollListener = function () {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    };
    PoChartCircular.prototype.setEventListeners = function () {
        var _this = this;
        var chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach(function (serie) {
            _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
            _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
            if (!_this.isChartGaugeType) {
                _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
                _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
            }
        });
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
    };
    PoChartCircular.prototype.setInnerRadius = function (type) {
        var serieWidth;
        switch (type) {
            case PoChartType.Donut: {
                serieWidth = poChartDonutSerieWidth;
                break;
            }
            case PoChartType.Gauge: {
                serieWidth = poChartGaugeSerieWidth;
                break;
            }
            case PoChartType.Pie: {
                return 0;
            }
        }
        return this.centerX - this.centerX * serieWidth;
    };
    PoChartCircular.prototype.setTextProperties = function (text, startAngle, endAngle) {
        // necessário text.getClientRects().length para contornar erro de console causado no Firefox
        if (this.type === PoChartType.Donut && text.getClientRects().length) {
            // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
            var centerAngle = (startAngle + endAngle) / 2;
            var textBox = text.getBBox();
            var halfTextWidth = textBox.width / 2;
            var halfTextHeight = textBox.height / 2;
            // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
            var radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
            var xCoordinate = radius * Math.cos(centerAngle) + this.centerX - halfTextWidth;
            var yCoordinate = radius * Math.sin(centerAngle) + this.centerX + halfTextHeight / 2;
            text.setAttribute('x', xCoordinate);
            text.setAttribute('y', yCoordinate);
            text.setAttribute('fill-opacity', '1');
        }
    };
    PoChartCircular.prototype.setTooltipPositions = function (event) {
        var displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    };
    PoChartCircular.prototype.setElementAttributes = function (svgElement, serie) {
        var value = serie.value, category = serie.category, tooltip = serie.tooltip, description = serie.description;
        this.renderer.setAttribute(svgElement, 'data-tooltip-value', "" + value);
        if (this.isChartGaugeType) {
            this.renderer.setAttribute(svgElement, 'data-tooltip-description', description);
        }
        else {
            var tooltipValue = this.getTooltipValue(value);
            this.renderer.setAttribute(svgElement, 'data-tooltip-category', category);
            this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || category + ": " + tooltipValue);
        }
    };
    PoChartCircular.prototype.showTooltip = function () {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
    };
    return PoChartCircular;
}(PoChartDynamicTypeComponent));
export { PoChartCircular };
//# sourceMappingURL=data:application/json;base64,