import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { DoCheck, EventEmitter, Input, IterableDiffers, Output, Directive } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { browserLanguage, convertToBoolean, isKeyCodeEnter, poLocaleDefault } from '../../utils/util';
export var poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
var PoDisclaimerGroupBaseComponent = /** @class */ (function () {
    function PoDisclaimerGroupBaseComponent(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = __assign(__assign({}, poDisclaimerGroupLiteralsDefault[poLocaleDefault]), poDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /** Função que será disparada quando a lista de *disclaimers* for modificada. */
        this.change = new EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "disclaimers", {
        get: function () {
            return this._disclaimers;
        },
        /** Lista de *disclaimers*. */
        /**
         * @description
         *
         * Lista de *disclaimers*.
         *
         * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
         *
         * Exemplo adicionando um *disclaimer* no array:
         *
         * ```
         * this.disclaimers = [...this.disclaimers, disclaimer];
         * ```
         *
         * ou
         *
         * ```
         * this.disclaimers = this.disclaimers.concat(disclaimer);
         * ```
         */
        set: function (value) {
            this.previousDisclaimers = __spread(this.disclaimers);
            this._disclaimers = this.checkDisclaimers(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
        get: function () {
            return this._hideRemoveAll;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * @default `false`
         */
        set: function (value) {
            this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoDisclaimerGroupBaseComponent.prototype.ngDoCheck = function () {
        this.checkChanges();
    };
    PoDisclaimerGroupBaseComponent.prototype.closeItem = function (disclaimer, emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        var itemIndex = this.disclaimers.findIndex(function (d) { return d['$id'] === disclaimer['$id']; });
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    };
    PoDisclaimerGroupBaseComponent.prototype.isRemoveAll = function () {
        return !this.hideRemoveAll && this.disclaimers.filter(function (c) { return !c.hideClose; }).length > 1;
    };
    PoDisclaimerGroupBaseComponent.prototype.onKeyPress = function (event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    };
    PoDisclaimerGroupBaseComponent.prototype.removeAllItems = function () {
        var _this = this;
        var removeItems = [];
        this.disclaimers.forEach(function (disclaimer) {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(function (disclaimer) { return _this.closeItem(disclaimer, false); });
        this.emitChangeDisclaimers();
    };
    PoDisclaimerGroupBaseComponent.prototype.checkChanges = function () {
        if (this.differ) {
            var changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    };
    PoDisclaimerGroupBaseComponent.prototype.checkDisclaimers = function (disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (var i = 0; i < disclaimers.length; i++) {
                var disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    };
    PoDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = function (disclaimers) {
        var _this = this;
        var currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some(function (disclaimer, index) {
            return disclaimer.value !== _this.previousDisclaimers[index].value ||
                disclaimer.property !== _this.previousDisclaimers[index].property;
        });
    };
    PoDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = function () {
        var _this = this;
        setTimeout(function () {
            _this.change.emit(_this.disclaimers);
        });
        this.previousDisclaimers = __spread(this._disclaimers);
    };
    PoDisclaimerGroupBaseComponent.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    __decorate([
        Input('p-disclaimers'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoDisclaimerGroupBaseComponent.prototype, "disclaimers", null);
    __decorate([
        Input('p-hide-remove-all'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", null);
    __decorate([
        Input('p-title'),
        __metadata("design:type", String)
    ], PoDisclaimerGroupBaseComponent.prototype, "title", void 0);
    __decorate([
        Output('p-change'),
        __metadata("design:type", EventEmitter)
    ], PoDisclaimerGroupBaseComponent.prototype, "change", void 0);
    PoDisclaimerGroupBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [IterableDiffers])
    ], PoDisclaimerGroupBaseComponent);
    return PoDisclaimerGroupBaseComponent;
}());
export { PoDisclaimerGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,