import { __decorate, __extends } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTagBaseComponent } from './po-tag-base.component';
import { PoTagIcon } from './enums/po-tag-icon.enum';
import { PoTagType } from './enums/po-tag-type.enum';
var poTagTypeDefault = 'po-tag-' + PoTagType.Info;
/**
 * @docsExtends PoTagBaseComponent
 *
 * @example
 *
 * <example name="po-tag-basic" title="PO Tag Basic">
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-labs" title="PO Tag Labs">
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
 * </example>
 */
var PoTagComponent = /** @class */ (function (_super) {
    __extends(PoTagComponent, _super);
    function PoTagComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoTagComponent.prototype.ngOnInit = function () {
        this.isClickable = this.click.observers.length > 0;
    };
    Object.defineProperty(PoTagComponent.prototype, "iconFromType", {
        get: function () {
            switch (this.type) {
                case PoTagType.Danger:
                    return PoTagIcon.Danger;
                case PoTagType.Info:
                    return PoTagIcon.Info;
                case PoTagType.Success:
                    return PoTagIcon.Success;
                case PoTagType.Warning:
                    return PoTagIcon.Warning;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "iconTypeString", {
        get: function () {
            return typeof this.icon === 'string';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "tagColor", {
        get: function () {
            if (this.type) {
                return this.inverse ? "po-tag-" + this.type + "-inverse" : "po-tag-" + this.type;
            }
            if (this.color) {
                return this.inverse ? "po-text-" + this.color : "po-" + this.color;
            }
            return this.inverse ? poTagTypeDefault + "-inverse" : poTagTypeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "tagOrientation", {
        get: function () {
            return this.orientation === this.poTagOrientation.Horizontal;
        },
        enumerable: true,
        configurable: true
    });
    PoTagComponent.prototype.onClick = function () {
        var submittedTagItem = { value: this.value, type: this.type };
        this.click.emit(submittedTagItem);
    };
    PoTagComponent.prototype.onKeyPressed = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.onClick();
    };
    PoTagComponent = __decorate([
        Component({
            selector: 'po-tag',
            template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\n  </div>\n\n  <div class=\"po-tag-sub-container\">\n    <div\n      class=\"po-tag\"\n      [class.po-clickable]=\"isClickable\"\n      [class.po-tag-inverse]=\"inverse\"\n      [ngClass]=\"tagColor\"\n      tabindex=\"0\"\n      (click)=\"onClick()\"\n      (keydown.enter)=\"onKeyPressed($event)\"\n      (keydown.space)=\"$event.preventDefault()\"\n      (keyup.space)=\"onKeyPressed($event)\"\n    >\n      <span *ngIf=\"icon\" class=\"po-icon\" [ngClass]=\"!type && iconTypeString ? icon : iconFromType\"></span>\n      <span class=\"po-tag-value\">{{ value }}</span>\n    </div>\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], PoTagComponent);
    return PoTagComponent;
}(PoTagBaseComponent));
export { PoTagComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFnL3BvLXRhZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRCxJQUFNLGdCQUFnQixHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBRXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBTUg7SUFBb0Msa0NBQWtCO0lBQXREOztJQXFEQSxDQUFDO0lBbERDLGlDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELHNCQUFJLHdDQUFZO2FBQWhCO1lBQ0UsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNqQixLQUFLLFNBQVMsQ0FBQyxNQUFNO29CQUNuQixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUM7Z0JBRTFCLEtBQUssU0FBUyxDQUFDLElBQUk7b0JBQ2pCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztnQkFFeEIsS0FBSyxTQUFTLENBQUMsT0FBTztvQkFDcEIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDO2dCQUUzQixLQUFLLFNBQVMsQ0FBQyxPQUFPO29CQUNwQixPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDNUI7UUFDSCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDBDQUFjO2FBQWxCO1lBQ0UsT0FBTyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksb0NBQVE7YUFBWjtZQUNFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVUsSUFBSSxDQUFDLElBQUksYUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFVLElBQUksQ0FBQyxJQUFNLENBQUM7YUFDN0U7WUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxhQUFXLElBQUksQ0FBQyxLQUFPLENBQUMsQ0FBQyxDQUFDLFFBQU0sSUFBSSxDQUFDLEtBQU8sQ0FBQzthQUNwRTtZQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUksZ0JBQWdCLGFBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFDekUsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwwQ0FBYzthQUFsQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQy9ELENBQUM7OztPQUFBO0lBRUQsZ0NBQU8sR0FBUDtRQUNFLElBQU0sZ0JBQWdCLEdBQWMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHFDQUFZLEdBQVosVUFBYSxLQUFLO1FBQ2hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFwRFUsY0FBYztRQUwxQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsUUFBUTtZQUNsQixvMUJBQXNDO1lBQ3RDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7T0FDVyxjQUFjLENBcUQxQjtJQUFELHFCQUFDO0NBQUEsQUFyREQsQ0FBb0Msa0JBQWtCLEdBcURyRDtTQXJEWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVGFnQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdGFnLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvVGFnSWNvbiB9IGZyb20gJy4vZW51bXMvcG8tdGFnLWljb24uZW51bSc7XG5pbXBvcnQgeyBQb1RhZ0l0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tdGFnLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVGFnVHlwZSB9IGZyb20gJy4vZW51bXMvcG8tdGFnLXR5cGUuZW51bSc7XG5cbmNvbnN0IHBvVGFnVHlwZURlZmF1bHQgPSAncG8tdGFnLScgKyBQb1RhZ1R5cGUuSW5mbztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9UYWdCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdGFnLWJhc2ljXCIgdGl0bGU9XCJQTyBUYWcgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhZy1iYXNpYy9zYW1wbGUtcG8tdGFnLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhZy1iYXNpYy9zYW1wbGUtcG8tdGFnLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRhZy1sYWJzXCIgdGl0bGU9XCJQTyBUYWcgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWxhYnMvc2FtcGxlLXBvLXRhZy1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhZy1sYWJzL3NhbXBsZS1wby10YWctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10YWctYmFuay1hY2NvdW50XCIgdGl0bGU9XCJQTyBUYWcgLSBCYW5rIEFjY291bnRcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhZy1iYW5rLWFjY291bnQvc2FtcGxlLXBvLXRhZy1iYW5rLWFjY291bnQuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdGFnLWJhbmstYWNjb3VudC9zYW1wbGUtcG8tdGFnLWJhbmstYWNjb3VudC5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWcnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFnLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWdDb21wb25lbnQgZXh0ZW5kcyBQb1RhZ0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBpc0NsaWNrYWJsZTogYm9vbGVhbjtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlzQ2xpY2thYmxlID0gdGhpcy5jbGljay5vYnNlcnZlcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGdldCBpY29uRnJvbVR5cGUoKSB7XG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgUG9UYWdUeXBlLkRhbmdlcjpcbiAgICAgICAgcmV0dXJuIFBvVGFnSWNvbi5EYW5nZXI7XG5cbiAgICAgIGNhc2UgUG9UYWdUeXBlLkluZm86XG4gICAgICAgIHJldHVybiBQb1RhZ0ljb24uSW5mbztcblxuICAgICAgY2FzZSBQb1RhZ1R5cGUuU3VjY2VzczpcbiAgICAgICAgcmV0dXJuIFBvVGFnSWNvbi5TdWNjZXNzO1xuXG4gICAgICBjYXNlIFBvVGFnVHlwZS5XYXJuaW5nOlxuICAgICAgICByZXR1cm4gUG9UYWdJY29uLldhcm5pbmc7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGljb25UeXBlU3RyaW5nKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5pY29uID09PSAnc3RyaW5nJztcbiAgfVxuXG4gIGdldCB0YWdDb2xvcigpIHtcbiAgICBpZiAodGhpcy50eXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZlcnNlID8gYHBvLXRhZy0ke3RoaXMudHlwZX0taW52ZXJzZWAgOiBgcG8tdGFnLSR7dGhpcy50eXBlfWA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmVyc2UgPyBgcG8tdGV4dC0ke3RoaXMuY29sb3J9YCA6IGBwby0ke3RoaXMuY29sb3J9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pbnZlcnNlID8gYCR7cG9UYWdUeXBlRGVmYXVsdH0taW52ZXJzZWAgOiBwb1RhZ1R5cGVEZWZhdWx0O1xuICB9XG5cbiAgZ2V0IHRhZ09yaWVudGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSB0aGlzLnBvVGFnT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgY29uc3Qgc3VibWl0dGVkVGFnSXRlbTogUG9UYWdJdGVtID0geyB2YWx1ZTogdGhpcy52YWx1ZSwgdHlwZTogdGhpcy50eXBlIH07XG4gICAgdGhpcy5jbGljay5lbWl0KHN1Ym1pdHRlZFRhZ0l0ZW0pO1xuICB9XG5cbiAgb25LZXlQcmVzc2VkKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm9uQ2xpY2soKTtcbiAgfVxufVxuIl19