import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
var PoListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    __decorate([
        Input('p-show-detail'),
        __metadata("design:type", Function)
    ], PoListViewDetailTemplateDirective.prototype, "showDetail", void 0);
    PoListViewDetailTemplateDirective = __decorate([
        Directive({
            selector: '[p-list-view-detail-template]'
        }),
        __metadata("design:paramtypes", [TemplateRef])
    ], PoListViewDetailTemplateDirective);
    return PoListViewDetailTemplateDirective;
}());
export { PoListViewDetailTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWxpc3Qtdmlldy9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNENHO0FBSUg7SUFZRSxzRUFBc0U7SUFDdEUsMkNBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O2dCQUFwQixXQUFXOztJQUhuQjtRQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDOzt5RUFBK0I7SUFWM0MsaUNBQWlDO1FBSDdDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwrQkFBK0I7U0FDMUMsQ0FBQzt5Q0FjZ0MsV0FBVztPQWJoQyxpQ0FBaUMsQ0FjN0M7SUFBRCx3Q0FBQztDQUFBLEFBZEQsSUFjQztTQWRZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIGRlIGNhZGEgaXRlbSwgY29uc3RydWluZG8gdW1cbiAqIGJvdMOjbyBgRXhpYmlyIGRldGFsaGVzYCBhYmFpeG8gZG8gY29udGXDumRvIHByaW5jaXBhbCBkbyBpdGVtLlxuICpcbiAqIERldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZG8gaXRlbSBlL291IMOtbmRpY2UsIHNlbmRvIHBvciBwYWRyw6NvIG8gaXRlbS5cbiAqICAtIEl0ZW06IGBpdGVtYCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcG9kZSBzZXIgdXNhZGEgZGUgZHVhcyBmb3JtYXM6IGV4cGzDrWNpdGEgb3UgKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cImNvZGVcIj48L3BvLWluZm8+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgPGRpdiAqcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvcG8tbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUge1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBxdWUgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvIGBib29sZWFuYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGEgdmFsaWRhw6fDo28gcGFyYSBxdWUgbyBkZXRhbGhlIGRlIGl0ZW1cbiAgICogZGEgbGlzdGEgaW5pY2llIGFiZXJ0byBvdSBmZWNoYWRvLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdwLXNob3ctZGV0YWlsJykgc2hvd0RldGFpbDogKGl0ZW0pID0+IGJvb2xlYW47XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19