import { __awaiter, __decorate, __extends, __generator, __metadata, __read, __spread } from "tslib";
import { ChangeDetectorRef, Component, ContentChild, DoCheck, ElementRef, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { getFormattedLink, isMobile, openExternalLink } from '../../utils/util';
import { PoMenuBaseComponent } from './po-menu-base.component';
import { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';
import { PoMenuItemsService } from './services/po-menu-items.service';
import { PoMenuService } from './services/po-menu.service';
var poMenuDebounceTime = 400;
var poMenuMinLength = 3;
var poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="PO Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="PO Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
var PoMenuComponent = /** @class */ (function (_super) {
    __extends(PoMenuComponent, _super);
    function PoMenuComponent(changeDetector, viewRef, element, renderer, router, menuItemsService, menuService) {
        var _this = _super.call(this, menuService) || this;
        _this.changeDetector = changeDetector;
        _this.element = element;
        _this.renderer = renderer;
        _this.router = router;
        _this.menuItemsService = menuItemsService;
        _this.filterLoading = false;
        _this.mobileOpened = false;
        _this.noData = false;
        _this.filteringItems = false;
        _this.menuInitialized = false;
        _this.menuPrevious = null;
        _this.parentRef = viewRef['_hostView'][8];
        return _this;
    }
    Object.defineProperty(PoMenuComponent.prototype, "isActiveItemMenuSubMenu", {
        get: function () {
            return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "enableCollapse", {
        get: function () {
            return this.isCollapsed && !this.collapsedMobile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "enableCollapseButton", {
        get: function () {
            return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "hasFooter", {
        get: function () {
            return ((this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton) ||
                (this.collapsed && !this.collapsedMobile));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "isCollapsed", {
        get: function () {
            return this.allowCollapseMenu && this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    PoMenuComponent.prototype.ngDoCheck = function () {
        if (this.filteringItems && this.filter) {
            return;
        }
        var menuCurrent = JSON.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    };
    PoMenuComponent.prototype.ngOnDestroy = function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    PoMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscribeToMenuItem();
        this.subscribeToRoute();
        setTimeout(function () {
            var urlRouter = _this.checkingRouterChildrenFragments();
            _this.checkActiveMenuByUrl(urlRouter);
        });
    };
    PoMenuComponent.prototype.activateMenuByUrl = function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some(function (menu) {
                var formattedLink = getFormattedLink(menu.link);
                if (formattedLink === urlPath) {
                    _this.linkActive = formattedLink;
                    _this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return _this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    };
    PoMenuComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    PoMenuComponent.prototype.collapse = function () {
        this.validateToggleMenu(true);
    };
    PoMenuComponent.prototype.debounceFilter = function (filter) {
        var _this = this;
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(function () {
            _this.filterProcess(filter);
        }, poMenuDebounceTime);
    };
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    PoMenuComponent.prototype.expand = function () {
        this.validateToggleMenu(false);
    };
    PoMenuComponent.prototype.subscribeToMenuItem = function () {
        var _this = this;
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe(function (menu) {
            _this.clickMenuItem(menu);
        });
    };
    PoMenuComponent.prototype.subscribeToRoute = function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe(function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            }
        });
    };
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    PoMenuComponent.prototype.toggle = function () {
        this.validateToggleMenu(!this.collapsed);
    };
    PoMenuComponent.prototype.toggleMenuMobile = function () {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    };
    PoMenuComponent.prototype.activateCollapseSubMenuItem = function () {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    };
    PoMenuComponent.prototype.activateMenuItem = function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({
            active: this.activeMenuItem,
            grouped: this.groupedMenuItem,
            activatedByRoute: true
        });
    };
    PoMenuComponent.prototype.areSubMenus = function (menus) {
        return menus.every(function (menu) { return menu['level'] > poMenuRootLevel; });
    };
    PoMenuComponent.prototype.checkingRouterChildrenFragments = function () {
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map(function (it) { return it.path; }).join('/') : '';
    };
    PoMenuComponent.prototype.clearGroupMenuIfFirstLevel = function (activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    };
    PoMenuComponent.prototype.clickMenuItem = function (menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    };
    PoMenuComponent.prototype.convertToMenuItemFiltered = function (menuItem) {
        if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
        var label = menuItem.label, link = menuItem.link;
        var menuItemFiltered = { label: label, link: link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    };
    PoMenuComponent.prototype.createResizeListener = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.toggleResize();
            _this.resizeListener();
        });
    };
    PoMenuComponent.prototype.executeMenuAction = function (menu) {
        if (typeof menu.action === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    PoMenuComponent.prototype.filterItems = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var trimFilter, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        trimFilter = filter && filter.trim();
                        if (!trimFilter) return [3 /*break*/, 4];
                        this.filteredItems = [];
                        _a = this;
                        if (!this.filterService) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterOnService(trimFilter)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = this.filterLocalItems(trimFilter);
                        _c.label = 3;
                    case 3:
                        _a.filteredItems = _b;
                        this.filteringItems = true;
                        return [3 /*break*/, 5];
                    case 4:
                        this.filteredItems = __spread(this.menus);
                        this.filteringItems = false;
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoMenuComponent.prototype.filterLocalItems = function (filter) {
        var filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    };
    PoMenuComponent.prototype.filterProcess = function (filter) {
        var _this = this;
        this.filterLoading = true;
        this.filterItems(filter)
            .then(function () {
            _this.filterLoading = false;
            _this.showNoData();
            _this.changeDetector.detectChanges();
            _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
        })
            .catch(function (error) {
            _this.filterLoading = false;
            Promise.reject(error);
        });
    };
    PoMenuComponent.prototype.filterOnService = function (search) {
        if (search === void 0) { search = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(search.length >= poMenuMinLength)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterService
                                .getFilteredData(search, this.params)
                                .pipe(map(function (menuItemsFiltered) { return menuItemsFiltered.map(function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); }); }))
                                .toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.filteredItems];
                }
            });
        });
    };
    PoMenuComponent.prototype.findItems = function (menus, filter, filteredItems) {
        var _this = this;
        menus.forEach(function (menu) {
            if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                (menu.subItems && _this.findItems(menu.subItems, filter, filteredItems))) {
                filteredItems.push(menu);
            }
        });
    };
    PoMenuComponent.prototype.findParent = function (menus, menuItem) {
        var getParent = function (menuItems, id) {
            if (menuItems) {
                for (var index = 0; index < menuItems.length; index++) {
                    var menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(function (subItem) { return subItem['id'] === id; })) {
                        return menu;
                    }
                    var found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    };
    PoMenuComponent.prototype.findRootParent = function (menus, menu) {
        var findParent = this.findParent;
        var getRootParent = function (menuItems, menuItem) {
            var parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    };
    PoMenuComponent.prototype.getActiveMenuParent = function (menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    };
    PoMenuComponent.prototype.groupMenuItem = function (menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem &&
            menu['isOpened'] &&
            this.isActiveItemMenuSubMenu &&
            this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    };
    PoMenuComponent.prototype.isRootMenuEqualGroupedMenu = function (menus, activeMenuItem, groupedMenuItem) {
        var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    };
    PoMenuComponent.prototype.openParentMenu = function (childMenu) {
        var parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    };
    PoMenuComponent.prototype.showNoData = function () {
        this.noData = this.filteredItems.length === 0;
    };
    PoMenuComponent.prototype.toggleGroupedMenuItem = function () {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    };
    PoMenuComponent.prototype.toggleMenuCollapse = function (collapsed) {
        if (collapsed === void 0) { collapsed = false; }
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem =
                this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        }
        this.updateMenu();
    };
    PoMenuComponent.prototype.toggleResize = function () {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    };
    PoMenuComponent.prototype.validateToggleMenu = function (collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    };
    PoMenuComponent.prototype.updateMenu = function () {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = __spread(this.menus);
        this.menuPrevious = JSON.stringify(this.menus);
        this.validateMenus(this.menus);
    };
    PoMenuComponent.prototype.validateCollapseClass = function (collapsedMobile) {
        var wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    };
    PoMenuComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Router },
        { type: PoMenuItemsService },
        { type: PoMenuService }
    ]; };
    __decorate([
        ContentChild(PoMenuHeaderTemplateDirective, { static: true }),
        __metadata("design:type", PoMenuHeaderTemplateDirective)
    ], PoMenuComponent.prototype, "menuHeaderTemplate", void 0);
    PoMenuComponent = __decorate([
        Component({
            selector: 'po-menu',
            template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n  <span class=\"po-icon po-icon-menu\"></span>\n</div>\n\n<div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n  <div class=\"po-menu-header\">\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n      <a href=\"./\">\n        <img\n          [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n          [src]=\"enableCollapse ? shortLogo || logo : logo\"\n        />\n      </a>\n    </div>\n\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n    </div>\n\n    <po-menu-filter *ngIf=\"filter && !enableCollapse\" [p-loading]=\"filterLoading\" (p-filter)=\"debounceFilter($event)\">\n    </po-menu-filter>\n  </div>\n\n  <nav class=\"po-menu-body\">\n    <!-- Inner e outer para esconder scroll -->\n    <div class=\"po-menu-outer\">\n      <div class=\"po-menu-inner\">\n        <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n          <div class=\"po-menu-item-first\">\n            <div class=\"po-menu-icon-container po-menu-item-no-data\">\n              <span class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></span>\n              <div class=\"po-lg-10 po-menu-icon-label\">{{ literals.itemNotFound }}</div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngFor=\"let menu of filteredItems; let menuIndex = index\" class=\"po-menu-item-wrapper\">\n          <po-menu-item\n            [class.po-menu-item-first]=\"menuIndex === 0\"\n            [p-action]=\"menu.action\"\n            [p-badge-alert]=\"menu.badgeAlert\"\n            [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n            [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n            [p-collapsed-menu]=\"enableCollapse\"\n            [p-icon]=\"allowIcons ? menu.icon : null\"\n            [p-id]=\"menu.id\"\n            [p-label]=\"menu.label\"\n            [p-level]=\"menu.level\"\n            [p-link]=\"menu.link\"\n            [p-short-label]=\"menu.shortLabel\"\n            [p-sub-items]=\"menu.subItems\"\n            [p-type]=\"menu.type\"\n          >\n          </po-menu-item>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n    <a class=\"po-menu-collapse-button-icon po-clickable\" (click)=\"toggle()\">\n      <span\n        class=\"po-icon\"\n        [class.po-icon-menu-close]=\"enableCollapseButton\"\n        [class.po-icon-menu-open]=\"enableCollapse\"\n      >\n      </span>\n    </a>\n  </div>\n</div>\n",
            providers: [PoMenuItemsService, PoMenuService]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            ViewContainerRef,
            ElementRef,
            Renderer2,
            Router,
            PoMenuItemsService,
            PoMenuService])
    ], PoMenuComponent);
    return PoMenuComponent;
}(PoMenuBaseComponent));
export { PoMenuComponent };
//# sourceMappingURL=data:application/json;base64,