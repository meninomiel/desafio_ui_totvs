import { __assign, __decorate, __metadata, __rest } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
var poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
var PoTreeViewBaseComponent = /** @class */ (function () {
    function PoTreeViewBaseComponent() {
        this._items = [];
        this._selectable = false;
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao colapsar um item.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao expandir um item.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao selecionar um item.
         *
         * > Como parâmetro o componente envia o item selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao desfazer a seleção de um item.
         *
         * > Como parâmetro o componente envia o item que foi desmarcado.
         */
        this.unselected = new EventEmitter();
    }
    Object.defineProperty(PoTreeViewBaseComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /**
         * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
         */
        set: function (value) {
            this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTreeViewBaseComponent.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
         *
         * @default false
         */
        set: function (value) {
            this._selectable = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoTreeViewBaseComponent.prototype.emitExpanded = function (treeViewItem) {
        var event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit(__assign({}, treeViewItem));
    };
    PoTreeViewBaseComponent.prototype.emitSelected = function (treeViewItem) {
        var event = treeViewItem.selected ? 'selected' : 'unselected';
        this.updateItemsOnSelect(treeViewItem);
        this[event].emit(__assign({}, treeViewItem));
    };
    PoTreeViewBaseComponent.prototype.addChildItemInParent = function (childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    };
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    PoTreeViewBaseComponent.prototype.addItem = function (items, childItem, parentItem) {
        if (parentItem) {
            this.expandParentItem(childItem, parentItem);
            this.addChildItemInParent(childItem, parentItem);
            this.selectItemBySubItems(parentItem);
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    };
    PoTreeViewBaseComponent.prototype.selectAllItems = function (items, isSelected) {
        var _this = this;
        items.forEach(function (item) {
            if (item.subItems) {
                _this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = isSelected;
        });
    };
    PoTreeViewBaseComponent.prototype.selectItemBySubItems = function (item) {
        item.selected = this.everyItemSelected(item.subItems);
    };
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    PoTreeViewBaseComponent.prototype.everyItemSelected = function (items) {
        if (items === void 0) { items = []; }
        var itemsLength = items.length;
        var lengthCheckedItems = items.filter(function (item) { return item.selected; }).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        var hasIndeterminateItems = items.filter(function (item) { return item.selected || item.selected === null; }).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    };
    // expande o item pai caso o filho estiver expandido.
    PoTreeViewBaseComponent.prototype.expandParentItem = function (childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    };
    PoTreeViewBaseComponent.prototype.getItemsByMaxLevel = function (items, level, parentItem, newItems) {
        var _this = this;
        if (items === void 0) { items = []; }
        if (level === void 0) { level = 0; }
        if (newItems === void 0) { newItems = []; }
        items.forEach(function (item) {
            var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
            if (level === poTreeViewMaxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    _this.selectAllItems(subItems, currentItem.selected);
                }
                _this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            _this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    };
    PoTreeViewBaseComponent.prototype.getItemsWithParentSelected = function (items, parentItem, newItems) {
        var _this = this;
        if (items === void 0) { items = []; }
        if (newItems === void 0) { newItems = []; }
        items.forEach(function (item) {
            var subItems = item.subItems, currentItem = __rest(item, ["subItems"]);
            if (Array.isArray(subItems)) {
                _this.getItemsWithParentSelected(subItems, currentItem);
            }
            _this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    };
    PoTreeViewBaseComponent.prototype.updateItemsOnSelect = function (selectedItem) {
        if (selectedItem.subItems) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    };
    __decorate([
        Input('p-items'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoTreeViewBaseComponent.prototype, "items", null);
    __decorate([
        Input('p-selectable'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTreeViewBaseComponent.prototype, "selectable", null);
    __decorate([
        Output('p-collapsed'),
        __metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "collapsed", void 0);
    __decorate([
        Output('p-expanded'),
        __metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "expanded", void 0);
    __decorate([
        Output('p-selected'),
        __metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "selected", void 0);
    __decorate([
        Output('p-unselected'),
        __metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "unselected", void 0);
    PoTreeViewBaseComponent = __decorate([
        Directive()
    ], PoTreeViewBaseComponent);
    return PoTreeViewBaseComponent;
}());
export { PoTreeViewBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSXBELElBQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRTdCOzs7Ozs7Ozs7Ozs7R0FZRztBQUVIO0lBQUE7UUFDVSxXQUFNLEdBQTBCLEVBQUUsQ0FBQztRQUNuQyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQThCckM7Ozs7Ozs7O1dBUUc7UUFDb0IsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBRXRFOzs7Ozs7OztXQVFHO1FBQ21CLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUVwRTs7Ozs7Ozs7V0FRRztRQUNtQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFFcEU7Ozs7Ozs7O1dBUUc7UUFDcUIsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO0lBc0kxRSxDQUFDO0lBek1tQixzQkFBSSwwQ0FBSzthQUkzQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBVEQ7O1dBRUc7YUFDZSxVQUFVLEtBQTRCO1lBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0UsQ0FBQzs7O09BQUE7SUFl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QStDO0lBVzlDO1FBQXJCLE1BQU0sQ0FBQyxZQUFZLENBQUM7OzZEQUErQztJQVc1QztRQUF2QixNQUFNLENBQUMsY0FBYyxDQUFDOzsrREFBaUQ7SUExRTdELHVCQUF1QjtRQURuQyxTQUFTLEVBQUU7T0FDQyx1QkFBdUIsQ0FnTm5DO0lBQUQsOEJBQUM7Q0FBQSxBQWhORCxJQWdOQztTQWhOWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvVHJlZVZpZXdJdGVtIH0gZnJvbSAnLi9wby10cmVlLXZpZXctaXRlbS9wby10cmVlLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuXG5jb25zdCBwb1RyZWVWaWV3TWF4TGV2ZWwgPSA0O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBmb3JuZWNlIHVtIG1vZGVsbyBkZSB2aXN1YWxpemHDp8OjbyBlbSDDoXJ2b3JlLCBwb3NzaWJpbGl0YW5kbyBhIHZpc3VhbGl6YcOnw6NvIGRhcyBpbmZvcm1hw6fDtWVzIGRlIG1hbmVpcmFcbiAqIGhpZXLDoXJxdWljYSwgZGVzdGEgZm9ybWEgc2VuZG8gcG9zc8OtdmVsIHV0aWxpemFyIGF0w6kgNCBuw612ZWlzLlxuICpcbiAqIE5lbGUgw6kgcG9zc8OtdmVsIG5hdmVnYXIgZW50cmUgb3MgaXRlbnMgYXRyYXbDqXMgZGEgdGVjbGEgKnRhYiosIHBlcm1pdGluZG8gZXhwYW5kaXIgb3UgY29sYXBzYXIgbyBpdGVtIGVtIGZvY29cbiAqIHBvciBtZWlvIGRhcyB0ZWNsYXMgKmVudGVyKiBlICpzcGFjZSouXG4gKlxuICogQWzDqW0gZGEgbmF2ZWdhw6fDo28sIG8gY29tcG9uZW50ZSBwb3NzaWJpbGl0YSB0YW1iw6ltIGEgc2VsZcOnw6NvIGRvcyBpdGVucyBkbyBwcmltZWlybyBhbyDDumx0aW1vIG7DrXZlbCwgdGFudG8gZGUgZm9ybWEgcGFyY2lhbCBjb21vIGNvbXBsZXRhLlxuICpcbiAqIE8gY29tcG9uZW50ZSB0YW1iw6ltIHBvc3N1aSBldmVudG9zIGRpc3BhcmFkb3MgYW8gbWFyY2FyL2Rlc21hcmNhciBlIGV4cGFuZGlyL2NvbGFwc2FyIG9zIGl0ZW5zLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb1RyZWVWaWV3QmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX2l0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXTtcbiAgcHJpdmF0ZSBfc2VsZWN0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkbyB0aXBvIGBQb1RyZWVWaWV3SXRlbWAgcXVlIHNlcsOhIHJlbmRlcml6YWRhIHBlbG8gY29tcG9uZW50ZS5cbiAgICovXG4gIEBJbnB1dCgncC1pdGVtcycpIHNldCBpdGVtcyh2YWx1ZTogQXJyYXk8UG9UcmVlVmlld0l0ZW0+KSB7XG4gICAgdGhpcy5faXRlbXMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHRoaXMuZ2V0SXRlbXNCeU1heExldmVsKHZhbHVlKSA6IFtdO1xuICB9XG5cbiAgZ2V0IGl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEhhYmlsaXRhIHVtYSBjYWl4YSBkZSBzZWxlw6fDo28gcGFyYSBzZWxlY2lvbmFyIGUvb3UgZGVzbWFyY2FyIHVtIGl0ZW0gZGEgbGlzdGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBASW5wdXQoJ3Atc2VsZWN0YWJsZScpIHNldCBzZWxlY3RhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2VsZWN0YWJsZSA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGFibGU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBjb2xhcHNhciB1bSBpdGVtLlxuICAgKlxuICAgKiA+IENvbW8gcGFyw6JtZXRybyBvIGNvbXBvbmVudGUgZW52aWEgbyBpdGVtIGNvbGFwc2Fkby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY29sbGFwc2VkJykgY29sbGFwc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT4oKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBleHBhbmRpciB1bSBpdGVtLlxuICAgKlxuICAgKiA+IENvbW8gcGFyw6JtZXRybyBvIGNvbXBvbmVudGUgZW52aWEgbyBpdGVtIGV4cGFuZGlkby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtZXhwYW5kZWQnKSBleHBhbmRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgYW8gc2VsZWNpb25hciB1bSBpdGVtLlxuICAgKlxuICAgKiA+IENvbW8gcGFyw6JtZXRybyBvIGNvbXBvbmVudGUgZW52aWEgbyBpdGVtIHNlbGVjaW9uYWRvLlxuICAgKi9cbiAgQE91dHB1dCgncC1zZWxlY3RlZCcpIHNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT4oKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBkZXNmYXplciBhIHNlbGXDp8OjbyBkZSB1bSBpdGVtLlxuICAgKlxuICAgKiA+IENvbW8gcGFyw6JtZXRybyBvIGNvbXBvbmVudGUgZW52aWEgbyBpdGVtIHF1ZSBmb2kgZGVzbWFyY2Fkby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtdW5zZWxlY3RlZCcpIHVuc2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFBvVHJlZVZpZXdJdGVtPigpO1xuXG4gIHByb3RlY3RlZCBlbWl0RXhwYW5kZWQodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGNvbnN0IGV2ZW50ID0gdHJlZVZpZXdJdGVtLmV4cGFuZGVkID8gJ2V4cGFuZGVkJyA6ICdjb2xsYXBzZWQnO1xuXG4gICAgdGhpc1tldmVudF0uZW1pdCh7IC4uLnRyZWVWaWV3SXRlbSB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbWl0U2VsZWN0ZWQodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGNvbnN0IGV2ZW50ID0gdHJlZVZpZXdJdGVtLnNlbGVjdGVkID8gJ3NlbGVjdGVkJyA6ICd1bnNlbGVjdGVkJztcblxuICAgIHRoaXMudXBkYXRlSXRlbXNPblNlbGVjdCh0cmVlVmlld0l0ZW0pO1xuXG4gICAgdGhpc1tldmVudF0uZW1pdCh7IC4uLnRyZWVWaWV3SXRlbSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQ2hpbGRJdGVtSW5QYXJlbnQoY2hpbGRJdGVtOiBQb1RyZWVWaWV3SXRlbSwgcGFyZW50SXRlbTogUG9UcmVlVmlld0l0ZW0pIHtcbiAgICBpZiAoIXBhcmVudEl0ZW0uc3ViSXRlbXMpIHtcbiAgICAgIHBhcmVudEl0ZW0uc3ViSXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICBwYXJlbnRJdGVtLnN1Ykl0ZW1zLnB1c2goY2hpbGRJdGVtKTtcbiAgfVxuXG4gIC8vIGNhc28gaG91dmVyIHBhcmVudEl0ZW06XG4gIC8vICAtIGV4cGFuZGUgbyBwYXJlbnRJdGVtIGNhc28gbyBmaWxobyBlc3RpdmVyIGV4cGFuZGlkbztcbiAgLy8gIC0gYWRpY2lvbmEgbyBjaGlsZEl0ZW0gbm8gcGFyZW50SXRlbTtcbiAgLy8gIC0gbWFyY2EgbyBwYXJlbnRJdGVtIGNhc28gY29udGVyIHN1Ykl0ZW1zIG1hcmNvZG9zIG91IG51bG9zO1xuICAvLyBTZSBuw6NvIGNvbnRlciBwYXJlbnRJdGVtLCBhZGljaW9uYSBvIGNoaWxkSXRlbSBubyBpdGVtcy5cbiAgcHJpdmF0ZSBhZGRJdGVtKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4sIGNoaWxkSXRlbTogUG9UcmVlVmlld0l0ZW0sIHBhcmVudEl0ZW0/OiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGlmIChwYXJlbnRJdGVtKSB7XG4gICAgICB0aGlzLmV4cGFuZFBhcmVudEl0ZW0oY2hpbGRJdGVtLCBwYXJlbnRJdGVtKTtcbiAgICAgIHRoaXMuYWRkQ2hpbGRJdGVtSW5QYXJlbnQoY2hpbGRJdGVtLCBwYXJlbnRJdGVtKTtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbUJ5U3ViSXRlbXMocGFyZW50SXRlbSk7XG5cbiAgICAgIGl0ZW1zLnB1c2gocGFyZW50SXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1zLnB1c2goY2hpbGRJdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNlbGVjdEFsbEl0ZW1zKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4sIGlzU2VsZWN0ZWQ6IGJvb2xlYW4pIHtcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uc3ViSXRlbXMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RBbGxJdGVtcyhpdGVtLnN1Ykl0ZW1zLCBpc1NlbGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgaXRlbS5zZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNlbGVjdEl0ZW1CeVN1Ykl0ZW1zKGl0ZW06IFBvVHJlZVZpZXdJdGVtKSB7XG4gICAgaXRlbS5zZWxlY3RlZCA9IHRoaXMuZXZlcnlJdGVtU2VsZWN0ZWQoaXRlbS5zdWJJdGVtcyk7XG4gIH1cblxuICAvLyByZXRvcm5hcsOhOlxuICAvLyAgLSB0cnVlOiBzZSB0b2RvcyBvcyBpdGVtcyBlc3RpdmVyZW0gbWFyY2Fkb3M7XG4gIC8vICAtIG51bGw6IHNlIG5vIG1pbmltbyB1bSBpdGVtIGVzdGVqYSBtYXJjYWRvIG91IG51bGxvIChpbmRldGVybWluYXRlKVxuICAvLyAgLSBmYWxzZTogY2FzbyBuw6NvIGNvcnJlc3BvbmRhIGVtIG5lbmh1bWEgZGFzIG9ww6fDtWVzIGFjaW1hLCBubyBjYXNvLCBuZW5odW0gbWFyY2FkbyBvdSBudWxvO1xuICBwcml2YXRlIGV2ZXJ5SXRlbVNlbGVjdGVkKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXSk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICBjb25zdCBpdGVtc0xlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICAgIGNvbnN0IGxlbmd0aENoZWNrZWRJdGVtcyA9IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLmxlbmd0aDtcblxuICAgIGlmIChpdGVtc0xlbmd0aCAmJiBpdGVtc0xlbmd0aCA9PT0gbGVuZ3RoQ2hlY2tlZEl0ZW1zKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNJbmRldGVybWluYXRlSXRlbXMgPSBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkIHx8IGl0ZW0uc2VsZWN0ZWQgPT09IG51bGwpLmxlbmd0aDtcblxuICAgIGlmIChoYXNJbmRldGVybWluYXRlSXRlbXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGV4cGFuZGUgbyBpdGVtIHBhaSBjYXNvIG8gZmlsaG8gZXN0aXZlciBleHBhbmRpZG8uXG4gIHByaXZhdGUgZXhwYW5kUGFyZW50SXRlbShjaGlsZEl0ZW06IFBvVHJlZVZpZXdJdGVtLCBwYXJlbnRJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGlmIChjaGlsZEl0ZW0uZXhwYW5kZWQpIHtcbiAgICAgIHBhcmVudEl0ZW0uZXhwYW5kZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbXNCeU1heExldmVsKFxuICAgIGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXSxcbiAgICBsZXZlbDogbnVtYmVyID0gMCxcbiAgICBwYXJlbnRJdGVtPzogUG9UcmVlVmlld0l0ZW0sXG4gICAgbmV3SXRlbXMgPSBbXVxuICApIHtcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgeyBzdWJJdGVtcywgLi4uY3VycmVudEl0ZW0gfSA9IGl0ZW07XG5cbiAgICAgIGlmIChsZXZlbCA9PT0gcG9UcmVlVmlld01heExldmVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3ViSXRlbXMpKSB7XG4gICAgICAgIC8vIGNhc28gdW0gaXRlbSBwYWkgaW5pY2lhciBzZWxlY2lvbmFkbywgZGV2ZSBzZWxlY2lvbmFyIG9zIGZpbGhvcy5cbiAgICAgICAgaWYgKGN1cnJlbnRJdGVtLnNlbGVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RBbGxJdGVtcyhzdWJJdGVtcywgY3VycmVudEl0ZW0uc2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRJdGVtc0J5TWF4TGV2ZWwoc3ViSXRlbXMsICsrbGV2ZWwsIGN1cnJlbnRJdGVtKTtcbiAgICAgICAgLS1sZXZlbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRJdGVtKG5ld0l0ZW1zLCBjdXJyZW50SXRlbSwgcGFyZW50SXRlbSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3SXRlbXM7XG4gIH1cblxuICBwcml2YXRlIGdldEl0ZW1zV2l0aFBhcmVudFNlbGVjdGVkKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXSwgcGFyZW50SXRlbT86IFBvVHJlZVZpZXdJdGVtLCBuZXdJdGVtcyA9IFtdKSB7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IHsgc3ViSXRlbXMsIC4uLmN1cnJlbnRJdGVtIH0gPSBpdGVtO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJJdGVtcykpIHtcbiAgICAgICAgdGhpcy5nZXRJdGVtc1dpdGhQYXJlbnRTZWxlY3RlZChzdWJJdGVtcywgY3VycmVudEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZEl0ZW0obmV3SXRlbXMsIGN1cnJlbnRJdGVtLCBwYXJlbnRJdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdJdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSXRlbXNPblNlbGVjdChzZWxlY3RlZEl0ZW06IFBvVHJlZVZpZXdJdGVtKSB7XG4gICAgaWYgKHNlbGVjdGVkSXRlbS5zdWJJdGVtcykge1xuICAgICAgdGhpcy5zZWxlY3RBbGxJdGVtcyhzZWxlY3RlZEl0ZW0uc3ViSXRlbXMsIHNlbGVjdGVkSXRlbS5zZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgdGhpcy5faXRlbXMgPSB0aGlzLmdldEl0ZW1zV2l0aFBhcmVudFNlbGVjdGVkKHRoaXMuaXRlbXMpO1xuICB9XG59XG4iXX0=