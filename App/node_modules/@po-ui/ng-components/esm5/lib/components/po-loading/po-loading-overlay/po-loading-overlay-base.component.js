import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export var poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'погрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var PoLoadingOverlayBaseComponent = /** @class */ (function () {
    function PoLoadingOverlayBaseComponent(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        this.text = this.getTextDefault();
    }
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o *overlay* será aplicado a um *container* ou a página inteira.
         *
         * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
         *
         * ```
         * <div style="position: relative">
         *
         *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
         *  </po-chart>
         *
         *  <po-loading-overlay>
         *  </po-loading-overlay>
         * </div>
         * ```
         *
         * @default `false`
         */
        set: function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "text", {
        get: function () {
            return this._text;
        },
        /**
         * @optional
         *
         * @description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
         *
         * @default `Carregando`
         */
        set: function (value) {
            this._text = value || this.getTextDefault();
        },
        enumerable: true,
        configurable: true
    });
    PoLoadingOverlayBaseComponent.prototype.getTextDefault = function () {
        var language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    };
    PoLoadingOverlayBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    __decorate([
        Input('p-screen-lock'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoLoadingOverlayBaseComponent.prototype, "screenLock", null);
    __decorate([
        Input('p-text'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoLoadingOverlayBaseComponent.prototype, "text", null);
    PoLoadingOverlayBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [PoLanguageService])
    ], PoLoadingOverlayBaseComponent);
    return PoLoadingOverlayBaseComponent;
}());
export { PoLoadingOverlayBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBSXRGLE1BQU0sQ0FBQyxJQUFNLCtCQUErQixHQUFHO0lBQzdDLEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFNBQVM7S0FDbkI7SUFDRCxFQUFFLEVBQTRCO1FBQzVCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCO0lBQ0QsRUFBRSxFQUE0QjtRQUM1QixPQUFPLEVBQUUsWUFBWTtLQUN0QjtJQUNELEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFVBQVU7S0FDcEI7Q0FDRixDQUFDO0FBRUY7Ozs7OztHQU1HO0FBRUg7SUFxREUsdUNBQW9CLGVBQWtDO1FBQWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQXBEOUMsZ0JBQVcsR0FBYSxLQUFLLENBQUM7UUFxRHBDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUE3QnVCLHNCQUFJLHFEQUFVO2FBSXRDO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUE1QkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQXFCRzthQUNxQixVQUFlLFVBQW1CO1lBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsQ0FBQzs7O09BQUE7SUFpQmdCLHNCQUFJLCtDQUFJO2FBSXpCO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFqQkQ7Ozs7Ozs7Ozs7V0FVRzthQUNjLFVBQVMsS0FBYTtZQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFVTyxzREFBYyxHQUF0QjtRQUNFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV6RCxPQUFPLCtCQUErQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMzRCxDQUFDOztnQkFSb0MsaUJBQWlCOztJQTNCOUI7UUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7O21FQUV0QjtJQWlCZ0I7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7OzZEQUVmO0lBL0NVLDZCQUE2QjtRQUR6QyxTQUFTLEVBQUU7eUNBc0QyQixpQkFBaUI7T0FyRDNDLDZCQUE2QixDQThEekM7SUFBRCxvQ0FBQztDQUFBLEFBOURELElBOERDO1NBOURZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1sb2FkaW5nLW92ZXJsYXktbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPntcbiAgICBsb2FkaW5nOiAnTG9hZGluZydcbiAgfSxcbiAgZXM6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdDYXJnYW5kbydcbiAgfSxcbiAgcHQ6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdDYXJyZWdhbmRvJ1xuICB9LFxuICBydTogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz57XG4gICAgbG9hZGluZzogJ9C/0L7Qs9GA0YPQt9C60LAnXG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBtb3N0cmEgYW8gdXN1w6FyaW8gdW1hIGltYWdlbSBkZSBfbG9hZGluZ18gZSBibG9xdWVpYSBhIHDDoWdpbmEgaW50ZWlyYSBvdSBvIGNvbnRhaW5lciBlc2NvbGhpZG8sXG4gKiBlbnF1YW50byBhZ3VhcmRhIGEgcmVzcG9zdGEgZGUgYWxndW1hIHJlcXVpc2nDp8Ojby5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF9zY3JlZW5Mb2NrPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBzZSBvICpvdmVybGF5KiBzZXLDoSBhcGxpY2FkbyBhIHVtICpjb250YWluZXIqIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpemFyIG8gY29tcG9uZW50ZSBjb21vIHVtICpjb250YWluZXIqLCBvIGVsZW1lbnRvIHBhaSBkZXZlcsOhIHJlY2ViZXIgdW1hIHBvc2nDp8OjbyByZWxhdGl2YSwgcG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiA8ZGl2IHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlXCI+XG4gICAqXG4gICAqICA8cG8tY2hhcnQgW3Atc2VyaWVzXT1cIlt7IHZhbHVlOiAxMCwgY2F0ZWdvcnk6ICdFeGFtcGxlJyB9XVwiPlxuICAgKiAgPC9wby1jaGFydD5cbiAgICpcbiAgICogIDxwby1sb2FkaW5nLW92ZXJsYXk+XG4gICAqICA8L3BvLWxvYWRpbmctb3ZlcmxheT5cbiAgICogPC9kaXY+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc2NyZWVuLWxvY2snKSBzZXQgc2NyZWVuTG9jayhzY3JlZW5Mb2NrOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2NyZWVuTG9jayA9IGNvbnZlcnRUb0Jvb2xlYW4oc2NyZWVuTG9jayk7XG4gIH1cblxuICBnZXQgc2NyZWVuTG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTG9jaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIGEgc2VyIGV4aWJpZG8gbm8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gWyoqUG9JMThuKipdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91IG5hdmVnYWRvci5cbiAgICpcbiAgICogQGRlZmF1bHQgYENhcnJlZ2FuZG9gXG4gICAqL1xuICBASW5wdXQoJ3AtdGV4dCcpIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90ZXh0ID0gdmFsdWUgfHwgdGhpcy5nZXRUZXh0RGVmYXVsdCgpO1xuICB9XG5cbiAgZ2V0IHRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGV4dERlZmF1bHQoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcblxuICAgIHJldHVybiBwb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXS5sb2FkaW5nO1xuICB9XG59XG4iXX0=