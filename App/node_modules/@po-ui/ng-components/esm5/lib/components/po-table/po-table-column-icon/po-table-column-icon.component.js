import { __decorate, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var PoTableColumnIconComponent = /** @class */ (function () {
    function PoTableColumnIconComponent() {
        this._icons = [];
    }
    Object.defineProperty(PoTableColumnIconComponent.prototype, "icons", {
        get: function () {
            return this._icons;
        },
        /** Lista de colunas com ícones. */
        set: function (icons) {
            this._icons = this.convertToColumnIcon(icons);
        },
        enumerable: true,
        configurable: true
    });
    PoTableColumnIconComponent.prototype.click = function (columnIcon, event) {
        var isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    };
    PoTableColumnIconComponent.prototype.getColor = function (column) {
        var color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return "po-text-" + color;
        }
    };
    PoTableColumnIconComponent.prototype.getIcon = function (column) {
        return column.icon || column.value;
    };
    PoTableColumnIconComponent.prototype.isClickable = function (columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    };
    PoTableColumnIconComponent.prototype.isDisabled = function (column) {
        return column.disabled ? column.disabled(this.row) : false;
    };
    PoTableColumnIconComponent.prototype.trackByFunction = function (index) {
        return index;
    };
    PoTableColumnIconComponent.prototype.convertToColumnIcon = function (rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(function (rowIcon) { return (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon); });
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    };
    __decorate([
        Input('p-column'),
        __metadata("design:type", Object)
    ], PoTableColumnIconComponent.prototype, "column", void 0);
    __decorate([
        Input('p-icons'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoTableColumnIconComponent.prototype, "icons", null);
    __decorate([
        Input('p-row'),
        __metadata("design:type", Object)
    ], PoTableColumnIconComponent.prototype, "row", void 0);
    PoTableColumnIconComponent = __decorate([
        Component({
            selector: 'po-table-column-icon',
            template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], PoTableColumnIconComponent);
    return PoTableColumnIconComponent;
}());
export { PoTableColumnIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4taWNvbi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzFFOzs7Ozs7R0FNRztBQU1IO0lBQUE7UUFDVSxXQUFNLEdBQTZCLEVBQUUsQ0FBQztJQWlFaEQsQ0FBQztJQTNEbUIsc0JBQUksNkNBQUs7YUFJM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQVBELG1DQUFtQzthQUNqQixVQUFVLEtBQXdEO1lBQ2xGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBU0QsMENBQUssR0FBTCxVQUFNLFVBQTZCLEVBQUUsS0FBSztRQUN4QyxJQUFNLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUNyQixVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDekM7aUJBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMxQztZQUNELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRCw2Q0FBUSxHQUFSLFVBQVMsTUFBeUI7UUFDaEMsSUFBTSxLQUFLLEdBQUcsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRWpHLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxhQUFXLEtBQU8sQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCw0Q0FBTyxHQUFQLFVBQVEsTUFBeUI7UUFDL0IsT0FBTyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUVELGdEQUFXLEdBQVgsVUFBWSxVQUE2QjtRQUN2QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCwrQ0FBVSxHQUFWLFVBQVcsTUFBeUI7UUFDbEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdELENBQUM7SUFFRCxvREFBZSxHQUFmLFVBQWdCLEtBQUs7UUFDbkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sd0RBQW1CLEdBQTNCLFVBQTRCLFFBQTJEO1FBQ3JGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixPQUFhLFFBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUE1RCxDQUE0RCxDQUFDLENBQUM7U0FDckc7UUFFRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5QjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQTdEa0I7UUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7OERBQXVCO0lBR3ZCO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OzsyREFFaEI7SUFPZTtRQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7OzJEQUFVO0lBaEJkLDBCQUEwQjtRQUx0QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLDZVQUFvRDtZQUNwRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtTQUNoRCxDQUFDO09BQ1csMEJBQTBCLENBa0V0QztJQUFELGlDQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0FsRVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UYWJsZUNvbHVtbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdGFibGUtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uSWNvbiB9IGZyb20gJy4vcG8tdGFibGUtY29sdW1uLWljb24uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHJlc3BvbnPDoXZlbCBwb3IgZXhpYmlyIMOtY29uZXMgbmFzIGNvbHVuYXMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRhYmxlLWNvbHVtbi1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZUNvbHVtbkljb25Db21wb25lbnQge1xuICBwcml2YXRlIF9pY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+ID0gW107XG5cbiAgLyoqIERlZmluacOnw6NvIGRhIGNvbHVuYSBxdWUgdXRpbGl6YSBvcyBpY29uZXMuICovXG4gIEBJbnB1dCgncC1jb2x1bW4nKSBjb2x1bW46IFBvVGFibGVDb2x1bW47XG5cbiAgLyoqIExpc3RhIGRlIGNvbHVuYXMgY29tIMOtY29uZXMuICovXG4gIEBJbnB1dCgncC1pY29ucycpIHNldCBpY29ucyhpY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZykge1xuICAgIHRoaXMuX2ljb25zID0gdGhpcy5jb252ZXJ0VG9Db2x1bW5JY29uKGljb25zKTtcbiAgfVxuXG4gIGdldCBpY29ucygpIHtcbiAgICByZXR1cm4gdGhpcy5faWNvbnM7XG4gIH1cblxuICAvKiogRGFkb3MgZGEgbGluaGEgZGEgdGFiZWxhLiAqL1xuICBASW5wdXQoJ3Atcm93Jykgcm93OiBhbnk7XG5cbiAgY2xpY2soY29sdW1uSWNvbjogUG9UYWJsZUNvbHVtbkljb24sIGV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgaXNBYmxlQWN0aW9uID0gIXRoaXMuaXNEaXNhYmxlZChjb2x1bW5JY29uKTtcblxuICAgIGlmIChpc0FibGVBY3Rpb24pIHtcbiAgICAgIGlmIChjb2x1bW5JY29uLmFjdGlvbikge1xuICAgICAgICBjb2x1bW5JY29uLmFjdGlvbih0aGlzLnJvdywgY29sdW1uSWNvbik7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uLmFjdGlvbikge1xuICAgICAgICB0aGlzLmNvbHVtbi5hY3Rpb24odGhpcy5yb3csIGNvbHVtbkljb24pO1xuICAgICAgfVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29sb3IoY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbik6IHN0cmluZyB7XG4gICAgY29uc3QgY29sb3IgPSB0eXBlb2YgY29sdW1uLmNvbG9yID09PSAnZnVuY3Rpb24nID8gY29sdW1uLmNvbG9yKHRoaXMucm93LCBjb2x1bW4pIDogY29sdW1uLmNvbG9yO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICByZXR1cm4gYHBvLXRleHQtJHtjb2xvcn1gO1xuICAgIH1cbiAgfVxuXG4gIGdldEljb24oY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbikge1xuICAgIHJldHVybiBjb2x1bW4uaWNvbiB8fCBjb2x1bW4udmFsdWU7XG4gIH1cblxuICBpc0NsaWNrYWJsZShjb2x1bW5JY29uOiBQb1RhYmxlQ29sdW1uSWNvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISghdGhpcy5pc0Rpc2FibGVkKGNvbHVtbkljb24pICYmIChjb2x1bW5JY29uLmFjdGlvbiB8fCB0aGlzLmNvbHVtbi5hY3Rpb24pKTtcbiAgfVxuXG4gIGlzRGlzYWJsZWQoY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb2x1bW4uZGlzYWJsZWQgPyBjb2x1bW4uZGlzYWJsZWQodGhpcy5yb3cpIDogZmFsc2U7XG4gIH1cblxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRUb0NvbHVtbkljb24ocm93SWNvbnM6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB8IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJvd0ljb25zKSkge1xuICAgICAgcmV0dXJuICg8YW55PnJvd0ljb25zKS5tYXAocm93SWNvbiA9PiAodHlwZW9mIHJvd0ljb24gPT09ICdzdHJpbmcnID8geyB2YWx1ZTogcm93SWNvbiB9IDogcm93SWNvbikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygcm93SWNvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW3sgdmFsdWU6IHJvd0ljb25zIH1dO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIl19