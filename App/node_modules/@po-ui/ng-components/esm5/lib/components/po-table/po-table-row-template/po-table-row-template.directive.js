import { __decorate, __metadata } from "tslib";
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
var PoTableRowTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoTableRowTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoTableRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    __decorate([
        Input('p-table-row-template-show'),
        __metadata("design:type", Function)
    ], PoTableRowTemplateDirective.prototype, "poTableRowTemplateShow", void 0);
    PoTableRowTemplateDirective = __decorate([
        Directive({
            selector: '[p-table-row-template]'
        }),
        __metadata("design:paramtypes", [TemplateRef])
    ], PoTableRowTemplateDirective);
    return PoTableRowTemplateDirective;
}());
export { PoTableRowTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtcm93LXRlbXBsYXRlL3BvLXRhYmxlLXJvdy10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUZHO0FBSUg7SUFnQkUsc0VBQXNFO0lBQ3RFLHFDQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDOztnQkFBcEIsV0FBVzs7SUFIUDtRQUFuQyxLQUFLLENBQUMsMkJBQTJCLENBQUM7OytFQUE4RDtJQWR0RiwyQkFBMkI7UUFIdkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHdCQUF3QjtTQUNuQyxDQUFDO3lDQWtCZ0MsV0FBVztPQWpCaEMsMkJBQTJCLENBa0J2QztJQUFELGtDQUFDO0NBQUEsQUFsQkQsSUFrQkM7U0FsQlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFBvVGFibGVDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamEgYXByZXNlbnRhZGEgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIGEgcmVzcGVpdG8gZGUgdW1hIGRldGVybWluYWRhIGxpbmhhIGRlXG4gKiBkYWRvcywgZGUgZm9ybWEgcXVlIHBvc3NhbSBzZXIgZXhpYmlkYXMgZSBvY3VsdGFkYXMgYXRyYXbDqXMgZG8gYm90w6NvIGRlIGFjaW9uYW1lbnRvLlxuICpcbiAqID4gUXVhbmRvIHV0aWxpemFkYSwgc29icmVww7VlIGFzIGZ1bmNpb25hbGlkYWRlIGLDoXNpY2FzIGRvICptYXN0ZXItZGV0YWlsKi5cbiAqXG4gKiBFbSBzZXUgdXNvLCBkZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRhIF9saW5oYV8gZS9vdSBfw61uZGljZV8sIHNlbmRvIHBvciBwYWRyw6NvIGxpbmhhLiBDYXNvIG7Do28gc2VqYSBkZWNsYXJhZG8sXG4gKiBvIGNvbXBvbmVudGUgbsOjbyBleGliaXLDoSBjb250ZcO6ZG8uXG4gKiAgLSBMaW5oYTogYHJvd2AgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGByb3dJbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIGNvbXDDtWUtc2UgZGUgZG9pcyBtZWlvcyBwYXJhIHVzbywgZGUgZm9ybWEgZXhwbMOtY2l0YSB0YWwgY29tbyBlbSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tdGFibGVcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICA8bmctdGVtcGxhdGUgcC10YWJsZS1yb3ctdGVtcGxhdGUgbGV0LXJvd0l0ZW0gbGV0LWk9XCJyb3dJbmRleFwiIFtwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93XT1cImlzU2hvd1wiPlxuICogICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+PC9kZXRhaWwtcm93PlxuICogICAgIDwvbmctdGVtcGxhdGU+XG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tdGFibGVcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICA8ZGl2ICpwLXRhYmxlLXJvdy10ZW1wbGF0ZT1cImxldCByb3dJdGVtLCBsZXQgaT1yb3dJbmRleFwiPlxuICogICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+PC9kZXRhaWwtcm93PlxuICogICAgIDwvZGl2PlxuICogLi4uXG4gKlxuICogYGBgXG4gKlxuICogQSBkaXJldGl2YSAqKnAtdGFibGUtcm93LXRlbXBsYXRlKiosIHBvc3NpYmlsaXRhIHRhbWLDqW0gcXVlIGRldGVybWluYWRhIGxpbmhhIGFwcmVzZW50ZSBvdSBuw6NvIHNldSBfdGVtcGxhdGVfLiBQYXJhIGlzdG8sXG4gKiDDqSBuZWNlc3PDoXJpbyBhdHJpYnVpciBhIHJlZmVyw6puY2lhIGRhIGZ1bsOnw6NvIHF1ZSBmYXogZXN0YSB2ZXJpZmljYcOnw6NvLCDDoCBwcm9wcmllZGFkZSBgcC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd2AsXG4gKiBhIG1lc21hIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyAqYm9vbGVhbiouIFZlamEgbyBleGVtcGxvIGEgc2VndWlyOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnYXBwLXJvb3QnLFxuICogICAgdGVtcGxhdGVVcmw6IGBcbiAqICAgICAgLi4uXG4gKiAgICAgIDxwby10YWJsZVxuICogICAgICAgIFtwLWNvbHVtbnNdPVwiY29sdW1uc1wiXG4gKiAgICAgICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICAgICAgIDxuZy10ZW1wbGF0ZSBwLXRhYmxlLXJvdy10ZW1wbGF0ZSBsZXQtcm93SXRlbSBsZXQtaT1cInJvd0luZGV4XCIgW3AtdGFibGUtcm93LXRlbXBsYXRlLXNob3ddPVwiaXNVbmRlbGl2ZXJlZFwiPlxuICogICAgICAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj4gPC9kZXRhaWwtcm93PlxuICogICAgICAgICAgPC9kaXY+XG4gKiAgICAgIC4uLlxuICogICAgYFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgcHVibGljIGRhdGFUYWJsZSA9IFt7XG4gKiAgICAgIGNvZGU6IDEyMDAsXG4gKiAgICAgIHByb2R1Y3Q6ICdSaWNlJyxcbiAqICAgICAgY29zdHVtZXI6ICdTdXBlcm1hcmtldCAxJyxcbiAqICAgICAgcXVhbnRpdHk6IDMsXG4gKiAgICAgIHN0YXR1czogJ2RlbGl2ZXJlZCcsXG4gKiAgICAgIGxpY2Vuc2VfcGxhdGU6ICdNREpEOTE5MScsXG4gKiAgICAgIGJhdGNoX3Byb2R1Y3Q6IDE4MDQxODIyLFxuICogICAgICBkcml2ZXI6ICdKb3PDqSBPbGl2ZWlyYSdcbiAqICAgIH0sIHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBjb3N0dW1lcjogJ1N1cGVybWFya2V0IDInLFxuICogICAgICBxdWFudGl0eTogMSxcbiAqICAgICAgc3RhdHVzOiAndHJhbnNwb3J0JyxcbiAqICAgICAgbGljZW5zZV9wbGF0ZTogJ1hYQTU0NTQnLFxuICogICAgICBiYXRjaF9wcm9kdWN0OiAxODA0MTgyMSxcbiAqICAgICAgZHJpdmVyOiAnRnJhbmNpc2NvIFBlcmVpcmEnXG4gKiAgICB9XTtcbiAqXG4gKiAgICBpc1VuZGVsaXZlcmVkKHJvdywgaW5kZXg6IG51bWJlcikge1xuICogICAgICByZXR1cm4gcm93LnN0YXR1cyAhPT0gJ2RlbGl2ZXJlZCc7XG4gKiAgICB9XG4gKiB9XG4gKiBgYGBcbiAqID4gTm8gZXhlbXBsbyBhY2ltYSwgc29tZW50ZSBzZXLDoSBkaXNwb25pYmlsaXphZG8gb3MgZGV0YWxoZXMgZGUgaW5mb3JtYcOnw7VlcyBuYXMgbGluaGFzIGN1am8gbyB2YWxvciBkZSBgc3RhdHVzYFxuICogbsOjbyBjb3JyZXNwb25kYW0gw6AgKmRlbGl2ZXJlZCouXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLXRhYmxlLXJvdy10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFBvVGFibGVSb3dUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGJvb2xlYW5vLCBpbmZvcm1hbmRvIHNlIGFwcmVzZW50YXLDoSBvIHRlbXBsYXRlIGRhIGxpbmhhLlxuICAgKiBTZXLDo28gcGFzc2Fkb3MgbyBvYmpldG8gZGEgbGluaGEgZSBvIGluZGljZSBkYSBtZXNtYSBwb3IgcGFyw6JtZXRybywgcGFyYSBxdWUgc2VqYSBwb3Nzw612ZWxcbiAgICogdG9tYXIgdW1hIGRlY2lzw6NvIGEgcGFydGlyIGRvIG9iamV0byBkYSBsaW5oYSBjb3JyZW50ZS5cbiAgICpcbiAgICogQ2FzbyBuw6NvIHNlciB1dGlsaXphZG8gZXN0YSBwcm9wcmllZGFkZSwgc2Vyw6NvIGFwcmVzZW50YWRvcyB0b2RvcyBvcyBkZXRhbGhlcyBkYXMgbGluaGFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdHJ1ZWBcbiAgICovXG4gIEBJbnB1dCgncC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvdycpIHBvVGFibGVSb3dUZW1wbGF0ZVNob3c6IChyb3c6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG4iXX0=