import { __assign, __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, poLocaleDefault } from '../../utils/util';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoTableColumnSortType } from './enums/po-table-column-sort-type.enum';
export var poTableContainer = ['border', 'shadow'];
export var poTableContainerDefault = 'border';
export var poTableLiteralsDefault = {
    en: {
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    },
    es: {
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    },
    pt: {
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    },
    ru: {
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
var PoTableBaseComponent = /** @class */ (function () {
    function PoTableBaseComponent(poDate) {
        this.poDate = poDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        this.hasMainColumns = false;
        this.mainColumns = [];
        this.selectAll = false;
        this.sortedColumn = { property: null, ascending: true };
        this.subtitleColumns = [];
        /** Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas. */
        this.allSelected = new EventEmitter();
        /** Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas. */
        this.allUnselected = new EventEmitter();
        /**
         * Evento executado ao colapsar uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * Evento executado ao expandir uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /** Evento executado ao selecionar uma linha do `po-table`. */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * Evento executado ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /** Evento executado ao desmarcar a seleção de uma linha do `po-table`. */
        this.unselected = new EventEmitter();
    }
    Object.defineProperty(PoTableBaseComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         */
        set: function (items) {
            this._items = Array.isArray(items) ? items : [];
            // when haven't items, selectAll should be unchecked.
            if (!this.hasItems) {
                this.selectAll = false;
            }
            else if (!this.hasColumns) {
                this.columns = this.getDefaultColumns(items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         */
        set: function (columns) {
            this._columns = columns || [];
            if (this._columns.length) {
                this.setColumnLink();
                this.calculateWidthHeaders();
            }
            else if (this.hasItems) {
                this._columns = this.getDefaultColumns(this.items[0]);
            }
            this.onChangeColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "container", {
        get: function () {
            return this._container;
        },
        /**
         * @optional
         *
         * @description
         *
         * Adiciona um contorno arredondado ao `po-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * @default `border`
         */
        set: function (value) {
            this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideTextOverflow", {
        get: function () {
            return this._hideTextOverflow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         */
        set: function (hideTextOverflow) {
            this._hideTextOverflow = convertToBoolean(hideTextOverflow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         */
        set: function (height) {
            this._height = height;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideDetail", {
        get: function () {
            return this._hideDetail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * @default `false`
         */
        set: function (hideDetail) {
            this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poTableLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-table
         *   [p-literals]="customLiterals">
         * </po-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poTableLiteralsDefault[poLocaleDefault]), poTableLiteralsDefault[browserLanguage()]), value);
            }
            else {
                this._literals = poTableLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "loading", {
        get: function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * @default `false`
         */
        set: function (loading) {
            this._loading = convertToBoolean(loading);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "checkbox", {
        get: function () {
            return this.selectable;
        },
        /**
         * @optional
         *
         * @deprecated 3.x.x
         *
         * @description
         *
         * ***Deprecated 3.x.x***
         *
         * > Esta propriedade está depreciada, utilize a propriedade `p-selectable`.
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * @default `false`
         */
        set: function (checkbox) {
            this.selectable = checkbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "actions", {
        get: function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         */
        set: function (actions) {
            this._actions = actions;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
         * selecionar apenas uma única linha.
         *
         * **Importante:**
         *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
         *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
         * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
         *
         * @default `false`
         */
        set: function (value) {
            this._selectable = value === '' ? true : convertToBoolean(value);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSort", {
        set: function (sort) {
            this.sort = sort === '' ? false : convertToBoolean(sort);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setShowMoreDisabled", {
        set: function (showMoreDisabled) {
            this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setStriped", {
        set: function (striped) {
            this.striped = striped === '' ? false : convertToBoolean(striped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setHideSelectAll", {
        set: function (hideSelectAll) {
            this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSingleSelect", {
        set: function (value) {
            this.singleSelect = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hasColumns", {
        get: function () {
            return this.columns && this.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hasItems", {
        get: function () {
            return !!(this.items && this.items.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "nameColumnDetail", {
        get: function () {
            return this.columnMasterDetail ? this.columnMasterDetail.property : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "validColumns", {
        get: function () {
            var typesValid = [
                'string',
                'number',
                'boolean',
                'date',
                'time',
                'dateTime',
                'currency',
                'subtitle',
                'link',
                'label',
                'icon'
            ];
            return this.columns.filter(function (col) { return !col.type || typesValid.includes(col.type); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "sortType", {
        get: function () {
            return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
        },
        enumerable: true,
        configurable: true
    });
    PoTableBaseComponent.prototype.ngOnChanges = function (changes) {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
        if (changes.height) {
            this.calculateHeightTableContainer(this.height);
        }
    };
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    PoTableBaseComponent.prototype.collapse = function (rowIndex) {
        this.setShowDetail(rowIndex, false);
    };
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    PoTableBaseComponent.prototype.expand = function (rowIndex) {
        this.setShowDetail(rowIndex, true);
    };
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    PoTableBaseComponent.prototype.getSelectedRows = function () {
        return this.items.filter(function (item) { return item.$selected; });
    };
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    PoTableBaseComponent.prototype.getUnselectedRows = function () {
        return this.items.filter(function (item) { return !item.$selected; });
    };
    PoTableBaseComponent.prototype.selectAllRows = function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(function (item) {
                item.$selected = _this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    };
    PoTableBaseComponent.prototype.selectRow = function (row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    };
    PoTableBaseComponent.prototype.selectDetailRow = function (row) {
        this.emitSelectEvents(row);
    };
    PoTableBaseComponent.prototype.getClassColor = function (row, column) {
        return column.color ? "po-text-" + this.getColumnColor(row, column) : '';
    };
    PoTableBaseComponent.prototype.toggleDetail = function (row) {
        this.setShowDetail(row, !row.$showDetail);
        this.emitExpandEvents(row);
    };
    PoTableBaseComponent.prototype.toggleRowAction = function (row) {
        var toggleShowAction = row.$showAction;
        this.items.forEach(function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    };
    PoTableBaseComponent.prototype.sortColumn = function (column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column: column, type: this.sortType });
        this.sortedColumn.property = column;
    };
    PoTableBaseComponent.prototype.onShowMore = function () {
        var sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        this.showMore.emit(sort);
    };
    PoTableBaseComponent.prototype.getDefaultColumns = function (item) {
        var keys = Object.keys(item);
        return keys
            .filter(function (key) { return typeof item[key] !== 'object'; })
            .map(function (key) {
            return { label: capitalizeFirstLetter(key), property: key };
        });
    };
    PoTableBaseComponent.prototype.configAfterSelectRow = function (rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    };
    PoTableBaseComponent.prototype.emitExpandEvents = function (row) {
        row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
    };
    PoTableBaseComponent.prototype.emitSelectAllEvents = function (selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    };
    PoTableBaseComponent.prototype.emitSelectEvents = function (row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    };
    PoTableBaseComponent.prototype.getColumnColor = function (row, column) {
        var columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    };
    // Retorna a coluna da lista de colunas que é do tipo detail
    PoTableBaseComponent.prototype.getColumnMasterDetail = function () {
        return this.columns.find(function (col) { return col.type === 'detail'; });
    };
    // Colunas que são inseridas no <head> da tabela
    PoTableBaseComponent.prototype.getMainColumns = function () {
        return this.validColumns.filter(function (col) { return col.visible !== false; });
    };
    // Retorna as colunas com status
    PoTableBaseComponent.prototype.getSubtitleColumns = function () {
        return this.columns.filter(function (col) { return col.type === 'subtitle'; });
    };
    PoTableBaseComponent.prototype.isEverySelected = function (items) {
        var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
        var everyChecked = function (item) { return item.$selected; };
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    PoTableBaseComponent.prototype.onChangeColumns = function () {
        this.setMainColumns();
        this.setColumnMasterDetail();
        this.setSubtitleColumns();
    };
    PoTableBaseComponent.prototype.setColumnLink = function () {
        this.columns.forEach(function (column) {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    };
    PoTableBaseComponent.prototype.setColumnMasterDetail = function () {
        this.columnMasterDetail = this.getColumnMasterDetail();
    };
    PoTableBaseComponent.prototype.setMainColumns = function () {
        this.mainColumns = this.getMainColumns();
        this.hasMainColumns = !!this.mainColumns.length;
        this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
    };
    PoTableBaseComponent.prototype.setShowDetail = function (rowIdentifier, isShowDetail) {
        var isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
        var row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
        row.$showDetail = isShowDetail;
    };
    PoTableBaseComponent.prototype.setSubtitleColumns = function () {
        this.subtitleColumns = this.getSubtitleColumns();
    };
    PoTableBaseComponent.prototype.sortArray = function (column, ascending) {
        var _this = this;
        this.items.sort(function (leftSide, rightSide) {
            if (column.type === 'date' || column.type === 'dateTime') {
                return _this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        });
    };
    PoTableBaseComponent.prototype.unselectOtherRows = function (rows, row) {
        rows.forEach(function (item) {
            if (item !== row) {
                item.$selected = false;
            }
        });
    };
    PoTableBaseComponent.prototype.verifyWidthColumnsPixels = function () {
        return this.hasMainColumns ? this.mainColumns.every(function (column) { return column.width && column.width.includes('px'); }) : false;
    };
    PoTableBaseComponent.ctorParameters = function () { return [
        { type: PoDateService }
    ]; };
    __decorate([
        Input('p-items'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoTableBaseComponent.prototype, "items", null);
    __decorate([
        Input('p-columns'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoTableBaseComponent.prototype, "columns", null);
    __decorate([
        Input('p-container'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "container", null);
    __decorate([
        Input('p-hide-text-overflow'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTableBaseComponent.prototype, "hideTextOverflow", null);
    __decorate([
        Input('p-height'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoTableBaseComponent.prototype, "height", null);
    __decorate([
        Input('p-hide-detail'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTableBaseComponent.prototype, "hideDetail", null);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoTableBaseComponent.prototype, "literals", null);
    __decorate([
        Input('p-loading'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTableBaseComponent.prototype, "loading", null);
    __decorate([
        Input('p-checkbox'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTableBaseComponent.prototype, "checkbox", null);
    __decorate([
        Input('p-actions'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoTableBaseComponent.prototype, "actions", null);
    __decorate([
        Input('p-selectable'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoTableBaseComponent.prototype, "selectable", null);
    __decorate([
        Input('p-sort'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "setSort", null);
    __decorate([
        Input('p-show-more-disabled'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "setShowMoreDisabled", null);
    __decorate([
        Input('p-striped'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "setStriped", null);
    __decorate([
        Input('p-hide-select-all'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "setHideSelectAll", null);
    __decorate([
        Input('p-single-select'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoTableBaseComponent.prototype, "setSingleSelect", null);
    __decorate([
        Input('p-max-columns'),
        __metadata("design:type", Number)
    ], PoTableBaseComponent.prototype, "maxColumns", void 0);
    __decorate([
        Output('p-all-selected'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "allSelected", void 0);
    __decorate([
        Output('p-all-unselected'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "allUnselected", void 0);
    __decorate([
        Output('p-collapsed'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "collapsed", void 0);
    __decorate([
        Output('p-expanded'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "expanded", void 0);
    __decorate([
        Output('p-selected'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "selected", void 0);
    __decorate([
        Output('p-show-more'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "showMore", void 0);
    __decorate([
        Output('p-sort-by'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "sortBy", void 0);
    __decorate([
        Output('p-unselected'),
        __metadata("design:type", EventEmitter)
    ], PoTableBaseComponent.prototype, "unselected", void 0);
    PoTableBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [PoDateService])
    ], PoTableBaseComponent);
    return PoTableBaseComponent;
}());
export { PoTableBaseComponent };
//# sourceMappingURL=data:application/json;base64,