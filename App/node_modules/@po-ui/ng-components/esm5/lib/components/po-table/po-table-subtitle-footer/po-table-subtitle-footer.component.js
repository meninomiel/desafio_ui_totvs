import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Component, DoCheck, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um conjunto de legendas.
 */
var PoTableSubtitleFooterComponent = /** @class */ (function () {
    function PoTableSubtitleFooterComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    PoTableSubtitleFooterComponent.prototype.ngAfterViewInit = function () {
        this.initializeResizeListener();
        this.debounceResize();
    };
    PoTableSubtitleFooterComponent.prototype.ngDoCheck = function () {
        if (!this.isVisible && this.getContainerSize() > 0) {
            this.toggleShowCompleteSubtitle();
            this.isVisible = true;
        }
    };
    PoTableSubtitleFooterComponent.prototype.ngOnDestroy = function () {
        this.removeResizeListener();
    };
    PoTableSubtitleFooterComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.toggleShowCompleteSubtitle();
        });
    };
    PoTableSubtitleFooterComponent.prototype.getContainerSize = function () {
        return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
    };
    PoTableSubtitleFooterComponent.prototype.getItemsSize = function () {
        var items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
        return Array.from(items)
            .map(function (item) { return item['offsetWidth']; })
            .reduce(function (a, b) { return a + b; }, 16);
    };
    PoTableSubtitleFooterComponent.prototype.initializeResizeListener = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    PoTableSubtitleFooterComponent.prototype.removeResizeListener = function () {
        this.resizeListener();
    };
    PoTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = function () {
        var containerSize = this.getContainerSize();
        var itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    };
    PoTableSubtitleFooterComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object)
    ], PoTableSubtitleFooterComponent.prototype, "literals", void 0);
    __decorate([
        Input('p-subtitles'),
        __metadata("design:type", Array)
    ], PoTableSubtitleFooterComponent.prototype, "subtitles", void 0);
    PoTableSubtitleFooterComponent = __decorate([
        Component({
            selector: 'po-table-subtitle-footer',
            template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\" [p-literals]=\"literals\" [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], PoTableSubtitleFooterComponent);
    return PoTableSubtitleFooterComponent;
}());
export { PoTableSubtitleFooterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtc3VidGl0bGUtZm9vdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtc3VidGl0bGUtZm9vdGVyL3BvLXRhYmxlLXN1YnRpdGxlLWZvb3Rlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0c7Ozs7OztHQU1HO0FBS0g7SUFhRSx3Q0FBb0IsT0FBbUIsRUFBUyxRQUFtQjtRQUEvQyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUFHLENBQUM7SUFFdkUsd0RBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsa0RBQVMsR0FBVDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFRCxvREFBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLHVEQUFjLEdBQXRCO1FBQUEsaUJBS0M7UUFKQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO1lBQzlCLEtBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLHlEQUFnQixHQUF4QjtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFDQUFxQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3JHLENBQUM7SUFFTyxxREFBWSxHQUFwQjtRQUNFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFFdkYsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNyQixHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQW5CLENBQW1CLENBQUM7YUFDaEMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEVBQUwsQ0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxpRUFBd0IsR0FBaEM7UUFBQSxpQkFJQztRQUhDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFDLEtBQWlCO1lBQy9FLEtBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyw2REFBb0IsR0FBNUI7UUFDRSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLG1FQUEwQixHQUFsQztRQUNFLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzlDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV0QyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUM7SUFDaEQsQ0FBQzs7Z0JBcEQ0QixVQUFVO2dCQUFtQixTQUFTOztJQUw5QztRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOztvRUFBVTtJQUdSO1FBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7a0NBQVksS0FBSztxRUFBd0I7SUFYbkQsOEJBQThCO1FBSjFDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwwQkFBMEI7WUFDcEMsNmRBQXdEO1NBQ3pELENBQUM7eUNBYzZCLFVBQVUsRUFBbUIsU0FBUztPQWJ4RCw4QkFBOEIsQ0FrRTFDO0lBQUQscUNBQUM7Q0FBQSxBQWxFRCxJQWtFQztTQWxFWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb1RhYmxlU3VidGl0bGVDb2x1bW4gfSBmcm9tICcuL3BvLXRhYmxlLXN1YnRpdGxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBhIGNyaWHDp8OjbyBkZSB1bSBjb25qdW50byBkZSBsZWdlbmRhcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFibGUtc3VidGl0bGUtZm9vdGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLXN1YnRpdGxlLWZvb3Rlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZVN1YnRpdGxlRm9vdGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25EZXN0cm95IHtcbiAgc2hvd1N1YnRpdGxlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgaXNWaXNpYmxlOiBib29sZWFuO1xuICBwcml2YXRlIHRpbWVvdXRSZXNpemU7XG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAvKiogUHJvcHJpZWRhZGUgcXVlIHJlY2ViZSBhcyBsaXRlcmFpcyBkZWZpbmlkYXMgbm8gYHBvLXRhYmxlYC4gKi9cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgbGl0ZXJhbHM7XG5cbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSByZWNlYmUgYXMgbGVnZW5kYXMgZGVmaW5pZGFzIG5vIGBQb1RhYmxlU3VidGl0bGVDaXJjbGVDb21wb25lbnRgLiAqL1xuICBASW5wdXQoJ3Atc3VidGl0bGVzJykgc3VidGl0bGVzOiBBcnJheTxQb1RhYmxlU3VidGl0bGVDb2x1bW4+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZVJlc2l6ZUxpc3RlbmVyKCk7XG4gICAgdGhpcy5kZWJvdW5jZVJlc2l6ZSgpO1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIGlmICghdGhpcy5pc1Zpc2libGUgJiYgdGhpcy5nZXRDb250YWluZXJTaXplKCkgPiAwKSB7XG4gICAgICB0aGlzLnRvZ2dsZVNob3dDb21wbGV0ZVN1YnRpdGxlKCk7XG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVSZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWJvdW5jZVJlc2l6ZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVzaXplKTtcbiAgICB0aGlzLnRpbWVvdXRSZXNpemUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudG9nZ2xlU2hvd0NvbXBsZXRlU3VidGl0bGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGFpbmVyU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvLXRhYmxlLXN1YnRpdGxlLWZvb3Rlci1jb250YWluZXInKS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbXNTaXplKCkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvLXRhYmxlLXN1YnRpdGxlLWZvb3RlcicpO1xuXG4gICAgcmV0dXJuIEFycmF5LmZyb20oaXRlbXMpXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbVsnb2Zmc2V0V2lkdGgnXSlcbiAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAxNik7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVSZXNpemVMaXN0ZW5lcigpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZGVib3VuY2VSZXNpemUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlUmVzaXplTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVTaG93Q29tcGxldGVTdWJ0aXRsZSgpIHtcbiAgICBjb25zdCBjb250YWluZXJTaXplID0gdGhpcy5nZXRDb250YWluZXJTaXplKCk7XG4gICAgY29uc3QgaXRlbXNTaXplID0gdGhpcy5nZXRJdGVtc1NpemUoKTtcblxuICAgIHRoaXMuc2hvd1N1YnRpdGxlID0gaXRlbXNTaXplID4gY29udGFpbmVyU2l6ZTtcbiAgfVxufVxuIl19