import { __assign, __decorate, __metadata } from "tslib";
import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange, SimpleChanges, Renderer2, ViewChild } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToInt, poLocaleDefault } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
var PoTableColumnManagerMaxColumnsDefault = 99999;
export var poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
var PoTableColumnManagerComponent = /** @class */ (function () {
    function PoTableColumnManagerComponent(renderer) {
        this.renderer = renderer;
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.columnsOptions = [];
        this.literals = __assign(__assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[browserLanguage()]);
        this.visibleColumns = [];
        this.defaultColumns = [];
        this.columns = [];
        this.visibleColumnsChange = new EventEmitter();
    }
    Object.defineProperty(PoTableColumnManagerComponent.prototype, "maxColumns", {
        get: function () {
            return this._maxColumns;
        },
        set: function (value) {
            this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
        },
        enumerable: true,
        configurable: true
    });
    PoTableColumnManagerComponent.prototype.ngOnInit = function () {
        this.updateColumnsOptions(this.columns);
    };
    PoTableColumnManagerComponent.prototype.ngOnChanges = function (changes) {
        var columns = changes.columns, maxColumns = changes.maxColumns, target = changes.target;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateColumnsOptions(this.columns);
        }
    };
    PoTableColumnManagerComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    PoTableColumnManagerComponent.prototype.onChangeVisibleColumns = function (checkedColumns) {
        this.disableColumnsOptions(this.columnsOptions);
        var visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    };
    PoTableColumnManagerComponent.prototype.restore = function () {
        this.updateColumnsOptions(this.defaultColumns);
    };
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    PoTableColumnManagerComponent.prototype.disableColumnsOptions = function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
        setTimeout(function () {
            _this.columnsOptions = columns.map(function (column) { return (__assign(__assign({}, column), { disabled: _this.isDisableColumn(column.value) })); });
        });
    };
    PoTableColumnManagerComponent.prototype.getColumnTitleLabel = function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /** Retorna um Array de column.property das colunas que são visiveis. */
    PoTableColumnManagerComponent.prototype.getVisibleColumns = function (columns) {
        var _this = this;
        var visibleColumns = [];
        columns.forEach(function (column) {
            if (column.visible !== false && visibleColumns.length < _this.maxColumns && column.type !== 'detail') {
                visibleColumns.push(column.property);
            }
        });
        return visibleColumns;
    };
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    PoTableColumnManagerComponent.prototype.getVisibleTableColumns = function (visibleColumns) {
        return this.columns.map(function (column) { return (__assign(__assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })); });
    };
    PoTableColumnManagerComponent.prototype.initializeListeners = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            if (_this.popover) {
                _this.popover.close();
            }
        });
    };
    PoTableColumnManagerComponent.prototype.isDisableColumn = function (property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    };
    PoTableColumnManagerComponent.prototype.mapTableColumnsToCheckboxOptions = function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        var columnsOptions = [];
        columns.forEach(function (column) {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: _this.getColumnTitleLabel(column),
                    disabled: _this.isDisableColumn(column.property)
                });
            }
        });
        return columnsOptions;
    };
    PoTableColumnManagerComponent.prototype.onChangeColumns = function (columns) {
        var firstChange = columns.firstChange, _a = columns.currentValue, currentValue = _a === void 0 ? [] : _a, _b = columns.previousValue, previousValue = _b === void 0 ? [] : _b;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (firstChange || this.defaultColumns.length !== currentValue.length) {
            this.defaultColumns = currentValue;
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (previousValue.length !== currentValue.length) {
            this.updateColumnsOptions(currentValue);
        }
    };
    PoTableColumnManagerComponent.prototype.removeListeners = function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    PoTableColumnManagerComponent.prototype.updateColumnsOptions = function (columns) {
        this.visibleColumns = this.getVisibleColumns(columns);
        this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
        this.onChangeVisibleColumns(this.visibleColumns);
    };
    PoTableColumnManagerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('p-columns'),
        __metadata("design:type", Array)
    ], PoTableColumnManagerComponent.prototype, "columns", void 0);
    __decorate([
        Input('p-max-columns'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], PoTableColumnManagerComponent.prototype, "maxColumns", null);
    __decorate([
        Input('p-target'),
        __metadata("design:type", ElementRef)
    ], PoTableColumnManagerComponent.prototype, "target", void 0);
    __decorate([
        Output('p-visible-columns-change'),
        __metadata("design:type", Object)
    ], PoTableColumnManagerComponent.prototype, "visibleColumnsChange", void 0);
    __decorate([
        ViewChild(PoPopoverComponent),
        __metadata("design:type", PoPopoverComponent)
    ], PoTableColumnManagerComponent.prototype, "popover", void 0);
    PoTableColumnManagerComponent = __decorate([
        Component({
            selector: 'po-table-column-manager',
            template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\"\n    >\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n"
        }),
        __metadata("design:paramtypes", [Renderer2])
    ], PoTableColumnManagerComponent);
    return PoTableColumnManagerComponent;
}());
export { PoTableColumnManagerComponent };
//# sourceMappingURL=data:application/json;base64,