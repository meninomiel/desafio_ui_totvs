import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
var PoCalendarLangService = /** @class */ (function () {
    function PoCalendarLangService() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    PoCalendarLangService.prototype.getMonth = function (month) {
        return this.months[month][this.language];
    };
    PoCalendarLangService.prototype.getMonthLabel = function () {
        return this.monthLabel[this.language];
    };
    PoCalendarLangService.prototype.getMonthsArray = function () {
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    };
    PoCalendarLangService.prototype.getWeekDays = function (day) {
        return this.shortWeekDays[day][this.language];
    };
    PoCalendarLangService.prototype.getWeekDaysArray = function () {
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    };
    PoCalendarLangService.prototype.getYearLabel = function () {
        return this.yearLabel[this.language];
    };
    PoCalendarLangService.prototype.setLanguage = function (language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = language === 'pt' || language === 'en' || language === 'es' ? language : 'pt';
        }
    };
    PoCalendarLangService = __decorate([
        Injectable()
    ], PoCalendarLangService);
    return PoCalendarLangService;
}());
export { PoCalendarLangService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1jYWxlbmRhci9zZXJ2aWNlcy9wby1jYWxlbmRhci5sYW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0M7SUFBQTtRQUNVLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFFaEIsV0FBTSxHQUFHO1lBQ2Y7Z0JBQ0UsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxXQUFXO2dCQUNmLEVBQUUsRUFBRSxVQUFVO2dCQUNkLEVBQUUsRUFBRSxTQUFTO2FBQ2Q7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxNQUFNO2dCQUNWLEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxNQUFNO2FBQ1g7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsTUFBTTtnQkFDVixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxRQUFRO2dCQUNaLEVBQUUsRUFBRSxRQUFRO2dCQUNaLEVBQUUsRUFBRSxRQUFRO2FBQ2I7WUFDRDtnQkFDRSxFQUFFLEVBQUUsVUFBVTtnQkFD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U0FDeEQ7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQsNENBQVksR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELDJDQUFXLEdBQVgsVUFBWSxRQUFnQjtRQUMxQixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNwQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDL0Y7SUFDSCxDQUFDO0lBekpVLHFCQUFxQjtRQURqQyxVQUFVLEVBQUU7T0FDQSxxQkFBcUIsQ0EwSmpDO0lBQUQsNEJBQUM7Q0FBQSxBQTFKRCxJQTBKQztTQTFKWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyTGFuZ1NlcnZpY2Uge1xuICBwcml2YXRlIGxhbmd1YWdlID0gJ3B0JztcblxuICBwcml2YXRlIG1vbnRocyA9IFtcbiAgICB7XG4gICAgICBwdDogJ0phbmVpcm8nLFxuICAgICAgZW46ICdKYW51YXJ5JyxcbiAgICAgIGVzOiAnRW5lcm8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0ZldmVyZWlybycsXG4gICAgICBlbjogJ0ZlYnJ1YXJ5JyxcbiAgICAgIGVzOiAnRmVicmVybydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnTWFyw6dvJyxcbiAgICAgIGVuOiAnTWFyY2gnLFxuICAgICAgZXM6ICdNYXJ6bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnQWJyaWwnLFxuICAgICAgZW46ICdBcHJpbCcsXG4gICAgICBlczogJ0FicmlsJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdNYWlvJyxcbiAgICAgIGVuOiAnTWF5JyxcbiAgICAgIGVzOiAnTWF5bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnSnVuaG8nLFxuICAgICAgZW46ICdKdW5lJyxcbiAgICAgIGVzOiAnSnVuaW8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0p1bGhvJyxcbiAgICAgIGVuOiAnSnVseScsXG4gICAgICBlczogJ0p1bGlvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdBZ29zdG8nLFxuICAgICAgZW46ICdBdWd1c3QnLFxuICAgICAgZXM6ICdBZ29zdG8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NldGVtYnJvJyxcbiAgICAgIGVuOiAnU2VwdGVtYmVyJyxcbiAgICAgIGVzOiAnU2V0aWVtYnJlJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdPdXR1YnJvJyxcbiAgICAgIGVuOiAnT2N0b2JlcicsXG4gICAgICBlczogJ09jdHVicmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ05vdmVtYnJvJyxcbiAgICAgIGVuOiAnTm92ZW1iZXInLFxuICAgICAgZXM6ICdOb3ZpZW1icmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0RlemVtYnJvJyxcbiAgICAgIGVuOiAnRGVjZW1iZXInLFxuICAgICAgZXM6ICdEaWNpZW1icmUnXG4gICAgfVxuICBdO1xuXG4gIHByaXZhdGUgc2hvcnRXZWVrRGF5cyA9IFtcbiAgICB7XG4gICAgICBwdDogJ0RvbScsXG4gICAgICBlbjogJ1N1bicsXG4gICAgICBlczogJ0RvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2VnJyxcbiAgICAgIGVuOiAnTW9uJyxcbiAgICAgIGVzOiAnTHVuJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdUZXInLFxuICAgICAgZW46ICdUdWUnLFxuICAgICAgZXM6ICdNYXInXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1F1YScsXG4gICAgICBlbjogJ1dlZCcsXG4gICAgICBlczogJ01pw6knXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1F1aScsXG4gICAgICBlbjogJ1RodScsXG4gICAgICBlczogJ0p1ZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2V4JyxcbiAgICAgIGVuOiAnRnJpJyxcbiAgICAgIGVzOiAnVmllJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdTw6FiJyxcbiAgICAgIGVuOiAnU2F0JyxcbiAgICAgIGVzOiAnU8OhYidcbiAgICB9XG4gIF07XG5cbiAgcHJpdmF0ZSBtb250aExhYmVsID0ge1xuICAgIHB0OiAnTcOqcycsXG4gICAgZW46ICdNb250aCcsXG4gICAgZXM6ICdNZXMnXG4gIH07XG5cbiAgcHJpdmF0ZSB5ZWFyTGFiZWwgPSB7XG4gICAgcHQ6ICdBbm8nLFxuICAgIGVuOiAnWWVhcicsXG4gICAgZXM6ICdBw7FvJ1xuICB9O1xuXG4gIGdldE1vbnRoKG1vbnRoOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5tb250aHNbbW9udGhdW3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgZ2V0TW9udGhMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5tb250aExhYmVsW3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgZ2V0TW9udGhzQXJyYXkoKSB7XG4gICAgY29uc3QgYXJyTW9udGhzID0gQXJyYXkoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubW9udGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJNb250aHMucHVzaCh0aGlzLm1vbnRoc1tpXVt0aGlzLmxhbmd1YWdlXSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJNb250aHM7XG4gIH1cblxuICBnZXRXZWVrRGF5cyhkYXk6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnNob3J0V2Vla0RheXNbZGF5XVt0aGlzLmxhbmd1YWdlXTtcbiAgfVxuXG4gIGdldFdlZWtEYXlzQXJyYXkoKSB7XG4gICAgY29uc3QgYXJyV2Vla0RheXMgPSBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaG9ydFdlZWtEYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJXZWVrRGF5cy5wdXNoKHRoaXMuc2hvcnRXZWVrRGF5c1tpXVt0aGlzLmxhbmd1YWdlXSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJXZWVrRGF5cztcbiAgfVxuXG4gIGdldFllYXJMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy55ZWFyTGFiZWxbdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICBzZXRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgaWYgKGxhbmd1YWdlICYmIGxhbmd1YWdlLmxlbmd0aCA+PSAyKSB7XG4gICAgICBsYW5ndWFnZSA9IGxhbmd1YWdlLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgMik7XG4gICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2UgPT09ICdwdCcgfHwgbGFuZ3VhZ2UgPT09ICdlbicgfHwgbGFuZ3VhZ2UgPT09ICdlcycgPyBsYW5ndWFnZSA6ICdwdCc7XG4gICAgfVxuICB9XG59XG4iXX0=