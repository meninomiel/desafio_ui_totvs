import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
var poCalendarServiceFirstWeekDayDefault = 0;
var PoCalendarService = /** @class */ (function () {
    function PoCalendarService() {
    }
    PoCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        var weeks = [];
        var week = [];
        var i = 0;
        var date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    };
    PoCalendarService.prototype.monthDays = function (year, month) {
        var getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    PoCalendarService.prototype.weekStartDate = function (date) {
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    PoCalendarService = __decorate([
        Injectable()
    ], PoCalendarService);
    return PoCalendarService;
}());
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvc2VydmljZXMvcG8tY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxJQUFNLG9DQUFvQyxHQUFXLENBQUMsQ0FBQztBQUd2RDtJQUFBO0lBMkNBLENBQUM7SUExQ0Msc0NBQVUsR0FBVixVQUFXLElBQVMsRUFBRSxLQUFVLEVBQUUsWUFBd0IsRUFBRSxhQUF5QjtRQUFuRCw2QkFBQSxFQUFBLG1CQUF3QjtRQUFFLDhCQUFBLEVBQUEsb0JBQXlCO1FBQ25GLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUUsRUFBRTtZQUN4RCxNQUFNLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsSUFBTSxLQUFLLEdBQWUsRUFBRSxDQUFDO1FBQzdCLElBQUksSUFBSSxHQUFlLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXBDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxHQUFHO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNYLFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHFDQUFTLEdBQVQsVUFBVSxJQUFTLEVBQUUsS0FBVTtRQUM3QixJQUFNLFlBQVksR0FBRyxVQUFVLElBQVM7WUFDdEMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQseUNBQWEsR0FBYixVQUFjLElBQVM7UUFDckIsSUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0MsT0FBTyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssb0NBQW9DLEVBQUU7WUFDbEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBMUNVLGlCQUFpQjtRQUQ3QixVQUFVLEVBQUU7T0FDQSxpQkFBaUIsQ0EyQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IHBvQ2FsZW5kYXJTZXJ2aWNlRmlyc3RXZWVrRGF5RGVmYXVsdDogbnVtYmVyID0gMDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgbW9udGhEYXRlcyh5ZWFyOiBhbnksIG1vbnRoOiBhbnksIGRheUZvcm1hdHRlcjogYW55ID0gbnVsbCwgd2Vla0Zvcm1hdHRlcjogYW55ID0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgbW9udGggIT09ICdudW1iZXInIHx8IG1vbnRoIDwgMCB8fCBtb250aCA+IDExKSB7XG4gICAgICB0aHJvdyBFcnJvcignbW9udGggbXVzdCBiZSBhIG51bWJlciAoSmFuIGlzIDApJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2Vla3M6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgd2VlazogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcblxuICAgIGlmICh5ZWFyID49IDAgJiYgeWVhciA8IDEwMCkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICB9XG5cbiAgICBkYXRlID0gdGhpcy53ZWVrU3RhcnREYXRlKGRhdGUpO1xuXG4gICAgZG8ge1xuICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICB3ZWVrLnB1c2goZGF5Rm9ybWF0dGVyID8gZGF5Rm9ybWF0dGVyKGRhdGUpIDogZGF0ZSk7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgd2Vla3MucHVzaCh3ZWVrRm9ybWF0dGVyID8gd2Vla0Zvcm1hdHRlcih3ZWVrKSA6IHdlZWspO1xuICAgICAgd2VlayA9IFtdO1xuICAgIH0gd2hpbGUgKGRhdGUuZ2V0TW9udGgoKSA8PSBtb250aCAmJiBkYXRlLmdldEZ1bGxZZWFyKCkgPT09IHllYXIpO1xuICAgIHJldHVybiB3ZWVrcztcbiAgfVxuXG4gIG1vbnRoRGF5cyh5ZWFyOiBhbnksIG1vbnRoOiBhbnkpIHtcbiAgICBjb25zdCBnZXREYXlPclplcm8gPSBmdW5jdGlvbiAoZGF0ZTogYW55KSB7XG4gICAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSBtb250aCA/IGRhdGUgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMubW9udGhEYXRlcyh5ZWFyLCBtb250aCwgZ2V0RGF5T3JaZXJvKTtcbiAgfVxuXG4gIHdlZWtTdGFydERhdGUoZGF0ZTogYW55KSB7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIHdoaWxlIChzdGFydERhdGUuZ2V0RGF5KCkgIT09IHBvQ2FsZW5kYXJTZXJ2aWNlRmlyc3RXZWVrRGF5RGVmYXVsdCkge1xuICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnREYXRlO1xuICB9XG59XG4iXX0=