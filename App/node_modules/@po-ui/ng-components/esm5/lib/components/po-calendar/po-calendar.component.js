import { __decorate, __extends, __metadata } from "tslib";
import { Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoCalendarBaseComponent } from './po-calendar-base.component';
import { PoCalendarLangService } from './services/po-calendar.lang.service';
import { PoCalendarService } from './services/po-calendar.service';
import { PoDateService } from '../../services/po-date/po-date.service';
/* istanbul ignore next */
var providers = [
    PoCalendarService,
    PoCalendarLangService,
    {
        provide: NG_VALUE_ACCESSOR,
        // tslint:disable-next-line
        useExisting: forwardRef(function () { return PoCalendarComponent; }),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // tslint:disable-next-line
        useExisting: forwardRef(function () { return PoCalendarComponent; }),
        multi: true
    }
];
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
var PoCalendarComponent = /** @class */ (function (_super) {
    __extends(PoCalendarComponent, _super);
    function PoCalendarComponent(poCalendarService, poCalendarLangService, poDate) {
        var _this = _super.call(this, poDate, poCalendarLangService) || this;
        _this.poCalendarService = poCalendarService;
        return _this;
    }
    PoCalendarComponent.prototype.ngOnInit = function () {
        this.init();
    };
    PoCalendarComponent.prototype.getBackgroundColor = function (displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    };
    PoCalendarComponent.prototype.getDayBackgroundColor = function (date) {
        return this.getDayColor(date, 'background');
    };
    PoCalendarComponent.prototype.getDayForegroundColor = function (date) {
        return this.getDayColor(date, 'foreground');
    };
    PoCalendarComponent.prototype.getForegroundColor = function (displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    };
    PoCalendarComponent.prototype.getMonthLabel = function () {
        return this.poCalendarLangService.getMonthLabel();
    };
    PoCalendarComponent.prototype.getYearLabel = function () {
        return this.poCalendarLangService.getYearLabel();
    };
    PoCalendarComponent.prototype.onNextMonth = function () {
        this.displayMonthNumber < 11
            ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
            : this.updateDisplay(this.displayYear + 1, 0);
    };
    PoCalendarComponent.prototype.onPreviousMonth = function () {
        this.displayMonthNumber > 0
            ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1)
            : this.updateDisplay(this.displayYear - 1, 11);
    };
    // Ao selecionar uma data
    PoCalendarComponent.prototype.onSelectDate = function (date) {
        this.date = date;
        this.dateIso = this.poDate.convertDateToISO(date);
        if (this.propagateChange) {
            this.propagateChange(this.dateIso);
        }
        this.change.emit(this.dateIso);
    };
    // Ao selecionar um mês
    PoCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    PoCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    PoCalendarComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    PoCalendarComponent.prototype.registerOnTouched = function (func) {
        this.onTouched = func;
    };
    PoCalendarComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoCalendarComponent.prototype.selectDay = function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    PoCalendarComponent.prototype.selectMonth = function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    PoCalendarComponent.prototype.selectYear = function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    PoCalendarComponent.prototype.updateYear = function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    PoCalendarComponent.prototype.validateModel = function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    PoCalendarComponent.prototype.validate = function (c) {
        return null;
    };
    PoCalendarComponent.prototype.writeValue = function (value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.date = undefined;
            this.updateDate(this.today);
        }
    };
    PoCalendarComponent.prototype.addAllYearsInDecade = function (year) {
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    PoCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
        catch (error) {
            return false;
        }
    };
    // Obtém um array de todos os anos desta década
    PoCalendarComponent.prototype.getDecadeArray = function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    PoCalendarComponent.prototype.getColorForDate = function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? "po-calendar-box-" + local + "-selected"
            : "po-calendar-box-" + local + "-selected-disabled";
    };
    PoCalendarComponent.prototype.getColorForDateRange = function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? "po-calendar-box-" + local
            : "po-calendar-box-" + local + "-disabled";
    };
    PoCalendarComponent.prototype.getColorForToday = function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? "po-calendar-box-" + local + "-today"
            : "po-calendar-box-" + local + "-today-disabled";
    };
    PoCalendarComponent.prototype.getDayColor = function (date, local) {
        if (this.equalsDate(date, this.date)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDateRange(date, local);
        }
    };
    PoCalendarComponent.prototype.init = function () {
        this.date && this.poDate.isValidIso(this.poDate.convertDateToISO(this.date))
            ? this.updateDate(this.date)
            : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
    };
    PoCalendarComponent.prototype.selectDateFromDate = function (date) {
        this.date = date;
        this.onSelectDate(this.date);
    };
    PoCalendarComponent.prototype.selectDateFromIso = function (stringDate) {
        var _a = this.poDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
        var date = new Date(year, month - 1, day);
        this.poDate.setYearFrom0To100(date, year);
        this.date = date;
        this.onSelectDate(this.date);
    };
    PoCalendarComponent.prototype.updateDate = function (date) {
        if (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        }
    };
    PoCalendarComponent.prototype.updateDecade = function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    PoCalendarComponent.prototype.updateDisplay = function (year, month) {
        var calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    };
    PoCalendarComponent.prototype.writeDate = function (value) {
        value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
        this.updateDate(this.date);
    };
    PoCalendarComponent.prototype.writeDateIso = function (value) {
        this.poDate.isValidIso(value) ? this.selectDateFromIso(value) : (this.date = undefined);
    };
    PoCalendarComponent.ctorParameters = function () { return [
        { type: PoCalendarService },
        { type: PoCalendarLangService },
        { type: PoDateService }
    ]; };
    PoCalendarComponent = __decorate([
        Component({
            selector: 'po-calendar',
            template: "<div class=\"po-calendar\">\n  <div *ngIf=\"dayVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"onNextMonth()\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeekDays\">\n          {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\"\n        >\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-1)\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(1)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getMonthLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-10)\"></span>\n      <div class=\"po-calendar-nav-title\">{{ displayStartDecade }} - {{ displayFinalDecade }}</div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(10)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getYearLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            providers: providers
        }),
        __metadata("design:paramtypes", [PoCalendarService,
            PoCalendarLangService,
            PoDateService])
    ], PoCalendarComponent);
    return PoCalendarComponent;
}(PoCalendarBaseComponent));
export { PoCalendarComponent };
//# sourceMappingURL=data:application/json;base64,