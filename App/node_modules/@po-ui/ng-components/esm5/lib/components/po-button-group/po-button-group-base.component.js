import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
var PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
var PoButtonGroupBaseComponent = /** @class */ (function () {
    function PoButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        /** Lista de botões. */
        this.buttons = [];
    }
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "small", {
        get: function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: function (value) {
            this._small = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "toggle", {
        get: function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: function (value) {
            this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    PoButtonGroupBaseComponent.prototype.onButtonClick = function (buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach(function (button, index) { return (button.selected = index === buttonIndex ? !buttonClicked.selected : false); });
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    PoButtonGroupBaseComponent.prototype.checkSelecteds = function (toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    PoButtonGroupBaseComponent.prototype.deselectAllButtons = function () {
        this.buttons.forEach(function (button) { return (button.selected = false); });
    };
    __decorate([
        Input('p-buttons'),
        __metadata("design:type", Array)
    ], PoButtonGroupBaseComponent.prototype, "buttons", void 0);
    __decorate([
        Input('p-small'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoButtonGroupBaseComponent.prototype, "small", null);
    __decorate([
        Input('p-toggle'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoButtonGroupBaseComponent.prototype, "toggle", null);
    PoButtonGroupBaseComponent = __decorate([
        Directive()
    ], PoButtonGroupBaseComponent);
    return PoButtonGroupBaseComponent;
}());
export { PoButtonGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24tZ3JvdXAvcG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVwRSxJQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztBQUV0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBRUg7SUFBQTtRQUNVLFdBQU0sR0FBYSxLQUFLLENBQUM7UUFDekIsWUFBTyxHQUFZLHNCQUFzQixDQUFDO1FBRWxELHVCQUF1QjtRQUNILFlBQU8sR0FBNkIsRUFBRSxDQUFDO0lBZ0U3RCxDQUFDO0lBckRtQixzQkFBSSw2Q0FBSzthQUkzQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBZkQ7Ozs7Ozs7O1dBUUc7YUFDZSxVQUFVLEtBQWM7WUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBUSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLENBQUM7OztPQUFBO0lBaUJrQixzQkFBSSw4Q0FBTTthQU03QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBbkJEOzs7Ozs7Ozs7O1dBVUc7YUFDZ0IsVUFBVyxLQUFhO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztZQUUxRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxDQUFDOzs7T0FBQTtJQU1ELGtEQUFhLEdBQWIsVUFBYyxhQUFnQyxFQUFFLFdBQW1CO1FBQ2pFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ2xCLFVBQUMsTUFBTSxFQUFFLEtBQUssSUFBSyxPQUFBLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUEzRSxDQUEyRSxDQUMvRixDQUFDO1NBQ0g7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssbUJBQW1CLENBQUMsUUFBUSxFQUFFO1lBQ3ZELGFBQWEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVPLG1EQUFjLEdBQXRCLFVBQXVCLFVBQWtCO1FBQ3ZDLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLElBQUksRUFBRTtZQUMzQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUNwRCxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFFBQVEsRUFBZixDQUFlLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3JGLElBQUksa0JBQWtCLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2FBQzNCO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sdURBQWtCLEdBQTFCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLEVBQXpCLENBQXlCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBL0RtQjtRQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDO2tDQUFVLEtBQUs7K0RBQXlCO0lBV3pDO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OzsyREFFaEI7SUFpQmtCO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7Ozs0REFJakI7SUF2Q1UsMEJBQTBCO1FBRHRDLFNBQVMsRUFBRTtPQUNDLDBCQUEwQixDQXFFdEM7SUFBRCxpQ0FBQztDQUFBLEFBckVELElBcUVDO1NBckVZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwVG9nZ2xlIH0gZnJvbSAnLi9wby1idXR0b24tZ3JvdXAtdG9nZ2xlLmVudW0nO1xuXG5jb25zdCBQT19UT0dHTEVfVFlQRV9ERUZBVUxUID0gJ25vbmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tYnV0dG9uLWdyb3VwYCDDqSBmb3JtYWRvIHBvciB1bSBjb25qdW50byBkZSBib3TDtWVzIGRpc3RyaWJ1w61kb3MgaG9yaXpvbnRhbG1lbnRlLlxuICogQ2FkYSBib3TDo28gZG8gZ3J1cG8gw6kgdHJhdGFkbyBkZSBmb3JtYSBpbmRpdmlkdWFsLCByZWNlYmVuZG8gYXNzaW0gdW0gcsOzdHVsbywgdW1hIGHDp8OjbyBiZW0gY29tbyBzZSBkZXZlcsOhIGVzdGFyIGhhYmlsaXRhZG8gb3UgbsOjby5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgYWzDqW0gZGUgc2VydmlyIGNvbW8gdW0gYWdydXBhZG9yIGRlIGJvdMO1ZXMgcGFyYSBhw6fDo28sIHRhbWLDqW0gcGVybWl0ZSBxdWUgc2VqYW0gdXRpbGl6YWRvc1xuICogcGFyYSBzZWxlw6fDtWVzIG11bHRpcGxhcyBlIMO6bmljYXMuXG4gKlxuICogTyBncnVwbyBkZSBib3TDtWVzIGRldmUgc2VyIHV0aWxpemFkbyBwYXJhIG9yZ2FuaXphciBhcyBhw6fDtWVzIGRlIG1hbmVpcmEgdW5pZm9ybWUgZSB0cmFuc21pdGlyIGEgaWRlaWEgZGUgcXVlIG9zIGJvdMO1ZXMgZmF6ZW1cbiAqIHBhcnRlIGRlIHVtIG1lc21vIGNvbnRleHRvLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcbiAqXG4gKiAtIEV2aXRlIHVzYXIgbyBgcG8tYnV0dG9uLWdyb3VwYCBjb20gYXBlbmFzIDEgYcOnw6NvLCBwYXJhIGlzc28gdXRpbGl6ZSBvIGBwby1idXR0b25gLlxuICogLSBQcm9jdXJlIHV0aWxpemFyIG5vIG3DoXhpbW8gMyBhw6fDtWVzIHBhcmEgY2FkYSBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqXG4gKiA+IEFzIHJlY29tZW5kYcOnw7VlcyBkbyBgcG8tYnV0dG9uYCB0YW1iw6ltIHZhbGVtIHBhcmEgbyBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9CdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF9zbWFsbD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdG9nZ2xlPzogc3RyaW5nID0gUE9fVE9HR0xFX1RZUEVfREVGQVVMVDtcblxuICAvKiogTGlzdGEgZGUgYm90w7Vlcy4gKi9cbiAgQElucHV0KCdwLWJ1dHRvbnMnKSBidXR0b25zOiBBcnJheTxQb0J1dHRvbkdyb3VwSXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYG5vbmVgXG4gICAqL1xuICBASW5wdXQoJ3AtdG9nZ2xlJykgc2V0IHRvZ2dsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9nZ2xlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9CdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gICAgdGhpcy5jaGVja1NlbGVjdGVkcyh0aGlzLl90b2dnbGUpO1xuICB9XG5cbiAgZ2V0IHRvZ2dsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFBvQnV0dG9uR3JvdXBJdGVtLCBidXR0b25JbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudG9nZ2xlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goXG4gICAgICAgIChidXR0b24sIGluZGV4KSA9PiAoYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5NdWx0aXBsZSkge1xuICAgICAgYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA9ICFidXR0b25DbGlja2VkLnNlbGVjdGVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTZWxlY3RlZHModG9nZ2xlTW9kZTogc3RyaW5nKSB7XG4gICAgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTm9uZSkge1xuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICBjb25zdCBoYXNNb3JlT25lU2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnMuZmlsdGVyKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQpLmxlbmd0aCA+IDE7XG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24uc2VsZWN0ZWQgPSBmYWxzZSkpO1xuICB9XG59XG4iXX0=