import { __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { Component, ContentChild, ElementRef, HostListener, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, keyframes, style } from '@angular/animations';
import { PoSlideBaseComponent } from './po-slide-base.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
var poSlideDefaultHeight = 336;
var poSlideIntervalMin = 1000;
var poSlideMinHeight = 192;
var poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 */
var PoSlideComponent = /** @class */ (function (_super) {
    __extends(PoSlideComponent, _super);
    function PoSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(PoSlideComponent.prototype, "hasElements", {
        get: function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "isImageSlide", {
        get: function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "offset", {
        get: function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "hasSlides", {
        get: function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    PoSlideComponent.prototype.onResize = function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    PoSlideComponent.prototype.ngDoCheck = function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    PoSlideComponent.prototype.ngOnChanges = function (changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    };
    PoSlideComponent.prototype.goToItem = function (index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    PoSlideComponent.prototype.nextControl = function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    PoSlideComponent.prototype.next = function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    PoSlideComponent.prototype.previous = function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    PoSlideComponent.prototype.previousControl = function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    PoSlideComponent.prototype.setSlideHeight = function (height) {
        this.setHeight(height);
    };
    PoSlideComponent.prototype.animate = function (offset) {
        if (this.hasElements) {
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    PoSlideComponent.prototype.buildTransitionAnimation = function (offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: "translateX(-" + offset + "px)" })]))]);
    };
    PoSlideComponent.prototype.createArrayForTemplate = function (slides) {
        this.slideItems = __spread(slides);
    };
    PoSlideComponent.prototype.createArrayFromSlides = function (slides) {
        var _this = this;
        var isStringArray = slides.every(function (item) { return typeof item === 'string'; });
        if (isStringArray) {
            slides.forEach(function (element) { return _this.slideItems.push({ image: "" + element }); });
        }
        else {
            this.slideItems = __spread(slides);
        }
    };
    PoSlideComponent.prototype.setDefaultHeight = function (height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = poSlideDefaultHeight + "px";
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    PoSlideComponent.prototype.setHeight = function (height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    PoSlideComponent.prototype.setSlideItemWidth = function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    PoSlideComponent.prototype.cancelInterval = function () {
        clearInterval(this.setInterval);
    };
    PoSlideComponent.prototype.setSlideItems = function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    PoSlideComponent.prototype.startSlide = function () {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    PoSlideComponent.prototype.startInterval = function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(function () {
                    _this.next();
                }, this.interval)
                : undefined;
    };
    PoSlideComponent.ctorParameters = function () { return [
        { type: AnimationBuilder }
    ]; };
    __decorate([
        ContentChild(PoSlideContentTemplateDirective, { static: true }),
        __metadata("design:type", PoSlideContentTemplateDirective)
    ], PoSlideComponent.prototype, "slideContentTemplate", void 0);
    __decorate([
        ViewChild('slide', { static: true }),
        __metadata("design:type", ElementRef)
    ], PoSlideComponent.prototype, "slide", void 0);
    __decorate([
        ViewChildren(PoSlideItemComponent),
        __metadata("design:type", QueryList)
    ], PoSlideComponent.prototype, "itemsElements", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PoSlideComponent.prototype, "onResize", null);
    PoSlideComponent = __decorate([
        Component({
            selector: 'po-slide',
            template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" p-control=\"previous\" (p-click)=\"previousControl()\">\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n"
        }),
        __metadata("design:paramtypes", [AnimationBuilder])
    ], PoSlideComponent);
    return PoSlideComponent;
}(PoSlideBaseComponent));
export { PoSlideComponent };
//# sourceMappingURL=data:application/json;base64,