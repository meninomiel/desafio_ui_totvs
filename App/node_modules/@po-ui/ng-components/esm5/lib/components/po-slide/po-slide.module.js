import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PoContainerModule } from '../po-container/po-container.module';
import { PoSlideCirclesComponent } from './po-slide-circles/po-slide-circles.component';
import { PoSlideComponent } from './po-slide.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideControlComponent } from './po-slide-control/po-slide-control.component';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
/**
 * @description
 *
 * Módulo do componente `po-slide`.
 *
 * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoSlideModule = /** @class */ (function () {
    function PoSlideModule() {
    }
    PoSlideModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, PoContainerModule],
            declarations: [
                PoSlideCirclesComponent,
                PoSlideComponent,
                PoSlideControlComponent,
                PoSlideContentTemplateDirective,
                PoSlideItemComponent
            ],
            exports: [PoSlideComponent, PoSlideContentTemplateDirective],
            providers: [],
            schemas: []
        })
    ], PoSlideModule);
    return PoSlideModule;
}());
export { PoSlideModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1zbGlkZS9wby1zbGlkZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUV4RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUN4RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUN4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUUvRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJHO0FBY0g7SUFBQTtJQUE0QixDQUFDO0lBQWhCLGFBQWE7UUFiekIsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsQ0FBQztZQUN4RCxZQUFZLEVBQUU7Z0JBQ1osdUJBQXVCO2dCQUN2QixnQkFBZ0I7Z0JBQ2hCLHVCQUF1QjtnQkFDdkIsK0JBQStCO2dCQUMvQixvQkFBb0I7YUFDckI7WUFDRCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSwrQkFBK0IsQ0FBQztZQUM1RCxTQUFTLEVBQUUsRUFBRTtZQUNiLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztPQUNXLGFBQWEsQ0FBRztJQUFELG9CQUFDO0NBQUEsQUFBN0IsSUFBNkI7U0FBaEIsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgUG9Db250YWluZXJNb2R1bGUgfSBmcm9tICcuLi9wby1jb250YWluZXIvcG8tY29udGFpbmVyLm1vZHVsZSc7XG5cbmltcG9ydCB7IFBvU2xpZGVDaXJjbGVzQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zbGlkZS1jaXJjbGVzL3BvLXNsaWRlLWNpcmNsZXMuY29tcG9uZW50JztcbmltcG9ydCB7IFBvU2xpZGVDb21wb25lbnQgfSBmcm9tICcuL3BvLXNsaWRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1NsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3BvLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFBvU2xpZGVDb250cm9sQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zbGlkZS1jb250cm9sL3BvLXNsaWRlLWNvbnRyb2wuY29tcG9uZW50JztcbmltcG9ydCB7IFBvU2xpZGVJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zbGlkZS1pdGVtL3BvLXNsaWRlLWl0ZW0uY29tcG9uZW50JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBNw7NkdWxvIGRvIGNvbXBvbmVudGUgYHBvLXNsaWRlYC5cbiAqXG4gKiA+IFBhcmEgbyBjb3JyZXRvIGZ1bmNpb25hbWVudG8gZG8gY29tcG9uZW50ZSBgcG8tc2xpZGVgLCBkZXZlIHNlciBpbXBvcnRhZG8gbyBtw7NkdWxvIGBCcm93c2VyQW5pbWF0aW9uc01vZHVsZWAgbm9cbiAqID4gbcOzZHVsbyBwcmluY2lwYWwgZGEgc3VhIGFwbGljYcOnw6NvLlxuICpcbiAqIE3Ds2R1bG8gZGEgYXBsaWNhw6fDo286XG4gKiBgYGBcbiAqIGltcG9ydCB7IEJyb3dzZXJBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcbiAqIGltcG9ydCB7IFBvTW9kdWxlIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuICogLi4uXG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIEJyb3dzZXJNb2R1bGUsXG4gKiAgICAgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUsXG4gKiAgICAgLi4uXG4gKiAgICAgUG9Nb2R1bGVcbiAqICAgXSxcbiAqICAgZGVjbGFyYXRpb25zOiBbXG4gKiAgICAgQXBwQ29tcG9uZW50LFxuICogICAgIC4uLlxuICogICBdLFxuICogICBwcm92aWRlcnM6IFtdLFxuICogICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cbiAqIGBgYFxuICovXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGUsIFBvQ29udGFpbmVyTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgUG9TbGlkZUNpcmNsZXNDb21wb25lbnQsXG4gICAgUG9TbGlkZUNvbXBvbmVudCxcbiAgICBQb1NsaWRlQ29udHJvbENvbXBvbmVudCxcbiAgICBQb1NsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIFBvU2xpZGVJdGVtQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtQb1NsaWRlQ29tcG9uZW50LCBQb1NsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXSxcbiAgc2NoZW1hczogW11cbn0pXG5leHBvcnQgY2xhc3MgUG9TbGlkZU1vZHVsZSB7fVxuIl19