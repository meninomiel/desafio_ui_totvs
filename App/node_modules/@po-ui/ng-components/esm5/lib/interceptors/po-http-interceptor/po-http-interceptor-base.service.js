import { __assign, __read, __spread } from "tslib";
import { HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { PoHttpInterceptorDetailComponent } from './po-http-interceptor-detail/po-http-interceptor-detail.component';
// DEPRECATED 4.x.x
var NO_ERROR_HEADER_PARAM = 'X-PO-No-Error';
var NO_MESSAGE_HEADER_PARAM = 'X-PO-No-Message';
/**
 * @description
 *
 * O *interceptor* tem a finalidade de exibir notificações com mensagens na tela, baseado nas respostas das requisições HTTP.
 *
 * Pode ser utilizado para dar feedback das ações do usuário como, por exemplo: erro de autorização, mensagens de regras de negócio,
 * atualizações de registros, erro quando o servidor estiver indisponível e entre outros.
 *
 * ## Configuração
 *
 * Para o correto funcionamento do interceptor `po-http-interceptor`, deve ser importado o `BrowserAnimationsModule` no
 * módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * ## Como usar
 *
 * Para exibir as noticações é necessário informar a mensagem no retorno da requisição. A estrutura da mensagem
 * é feita com base no status da resposta, conforme será apresentado nos próximos tópicos.
 *
 * ### Estrutura das mensagens
 *
 * #### Mensagens de sucesso `2xx`
 *
 * Para exibir mensagens ao retornar uma lista ou um item, deve-se incluir a propriedade `_messages` no objeto de retorno.
 * Por exemplo:
 * ```
 * {
 *   "_messages": [
 *     {
 *       "type": "success" || "warning" || "error" || "information" (será exibido a `tag` apenas se esta propriedade possuir valor),
 *       "code": "título ou código da mensagem",
 *       "message": "texto da mensagem",
 *       "detailedMessage": "detalhamento da mensagem"
 *     }
 *   ]
 * }
 * ```
 *
 * #### Mensagens de erro `4xx` ou `5xx`
 *
 * Ao retornar erro, o objeto não necessita ter `_messages`, deve-se retornar o objeto diretamente:
 *
 * ```
 * {
 *    "code": "título ou código da mensagem",
 *    "message": "texto da mensagem",
 *    "detailedMessage": "detalhamento da mensagem"
 * }
 * ```
 *
 * Também é possível informar as seguintes propriedades:
 *
 * - `helpUrl`: link para a documentação do erro;
 *    - Caso for informado, será exibido uma ação de "Ajuda" na notificação, para isso não deverá ter a propriedade `detailedMessage`.
 * - `details`: Uma lista de objetos de mensagem (recursiva) com mais detalhes sobre a mensagem principal.
 *
 * > Veja o [Guia de implementação de APIs](guides/api) para mais detalhes sobre a estrutura das mensagens.
 *
 * ### Cabeçalho
 *
 * É possível dispensar a notificação para o usuário utilizando no cabeçalho da requisição os parâmetros listados abaixo com o valor
 * igual a `true`:
 *
 * - `X-PO-No-Message`: Não exibe notificações de erro e/ou sucesso.
 *
 * - **Depreciado** `X-PO-No-Error`: não mostra notificações de erro com códigos `4xx` e `5xx`.
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Message': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 *
 * > Após a validação no *interceptor*, os parâmetros serão removidos do cabeçalho da requisição.
 *
 */
var PoHttpInterceptorBaseService = /** @class */ (function () {
    function PoHttpInterceptorBaseService(componentInjector, notification) {
        this.componentInjector = componentInjector;
        this.notification = notification;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
        this.httpInterceptorDetailComponent = undefined;
    }
    PoHttpInterceptorBaseService.prototype.intercept = function (request, next) {
        var _this = this;
        var cloneRequest = request.clone();
        request = request && this.hasParameters(request) ? this.cloneRequestWithoutParameters(request) : request;
        return next.handle(request).pipe(tap(function (response) {
            if (response instanceof HttpResponse) {
                _this.processResponse(response, cloneRequest);
            }
        }, function (error) {
            _this.processErrorResponse(error, cloneRequest);
        }));
    };
    PoHttpInterceptorBaseService.prototype.processResponse = function (response, request) {
        var _this = this;
        var hasNoMessageParam = this.hasNoMessageParam(request);
        if (!hasNoMessageParam && response.body && response.body._messages) {
            var messages = response.body._messages;
            if (messages instanceof Array) {
                messages.forEach(function (message) {
                    _this.showNotification(message);
                });
            }
            else {
                this.showNotification(messages);
            }
        }
    };
    PoHttpInterceptorBaseService.prototype.processErrorResponse = function (response, request) {
        var errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
        var hasNoErrorParam = this.hasNoErrorParam(request);
        var hasNoMessageParam = this.hasNoMessageParam(request);
        if (errorResponse && errorResponse.message && !hasNoErrorParam && !hasNoMessageParam) {
            this.showNotification(__assign(__assign({}, errorResponse), { type: 'error' }));
        }
    };
    PoHttpInterceptorBaseService.prototype.cloneRequestWithoutParameters = function (request) {
        var headers = request.headers.delete(NO_ERROR_HEADER_PARAM).delete(NO_MESSAGE_HEADER_PARAM);
        return request.clone({ headers: headers });
    };
    PoHttpInterceptorBaseService.prototype.createModal = function (responseMessage) {
        var _this = this;
        var details = responseMessage.details ? __spread([responseMessage], responseMessage.details) : [responseMessage];
        this.httpInterceptorDetailComponent = this.componentInjector.createComponentInApplication(PoHttpInterceptorDetailComponent);
        this.httpInterceptorDetailComponent.instance.detail = details;
        this.httpInterceptorDetailComponent.instance.closed.subscribe(function () { return _this.destroyModal(); });
        this.httpInterceptorDetailComponent.instance.open();
    };
    PoHttpInterceptorBaseService.prototype.destroyModal = function () {
        if (this.httpInterceptorDetailComponent) {
            this.componentInjector.destroyComponentInApplication(this.httpInterceptorDetailComponent);
            this.httpInterceptorDetailComponent = undefined;
        }
    };
    PoHttpInterceptorBaseService.prototype.hasMessage = function (responseMessage) {
        var hasMessageProperties = responseMessage.message;
        return responseMessage && hasMessageProperties;
    };
    PoHttpInterceptorBaseService.prototype.hasNoErrorParam = function (request) {
        var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    };
    PoHttpInterceptorBaseService.prototype.hasNoMessageParam = function (request) {
        var noMessageParam = request && request.headers.get(NO_MESSAGE_HEADER_PARAM);
        return noMessageParam && noMessageParam.toString().toLocaleLowerCase() === 'true';
    };
    PoHttpInterceptorBaseService.prototype.hasParameters = function (request) {
        return request.headers.has(NO_ERROR_HEADER_PARAM) || request.headers.has(NO_MESSAGE_HEADER_PARAM);
    };
    PoHttpInterceptorBaseService.prototype.showNotification = function (response) {
        if (!this.hasMessage(response)) {
            return;
        }
        var typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
        var notificationAction = this.generateNotificationAction(response);
        this.notification[typeNotification]({
            message: response.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    };
    PoHttpInterceptorBaseService.prototype.generateDetailModal = function (responseMessage) {
        var _this = this;
        return function () {
            if (!_this.httpInterceptorDetailComponent) {
                _this.createModal(responseMessage);
            }
        };
    };
    PoHttpInterceptorBaseService.prototype.generateNotificationAction = function (responseMessage) {
        var notificationAction;
        var notificationLabel;
        if (responseMessage.helpUrl && !(responseMessage.detailedMessage || responseMessage.details)) {
            notificationLabel = 'Ajuda';
            notificationAction = this.generateUrlHelpFunction(responseMessage.helpUrl);
        }
        else if (responseMessage.detailedMessage || responseMessage.details) {
            notificationLabel = 'Detalhes';
            notificationAction = this.generateDetailModal(responseMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    };
    PoHttpInterceptorBaseService.prototype.generateUrlHelpFunction = function (helpUrl) {
        return function () {
            window.open(helpUrl, '_blank');
        };
    };
    return PoHttpInterceptorBaseService;
}());
export { PoHttpInterceptorBaseService };
//# sourceMappingURL=data:application/json;base64,