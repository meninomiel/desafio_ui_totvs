import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, ViewChild } from '@angular/core';
import { getShortBrowserLanguage } from '../../../utils/util';
import { PoModalComponent } from '../../../components/po-modal/po-modal.component';
import { poHttpInterceptorDetailLiteralsDefault } from './po-http-interceptor-detail-literals.interface';
export var colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
var PoHttpInterceptorDetailComponent = /** @class */ (function () {
    function PoHttpInterceptorDetailComponent() {
        var _this = this;
        this.closed = new EventEmitter();
        this.details = [];
        this.language = getShortBrowserLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
        this.primaryAction = {
            action: function () { return _this.close(); },
            label: this.literals.closeButton
        };
    }
    Object.defineProperty(PoHttpInterceptorDetailComponent.prototype, "detail", {
        set: function (details) {
            if (details && details.length) {
                this.details = this.filterByValidDetails(details);
            }
            this.title = this.formatTitle(this.details);
        },
        enumerable: true,
        configurable: true
    });
    PoHttpInterceptorDetailComponent.prototype.close = function () {
        this.modal.close();
        this.closed.emit();
    };
    PoHttpInterceptorDetailComponent.prototype.formatDetailItemTitle = function (detail) {
        return detail.code ? detail.code + " - " + detail.message : detail.message;
    };
    PoHttpInterceptorDetailComponent.prototype.open = function () {
        this.modal.open();
    };
    PoHttpInterceptorDetailComponent.prototype.typeColor = function (type) {
        return colors[type];
    };
    PoHttpInterceptorDetailComponent.prototype.typeValue = function (type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    };
    PoHttpInterceptorDetailComponent.prototype.addValidDetail = function (newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    };
    PoHttpInterceptorDetailComponent.prototype.getValidDetailProperties = function (_a) {
        var code = _a.code, message = _a.message, detailedMessage = _a.detailedMessage, type = _a.type;
        return { code: code, message: message, detailedMessage: detailedMessage, type: type };
    };
    PoHttpInterceptorDetailComponent.prototype.filterByValidDetails = function (details) {
        var _this = this;
        return details.reduce(function (newDetails, detail) { return _this.addValidDetail(newDetails, detail); }, []);
    };
    PoHttpInterceptorDetailComponent.prototype.formatTitle = function (details) {
        return details.length > 1 ? this.literals.details + " (" + details.length + ")" : this.literals.detail;
    };
    __decorate([
        ViewChild(PoModalComponent, { static: true }),
        __metadata("design:type", PoModalComponent)
    ], PoHttpInterceptorDetailComponent.prototype, "modal", void 0);
    PoHttpInterceptorDetailComponent = __decorate([
        Component({
            selector: 'po-http-interceptor-detail',
            template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n          <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n        </div>\n\n        <div class=\"po-row\">\n          <p>{{ detail.detailedMessage }}</p>\n        </div>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n"
        })
    ], PoHttpInterceptorDetailComponent);
    return PoHttpInterceptorDetailComponent;
}());
export { PoHttpInterceptorDetailComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL3BvLWh0dHAtaW50ZXJjZXB0b3IvcG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwvcG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFHbkYsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFFekcsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBRWhHOzs7Ozs7R0FNRztBQUtIO0lBQUE7UUFBQSxpQkEyREM7UUF4REMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDakMsWUFBTyxHQUFtQyxFQUFFLENBQUM7UUFDN0MsYUFBUSxHQUFHLHVCQUF1QixFQUFFLENBQUM7UUFDckMsYUFBUSxHQUFHLHNDQUFzQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqRSxrQkFBYSxHQUFrQjtZQUM3QixNQUFNLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxLQUFLLEVBQUUsRUFBWixDQUFZO1lBQzFCLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7U0FDakMsQ0FBQztJQWdESixDQUFDO0lBNUNDLHNCQUFJLG9EQUFNO2FBQVYsVUFBVyxPQUF1QztZQUNoRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO2dCQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNuRDtZQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFFRCxnREFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxnRUFBcUIsR0FBckIsVUFBc0IsTUFBTTtRQUMxQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFJLE1BQU0sQ0FBQyxJQUFJLFdBQU0sTUFBTSxDQUFDLE9BQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3RSxDQUFDO0lBRUQsK0NBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELG9EQUFTLEdBQVQsVUFBVSxJQUFZO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxvREFBUyxHQUFULFVBQVUsSUFBWTtRQUNwQixPQUFPLHNDQUFzQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDN0UsQ0FBQztJQUVPLHlEQUFjLEdBQXRCLFVBQXVCLFVBQTBDLEVBQUUsTUFBK0I7UUFDaEcsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDaEcsQ0FBQztJQUVPLG1FQUF3QixHQUFoQyxVQUFpQyxFQUFpRTtZQUEvRCxjQUFJLEVBQUUsb0JBQU8sRUFBRSxvQ0FBZSxFQUFFLGNBQUk7UUFDckUsT0FBTyxFQUFFLElBQUksTUFBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLGVBQWUsaUJBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFTywrREFBb0IsR0FBNUIsVUFBNkIsT0FBdUM7UUFBcEUsaUJBRUM7UUFEQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxVQUFVLEVBQUUsTUFBTSxJQUFLLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQXZDLENBQXVDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVPLHNEQUFXLEdBQW5CLFVBQW9CLE9BQXVDO1FBQ3pELE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxVQUFLLE9BQU8sQ0FBQyxNQUFNLE1BQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDcEcsQ0FBQztJQXpEOEM7UUFBOUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2tDQUFRLGdCQUFnQjttRUFBQztJQUQ1RCxnQ0FBZ0M7UUFKNUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDRCQUE0QjtZQUN0Qyxtb0JBQTBEO1NBQzNELENBQUM7T0FDVyxnQ0FBZ0MsQ0EyRDVDO0lBQUQsdUNBQUM7Q0FBQSxBQTNERCxJQTJEQztTQTNEWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGdldFNob3J0QnJvd3Nlckxhbmd1YWdlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9wby1tb2RhbC9wby1tb2RhbC1hY3Rpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3BvLW1vZGFsL3BvLW1vZGFsLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IFBvSHR0cEludGVyY2VwdG9yRGV0YWlsIH0gZnJvbSAnLi9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9IdHRwSW50ZXJjZXB0b3JEZXRhaWxMaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuL3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBjb2xvcnMgPSB7IHN1Y2Nlc3M6ICdjb2xvci0xMScsIGVycm9yOiAnY29sb3ItMDcnLCB3YXJuaW5nOiAnY29sb3ItMDgnLCBpbmZvOiAnJyB9O1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBhIG1vZGFsIGRlIGRldGFsaGVzIGV4aWJpZGEgcGVsbyBpbnRlcmNlcHRvclxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1odHRwLWludGVyY2VwdG9yLWRldGFpbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9IdHRwSW50ZXJjZXB0b3JEZXRhaWxDb21wb25lbnQge1xuICBAVmlld0NoaWxkKFBvTW9kYWxDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIG1vZGFsOiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIGNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBkZXRhaWxzOiBBcnJheTxQb0h0dHBJbnRlcmNlcHRvckRldGFpbD4gPSBbXTtcbiAgbGFuZ3VhZ2UgPSBnZXRTaG9ydEJyb3dzZXJMYW5ndWFnZSgpO1xuICBsaXRlcmFscyA9IHBvSHR0cEludGVyY2VwdG9yRGV0YWlsTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xuXG4gIHByaW1hcnlBY3Rpb246IFBvTW9kYWxBY3Rpb24gPSB7XG4gICAgYWN0aW9uOiAoKSA9PiB0aGlzLmNsb3NlKCksXG4gICAgbGFiZWw6IHRoaXMubGl0ZXJhbHMuY2xvc2VCdXR0b25cbiAgfTtcblxuICB0aXRsZTogc3RyaW5nO1xuXG4gIHNldCBkZXRhaWwoZGV0YWlsczogQXJyYXk8UG9IdHRwSW50ZXJjZXB0b3JEZXRhaWw+KSB7XG4gICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGV0YWlscyA9IHRoaXMuZmlsdGVyQnlWYWxpZERldGFpbHMoZGV0YWlscyk7XG4gICAgfVxuXG4gICAgdGhpcy50aXRsZSA9IHRoaXMuZm9ybWF0VGl0bGUodGhpcy5kZXRhaWxzKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMubW9kYWwuY2xvc2UoKTtcbiAgICB0aGlzLmNsb3NlZC5lbWl0KCk7XG4gIH1cblxuICBmb3JtYXREZXRhaWxJdGVtVGl0bGUoZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5jb2RlID8gYCR7ZGV0YWlsLmNvZGV9IC0gJHtkZXRhaWwubWVzc2FnZX1gIDogZGV0YWlsLm1lc3NhZ2U7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMubW9kYWwub3BlbigpO1xuICB9XG5cbiAgdHlwZUNvbG9yKHR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNvbG9yc1t0eXBlXTtcbiAgfVxuXG4gIHR5cGVWYWx1ZSh0eXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBwb0h0dHBJbnRlcmNlcHRvckRldGFpbExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXVt0eXBlXSB8fCB0eXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRWYWxpZERldGFpbChuZXdEZXRhaWxzOiBBcnJheTxQb0h0dHBJbnRlcmNlcHRvckRldGFpbD4sIGRldGFpbDogUG9IdHRwSW50ZXJjZXB0b3JEZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLm1lc3NhZ2UgPyBuZXdEZXRhaWxzLmNvbmNhdCh0aGlzLmdldFZhbGlkRGV0YWlsUHJvcGVydGllcyhkZXRhaWwpKSA6IG5ld0RldGFpbHM7XG4gIH1cblxuICBwcml2YXRlIGdldFZhbGlkRGV0YWlsUHJvcGVydGllcyh7IGNvZGUsIG1lc3NhZ2UsIGRldGFpbGVkTWVzc2FnZSwgdHlwZSB9OiBQb0h0dHBJbnRlcmNlcHRvckRldGFpbCkge1xuICAgIHJldHVybiB7IGNvZGUsIG1lc3NhZ2UsIGRldGFpbGVkTWVzc2FnZSwgdHlwZSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJCeVZhbGlkRGV0YWlscyhkZXRhaWxzOiBBcnJheTxQb0h0dHBJbnRlcmNlcHRvckRldGFpbD4pIHtcbiAgICByZXR1cm4gZGV0YWlscy5yZWR1Y2UoKG5ld0RldGFpbHMsIGRldGFpbCkgPT4gdGhpcy5hZGRWYWxpZERldGFpbChuZXdEZXRhaWxzLCBkZXRhaWwpLCBbXSk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdFRpdGxlKGRldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPikge1xuICAgIHJldHVybiBkZXRhaWxzLmxlbmd0aCA+IDEgPyBgJHt0aGlzLmxpdGVyYWxzLmRldGFpbHN9ICgke2RldGFpbHMubGVuZ3RofSlgIDogdGhpcy5saXRlcmFscy5kZXRhaWw7XG4gIH1cbn1cbiJdfQ==