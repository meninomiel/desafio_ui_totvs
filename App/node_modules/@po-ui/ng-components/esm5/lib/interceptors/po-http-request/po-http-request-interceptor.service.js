import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { PoComponentInjectorService } from '../../services/po-component-injector/po-component-injector.service';
import { PoLoadingOverlayComponent } from '../../components/po-loading/po-loading-overlay/po-loading-overlay.component';
import { PoHttpRequesControltService } from './po-http-request-control-service';
import * as i0 from "@angular/core";
import * as i1 from "./po-http-request-control-service";
import * as i2 from "../../services/po-component-injector/po-component-injector.service";
var noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
var screenLock = 'X-PO-Screen-Lock';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
var PoHttpRequestInterceptorService = /** @class */ (function () {
    function PoHttpRequestInterceptorService(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    PoHttpRequestInterceptorService.prototype.intercept = function (request, next) {
        var _this = this;
        var requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(tap(function (response) {
            if (response instanceof HttpResponse) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }
        }), catchError(function (error) {
            _this.setCountPendingRequests(false, requestClone);
            _this.setCountOverlayRequests(false, requestClone);
            return throwError(error);
        }));
    };
    PoHttpRequestInterceptorService.prototype.getCountPendingRequests = function () {
        return this.controlHttpRequest.getControlHttpRequest();
    };
    PoHttpRequestInterceptorService.prototype.buildLoading = function () {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    };
    PoHttpRequestInterceptorService.prototype.destroyLoading = function () {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    };
    PoHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = function (headersParams, request) {
        var isRequestClone = false;
        headersParams.forEach(function (headerParam) {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    };
    PoHttpRequestInterceptorService.prototype.setCountPendingRequests = function (isIncrement, request) {
        var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        var headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    };
    PoHttpRequestInterceptorService.prototype.setCountOverlayRequests = function (isIncrement, request) {
        var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            var headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    };
    PoHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: PoHttpRequesControltService },
        { type: PoComponentInjectorService }
    ]; };
    PoHttpRequestInterceptorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoHttpRequestInterceptorService_Factory() { return new PoHttpRequestInterceptorService(i0.ɵɵinject(i1.PoHttpRequesControltService), i0.ɵɵinject(i2.PoComponentInjectorService)); }, token: PoHttpRequestInterceptorService, providedIn: "root" });
    PoHttpRequestInterceptorService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [PoHttpRequesControltService,
            PoComponentInjectorService])
    ], PoHttpRequestInterceptorService);
    return PoHttpRequestInterceptorService;
}());
export { PoHttpRequestInterceptorService };
//# sourceMappingURL=data:application/json;base64,